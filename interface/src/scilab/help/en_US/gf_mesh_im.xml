<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="gf_mesh_im" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <refnamediv>
    <refname>gf_mesh_im</refname>
    <refpurpose>  This object represents an integration method defined on a whole mesh (an 
  potentialy on its boundaries).
</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>MIM = gf_mesh_im('load', string fname[, mesh m])</synopsis>
    <synopsis>MIM = gf_mesh_im('from string', string s[, mesh m])</synopsis>
    <synopsis>MIM = gf_mesh_im('clone', mesh_im mim)</synopsis>
    <synopsis>MIM = gf_mesh_im('levelset', mesh_levelset mls, string where, integ im[, integ im_tip[, integ im_set]])</synopsis>
    <synopsis>MIM = gf_mesh_im(mesh m, [{integ im|int im_degree}])</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>
    <para>General constructor for mesh_im objects.</para>

    <para>  This object represents an integration method defined on a whole mesh (an 
  potentialy on its boundaries).
</para>
  </refsection>

  <refsection>
    <title>Command list</title>

    <itemizedlist>
    <listitem>
    <para><literal>MIM = gf_mesh_im('load', string fname[, mesh m])</literal></para>

    <para>         Load a mesh_im from a file.

      If the mesh <literal>m</literal> is not supplied (this kind of file does not store the
      mesh), then it is read from the file and its descriptor is returned as
      the second output argument.
    </para>
    </listitem>

    <listitem>
    <para><literal>MIM = gf_mesh_im('from string', string s[, mesh m])</literal></para>

    <para>         Create a mesh_im object from its string description.

      See also <literal></literal>gf_mesh_im_get(mesh_im MI, 'char')<literal></literal>
    </para>
    </listitem>

    <listitem>
    <para><literal>MIM = gf_mesh_im('clone', mesh_im mim)</literal></para>

    <para>         Create a copy of a mesh_im.
    </para>
    </listitem>

    <listitem>
    <para><literal>MIM = gf_mesh_im('levelset', mesh_levelset mls, string where, integ im[, integ im_tip[, integ im_set]])</literal></para>

    <para>         Build an integration method conformal to a partition defined
      implicitely by a levelset.

      The <literal>where</literal> argument define the domain of integration with respect to
      the levelset, it has to be chosen among 'ALL', 'INSIDE', 'OUTSIDE' and
      'BOUNDARY'.

      it can be completed by a string defining the boolean operation
      to define the integration domain when there is more than one levelset.

      the syntax is very simple, for example if there are 3 different
      levelset,
       
       "a*b*c" is the intersection of the domains defined by each
       levelset (this is the default behaviour if this function is not
       called).

       "a+b+c" is the union of their domains.

       "c-(a+b)" is the domain of the third levelset minus the union of
       the domains of the two others.
       
       "!a" is the complementary of the domain of a (i.e. it is the
       domain where a(x)>0)

       The first levelset is always referred to with "a", the second
       with "b", and so on.

      for intance INSIDE(a*b*c)

      CAUTION: this integration method will be defined only on the element
      cut by the level-set. For the 'ALL', 'INSIDE' and 'OUTSIDE' options
      it is mandatory to use the method <literal></literal>gf_mesh_im_set(mesh_im MI, 'integ')<literal></literal> to define
      the integration method on the remaining elements.
      
    </para>
    </listitem>

    <listitem>
    <para><literal>MIM = gf_mesh_im(mesh m, [{integ im|int im_degree}])</literal></para>

    <para>         Build a new mesh_im object.

      For convenience, optional arguments (<literal>im</literal> or <literal>im_degree</literal>) can be
      provided, in that case a call to <literal></literal>gf_mesh_im_get(mesh_im MI, 'integ')<literal></literal> is issued
      with these arguments.
    </para>
    </listitem>

    </itemizedlist>
  </refsection>

  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member><link linkend="getfem_types">getfem types</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>
    <para>Y. Collette</para>
  </refsection>

</refentry>
