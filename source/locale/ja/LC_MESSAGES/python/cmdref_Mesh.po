# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# cb57dee4596c44768649d84af54ed20b
#: ../source/python/cmdref_Mesh.rst:8
msgid "Mesh"
msgstr ""

# 27949e53494349b79d8a316c76fe7f86
#: getfem.Mesh:1 of
msgid "GeFEM Mesh object"
msgstr ""

# 0612d8c216054ea5a7433362beee11b3
#: getfem.Mesh:3 of
msgid ""
"This object is able to store any element in any dimension even if you mix"
" elements with different dimensions."
msgstr ""

# faf3b1fc0200442b9d78b7e1f938f21c
#: getfem.Mesh:9 of
msgid "General constructor for Mesh objects"
msgstr ""

# 7240c187e4a14b0d867fdf97f48a60ff
#: getfem.Mesh:11 of
msgid "``M = Mesh('empty', int dim)`` Create a new empty mesh."
msgstr ""

# ead8d3f5887e45e69579cf06eb406ffb
#: getfem.Mesh:14 of
msgid ""
"``M = Mesh('cartesian', vec X[, vec Y[, vec Z,..]])`` Build quickly a "
"regular mesh of quadrangles, cubes, etc."
msgstr ""

# d7acaf180e7b4514b77fdf2a682dfdf1
#: getfem.Mesh:17 of
msgid ""
"``M = Mesh('pyramidal', vec X[, vec Y[, vec Z,..]])`` Build quickly a "
"regular mesh of pyramids, etc."
msgstr ""

# 34309477806441e4a222d7395fd440ee
#: getfem.Mesh:20 of
msgid ""
"``M = Mesh('cartesian Q1', vec X, vec Y[, vec Z,..])`` Build quickly a "
"regular mesh of quadrangles, cubes, etc. with Q1 elements."
msgstr ""

# 7352c8bd321e44adbe8f1ee6122f38f1
#: getfem.Mesh:24 of
msgid ""
"``M = Mesh('triangles grid', vec X, vec Y)`` Build quickly a regular mesh"
" of triangles."
msgstr ""

# 7bafbaa011864e509d26d8cdf806e9da
#: getfem.Mesh:27 of
msgid ""
"This is a very limited and somehow deprecated function (See also "
"``Mesh('ptND')``, ``Mesh('regular simplices')`` and "
"``Mesh('cartesian')``)."
msgstr ""

# fafbd1a54a974d3ebc05cfc90bef0e70
#: getfem.Mesh:31 of
msgid ""
"``M = Mesh('regular simplices', vec X[, vec Y[, vec Z,...]]['degree', int"
" k]['noised'])`` Mesh a n-dimensionnal parallelepipeded with simplices "
"(triangles, tetrahedrons etc) ."
msgstr ""

# 694048b4d3a1400199031e01df8b493d
#: getfem.Mesh:35 of
msgid ""
"The optional degree may be used to build meshes with non linear geometric"
" transformations."
msgstr ""

# fd3e8c05e1ba433d81bb75ab531dab83
#: getfem.Mesh:38 of
msgid ""
"``M = Mesh('curved', Mesh m, vec F)`` Build a curved (n+1)-dimensions "
"mesh from a n-dimensions mesh `m`."
msgstr ""

# eb4fe7177e1543d3a851d72b9786cc2f
#: getfem.Mesh:41 of
msgid ""
"The points of the new mesh have one additional coordinate, given by the "
"vector `F`. This can be used to obtain meshes for shells. `m` may be a "
"MeshFem object, in that case its linked mesh will be used."
msgstr ""

# 8966f232af7e4384a9e54dbcfc978db3
#: getfem.Mesh:45 of
msgid ""
"``M = Mesh('prismatic', Mesh m, int nl[, int degree])`` Extrude a "
"prismatic Mesh `M` from a Mesh `m`."
msgstr ""

# 992efe359fef4b72a869b58224aa927e
#: getfem.Mesh:48 of
msgid ""
"In the additional dimension there are `nl` layers of elements distributed"
" from ``0`` to ``1``. If the optional parameter `degree` is provided with"
" a value greater than the default value of ``1``, a non-linear "
"transformation of corresponding degree is considered in the extrusion "
"direction."
msgstr ""

# 0a8e425a504c43ef86966e12e47d4188
#: getfem.Mesh:54 of
msgid ""
"``M = Mesh('pt2D', mat P, imat T[, int n])`` Build a mesh from a 2D "
"triangulation."
msgstr ""

# c2b71307321b4adcbfbe80eaab3b4bc3
#: getfem.Mesh:57 of
msgid ""
"Each column of `P` contains a point coordinate, and each column of `T` "
"contains the point indices of a triangle. `n` is optional and is a zone "
"number. If `n` is specified then only the zone number `n` is converted "
"(in that case, `T` is expected to have 4 rows, the fourth containing "
"these zone numbers)."
msgstr ""

# d9685d7b884b4bdeaed96fbbdd41e83f
#: getfem.Mesh:65 of
msgid ""
"``M = Mesh('ptND', mat P, imat T)`` Build a mesh from a n-dimensional "
"\"triangulation\"."
msgstr ""

# de21265dbabb4b48bf39313103b6a8ef
#: getfem.Mesh:68 of
msgid ""
"Similar function to 'pt2D', for building simplexes meshes from a "
"triangulation given in `T`, and a list of points given in `P`. The "
"dimension of the mesh will be the number of rows of `P`, and the "
"dimension of the simplexes will be the number of rows of `T`."
msgstr ""

# 44a47735f43e416d9886a5ce89ad1cc2
#: getfem.Mesh:73 of
msgid ""
"``M = Mesh('load', string filename)`` Load a mesh from a getfem++ ascii "
"mesh file."
msgstr ""

# 37d20af73d5f48e48678f28dbc66864b
#: getfem.Mesh:76 of
msgid "See also ``Mesh.save(string filename)``."
msgstr ""

# 6151520a1b1b48f9917ed31183a54117
#: getfem.Mesh:78 of
msgid ""
"``M = Mesh('from string', string s)`` Load a mesh from a string "
"description."
msgstr ""

# ea09e718f5ac4062a5b509df2d7561e5
#: getfem.Mesh:81 of
msgid "For example, a string returned by ``Mesh.char()``."
msgstr ""

# 2eb57c6c30e54f0fa091b44f3c9480d1
#: getfem.Mesh:83 of
msgid "``M = Mesh('import', string format, string filename)`` Import a mesh."
msgstr ""

# 9a5ed43ba54848ca8d682100dbc03c98
#: getfem.Mesh:86 of
msgid "`format` may be:"
msgstr ""

# 02ab07d90385435394826853d6edc0ef
#: getfem.Mesh:88 of
msgid "'gmsh' for a mesh created with `Gmsh`"
msgstr ""

# 6c7f94fefd1d419a8951bb9fd3c62675
#: getfem.Mesh:89 of
msgid "'gid' for a mesh created with `GiD`"
msgstr ""

# c0115212c9294718b49aa7cec6f1693b
#: getfem.Mesh:90 of
msgid "'cdb' for a mesh created with `ANSYS`"
msgstr ""

# 5b61f0fa924f4de5b87d25c79e27f847
#: getfem.Mesh:91 of
msgid "'am_fmt' for a mesh created with `EMC2`"
msgstr ""

# cfb09525b5c7442fa4cd4deea596abeb
#: getfem.Mesh:93 of
msgid "``M = Mesh('clone', Mesh m2)`` Create a copy of a mesh."
msgstr ""

# 17db433217c94fd8900b17d4bf9b7c1a
#: getfem.Mesh:96 of
msgid ""
"``M = Mesh('generate', MesherObject mo, scalar h[, int K = 1[, mat "
"vertices]])`` Call the experimental mesher of Getfem on the geometry "
"represented by `mo`. please control the conformity of the produced mesh. "
"You can help the mesher by adding a priori vertices in the array "
"`vertices` which should be of size ``n x m`` where ``n`` n is the "
"dimension of the mesh and ``m`` the number of points. `h` is approximate "
"diameter of the elements. `K` is the degree of the mesh ( > 1 for curved "
"boundaries).  The mesher try to optimize the quality of the elements. "
"This operation may be time consuming. Note that if the mesh generation "
"fails, because of some random procedure used, it can be run again since "
"it will not give necessarily the same result due to random procedures "
"used. The messages send to the console by the mesh generation can be "
"desactivated using `gf_util('trace level', 2)`. More information can be "
"obtained by `gf_util('trace level', 4)`. See ``MesherObject`` to "
"manipulate geometric primitives in order to desribe the geometry."
msgstr ""

# e3d7f1720a504bd0bc9a35db2bf42da2
#: getfem.Mesh.add_convex:1 of
msgid "Add a new convex into the mesh."
msgstr ""

# aac815c93e44435fb75fd6549c6dfb5d
#: getfem.Mesh.add_convex:3 of
msgid ""
"The convex structure (triangle, prism,...) is given by `GT` (obtained "
"with GeoTrans('...')), and its points are given by the columns of `PTS`. "
"On return, `CVIDs` contains the convex #ids. `PTS` might be a "
"3-dimensional array in order to insert more than one convex (or a two "
"dimensional array correctly shaped according to Fortran ordering)."
msgstr ""

# 520ac9adaa524c88920aea4c9e7bbb31
#: getfem.Mesh.add_point:1 of
msgid "Insert new points in the mesh and return their #ids."
msgstr ""

# 2fa6c67626f84e1aaee48485170fc0e4
#: getfem.Mesh.add_point:3 of
msgid ""
"`PTS` should be an ``nxm`` matrix , where ``n`` is the mesh dimension, "
"and ``m`` is the number of points that will be added to the mesh. On "
"output, `PIDs` contains the point #ids of these new points."
msgstr ""

# ab5407a9d51f485c806c3264fcca292b
#: getfem.Mesh.add_point:8 of
msgid ""
"Remark: if some points are already part of the mesh (with a small "
"tolerance of approximately ``1e-8``), they won't be inserted again, and "
"`PIDs` will contain the previously assigned #ids of these points."
msgstr ""

# a2e44a9f574e463d85fbb0fc9112d00c
#: getfem.Mesh.adjacent_face:1 of
msgid ""
"Return convex face of the neighbour element if it exists. If the convex "
"have more than one neighbour relativley to the face ``f`` (think to bar "
"elements in 3D for instance), return the first face found."
msgstr ""

# 60e8cb54cb2a41e29b1d5dd2c5890227
#: getfem.Mesh.boundaries:1 of
msgid "DEPRECATED FUNCTION. Use 'regions' instead."
msgstr ""

# 0a1f0560a3e24b75a5320fd5ab6a97bf
# ce8c0508d48d4431ba8b030e61f04810
#: getfem.Mesh.boundary:1 getfem.Mesh.set_boundary:1 of
msgid "DEPRECATED FUNCTION. Use 'region' instead."
msgstr ""

# 43189d78a15549e19f8f2a4c59f28fcf
#: getfem.Mesh.char:1 of
msgid "Output a string description of the mesh."
msgstr ""

# 878d2e3b62794726bacf73b7cd2aba79
#: getfem.Mesh.convex_area:1 of
msgid "Return an estimate of the area of each convex."
msgstr ""

# c41fa7e3897f4b4bae981ae8ecca81e3
#: getfem.Mesh.convex_radius:1 of
msgid "Return an estimate of the radius of each convex."
msgstr ""

# c9a17df2604a4945950468036a10a4aa
# 2e25242c19b64f309852443afdee25ff
#: getfem.Mesh.curved_edges:1 getfem.Mesh.edges:3 of
msgid "[OBSOLETE FUNCTION! will be removed in a future release]"
msgstr ""

# 409801133a7a428789ad8b588a70a74a
#: getfem.Mesh.curved_edges:3 of
msgid ""
"More sophisticated version of Mesh.edges() designed for curved elements. "
"This one will return N (N>=2) points of the (curved) edges. With N==2, "
"this is equivalent to Mesh.edges(). Since the points are no more always "
"part of the mesh, their coordinates are returned instead of points "
"number, in the array E which is a [ mesh_dim x 2 x nb_edges ] array.  If "
"the optional output argument C is specified, it will contain the convex "
"number associated with each edge."
msgstr ""

# a28eef865730459897bc7a27911c684d
#: getfem.Mesh.cvid:1 of
msgid "Return the list of all convex #id."
msgstr ""

# 3748d7f0eeff4d1fb26141160e86c2ed
#: getfem.Mesh.cvid:3 of
msgid ""
"Note that their numbering is not supposed to be contiguous from 0 to "
"Mesh.nbcvs()-1, especially if some points have been removed from the "
"mesh. You can use Mesh.optimize_structure() to enforce a contiguous "
"numbering."
msgstr ""

# cc822849192e4079b45121b379f2ba38
#: getfem.Mesh.cvid_from_pid:1 of
msgid "Search convex #ids related with the point #ids given in `PIDs`."
msgstr ""

# f9921b820d164f2ba5d416a310e3eaf2
#: getfem.Mesh.cvid_from_pid:3 of
msgid ""
"If `share=False`, search convex whose vertex #ids are in `PIDs`. If "
"`share=True`, search convex #ids that share the point #ids given in "
"`PIDs`. `CVIDs` is a  vector (possibly empty)."
msgstr ""

# f6a92a383bbb497da7daf7b6579a639e
#: getfem.Mesh.cvstruct:1 of
msgid "Return an array of the convex structures."
msgstr ""

# 67d7072f753d4793a44fc9036e33d76a
#: getfem.Mesh.cvstruct:3 of
msgid ""
"If `CVIDs` is not given, all convexes are considered. Each convex "
"structure is listed once in `S`, and `CV2S` maps the convexes indice in "
"`CVIDs` to the indice of its structure in `S`."
msgstr ""

# c35bf338fb86400e969646e26ef91885
#: getfem.Mesh.del_convex:1 of
msgid "Remove one or more convexes from the mesh."
msgstr ""

# 3a8274976879471ea427f89fd0d078d2
#: getfem.Mesh.del_convex:3 of
msgid ""
"`CVIDs` should contain the convexes #ids, such as the ones returned by "
"the 'add convex' command."
msgstr ""

# c15d4ac393fe4231aa866c4da279aede
#: getfem.Mesh.del_convex_of_dim:1 of
msgid "Remove all convexes of dimension listed in `DIMs`."
msgstr ""

# 774d8f94575e49ab876fed97a702eb3e
#: getfem.Mesh.del_convex_of_dim:3 of
msgid ""
"For example; ``Mesh.del_convex_of_dim([1,2])`` remove all line segments, "
"triangles and quadrangles."
msgstr ""

# c64c3b1d35ff49acb733e9a5df74f7b3
#: getfem.Mesh.del_point:1 of
msgid "Removes one or more points from the mesh."
msgstr ""

# 9e3ee0cd102140f8aba6bf16ecf80d66
#: getfem.Mesh.del_point:3 of
msgid ""
"`PIDs` should contain the point #ids, such as the one returned by the "
"'add point' command."
msgstr ""

# 18c19c98bae94ffa848f6bbfe0b58350
#: getfem.Mesh.delete_boundary:1 of
msgid "DEPRECATED FUNCTION. Use 'delete region' instead."
msgstr ""

# a046a4fd96ad4b54acf317ce7aaecb74
#: getfem.Mesh.delete_region:1 of
msgid "Remove the regions whose #ids are listed in `RIDs`"
msgstr ""

# b3f581fab4c04ee485f28be3eef901e9
#: getfem.Mesh.dim:1 of
msgid "Get the dimension of the mesh (2 for a 2D mesh, etc)."
msgstr ""

# eef7de1408294fb390c443fbecd29826
#: getfem.Mesh.display:1 of
msgid "displays a short summary for a Mesh object."
msgstr ""

# c392f7991cc54314a5e13a9f2ca047a5
#: getfem.Mesh.edges:1 of
msgid "Synopsis: [E,C] = Mesh.edges(self [, CVLST][, 'merge'])"
msgstr ""

# 8157f209ae1d47f8a1a4ba951033b3b8
#: getfem.Mesh.edges:5 of
msgid ""
"Return the list of edges of mesh M for the convexes listed in the row "
"vector CVLST. E is a 2 x nb_edges matrix containing point indices. If "
"CVLST is omitted, then the edges of all convexes are returned. If CVLST "
"has two rows then the first row is supposed to contain convex numbers, "
"and the second face numbers, of which the edges will be returned.  If "
"'merge' is indicated, all common edges of convexes are merged in a single"
" edge.  If the optional output argument C is specified, it will contain "
"the convex number associated with each edge."
msgstr ""

# d22bcb9ebf7349eab55fabc46a0ab7e6
#: getfem.Mesh.export_to_dx:1 of
msgid ""
"Synopsis: Mesh.export_to_dx(self, string filename, ... "
"[,'ascii'][,'append'][,'as',string name,[,'serie',string "
"serie_name]][,'edges'])"
msgstr ""

# ea2c14a4696548fd95f56997cf31d6b3
#: getfem.Mesh.export_to_dx:3 of
msgid "Exports a mesh to an OpenDX file."
msgstr ""

# fbe3eba53b2641519ec761b83352ff28
#: getfem.Mesh.export_to_dx:5 of
msgid "See also MeshFem.export_to_dx(), Slice.export_to_dx()."
msgstr ""

# 23821862b9cb4b65b3783080e65907d6
#: getfem.Mesh.export_to_pos:1 of
msgid "Exports a mesh to a POS file ."
msgstr ""

# 85c71c2967564400bc7924bb463dd0dc
#: getfem.Mesh.export_to_pos:3 of
msgid "See also MeshFem.export_to_pos(), Slice.export_to_pos()."
msgstr ""

# 3075b46171444ba8b628816c9e878bf0
#: getfem.Mesh.export_to_vtk:1 of
msgid ""
"Synopsis: Mesh.export_to_vtk(self, string filename, ... "
"[,'ascii'][,'quality'])"
msgstr ""

# 2b9f04d7fe8444cfb26f89bf445d0b1e
#: getfem.Mesh.export_to_vtk:3 of
msgid "Exports a mesh to a VTK file ."
msgstr ""

# 19bc704cd2934f4494188a4598d47d3d
#: getfem.Mesh.export_to_vtk:5 of
msgid ""
"If 'quality' is specified, an estimation of the quality of each convex "
"will be written to the file."
msgstr ""

# 5c38ec7b975f4a3f863c5b9a4aa51574
#: getfem.Mesh.export_to_vtk:8 of
msgid "See also MeshFem.export_to_vtk(), Slice.export_to_vtk()."
msgstr ""

# ec8f66cbe5fd4f3e8547652f40512905
#: getfem.Mesh.extend_region:1 of
msgid ""
"Extends the region identified by the region number `rnum` to include the "
"set of convexes or/and convex faces provided in the matrix `CVFIDs`, see "
"also ``Mesh.(set region)``."
msgstr ""

# 86f93dcfe7194de99af242b9442b647b
#: getfem.Mesh.faces_from_cvid:1 of
msgid "Synopsis: CVFIDs = Mesh.faces_from_cvid(self[, ivec CVIDs][, 'merge'])"
msgstr ""

# 625180e075e54747b0f233c405fa59c3
#: getfem.Mesh.faces_from_cvid:3 of
msgid "Return a list of convex faces from a list of convex #id."
msgstr ""

# b130992302a34d909e802d0bc473ee7d
#: getfem.Mesh.faces_from_cvid:5 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers (local number in the convex). If `CVIDs` is not"
" given, all convexes are considered. The optional argument 'merge' merges"
" faces shared by the convex of `CVIDs`."
msgstr ""

# 8f70218af700444187107009155816b9
#: getfem.Mesh.faces_from_pid:1 of
msgid "Return the convex faces whose vertex #ids are in `PIDs`."
msgstr ""

# ac23d78a02b947a58a1bb3e5776f85b0
#: getfem.Mesh.faces_from_pid:3 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers (local number in the convex). For a convex face"
" to be returned, EACH of its points have to be listed in `PIDs`."
msgstr ""

# 5d74abddf03c40bdaafe1ee9f658b7cb
#: getfem.Mesh.geotrans:1 of
msgid "Returns an array of the geometric transformations."
msgstr ""

# 2470b2f7aa8149dca34dcc6bc6ee2098
#: getfem.Mesh.geotrans:3 of
msgid "See also Mesh.cvstruct()."
msgstr ""

# d88c2b7e497f47c196c7812877683b4f
#: getfem.Mesh.inner_faces:1 of
msgid ""
"Return the set of faces shared at least by two elements in CVIDs. Each "
"face is represented only once and is arbitrarily chosen between the two "
"neighbour elements."
msgstr ""

# cbeda3df7a1b46bca24abd091cda041c
#: getfem.Mesh.max_cvid:1 of
msgid "Return the maximum #id of all convexes in the mesh (see 'max pid')."
msgstr ""

# d5d33a4eb70a449e83c628e984d9358f
#: getfem.Mesh.max_pid:1 of
msgid "Return the maximum #id of all points in the mesh (see 'max cvid')."
msgstr ""

# 7e755fedf0194e31bc83043db9eae0de
#: getfem.Mesh.memsize:1 of
msgid "Return the amount of memory (in bytes) used by the mesh."
msgstr ""

# e4ecd61d12ea41a2a12ee1b2db033d38
#: getfem.Mesh.merge:1 of
msgid "Merge with the Mesh `m2`."
msgstr ""

# 160133e19e854656be99e4f12037b268
#: getfem.Mesh.merge:3 of
msgid ""
"Overlapping points, within a tolerance radius `tol`, will not be "
"duplicated. If `m2` is a MeshFem object, its linked mesh will be used."
msgstr ""

# c7f609b4819744a88d461024355a14ca
#: getfem.Mesh.nbcvs:1 of
msgid "Get the number of convexes of the mesh."
msgstr ""

# 08d233f1d1bd4e69b498f8f5c1877cce
#: getfem.Mesh.nbpts:1 of
msgid "Get the number of points of the mesh."
msgstr ""

# e5f3868ca08f4db58631f882eb7c92bd
#: getfem.Mesh.normal_of_face:1 of
msgid ""
"Evaluates the normal of convex `cv`, face `f` at the `nfpt` point of the "
"face."
msgstr ""

# edc672c8c45a49f9817b464ea5bc344e
#: getfem.Mesh.normal_of_face:3 of
msgid ""
"If `nfpt` is not specified, then the normal is evaluated at each "
"geometrical node of the face."
msgstr ""

# 56e224788fc24daa91d0e7c54b9d79b3
#: getfem.Mesh.normal_of_faces:1 of
msgid "Evaluates (at face centers) the normals of convexes."
msgstr ""

# c8356e89d9dd4fe09785713794fba324
#: getfem.Mesh.normal_of_faces:3 of
msgid ""
"`CVFIDs` is supposed a two-rows matrix, the first row lists convex #ids, "
"and the second lists face numbers (local number in the convex)."
msgstr ""

# 1f7edb9fca5547e2a9e9cbb1c5c326b0
#: getfem.Mesh.optimize_structure:1 of
msgid "Reset point and convex numbering."
msgstr ""

# 1a7195f6d80b4ef6953100bbed683633
#: getfem.Mesh.optimize_structure:3 of
msgid ""
"After optimisation, the points (resp. convexes) will be consecutively "
"numbered from ``0`` to ``Mesh.max_pid()-1`` (resp. "
"``Mesh.max_cvid()-1``)."
msgstr ""

# 06367c9690634df292d25a397ca3c996
#: getfem.Mesh.orphaned_pid:1 of
msgid "Search point #id which are not linked to a convex."
msgstr ""

# 18fbf884542c49058045ebd5a8cada46
#: getfem.Mesh.outer_faces:1 of
msgid "Return the set of faces not shared by two elements."
msgstr ""

# ea2c909f0fb645b38f429d1531592775
#: getfem.Mesh.outer_faces:3 of
msgid ""
"The output `CVFIDs` is a two-rows matrix, the first row lists convex "
"#ids, and the second one lists face numbers (local number in the convex)."
" If `CVIDs` is not given, all convexes are considered, and it basically "
"returns the mesh boundary. If `CVIDs` is given, it returns the boundary "
"of the convex set whose #ids are listed in `CVIDs`."
msgstr ""

# f8320b2c9b764f5d82e31efd595c0801
#: getfem.Mesh.outer_faces_in_box:1 of
msgid ""
"Return the set of faces not shared by two convexes and lying within the "
"box defined by the corner points `pmin` and `pmax`."
msgstr ""

# f37d4370c41b427aa9f4c1c2d126b0e6
# ce7a9e368b7645a7b958497e9dd04e41
#: getfem.Mesh.outer_faces_in_box:3 getfem.Mesh.outer_faces_with_direction:3 of
msgid ""
"The output `CVFIDs` is a two-rows matrix, the first row lists convex "
"#ids, and the second one lists face numbers (local number in the convex)."
" If `CVIDs` is given, it returns portion of the boundary of the convex "
"set defined by the #ids listed in `CVIDs`."
msgstr ""

# 703735fe00df4aa698be91d36b3bb5b5
#: getfem.Mesh.outer_faces_with_direction:1 of
msgid ""
"Return the set of faces not shared by two convexes and with a mean "
"outward vector lying within an angle `angle` (in radians) from vector "
"`v`."
msgstr ""

# 03983ad6ed3f478686cb2ba5d73dd064
#: getfem.Mesh.pid:1 of
msgid "Return the list of points #id of the mesh."
msgstr ""

# 1fb982af4c9d4573b60222609a45be84
#: getfem.Mesh.pid:3 of
msgid ""
"Note that their numbering is not supposed to be contiguous from 0 to "
"Mesh.nbpts()-1, especially if some points have been removed from the "
"mesh. You can use Mesh.optimize_structure() to enforce a contiguous "
"numbering."
msgstr ""

# 22e9aa5058044705adbf7baa8df729fb
#: getfem.Mesh.pid_from_coords:1 of
msgid "Search point #id whose coordinates are listed in `PTS`."
msgstr ""

# 61772ddc91774bf385c7392c24a819e2
#: getfem.Mesh.pid_from_coords:3 of
msgid ""
"`PTS` is an array containing a list of point coordinates. On return, "
"`PIDs` is a vector containing points #id for each point found in `eps` "
"range, and -1 for those which where not found in the mesh."
msgstr ""

# 5020723439614affbbb5b47e58d0321e
#: getfem.Mesh.pid_from_cvid:1 of
msgid "Return the points attached to each convex of the mesh."
msgstr ""

# 6120c862322a4f9c8ace82d9cc381cc7
#: getfem.Mesh.pid_from_cvid:3 of
msgid ""
"If `CVIDs` is omitted, all the convexes will be considered (equivalent to"
" `CVIDs = Mesh.max_cvid()`). `IDx` is a vector, length(IDx) = "
"length(CVIDs)+1. `Pid` is a vector containing the concatenated list of "
"#id of points of each convex in `CVIDs`. Each entry of `IDx` is the "
"position of the corresponding convex point list in `Pid`. Hence, for "
"example, the list of #id of points of the second convex is "
"Pid[IDx(2):IDx(3)]."
msgstr ""

# 818088c5ab4943e1b114a9eacabd7f2c
# e38e1a148b594d3aa2aea28bfb5a3a33
#: getfem.Mesh.pid_from_cvid:12 getfem.Mesh.pts_from_cvid:12 of
msgid ""
"If `CVIDs` contains convex #id which do not exist in the mesh, their "
"point list will be empty."
msgstr ""

# c4bf63644baf41b49b3921761d3cca58
#: getfem.Mesh.pid_in_cvids:1 of
msgid "Search point #id listed in `CVIDs`."
msgstr ""

# 110860f4cd1a4821b92cc61d397142c4
# a17898874e0241e9bda039bd180128b7
#: getfem.Mesh.pid_in_cvids:3 getfem.Mesh.pid_in_regions:3 of
msgid "`PIDs` is a vector containing points #id."
msgstr ""

# 880d0b3aa0e84aaf8a64b8c46062a4ce
#: getfem.Mesh.pid_in_faces:1 of
msgid "Search point #id listed in `CVFIDs`."
msgstr ""

# abea7f684b6a4a36ae49da03695787e1
#: getfem.Mesh.pid_in_faces:3 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers. On return, `PIDs` is a vector containing "
"points #id."
msgstr ""

# e4bda2e86f9244f9a9d5503cdb15d845
#: getfem.Mesh.pid_in_regions:1 of
msgid "Search point #id listed in `RIDs`."
msgstr ""

# 2f6ba2129df44606806c448e6e2fab63
#: getfem.Mesh.pts:1 of
msgid "Return the list of point coordinates of the mesh."
msgstr ""

# 87d8a526622843e6b127fc95a806c9f5
#: getfem.Mesh.pts:3 of
msgid ""
"Each column of the returned matrix contains the coordinates of one point."
" If the optional argument `PIDs` was given, only the points whose #id is "
"listed in this vector are returned. Otherwise, the returned matrix will "
"have Mesh.max_pid() columns, which might be greater than Mesh.nbpts() (if"
" some points of the mesh have been destroyed and no call to "
"Mesh.optimize_structure() have been issued). The columns corresponding to"
" deleted points will be filled with NaN. You can use Mesh.pid() to filter"
" such invalid points."
msgstr ""

# f5ec7c14898b403b9ff1ffe8827b3688
#: getfem.Mesh.pts_from_cvid:1 of
msgid "Search point listed in `CVID`."
msgstr ""

# f0577e319a494725973559296a036774
#: getfem.Mesh.pts_from_cvid:3 of
msgid ""
"If `CVIDs` is omitted, all the convexes will be considered (equivalent to"
" `CVIDs = Mesh.max_cvid()`). `IDx` is a vector, length(IDx) = "
"length(CVIDs)+1. `Pts` is a vector containing the concatenated list of "
"points of each convex in `CVIDs`. Each entry of `IDx` is the position of "
"the corresponding convex point list in `Pts`. Hence, for example, the "
"list of points of the second convex is Pts[:,IDx[2]:IDx[3]]."
msgstr ""

# dafc95f892b74ad49d3b14c8433e6438
#: getfem.Mesh.quality:1 of
msgid ""
"Return an estimation of the quality of each convex (:math:`0 \\leq Q "
"\\leq 1`)."
msgstr ""

# 151b16ba373b40fb88fa3314b023ca9f
#: getfem.Mesh.refine:1 of
msgid "Use a Bank strategy for mesh refinement."
msgstr ""

# e15b07907dc348e3b2e93b7ac365e9da
#: getfem.Mesh.refine:3 of
msgid ""
"If `CVIDs` is not given, the whole mesh is refined. Note that the "
"regions, and the finite element methods and integration methods of the "
"MeshFem and MeshIm objects linked to this mesh will be automagically "
"refined."
msgstr ""

# 878eccea28d04642bac67ea2c836bb0d
#: getfem.Mesh.region:1 of
msgid "Return the list of convexes/faces on the regions `RIDs`."
msgstr ""

# ed7ffd4b3c3c4fbb80994c832eb41c94
#: getfem.Mesh.region:3 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers (local number in the convex). (and -1 when the "
"whole convex is in the regions)."
msgstr ""

# 17705e909d164d9ab6bb32fd5befebc0
#: getfem.Mesh.region_intersect:1 of
msgid ""
"Replace the region number `r1` with its intersection with region number "
"`r2`."
msgstr ""

# b2343bda00a84790ae1190243d3baccc
#: getfem.Mesh.region_merge:1 of
msgid "Merge region number `r2` into region number `r1`."
msgstr ""

# 8f04cc5f67e544f9913d85be4b1b7d2c
#: getfem.Mesh.region_subtract:1 of
msgid ""
"Replace the region number `r1` with its difference with region number "
"`r2`."
msgstr ""

# ff887f47753e4771a37326e16c986efb
#: getfem.Mesh.regions:1 of
msgid "Return the list of valid regions stored in the mesh."
msgstr ""

# 8f5e91443a104c6a82e189bc0d489009
#: getfem.Mesh.save:1 of
msgid "Save the mesh object to an ascii file."
msgstr ""

# 43282f407ffc46bb82b9a8326d1b2776
#: getfem.Mesh.save:3 of
msgid "This mesh can be restored with Mesh('load', filename)."
msgstr ""

# f6251585d64347b8b9da3ca9429b53b1
#: getfem.Mesh.set_pts:1 of
msgid "Replace the coordinates of the mesh points with those given in `PTS`."
msgstr ""

# 411fdca55593424eba4e0ff00fe010ff
#: getfem.Mesh.set_region:1 of
msgid ""
"Assigns the region number `rnum` to the set of convexes or/and convex "
"faces provided in the matrix `CVFIDs`."
msgstr ""

# 282550a9307f441a9b5003e58da269f4
#: getfem.Mesh.set_region:4 of
msgid ""
"The first row of `CVFIDs` contains convex #ids, and the second row "
"contains a face number in the convex (or ``-1`` for the whole convex "
"(regions are usually used to store a list of convex faces, but you may "
"also use them to store a list of convexes)."
msgstr ""

# 2a02e10249d54bdf8c72aacf82e42a05
#: getfem.Mesh.set_region:9 of
msgid ""
"If a vector is provided (or a one row matrix) the region will represent "
"the corresponding set of convex."
msgstr ""

# b69207a2b42d42418ae2fad18aabbd5b
#: getfem.Mesh.transform:1 of
msgid "Applies the matrix `T` to each point of the mesh."
msgstr ""

# 8206614229644726be3854f19a4e4203
#: getfem.Mesh.transform:3 of
msgid ""
"Note that `T` is not required to be a ``NxN`` matrix (with ``N = "
"Mesh.dim()``). Hence it is possible to transform a 2D mesh into a 3D one "
"(and reciprocally)."
msgstr ""

# 2448a4d76b774d979856eaa9d4d7d246
#: getfem.Mesh.translate:1 of
msgid "Translates each point of the mesh from `V`."
msgstr ""

# 3bfaf3b73ab542929d9d5506c65413c7
#: getfem.Mesh.triangulated_surface:1 of
msgid "[DEPRECATED FUNCTION! will be removed in a future release]"
msgstr ""

# 0468198cbd764e7996c1f0f88668378a
#: getfem.Mesh.triangulated_surface:3 of
msgid ""
"Similar function to Mesh.curved_edges() : split (if necessary, i.e. if "
"the geometric transformation if non-linear) each face into sub-triangles "
"and return their coordinates in T (see also gf_compute('eval on P1 tri "
"mesh'))"
msgstr ""

