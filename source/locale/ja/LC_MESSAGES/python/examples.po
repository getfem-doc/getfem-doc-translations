# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# ca387d4ecbb2416ca77666aa9e80c6d3
#: ../source/python/examples.rst:10
msgid "Examples"
msgstr ""

# 363ec0f183994e64be730170feb517ef
#: ../source/python/examples.rst:17
msgid "A step-by-step basic example"
msgstr ""

# 8d0040a3e6a34f9daa735f5169ba2dc1
#: ../source/python/examples.rst:19
msgid ""
"This example shows the basic usage of getfem, on the Ã¼ber-canonical "
"problem above all others: solving the :envvar:`Laplacian`, "
":math:`-\\Delta u = f` on a square, with the Dirichlet condition :math:`u"
" = g(x)` on the domain boundary. You can find the **py-file** of this "
"example under the name **demo_step_by_step.py** in the directory "
"``interface/tests/python/`` of the |gf| distribution."
msgstr ""

# 9ea4f0ba0d604ed2a74d00f99a024bcd
#: ../source/python/examples.rst:25
msgid ""
"The first step is to **create a Mesh object**. It is possible to create "
"simple structured meshes or unstructured meshes for simple geometries "
"(see ``getfem.Mesh('generate', mesher_object mo, scalar h))``) or to rely"
" on an external mesher (see ``getfem.Mesh('import', string FORMAT, string"
" FILENAME)``), or use very simple meshes. For this example, we just "
"consider a regular mesh\\index{cartesian mesh} whose nodes are "
":math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}`"
msgstr ""

# 87c6dbee09b6404f902da98b0adec8d8
#: ../source/python/examples.rst:34
msgid ""
"The next step is to **create a MeshFem object**. This one links a mesh "
"with a set of FEM"
msgstr ""

# 5fa3df5b7ace43f3a6e5b6c4a6efc65b
#: ../source/python/examples.rst:41
msgid ""
"The first instruction builds a new |py_mf| object, the second argument "
"specifies that this object will be used to interpolate scalar fields "
"(since the unknown :math:`u` is a scalar field). The second instruction "
"assigns the :math:`Q^2` FEM to every convex (each basis function is a "
"polynomial of degree 4, remember that :math:`P^k\\Rightarrow` polynomials"
" of degree :math:`k`, while :math:`Q^k\\Rightarrow` polynomials of degree"
" :math:`2k`). As :math:`Q^2` is a polynomial FEM, you can view the "
"expression of its basis functions on the reference convex:"
msgstr ""

# 9294b6ff022645debccb4d2f3629ef1d
#: ../source/python/examples.rst:54
msgid ""
"Now, in order to perform numerical integrations on ``mf``, we need to "
"**build a MeshIm object**"
msgstr ""

# e1b18d4adde94011b26be83a8ce57a50
#: ../source/python/examples.rst:61
msgid ""
"The integration method will be used to compute the various integrals on "
"each element: here we choose to perform exact computations (no "
":envvar:`quadrature formula`), which is possible since the geometric "
"transformation of these convexes from the reference convex is linear "
"(this is true for all simplices, and this is also true for the "
"parallelepipeds of our regular mesh, but it is not true for general "
"quadrangles), and the chosen FEM is polynomial. Hence it is possible to "
"analytically integrate every basis function/product of basis "
"functions/gradients/etc. There are many alternative FEM methods and "
"integration methods (see :ref:`ud`)."
msgstr ""

# eed25a6a7bbb490fae7ef6dfe5da4ad7
#: ../source/python/examples.rst:71
msgid ""
"Note however that in the general case, approximate integration methods "
"are a better choice than exact integration methods."
msgstr ""

# 806feacdd7e4463790d8ac1c0db242db
#: ../source/python/examples.rst:74
msgid ""
"Now we have to **find the** <:envvar:`boundary`> **of the domain**, in "
"order to set a Dirichlet condition. A mesh object has the ability to "
"store some sets of convexes and convex faces. These sets (called "
"<regions>) are accessed via an integer *#id*"
msgstr ""

# ad8607c55e2b4163b6bceea0b5b28bb2
#: ../source/python/examples.rst:83
msgid ""
"Here we find the faces of the convexes which are on the boundary of the "
"mesh (i.e. the faces which are not shared by two convexes)."
msgstr ""

# 8b90a4d9fa5244caba57952b957ca69b
#: ../source/python/examples.rst:86
msgid ""
"The array ``border`` has two rows, on the first row is a convex number, "
"on the second row is a face number (which is local to the convex, there "
"is no global numbering of faces). Then this set of faces is assigned to "
"the region number 42."
msgstr ""

# ee242b61c8714dd6ac81d16852aeb786
#: ../source/python/examples.rst:90
msgid ""
"At this point, we just have to describe the model and run the solver to "
"get the solution! The \":envvar:`model`\" is created with the |py_md| "
"constructor. A model is basically an object which build a global linear "
"system (tangent matrix for non-linear problems) and its associated right "
"hand side. Typical modifications are insertion of the stiffness matrix "
"for the problem considered (linear elasticity, laplacian, etc), handling "
"of a set of constraints, Dirichlet condition, addition of a source term "
"to the right hand side etc. The global tangent matrix and its right hand "
"side are stored in the \":envvar:`model`\" structure."
msgstr ""

# 66d4a4e941c84379b222a7cb9e78cc17
#: ../source/python/examples.rst:99
msgid ""
"Let us build a problem with an easy solution: :math:`u = x(x-1)-y(y-1)`, "
"then we have :math:`-\\Delta u = 0` (the FEM won't be able to catch the "
"exact solution since we use a :math:`Q^2` method)."
msgstr ""

# dd545895c7564ff5819a96f44ce76167
#: ../source/python/examples.rst:103
msgid "We start with an empty real model"
msgstr ""

# 20a8fa142d724372bcbf31d8a14bd346
#: ../source/python/examples.rst:109
msgid ""
"(a model is either ``'real'`` or ``'complex'``). And we declare that "
"``u`` is an unknown of the system on the finite element method `mf` by"
msgstr ""

# f625363c926d4ba3aa5b2304b47d9c63
#: ../source/python/examples.rst:116
msgid ""
"Now, we add a `generic elliptic` brick, which handles "
":math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` problems, where :math:`A` "
"can be a scalar field, a matrix field, or an order 4 tensor field. By "
"default, :math:`A=1`. We add it on our main variable ``u`` with"
msgstr ""

# 0b02c248ef224de581c44a8c534dd1d0
#: ../source/python/examples.rst:125
msgid "Next we add a Dirichlet condition on the domain boundary"
msgstr ""

# eb686ffff30e48d2bec2601b96ae4095
#: ../source/python/examples.rst:131
msgid ""
"The two first lines defines a data of the model which represents the "
"value of the Dirichlet condition. The third one add a Dirichlet condition"
" to the variable ``u`` on the boundary number ``42``. The dirichlet "
"condition is imposed with lagrange multipliers. Another possibility is to"
" use a penalization. A |py_mf| argument is also required, as the "
"Dirichlet condition :math:`u=g` is imposed in a weak form "
":math:`\\int_\\Gamma u(x)v(x) = \\int_\\Gamma g(x)v(x)\\ \\forall v` "
"where :math:`v` is taken in the space of multipliers given by here by "
"``mf``."
msgstr ""

# 137a7c42aa2f461892ecba8319da905e
#: ../source/python/examples.rst
msgid "Remark:"
msgstr ""

# 9ce0548a97fd49a6a75d180839f5deed
#: ../source/python/examples.rst:141
msgid ""
"the polynomial expression was interpolated on ``mf``. It is possible only"
" if ``mf`` is of Lagrange type. In this first example we use the same "
"|py_mf| for the unknown and for the data such as ``g``, but in the "
"general case, ``mf`` won't be Lagrangian and another (Lagrangian) |py_mf|"
" will be used for the description of Dirichlet conditions, source terms "
"etc."
msgstr ""

# 8b96d725d39242f09b31f23f96e6d210
#: ../source/python/examples.rst:147
msgid "A source term can be added with (uncommented) the following lines"
msgstr ""

# 0727104a4b7a4ca18258a94abbac38a8
#: ../source/python/examples.rst:153
msgid ""
"It only remains now to launch the solver. The linear system is assembled "
"and solve with the instruction"
msgstr ""

# f18aa99aa86f42aea9cb25b4834d41af
#: ../source/python/examples.rst:160
msgid ""
"The model now contains the solution (as well as other things, such as the"
" linear system which was solved). It is extracted"
msgstr ""

# 56b5393aec784b59b133b048dd21ec7e
#: ../source/python/examples.rst:167
msgid "Then export solution"
msgstr ""

# b7eaa8c787054a698fd5f0cf50c09a1b
#: ../source/python/examples.rst:173
msgid "and view with ``gmsh u.pos``, see figure :ref:`py-fig-sbs`."
msgstr ""

# c069220c74074cb08aa008667057bf86
#: ../source/python/examples.rst:180
msgid "Computed solution"
msgstr ""

# 5dba58cdd62346fe858506f4a06ddacd
#: ../source/python/examples.rst:184
msgid "Another Laplacian with exact solution (source term)"
msgstr ""

# 40b70b3ffbfc499184f058822fee9c5c
#: ../source/python/examples.rst:186
msgid ""
"This example shows the basic usage of getfem, on the canonical problem: "
"solving the Laplacian, :math:`-\\Delta u = f` on a square, with the "
"Dirichlet condition :math:`u = g(x)` on the domain boundary "
":math:`\\Gamma_D` and the Neumann condition :math:`\\frac{\\partial "
"u}{\\partial\\eta} = h(x)` on the domain boundary :math:`\\Gamma_N`. You "
"can find the **py-file** of this example under the name "
"**demo_laplacian.py** in the directory ``interface/tests/python/`` of the"
" |gf| distribution."
msgstr ""

# 23f597a7c5d049288cf5a8b21d209ae8
#: ../source/python/examples.rst:194
msgid ""
"We create Mesh, MeshFem, MeshIm object and find the boundary of the "
"domain in the same way as the previous example"
msgstr ""

# 5e1508e00b9b4fefad97bb47432583fa
#: ../source/python/examples.rst:201
msgid "then, we interpolate the exact solution and source terms"
msgstr ""

# f138677840d746adb99810f7d3244fe0
#: ../source/python/examples.rst:207
msgid "and we bricked the problem as in the previous example"
msgstr ""

# 90a1a2c7cf8c4d64924ca0f76af3e707
#: ../source/python/examples.rst:213
msgid ""
"the only change is the add of `source term` bricks. Finally the solution "
"of the problem is extracted and exported"
msgstr ""

# d01118b2ee084deaa69215877c5a6212
#: ../source/python/examples.rst:220
msgid "view with ``gmsh sol.pos``:"
msgstr ""

# a0e8d6df62b24c59a4ece952cf66dbaf
#: ../source/python/examples.rst:226
msgid "Differences"
msgstr ""

# b0459c1fccc24fb69e1661064a01af33
#: ../source/python/examples.rst:230
msgid "Linear and non-linear elasticity"
msgstr ""

# 1c1d1ad03008428fbb688c44c6a5efa7
#: ../source/python/examples.rst:232
msgid ""
"This example uses a mesh that was generated with `GiD`_. The object is "
"meshed with quadratic tetrahedrons. You can find the **py-file** of this "
"example under the name :file:`demo_tripod.py` in the directory "
":file:`interface/tests/python/` of the |gf| distribution."
msgstr ""

# 0e7bb8e7feb64bcc9f9e691e0a9f92c8
#: ../source/python/examples.rst:241
msgid ""
"Here is the final figure, displaying the :envvar:`Von Mises` stress and "
"displacements norms:"
msgstr ""

# dc8b861c0f454747967ac3e2f00a1ee1
#: ../source/python/examples.rst:248
msgid "\\(a\\) Tripod Von Mises, \\(b\\) Tripod displacements norms."
msgstr ""

# dc1e9f12aa694b879245c8aaa7fc44d5
#: ../source/python/examples.rst:252
msgid "Avoiding the model framework"
msgstr ""

# 114e55abbae34bd0999164920b1ad9b9
#: ../source/python/examples.rst:254
msgid ""
"The model bricks are very convenient, as they hide most of the details of"
" the assembly of the final linear systems. However it is also possible to"
" stay at a lower level, and handle the assembly of linear systems, and "
"their resolution, directly in |py|. For example, the demonstration "
":file:`demo_tripod_alt.py` is very similar to the :file:`demo_tripod.py` "
"except that the assembly is explicit"
msgstr ""

# 11da607648cf4144a474066cf0f2aafa
#: ../source/python/examples.rst:263
msgid ""
"In |gfi|, the assembly of vectors, and matrices is done via the "
"``gf.asm_*`` functions. The Dirichlet condition :math:`h(x)u(x) = r(x)` "
"is handled in the weak form :math:`\\int (h(x)u(x)).v(x) = \\int "
"r(x).v(x)\\quad\\forall v` (where :math:`h(x)` is a :math:`3\\times 3` "
"matrix field -- here it is constant and equal to the identity). The "
"reduced system ``KK UU = FF`` is then built via the elimination of "
"Dirichlet constraints from the original system. Note that it might be "
"more efficient (and simpler) to deal with Dirichlet condition via a "
"penalization technique."
msgstr ""

# 9eb989fb85fb4dfc8bc968f76f5a7807
#: ../source/python/examples.rst:273
msgid "Other examples"
msgstr ""

# 85dc72ce6e414cac91cb28942ab75e65
#: ../source/python/examples.rst:275
msgid ""
"the :file:`demo_refine.py` script shows a simple 2D or 3D bar whose "
"extremity is clamped. An adaptative refinement is used to obtain a better"
" approximation in the area where the stress is singular (the transition "
"between the clamped area and the neumann boundary)."
msgstr ""

# cc5ab38f081d47b18250ca4801ab92d4
#: ../source/python/examples.rst:280
msgid ""
"the :file:`demo_nonlinear_elasticity.py` script shows a 3D bar which is "
"is bended and twisted. This is a quasi-static problem as the deformation "
"is applied in many steps. At each step, a non-linear (large deformations)"
" elasticity problem is solved."
msgstr ""

# d6cf1b561116404fa305271d2ee299ea
#: ../source/python/examples.rst:285
msgid ""
"the :file:`demo_stokes_3D_tank.py` script shows a Stokes (viscous fluid) "
"problem in a tank. The :file:`demo_stokes_3D_tank_draw.py` shows how to "
"draw a nice plot of the solution, with mesh slices and stream lines. Note"
" that the :file:`demo_stokes_3D_tank_alt.py` is the old example, which "
"uses the deprecated ``gf_solve`` function."
msgstr ""

# 53958799a29c468fac3a2c8f7ffd3e90
#: ../source/python/examples.rst:291
msgid ""
"the :file:`demo_bilaplacian.py` script is just an adaption of the |gf| "
"example :file:`tests/bilaplacian.cc`. Solve the bilaplacian (or a "
"Kirchhoff-Love plate model) on a square."
msgstr ""

# 170635ca191b4692a33613bf7cd7f7f7
#: ../source/python/examples.rst:295
msgid ""
"the :file:`demo_plasticity.py` script is an adaptation of the |gf| "
"example :file:`tests/plasticity.cc`: a 2D or 3D bar is bended in many "
"steps, and the plasticity of the material is taken into account "
"(plastification occurs when the material's Von Mises exceeds a given "
"threshold)."
msgstr ""

# fb45e669b5ef4036bba0cae80010eb85
#: ../source/python/examples.rst:300
msgid ""
"the :file:`demo_wave2D.py` is a 2D scalar wave equation example "
"(diffraction of a plane wave by a cylinder), with high order geometric "
"transformations and high order FEMs."
msgstr ""

