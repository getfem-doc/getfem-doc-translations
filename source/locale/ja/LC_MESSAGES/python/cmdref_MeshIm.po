# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/python/cmdref_MeshIm.rst:8
msgid "MeshIm"
msgstr ""

#: getfem.MeshIm:1 of
msgid "GeFEM MeshIm object"
msgstr ""

#: getfem.MeshIm:3 of
msgid ""
"This object represents an integration method defined on a whole mesh (an"
"  potentialy on its boundaries)."
msgstr ""

#: getfem.MeshIm:7 of
msgid "General constructor for MeshIm objects"
msgstr ""

#: getfem.MeshIm:9 of
msgid ""
"``MIM = MeshIm('load', string fname[, Mesh m])`` Load a MeshIm from a "
"file."
msgstr ""

#: getfem.MeshIm:12 of
msgid ""
"If the mesh `m` is not supplied (this kind of file does not store the "
"mesh), then it is read from the file and its descriptor is returned as "
"the second output argument."
msgstr ""

#: getfem.MeshIm:16 of
msgid ""
"``MIM = MeshIm('from string', string s[, Mesh m])`` Create a MeshIm "
"object from its string description."
msgstr ""

#: getfem.MeshIm:19 of
msgid "See also ``MeshIm.char()``"
msgstr ""

#: getfem.MeshIm:21 of
msgid "``MIM = MeshIm('clone', MeshIm mim)`` Create a copy of a MeshIm."
msgstr ""

#: getfem.MeshIm:24 of
msgid ""
"``MIM = MeshIm('levelset', MeshLevelSet mls, string where, Integ im[, "
"Integ im_tip[, Integ im_set]])`` Build an integration method conformal to"
" a partition defined implicitely by a levelset."
msgstr ""

#: getfem.MeshIm:28 of
msgid ""
"The `where` argument define the domain of integration with respect to the"
" levelset, it has to be chosen among 'ALL', 'INSIDE', 'OUTSIDE' and "
"'BOUNDARY'."
msgstr ""

#: getfem.MeshIm:32 of
msgid ""
"it can be completed by a string defining the boolean operation to define "
"the integration domain when there is more than one levelset."
msgstr ""

#: getfem.MeshIm:35 of
msgid "the syntax is very simple, for example if there are 3 different levelset,"
msgstr ""

#: getfem.MeshIm:38 of
msgid ""
"\"a*b*c\" is the intersection of the domains defined by each levelset "
"(this is the default behaviour if this function is not called)."
msgstr ""

#: getfem.MeshIm:42 of
msgid "\"a+b+c\" is the union of their domains."
msgstr ""

#: getfem.MeshIm:44 of
msgid ""
"\"c-(a+b)\" is the domain of the third levelset minus the union of the "
"domains of the two others."
msgstr ""

#: getfem.MeshIm:47 of
msgid ""
"\"!a\" is the complementary of the domain of a (i.e. it is the domain "
"where a(x)>0)"
msgstr ""

#: getfem.MeshIm:50 of
msgid ""
"The first levelset is always referred to with \"a\", the second with "
"\"b\", and so on."
msgstr ""

#: getfem.MeshIm:53 of
msgid "for intance INSIDE(a*b*c)"
msgstr ""

#: getfem.MeshIm:55 of
msgid ""
"CAUTION: this integration method will be defined only on the element cut "
"by the level-set. For the 'ALL', 'INSIDE' and 'OUTSIDE' options it is "
"mandatory to use the method ``MeshIm.set_integ()`` to define the "
"integration method on the remaining elements."
msgstr ""

#: getfem.MeshIm:60 of
msgid ""
"``MIM = MeshIm(Mesh m, [{Integ im|int im_degree}])`` Build a new MeshIm "
"object."
msgstr ""

#: getfem.MeshIm:63 of
msgid ""
"For convenience, optional arguments (`im` or `im_degree`) can be "
"provided, in that case a call to ``MeshIm.integ()`` is issued with these "
"arguments."
msgstr ""

#: getfem.MeshIm.adapt:1 of
msgid ""
"For a MeshIm levelset object only. Adapt the integration methods to a "
"change of the levelset function."
msgstr ""

#: getfem.MeshIm.char:1 of
msgid "Output a string description of the MeshIm."
msgstr ""

#: getfem.MeshIm.char:3 of
msgid "By default, it does not include the description of the linked Mesh object."
msgstr ""

#: getfem.MeshIm.convex_index:1 of
msgid "Return the list of convexes who have a integration method."
msgstr ""

#: getfem.MeshIm.convex_index:3 of
msgid "Convexes who have the dummy IM_NONE method are not listed."
msgstr ""

#: getfem.MeshIm.display:1 of
msgid "displays a short summary for a MeshIm object."
msgstr ""

#: getfem.MeshIm.eltm:1 of
msgid "Return the elementary matrix (or tensor) integrated on the convex `cv`."
msgstr ""

#: getfem.MeshIm.eltm:3 getfem.MeshIm.im_nodes:6 of
msgid "**WARNING**"
msgstr ""

#: getfem.MeshIm.eltm:5 of
msgid ""
"Be sure that the fem used for the construction of `em` is compatible with"
" the fem assigned to element `cv` ! This is not checked by the function !"
" If the argument `f` is given, then the elementary tensor is integrated "
"on the face `f` of `cv` instead of the whole convex."
msgstr ""

#: getfem.MeshIm.im_nodes:1 of
msgid "Return the coordinates of the integration points, with their weights."
msgstr ""

#: getfem.MeshIm.im_nodes:3 of
msgid ""
"`CVids` may be a list of convexes, or a list of convex faces, such as "
"returned by Mesh.region()"
msgstr ""

#: getfem.MeshIm.im_nodes:8 of
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have an"
" approximate integration method do not have their corresponding entry "
"(this has no meaning for exact integration methods!)."
msgstr ""

#: getfem.MeshIm.integ:1 of
msgid "Return a list of integration methods used by the MeshIm."
msgstr ""

#: getfem.MeshIm.integ:3 of
msgid ""
"`I` is an array of all Integ objects found in the convexes given in "
"`CVids`. If `CV2I` was supplied as an output argument, it contains, for "
"each convex listed in `CVids`, the index of its correspounding "
"integration method in `I`."
msgstr ""

#: getfem.MeshIm.integ:8 of
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have "
"any integration method have their correspounding entry in `CV2I` set to "
"-1."
msgstr ""

#: getfem.MeshIm.linked_mesh:1 of
msgid "Returns a reference to the Mesh object linked to `mim`."
msgstr ""

#: getfem.MeshIm.memsize:1 of
msgid "Return the amount of memory (in bytes) used by the MeshIm object."
msgstr ""

#: getfem.MeshIm.memsize:3 of
msgid "The result does not take into account the linked Mesh object."
msgstr ""

#: getfem.MeshIm.save:1 of
msgid "Saves a MeshIm in a text file (and optionaly its linked mesh object)."
msgstr ""

#: getfem.MeshIm.set_integ:1 of
msgid "Synopsis: MeshIm.set_integ(self,{Integ im|int im_degree}[, ivec CVids])"
msgstr ""

#: getfem.MeshIm.set_integ:3 of
msgid "Set the integration method."
msgstr ""

#: getfem.MeshIm.set_integ:5 of
msgid ""
"Assign an integration method to all convexes whose #ids are listed in "
"`CVids`. If `CVids` is not given, the integration is assigned to all "
"convexes. It is possible to assign a specific integration method with an "
"integration method handle `im` obtained via Integ('IM_SOMETHING'), or to "
"let getfem choose a suitable integration method with `im_degree` (choosen"
" such that polynomials of :math:`\\text{degree} \\leq "
"\\text{im\\_degree}` are exactly integrated. If `im_degree=-1`, then the "
"dummy integration method IM_NONE will  be used.)"
msgstr ""

