# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/wheel.rst:8
msgid ""
"Example of wheel in contact (Assembly between two meshes, transformations, "
"use of fixed size variables)"
msgstr "接触する車輪の例 (2 つのメッシュ間のアセンブリ、変換、固定サイズ変数の使用)"

#: ../source/tutorial/wheel.rst:10
msgid ""
"In this example of a deformable ''wheel'' enters in contact with a "
"deformable foundation. We use here python interface, translate this program "
"for another interface or in C++ is easy (see the previous example). The "
"complete program  `demo_wheel_contact.py` can be found in the directory "
"`interface/tests/python`."
msgstr ""
"変形可能な「車輪」のこの例では、変形した基礎と接触して入力されます。"
"私たちは、ここで python インターフェイスを使用し、別のインターフェイスまたは C++ でこのプログラムを翻訳するのは簡単です (前の例を参照)。"
"完全なプログラム `demo_wheel_contact.py` は、ディレクトリ `interface/tests/python` で見つけることができます。"

#: ../source/tutorial/wheel.rst:13
msgid "The problem setting"
msgstr "問題の設定"

#: ../source/tutorial/wheel.rst:15
msgid ""
"Let :math:`\\Omega^1 \\subset \\R^2` be the reference configuration of a 2D "
"wheel and :math:`\\Omega^2 \\subset \\R^2` the reference configuration of a "
"deformable foundation. We consider small deformation of these two bodies "
"(linearized elasticity) and the contact between them. We also consider that "
"the rim of the wheel is rigid and apply a vertical force on the wheel."
msgstr ""
":math:`\\Omega^1 \\subset \\R^2` は2D車輪の参照構成であり、 "
":math:`\\Omega^2 \\subset \\R^2` は変形可能な基礎の参照構成です。"
"これら2つの物体の微小変形 (線形化弾性) とそれらの間の接触を考慮します。"
"また、車輪の周縁は剛であり、車輪に垂直方向の力を適用することを考慮します。"

#: ../source/tutorial/wheel.rst:19
msgid "Building the program"
msgstr "プログラムのビルド"

#: ../source/tutorial/wheel.rst:22
msgid ""
"Let us begin by loading Getfem and fixing the parameters of the problem"
msgstr "Getfem をロードし、問題のパラメータを修正することから始めましょう"

#: ../source/tutorial/wheel.rst:43
msgid "Mesh generation"
msgstr "メッシュ生成"

#: ../source/tutorial/wheel.rst:45
msgid ""
"We consider that the radius of the wheel is 15cm and the one of the rim 8cm "
"and that the wheel lies on a deformable foundation of thickness 10cm. We "
"generate the mesh of the wheel using the experimental mesher of |gf|. "
"Concerning the mesh of the foundation, we build a structured mesh (see the "
"documentation of the Mesh object in the python interface)."
msgstr ""
"車輪の半径は15cm、周縁8cm のもので、車輪は厚さ10cm の変形可能な土台の上にあると考えています。"
"私たちは、 |gf| の実験メッシュを使用して、車輪の網目を生成します。"
"基礎のメッシュに関しては、構造化されたメッシュを構築します "
"(python インタフェースのメッシュオブジェクトのドキュメントを参照してください)。"

#: ../source/tutorial/wheel.rst:58
msgid "The result is the following"
msgstr "結果は以下のとおりです"

#: ../source/tutorial/wheel.rst:66
msgid "Boundary selection"
msgstr "境界の選択"

#: ../source/tutorial/wheel.rst:68
msgid ""
"We have to select the different parts of the boundary where we will set some"
" boundary conditions, namely the boundary of the rim (in order to apply a "
"force and the fact that the rim is rigid), the contact boundary of the wheel"
" and the bottom boundary of the foundation that we will assume clamped."
msgstr ""
"境界条件、すなわち周縁の境界 (周縁が剛体であるということを適用するために)、"
"車輪の接触境界、およびクランプされたと仮定する基礎の底部境界を設定するために、"
"異なる名前を選択しなければなりません。"

#: ../source/tutorial/wheel.rst:83
msgid ""
"Note that the command `mesh1.outer_faces_with_direction([0., -1.], n.pi/4)` "
"allows to select all the faces having a unit outward normal having an angle "
"less or equal to `n.pi/4` with the vector `[0., -1.]`. The command "
"`mesh1.region_subtract(CONTACT_BOUND, HOLE_BOUND)` allow to delete the faces"
" corresponding to the rim in the contact boundary."
msgstr ""
"コマンド `mesh1.outer_faces_with_direction([0., -1.], n.pi/4)` は、ベクトル `[0., -1.]` で "
"`n.pi/4` 以下の角度を持つ、外側の法線の単位を持つすべての面を選択することを可能にすることに注意してください。"
"コマンド`mesh1.region_subtract(CONTACT_BOUND, HOLE_BOUND)` は、接触境界のリムに対応する面を削除することを可能にします。"

#: ../source/tutorial/wheel.rst:86
msgid "Definition of finite elements methods and integration method"
msgstr "有限要素法の定義と積分法"

#: ../source/tutorial/wheel.rst:88
msgid ""
"We define `mfu1`, `mfu2` two finite element methods which will approximate "
"the displacements in the wheel and the foundation respectively. `mflambda` "
"is  finite element method to approximate a multiplier to take into account "
"the rigidity of the rim, `mflambda_C` is to approximate the contact "
"multiplier (contact pressure) and `mfvm1`, `mfvm2` will be used to "
"interpolate the Von Mises stresses of the wheel and the foundation for post-"
"processing. `mim1`, `mim2` are two integration methods on the  wheel and the"
" foundation."
msgstr ""
"車輪と基礎の変位をそれぞれ近似する `mfu1`, `mfu2` の2つの有限要素法を定義します。 "
"`mflambda` は、リムの剛性を考慮して乗数を近似する有限要素法であり、 `mflambda_C` は接触乗数(接触圧力) "
"を近似するためにあり、 `mfvm1`, `mfvm2` は、 Von Mises 応力を補間するために使用され、後処理の基礎となります。 "
"`mim1`, `mim2` は、車輪と基礎の2つの積分方法です。"

#: ../source/tutorial/wheel.rst:110
msgid "Model definition"
msgstr "モデル定義"

#: ../source/tutorial/wheel.rst:112
msgid ""
"We use a real model and declare the two variables which will represent the "
"displacements:"
msgstr "実際のモデルを使用して、変位を表す2つの変数を宣言します。"

#: ../source/tutorial/wheel.rst:121
msgid "Linearized elasticity bricks"
msgstr "線形弾性ブリック"

#: ../source/tutorial/wheel.rst:123
msgid ""
"We add the |Lame| coefficients as data of the model and add a linearized "
"elasticity brick for the wheel and the foundation:"
msgstr "|Lame| 係数をモデルのデータとして追加して使用し、車輪と基礎の線形化された弾性ブリックを追加します。"

#: ../source/tutorial/wheel.rst:133
msgid "Clamped condition at the bottom of the foundation"
msgstr "基礎の下部のクランプ状態"

#: ../source/tutorial/wheel.rst:135
msgid ""
"We prescribed the displacement at  bottom face of the foundation to vanish, "
"for instance with a multiplier with the add of the following brick:"
msgstr "例えば、次のブリックの追加と乗算で、基礎の底面を消去するためにに変位を規定しました。"

#: ../source/tutorial/wheel.rst:142
msgid "Contact condition (use of interpolate transformations)"
msgstr "接触条件 (補間変換の使用)"

#: ../source/tutorial/wheel.rst:144
msgid ""
"Now, let us see how to prescribed the contact condition between the two "
"structures. It is possible to use predefined bricks (see  :ref:`ud-model-"
"contact-friction` for small deformation/small sliding contact and :ref:`ud-"
"model-contact-friction-large` for large deformation/large sliding contact). "
"However, we will see here how to directly prescribe a contact condition "
"using an augmented Lagrangian formulation and the interpolate "
"transformations."
msgstr ""
"ここで、2つの構造の間の接触条件を規定する方法を見てみましょう。"
"定義済みのレンガを使用することができます (微小変型/微小滑りは :ref:`ud-model-"
"contact-friction` そして大変形/大滑りは :ref:`ud-model-contact-friction-large` を参照してください)。"
"ただし、ここでは、拡張Lagrangian定式化と補間変換を使用して接触条件を直接規定する方法について説明します。"

#: ../source/tutorial/wheel.rst:146
msgid ""
"For small deformation contact, the correspondence between points of one "
"contact surface to the other have to be described on the reference "
"configuration and is not evolving, which is of course simpler but is an "
"approximation."
msgstr ""
"微小変形接触では、1つの接触面の点間の対応が参照設定に記述されていて、進展していないため、もちろん単純ですが、近似値です。"

#: ../source/tutorial/wheel.rst:148
msgid ""
"We consider that the contact boundary of the wheel is the slave one and we "
"have to describe the transformation from the contact boundary of the wheel "
"to the contact boundary of the foundation. This is quite simple here, since "
"the contact boundary of the foundation corresponds to a vanishing vertical "
"coordinate. So we define the transformation"
msgstr ""
"車輪の接触境界がスレーブ1であることを考慮し、車輪の接触境界から基礎の接触境界までの変換を記述しなければなりません。"
"これは、基礎の接触境界が垂直座標の消失に対応するため、ここでは非常に簡単です。"
"そこで、変換を定義します。"

#: ../source/tutorial/wheel.rst:154
msgid ""
"where :math:`X` is the vector of coordinates of the point. We add this "
"transformation to the model with the command"
msgstr "ここで :math:`X` は、点の座標のベクトルです。この変換は、コマンドを使用してモデルに追加します。"

#: ../source/tutorial/wheel.rst:160
msgid ""
"As a consequence, it will be possible to use this transformation, from the "
"mesh of the wheel to the mesh of the foundation, into weak form language "
"expressions. Notes that this is here a very simple constant expression. More"
" complex expressions depending on the data or even the variables of the "
"model can be used. If the expression of a transformation depends on the "
"variable of the model, the tangent linear system will automatically takes "
"into account this dependence (see :ref:`ud-gasm-high-transf` for more "
"details. Note also that transformation corresponding to a large sliding "
"contact and automatically searching for the correspondence between contact "
"boundaries exist in |gf| (see :ref:`ud-model-contact-friction-large-hlgav`)."
msgstr ""
"その結果、車輪のメッシュから基礎のメッシュまで、この変換を弱形式の言語表現に使用することが可能になります。"
"これは非常に単純な定数式であることに注意してください。"
"データまたはモデルの変数に応じて、より複雑な式を使用できます。"
"変換の式がモデルの変数に依存する場合、接線線形システムでは、この依存関係が自動的に考慮されます"
" (詳細については、 :ref:`ud-gasm-high-transf` を参照してください)。"
"また、大すべり接触に対応し、接触境界間の対応を自動的に検索する変換が |gf| に存在することにも注意してください。 "
"( :ref:`ud-model-contact-friction-large-hlgav` を参照)。"

#: ../source/tutorial/wheel.rst:162
msgid ""
"Using the defined transformation, we can write an integral contact condition"
" using an augmented Lagrangian formulation (see :ref:`ud-model-contact-"
"friction` for more details). The corresponding term (to be added to the rest"
" of the weak formulation) reads:"
msgstr ""
"定義された変換を使用して、我々は、拡張Lagrangian式を使用して積分接触条件を記述することができます "
"(詳細については :ref:`ud-model-contact-friction` を参照)。"
"対応する項 (弱定式化の残りの部分に追加されます) は以下を読み取ります。"

#: ../source/tutorial/wheel.rst:169
msgid ""
"where :math:`\\Gamma_c` is the slave contact boundary, :math:`\\lambda_N` is"
" the contact multiplier (contact pressure), :math:`h_T` is the radius of the"
" element, :math:`\\Pi` is the transformation, `n` is the outward normal "
"vector to the master contact boundary (here :math:`n = (0,1)`), "
":math:`\\gamma_0` is an augmentation parameter, "
":math:`(\\cdot)_-:I\\hspace{-0.2em}R\\rightarrow I\\hspace{-0.2em}R_+` is "
"the negative part and :math:`\\delta_{\\lambda_N}, \\delta_{u^1}, "
"\\delta_{u^2}` are the test  functions corresponding to :math:`\\lambda_N, "
"u^1, u^2`, respectively."
msgstr ""
"ここで :math:`\\Gamma_c` はスレーブ接触境界であり、 "
":math:`\\lambda_N` は接触乗数 (接触圧) であり、 "
":math:`h_T` は要素の半径であり、 :math:`\\Pi` は変換であり、 "
"`n` はマスター接触境界への外向きの法線ベクトルです(ここで :math:`n = (0,1)`) "
":math:`\\gamma_0` は拡張パラメータであり、 "
":math:`(\\cdot)_-:I\\hspace{-0.2em}R\\rightarrow I\\hspace{-0.2em}R_+` は負の部分であり、"
" :math:`\\delta_{\\lambda_N}, \\delta_{u^1}, \\delta_{u^2}` はそれぞれ :math:`\\lambda_N, "
"u^1, u^2` に対応する試行関数です。"

#: ../source/tutorial/wheel.rst:171
msgid "Using the weak form language, the contact condition can be added by:"
msgstr "弱形式言語を使用すると、次の方法で接触条件を追加できます。"

#: ../source/tutorial/wheel.rst:184
msgid "Prescribing the rigidity of the rim and the vertical force"
msgstr "リムの剛性と垂直力の処理"

#: ../source/tutorial/wheel.rst:186
msgid ""
"We have now to prescribe the rigidity of the rim. This is a non-standard "
"condition, since we do not know a priori what will be the vertical "
"displacement of the rim. We can use an additional unknown for that vertical "
"displacement. We add an additional fixed size variable `alpha_D` (which mean"
" that it does not a finite element field) of size 1 with"
msgstr ""
"これでリムの剛性を規定しています。リムの垂直方向の変位が何であるかは未知であるため、非標準の状態です。"
"垂直変位のための追加の未知変数を使用することができます。"
"サイズ1の固定サイズ変数 `alpha_D` (有限要素フィールドではないことを意味します) を追加します。"

#: ../source/tutorial/wheel.rst:192
msgid ""
"We need a multiplier to prescribe the displacement on the rim boundary:"
msgstr "リム境界上の変位を規定する乗数が必要です。"

#: ../source/tutorial/wheel.rst:198
msgid ""
"This multiplier represents the boundary stress that is necessary to "
"prescribe the vertical displacement to be :math`(0, -\\alpha_D)`. The "
"constraint we want to apply on this multiplier is that its integral over the"
" rim boundary is the vertical force we want to apply. The corresponding weak"
" formulation term to be added to the rest of the weak formulation reads"
msgstr ""
"この乗数は、垂直方向の変位を規定するために必要な境界応力を表します :math`(0, -\\alpha_D)` 。"
"この乗数に適用する制約は、リム境界上の積分が、適用したい垂直方向の力であることです。"
"弱定式の残りの部分に追加される対応する弱定式項を読み取ります。"

#: ../source/tutorial/wheel.rst:204
msgid ""
"where :math:`\\Gamma_D` is the rim boundary, :math:`F` is the applied "
"density of force."
msgstr "ここで :math:`\\Gamma_D` は、リムの境界であり、 :math:`F` は、力の適用された密度です。"

#: ../source/tutorial/wheel.rst:206
msgid "This could be added to the model with the weak form language:"
msgstr "これは、弱形式言語でモデルに追加することができます。"

#: ../source/tutorial/wheel.rst:215
msgid ""
"For more robustness, a small penalization on :math:`alpha_D` can be added"
msgstr "よりロバスト性を向上させるために、 :math:`alpha_D` 上の小さなペナルティを追加することができます"

#: ../source/tutorial/wheel.rst:222
msgid ""
"Note that the fixed size variable `alpha_D` is linked to each points of the "
"rim boundary. This means that the line of the tangent matrix corresponding "
"to `alpha_D` may have a lot of nonzero components. This is why such a use of"
" fixed size variable have to be done with care."
msgstr ""
"固定サイズ変数 `alpha_D` は、リム境界の各ポイントにリンクされていることに注意してください。"
"これは、 `alpha_D` に対応する接線行列の線は、ゼロ以外の成分を多く持つことができることを意味します。"
"このため、固定サイズ変数の使用は慎重に行う必要があります。"

#: ../source/tutorial/wheel.rst:225
msgid "Model solve"
msgstr "モデル求解"

#: ../source/tutorial/wheel.rst:227
msgid "We can now solve our problem with:"
msgstr "私たちは今、問題を解くことができます :"

#: ../source/tutorial/wheel.rst:233
msgid ""
"Note that in some configuration, it is preferable to use a more basic line "
"search than the default one:"
msgstr "設定によっては、デフォルトのものよりも基本的な線形探索を使用する方が望ましいことに注意してください :"

#: ../source/tutorial/wheel.rst:241
msgid "Export the solution"
msgstr "解のエクスポート"

#: ../source/tutorial/wheel.rst:243
msgid "Now the code to export the solution with the VonMiss stress:"
msgstr "次に、VonMiss 応力を伴う解をエクスポートするコードを示します:"

#: ../source/tutorial/wheel.rst:270
msgid "Plot of the solution."
msgstr "解のプロット。"
