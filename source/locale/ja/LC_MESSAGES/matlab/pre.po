# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 101ace0097bd4ee8a36d423f51b56f6b
#: ../source/matlab/pre.rst:10
msgid "Preliminary"
msgstr ""

# 0c824ec2d07c4802b7910cf91516b395
#: ../source/matlab/pre.rst:12
msgid ""
"This is just a short summary of the terms employed in this manual. If you"
" are not familiar with finite elements, this should be useful (but in any"
" case, you should definitively read the :ref:`dp`)."
msgstr ""

# 3ba08efdcfeb4f78afcb0958613529ed
#: ../source/matlab/pre.rst:16
msgid ""
"The :envvar:`mesh` is composed of :envvar:`convexes`. What we call "
"convexes can be simple line segments, prisms, tetrahedrons, curved "
"triangles, of even something which is not convex (in the geometrical "
"sense). They all have an associated :envvar:`reference convex`: for "
"segments, this will be the :math:`[0,1]` segment, for triangles this will"
" be the canonical triangle :math:`(0,0)-(0,1)-(1,0)`, etc. All convexes "
"of the mesh are constructed from the reference convex through a "
":envvar:`geometric transformation`. In simple cases (when the convexes "
"are simplices for example), this transformation will be linear (hence it "
"is easily inverted, which can be a great advantage). In order to define "
"the geometric transformation, one defines :envvar:`geometrical nodes` on "
"the reference convex. The geometrical transformation maps these nodes to "
"the :envvar:`mesh nodes`."
msgstr ""

# a85ca86c7ee14432ae8f87a28d26a81e
#: ../source/matlab/pre.rst:28
msgid ""
"On the mesh, one defines a set of basis functions: the :envvar:`FEM`. A "
"FEM is associated at each convex. The basis functions are also attached "
"to some geometrical points (which can be arbitrarily chosen). These "
"points are similar to the mesh nodes, but **they don't have to be the "
"same** (this only happens on very simple cases, such as a classical "
":math:`P_1` fem on a triangular mesh). The set of all basis functions on "
"the mesh forms the basis of a vector space, on which the PDE will be "
"solved. These basis functions (and their associated geometrical point) "
"are the :envvar:`degrees of freedom` (contracted to :envvar:`dof`). The "
"FEM is said to be :envvar:`Lagrangian` when each of its basis functions "
"is equal to one at its attached geometrical point, and is null at the "
"geometrical points of others basis functions. This is an important "
"property as it is very easy to :envvar:`interpolate` an arbitrary "
"function on the finite elements space."
msgstr ""

# f5d52a7f39ae4a0286c5f996b9073609
#: ../source/matlab/pre.rst:41
msgid ""
"The finite elements method involves evaluation of integrals of these "
"basis functions (or product of basis functions etc.) on convexes (and "
"faces of convexes). In simple cases (polynomial basis functions and "
"linear geometrical transformation), one can evaluate analytically these "
"integrals. In other cases, one has to approximate it using "
":envvar:`quadrature formulas`. Hence, at each convex is attached an "
":envvar:`integration method` along with the FEM. If you have to use an "
"approximate integration method, always choose carefully its order (i.e. "
"highest degree of the polynomials who are exactly integrated with the "
"method): the degree of the FEM, of the polynomial degree of the "
"geometrical transformation, and the nature of the elementary matrix have "
"to be taken into account. If you are unsure about the appropriate degree,"
" always prefer a high order integration method (which will slow down the "
"assembly) to a low order one which will produce a useless linear-system."
msgstr ""

# d85f4c866ebd4895a78a305b06589a5b
#: ../source/matlab/pre.rst:55
msgid ""
"The process of construction of a global linear system from integrals of "
"basis functions on each convex is the :envvar:`assembly`."
msgstr ""

# c1a951cf68ec492ca4b9803e5e4c68d0
#: ../source/matlab/pre.rst:58
msgid ""
"A mesh, with a set of FEM attached to its convexes is called a "
":envvar:`mesh_fem` object in |gf|."
msgstr ""

# b5e1c315f5434386969e96d5efd4da9a
#: ../source/matlab/pre.rst:61
msgid ""
"A mesh, with a set of integration methods attached to its convexes is "
"called a :envvar:`mesh_im` object in |gf|."
msgstr ""

# 5d9e155143454d91adf3f3a5f38fbcb6
#: ../source/matlab/pre.rst:64
msgid ""
"A |mf| can be used to approximate scalar fields (heat, pression, ...), or"
" vector fields (displacement, electric field, ...). A |mim| will be used "
"to perform numerical integrations on these fields. Most of the finite "
"elements implemented in |gf| are scalar (however, :math:`TR_0` and edges "
"elements are also available). Of course, these scalar FEMs can be used to"
" approximate each component of a vector field. This is done by setting "
"the :math:`Qdim` of the |mf| to the dimension of the vector field (i.e. "
":math:`Qdim=1` :math:`\\Rightarrow` scalar field, :math:`Qdim=2` "
":math:`\\Rightarrow` 2D vector field etc.)."
msgstr ""

# 091ee81119a44f979e5852a7f61aee7a
#: ../source/matlab/pre.rst:73
msgid ""
"When solving a PDE, one often has to use more than one FEM. The most "
"important one will be of course the one on which is defined the solution "
"of the PDE. But most PDEs involve various coefficients, for example:"
msgstr ""

# d0f9c45cb324491cb4c2abd602d16a58
#: ../source/matlab/pre.rst:81
msgid ""
"Hence one has to define a FEM for the main unknown :math:`u`, but also "
"for the data :math:`\\lambda(x)` and :math:`f(x)` if they are not "
"constant. In order to interpolate easily these coefficients in their "
"finite element space, one often choose a Lagrangian FEM."
msgstr ""

# 4d0cd7ded0fa400085fb10cbb2c75b89
#: ../source/matlab/pre.rst:86
msgid ""
"The convexes, mesh nodes, and dof are all numbered. We sometimes refer to"
" the number associated to a convex as its :envvar:`convex id` (contracted"
" to :envvar:`cvid`). Mesh node numbers are also called :envvar:`point id`"
" (contracted to :envvar:`pid`). Faces of convexes do not have a global "
"numbering, but only a local number in each convex. Hence functions which "
"need or return a list of faces will always use a two-rows matrix, the "
"first one containing convex ids, and the second one containing local face"
" number."
msgstr ""

# 5740e884811240c0b8e2f3656177626c
#: ../source/matlab/pre.rst:94
msgid ""
"While the dof are always numbered consecutively, **this is not always the"
" case for point ids and convex ids**, especially if you have removed "
"points or convexes from the mesh. To ensure that they form a continuous "
"sequence (starting from 1), you have to call::"
msgstr ""

