# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 69ec58564a074ccda9dafdc6b580b049
#: ../source/matlab/cmdref_gf_compute.rst:8
msgid "gf_compute"
msgstr ""

# 4afee0b1d24147529bbe58025801324f
#: ../source/matlab/cmdref_gf_compute.rst:10
msgid "**Synopsis**"
msgstr ""

# 20b71929986a4702b176c3ff958bc2c7
#: ../source/matlab/cmdref_gf_compute.rst:31
msgid "**Description :**"
msgstr ""

# b510ebef12d14ac1ab30addd0325a247
#: ../source/matlab/cmdref_gf_compute.rst:35
msgid "Various computations involving the solution U to a finite element problem."
msgstr ""

# c00b2d64f3684a05a1fbc1c02bef469b
#: ../source/matlab/cmdref_gf_compute.rst:38
msgid "**Command list :**"
msgstr ""

# 7e33a50af7dc4f63b39e499864aa3641
#: ../source/matlab/cmdref_gf_compute.rst:42
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'L2 norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""

# 463e5cb7822d49c6a4f4c53f705fcfdf
#: ../source/matlab/cmdref_gf_compute.rst:44
msgid "Compute the L2 norm of the (real or complex) field `U`."
msgstr ""

# cae484b7f5954984b0ad8a667840ecaa
# b04625385fbe48439536e46b07587e4f
# 50397e830d0d47ec92132657a722f2c2
# 555c733fd7014ab89e7c8939872ed9ae
# 709fa772992e4f168296c9c14f80fcb2
# 4a981376985a406da4f98d920b1a988d
# 8cd22076694943a69b6d9cec1e4220a7
#: ../source/matlab/cmdref_gf_compute.rst:46
#: ../source/matlab/cmdref_gf_compute.rst:54
#: ../source/matlab/cmdref_gf_compute.rst:62
#: ../source/matlab/cmdref_gf_compute.rst:70
#: ../source/matlab/cmdref_gf_compute.rst:78
#: ../source/matlab/cmdref_gf_compute.rst:86
#: ../source/matlab/cmdref_gf_compute.rst:94
msgid ""
"If `CVids` is given, the norm will be computed only on the listed "
"elements."
msgstr ""

# c215f2008da147d6b32a7272db65fc80
#: ../source/matlab/cmdref_gf_compute.rst:50
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'L2 dist', mesh_im mim, mesh_fem "
"mf2, vec U2[, mat CVids])``"
msgstr ""

# 00e9d4c3a21042e9a95a6d17da60cad4
#: ../source/matlab/cmdref_gf_compute.rst:52
msgid "Compute the L2 distance between `U` and `U2`."
msgstr ""

# f64363d1b92c49c4a0c50191b224523a
#: ../source/matlab/cmdref_gf_compute.rst:58
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 semi norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""

# c134e83701bb4f76b937f3fd3eada774
#: ../source/matlab/cmdref_gf_compute.rst:60
msgid "Compute the L2 norm of grad(`U`)."
msgstr ""

# 78e972ef4cd04f1f9b3a9c3dd8851b49
#: ../source/matlab/cmdref_gf_compute.rst:66
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 semi dist', mesh_im mim, "
"mesh_fem mf2, vec U2[, mat CVids])``"
msgstr ""

# 5432354c31cd496883ea86a329ab9f8b
#: ../source/matlab/cmdref_gf_compute.rst:68
msgid "Compute the semi H1 distance between `U` and `U2`."
msgstr ""

# 179245c40b624fe3a34c29d34e943778
#: ../source/matlab/cmdref_gf_compute.rst:74
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""

# 1b9e5ba00d2a445fa119a8d4ef4a37a0
#: ../source/matlab/cmdref_gf_compute.rst:76
msgid "Compute the H1 norm of `U`."
msgstr ""

# 99d9c33a8eb94cce9d2075ce49d6dd2d
#: ../source/matlab/cmdref_gf_compute.rst:82
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H2 semi norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""

# 6ee2a06cbe084bf78be32638b32b5b07
#: ../source/matlab/cmdref_gf_compute.rst:84
msgid "Compute the L2 norm of D^2(`U`)."
msgstr ""

# a779917c13644e4ea79f54183dd25bf1
#: ../source/matlab/cmdref_gf_compute.rst:90
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H2 norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""

# 7d08bffafe8d41048aafedaeecac7d76
#: ../source/matlab/cmdref_gf_compute.rst:92
msgid "Compute the H2 norm of `U`."
msgstr ""

# 77cae704fb4c4e598fceb10ad27b1989
#: ../source/matlab/cmdref_gf_compute.rst:98
msgid "``DU = gf_compute(mesh_fem MF, vec U, 'gradient', mesh_fem mf_du)``"
msgstr ""

# 755bd58a15214c34aa2e8c2cd70739b2
#: ../source/matlab/cmdref_gf_compute.rst:100
msgid "Compute the gradient of the field `U` defined on mesh_fem `mf_du`."
msgstr ""

# 182377c9610f465bbefbf4930d3514b0
#: ../source/matlab/cmdref_gf_compute.rst:102
msgid ""
"The gradient is interpolated on the mesh_fem `mf_du`, and returned in "
"`DU`. For example, if `U` is defined on a P2 mesh_fem, `DU` should be "
"evaluated on a P1-discontinuous mesh_fem. `mf` and `mf_du` should share "
"the same mesh."
msgstr ""

# 34fa5cc4b0b749208064830719c6aa18
#: ../source/matlab/cmdref_gf_compute.rst:107
msgid ""
"`U` may have any number of dimensions (i.e. this function is not "
"restricted to the gradient of scalar fields, but may also be used for "
"tensor fields). However the last dimension of `U` has to be equal to the "
"number of dof of `mf`. For example, if `U` is a [3x3xNmf] array (where "
"Nmf is the number of dof of `mf`), `DU` will be a [Nx3x3[xQ]xNmf_du] "
"array, where N is the dimension of the mesh, Nmf_du is the number of dof "
"of `mf_du`, and the optional Q dimension is inserted if `Qdim_mf != "
"Qdim_mf_du`, where Qdim_mf is the Qdim of `mf` and Qdim_mf_du is the Qdim"
" of `mf_du`."
msgstr ""

# c36d785bf63642f38f95e12f054a257f
#: ../source/matlab/cmdref_gf_compute.rst:118
msgid "``HU = gf_compute(mesh_fem MF, vec U, 'hessian', mesh_fem mf_h)``"
msgstr ""

# b6eb403d263b473aad248744de699504
#: ../source/matlab/cmdref_gf_compute.rst:120
msgid "Compute the hessian of the field `U` defined on mesh_fem `mf_h`."
msgstr ""

# 1d6b72d7fc0a44f880559e182c888f5d
#: ../source/matlab/cmdref_gf_compute.rst:122
msgid "See also gf_compute('gradient', mesh_fem mf_du)."
msgstr ""

# ff4e4cfef5c94243950e168b07cf06f8
#: ../source/matlab/cmdref_gf_compute.rst:125
msgid ""
"``UP = gf_compute(mesh_fem MF, vec U, 'eval on triangulated surface', int"
" Nrefine, [vec CVLIST])``"
msgstr ""

# 5ee228a424764ac2adf6c2b47312bbf7
#: ../source/matlab/cmdref_gf_compute.rst:127
msgid ""
"[OBSOLETE FUNCTION! will be removed in a future release] Utility function"
" designed for 2D triangular meshes : returns a list of triangles "
"coordinates with interpolated U values. This can be used for the accurate"
" visualization of data defined on a discontinous high order element. On "
"output, the six first rows of UP contains the triangle coordinates, and "
"the others rows contain the interpolated values of U (one for each "
"triangle vertex) CVLIST may indicate the list of convex number that "
"should be consider, if not used then all the mesh convexes will be used. "
"U should be a row vector."
msgstr ""

# 738fd80a9d0940a6821467cb01347d6e
#: ../source/matlab/cmdref_gf_compute.rst:140
msgid ""
"``Ui = gf_compute(mesh_fem MF, vec U, 'interpolate on', {mesh_fem mfi | "
"slice sli | vec pts})``"
msgstr ""

# 02219b4f75a14adabdf3e8eed912be0d
#: ../source/matlab/cmdref_gf_compute.rst:142
msgid "Interpolate a field on another mesh_fem or a slice or a list of points."
msgstr ""

# 7edff63363bc458c9131594216fb86f1
#: ../source/matlab/cmdref_gf_compute.rst:145
msgid "Interpolation on another mesh_fem `mfi`:"
msgstr ""

# 3863289ef55545bdac06e122a266dc62
#: ../source/matlab/cmdref_gf_compute.rst:145
msgid ""
"`mfi` has to be Lagrangian. If `mf` and `mfi` share the same mesh object,"
" the interpolation will be much faster."
msgstr ""

# bd460acc35174133b2bee0e490a0c8c6
#: ../source/matlab/cmdref_gf_compute.rst:150
msgid "Interpolation on a slice `sli`:"
msgstr ""

# 6da51c59e3d54dbea4fca27b01d277bd
#: ../source/matlab/cmdref_gf_compute.rst:148
msgid ""
"this is similar to interpolation on a refined P1-discontinuous mesh, but "
"it is much faster. This can also be used with gf_slice('points') to "
"obtain field values at a given set of points."
msgstr ""

# 554fa1943367478f949925d92be66c70
#: ../source/matlab/cmdref_gf_compute.rst:152
msgid "Interpolation on a set of points `pts`"
msgstr ""

# 7393c8bfc2764c43b732c16ef9ea20bc
#: ../source/matlab/cmdref_gf_compute.rst:154
msgid "See also gf_asm('interpolation matrix')"
msgstr ""

# 74ccf45b0ce742aba530c64522373455
#: ../source/matlab/cmdref_gf_compute.rst:158
msgid "``Ue = gf_compute(mesh_fem MF, vec U, 'extrapolate on', mesh_fem mfe)``"
msgstr ""

# 4e5670f98bb04f689aa0be0e702fe943
#: ../source/matlab/cmdref_gf_compute.rst:160
msgid "Extrapolate a field on another mesh_fem."
msgstr ""

# cb0e0c6e55f24567b12a834effed5139
#: ../source/matlab/cmdref_gf_compute.rst:162
msgid ""
"If the mesh of `mfe` is stricly included in the mesh of `mf`, this "
"function does stricly the same job as gf_compute('interpolate_on'). "
"However, if the mesh of `mfe` is not exactly included in `mf` (imagine "
"interpolation between a curved refined mesh and a coarse mesh), then "
"values which are outside `mf` will be extrapolated."
msgstr ""

# fa68fd0188d841af9adc00d6efbd624a
#: ../source/matlab/cmdref_gf_compute.rst:169
msgid "See also gf_asm('extrapolation matrix')"
msgstr ""

# bf3d086f17dd4e3fb74068870b49a4a2
#: ../source/matlab/cmdref_gf_compute.rst:172
msgid "``E = gf_compute(mesh_fem MF, vec U, 'error estimate', mesh_im mim)``"
msgstr ""

# 0ad2ed46c93d4927bb931b134619780c
#: ../source/matlab/cmdref_gf_compute.rst:174
msgid "Compute an a posteriori error estimate."
msgstr ""

# 93c70ec261bb428390d3d34129acbe6a
# dfd54e51d43c431bac333ed56a5f1698
#: ../source/matlab/cmdref_gf_compute.rst:176
#: ../source/matlab/cmdref_gf_compute.rst:184
msgid ""
"Currently there is only one which is available: for each convex, the jump"
" of the normal derivative is integrated on its faces."
msgstr ""

# b70eb0fe3db9452294db07fd3c12ad54
#: ../source/matlab/cmdref_gf_compute.rst:180
msgid ""
"``E = gf_compute(mesh_fem MF, vec U, 'error estimate nitsche', mesh_im "
"mim, int GAMMAC, int GAMMAN, scalar lambda_, scalar mu_, scalar gamma0, "
"scalar f_coeff, scalar vertical_force)``"
msgstr ""

# 082b0c3b18854830832b663a28e41a8d
#: ../source/matlab/cmdref_gf_compute.rst:182
msgid "Compute an a posteriori error estimate in the case of Nitsche method."
msgstr ""

# 3fcdee710030419d904f70e11070ed5e
#: ../source/matlab/cmdref_gf_compute.rst:188
msgid ""
"``gf_compute(mesh_fem MF, vec U, 'convect', mesh_fem mf_v, vec V, scalar "
"dt, int nt[, string option[, vec per_min, vec per_max]])``"
msgstr ""

# 42db717432f748499b425865b019d37e
#: ../source/matlab/cmdref_gf_compute.rst:190
msgid ""
"Compute a convection of `U` with regards to a steady state velocity field"
" `V` with a Characteristic-Galerkin method. The result is returned in-"
"place in `U`. This method is restricted to pure Lagrange fems for U. "
"`mf_v` should represent a continuous finite element method. `dt` is the "
"integration time and `nt` is the number of integration step on the "
"caracteristics. `option` is an option for the part of the boundary where "
"there is a re-entrant convection. `option = 'extrapolation'` for an "
"extrapolation on the nearest element, `option = 'unchanged'` for a "
"constant value on that boundary or `option = 'periodicity'` for a "
"peridiodic boundary. For this latter option the two vectors per_min, "
"per_max has to be given and represent the limits of the periodic domain "
"(on components where per_max[k] < per_min[k] no operation is done). This "
"method is rather dissipative, but stable."
msgstr ""

# bd42c7bf17c6464f973a60c3c6a2faf3
#: ../source/matlab/cmdref_gf_compute.rst:208
msgid ""
"``[U2[,MF2,[,X[,Y[,Z]]]]] = gf_compute(mesh_fem MF, vec U, 'interpolate "
"on Q1 grid', {'regular h', hxyz | 'regular N', Nxyz | X[,Y[,Z]]})``"
msgstr ""

# 569585bc0d124c26908da59986fe3f9b
#: ../source/matlab/cmdref_gf_compute.rst:210
msgid ""
"Creates a cartesian Q1 mesh fem and interpolates U on it. The returned "
"field U2 is organized in a matrix such that in can be drawn via the "
"MATLAB command 'pcolor'. The first dimension is the Qdim of MF (i.e.  1 "
"if U is a scalar field)"
msgstr ""

# e709a5e59063486685f64d636c54d932
#: ../source/matlab/cmdref_gf_compute.rst:215
msgid ""
"example (mf_u is a 2D mesh_fem): >> Uq=gf_compute(mf_u, U, 'interpolate "
"on Q1 grid', 'regular h', [.05, .05]); >> pcolor(squeeze(Uq(1,:,:)));"
msgstr ""

