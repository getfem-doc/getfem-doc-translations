# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# cf5968ff6a9f48f9aaf5a7d7fc3550f9
#: ../source/gmm/first-step.rst:11
msgid "First steps with |gmm|"
msgstr ""

# d0f931505baa426fa8aa0cc571a949e1
#: ../source/gmm/first-step.rst:15
msgid "How can I invert a matrix ?"
msgstr ""

# 2e36a0f17982406db1b822c6df6e0dd4
#: ../source/gmm/first-step.rst:17
msgid ""
"It is not possible in |gmm| to invert all kind of matrices. For the "
"moment, the only mean to invert a matrix is to use the dense LU "
"decomposition (thus, only for dense matrices). An example::"
msgstr ""

# 926f6745b79f414389f13d9fe689a476
#: ../source/gmm/first-step.rst:32
msgid ""
"see the section corresponding to dense LU decomposition for more details."
" The type ``gmm::dense_matrix<double>`` can be replaced by "
"``gmm::row_matrix< std::vector<double> >`` or ``gmm::col_matrix< "
"std::vector<double> >``."
msgstr ""

# e49e4a2f42344ebeb39ec3c1d3c64869
#: ../source/gmm/first-step.rst:35
msgid "How can I solve a linear system ?"
msgstr ""

# 0ef2fd1fbd8c43419f2399ef36bb585d
#: ../source/gmm/first-step.rst:37
msgid ""
"You have more than one possibility to solve a linear system. If you have "
"a dense matrix, the best may be to use the LU decomposition. An example::"
msgstr ""

# f7217caee06e401caacf14adfb2fa379
#: ../source/gmm/first-step.rst:54
msgid ""
"If, now, you have a sparse system coming for example from a pde "
"discretization, you have various iterative solvers, with or without "
"preconditioners. This is an example with a precontionned GMRES::"
msgstr ""

# 196ac8beaeba4b29bb14e309823cbdfd
#: ../source/gmm/first-step.rst:75
msgid "How can I transform a vector into a matrix and reshape it ?"
msgstr ""

# 4c680c25c18b4829b3b7cf1a8b985299
#: ../source/gmm/first-step.rst:77
msgid ""
"In |gmm|, a vector is not considered as a matrix. If you need to use a "
"vector as a (1 by n) row matrix or (n by 1) column matrix in a "
"computation, you have to use::"
msgstr ""

# d2632a0008b94417a254dc193337f7bc
#: ../source/gmm/first-step.rst:84
msgid "for instance, you can transform a vector into a dense matrix with::"
msgstr ""

# 413acee5e2d34beb84527d0d13e2f956
#: ../source/gmm/first-step.rst:94
msgid "Then you can also reshape matrix ``M`` with::"
msgstr ""

# 8ce402e3210a44f1bf734ce929a31956
#: ../source/gmm/first-step.rst:100
msgid "What is the better way to resize a matrix ?"
msgstr ""

# c61beb37745f4cc99a5cdd1e313d7a02
#: ../source/gmm/first-step.rst:102
msgid ""
"You can change the dimensions of a matrix, if it is not a reference, "
"using::"
msgstr ""

# f4d7e9cd483047e18005c6bfdcc01b67
#: ../source/gmm/first-step.rst:106
msgid ""
"This function respects the intersection between the original matrix and "
"the resized matrix, and new components are set to zero. An important "
"thing is that it is based on the resize method of ``std::vector``, thus "
"no memory free is done when the size of the new matrix is smaller than "
"the original one."
msgstr ""

# 7cc3de6e32bb4a2fab64b5b9de0e96d2
#: ../source/gmm/first-step.rst:108
msgid ""
"If you do not need to keep old values of the components, or if you want "
"to really free the surplus of memory, you can resize a matrix using "
"``std::swap`` as follows::"
msgstr ""

# ddebaf2f23114056820a3223bb94c83c
#: ../source/gmm/first-step.rst:116
msgid "Of course, this works also for a vector."
msgstr ""

