# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 1cc6f242679e49d7ab60b1a19aff3e41
#: ../source/gmm/matrix.rst:10
msgid "Matrix and Vector type provided by |gmm|"
msgstr ""

# 72639e27f1ba48a7a0c927df44e439fc
#: ../source/gmm/matrix.rst:13
msgid ""
"The convention is that any vector or matrix type (except if it is a  "
"reference) can be instantiated with the constructors::"
msgstr ""

# e44a1684bf9547f58f779846e4912a58
#: ../source/gmm/matrix.rst:19
msgid ""
"No other constructor is used inside |gmm| and you should not use any "
"other if you want your code to be compatible with any matrix and vector "
"type."
msgstr ""

# 12a3372ab6944750bd25dd2e9e3f0848
#: ../source/gmm/matrix.rst:22
msgid ""
"It is assumed that each vector type interfaced with |gmm| allows to "
"access to a component with the following syntax::"
msgstr ""

# 6b6fd375c1984ed8b4f097da6b40024e
#: ../source/gmm/matrix.rst:29
msgid ""
"The write access being available if the vector is not a constant "
"reference. For a matrix::"
msgstr ""

# 0f0d8d98cb2741a880a3322036b5d496
#: ../source/gmm/matrix.rst:34
msgid ""
"Again the write access is available if the matrix is not a const "
"reference. Generally, especially for sparse matrices, this access is not "
"very efficient. Linear algebra procedures access to the components of the"
" vectors and matrices via iterators. (see section  :ref:`gmm-inside`)"
msgstr ""

# 1c7464779b964a278352f8d3366f9a59
#: ../source/gmm/matrix.rst:36
msgid ""
"It is also not recommended (at all) to use the original copy operator for"
" vectors or matrices. Generally, it will not do the appropriate job. "
"instead, you have to use the method::"
msgstr ""

# 0e881a86758a4b179a4a12e9bf79827e
#: ../source/gmm/matrix.rst:41
msgid ""
"which works for all correctly interfaced matrix and vector type, even if "
"``V`` is not of the same type as ``W`` (``V`` could be sparse and ``W`` "
"dense for instance)."
msgstr ""

# 65cc6c50c49d43ef8a77d6823cb513d7
#: ../source/gmm/matrix.rst:43
msgid ""
"in |gmm|, a vector is not a (n by 1) matrix, it is a one dimensional "
"object. If you need to use a vector as a (n by 1) column matrix or a (1 "
"by n) row matrix, you can do it with::"
msgstr ""

# 60fb87084e974dcf9ca0a671e94905f8
#: ../source/gmm/matrix.rst:50
msgid ""
"In the following, the template parameter ``T`` will represent a scalar "
"type like ``double`` or ``std::complex<double>``."
msgstr ""

# d2883cbd615a4e429e4e1f04d6db2229
#: ../source/gmm/matrix.rst:54
msgid "dense vectors"
msgstr ""

# 95594eeabb3d42d680e74aba2e7f1257
#: ../source/gmm/matrix.rst:56
msgid ""
"|gmm| interfaces ``std::vector<T>`` so you can use it as your basic dense"
" vector type. If you need to interface another type of dense vector you "
"can see in ``gmm/gmm_interface.h`` some examples."
msgstr ""

# 3cc694cfd64c4ddb8d15f7cc14e52db9
#: ../source/gmm/matrix.rst:61
msgid "sparse vectors"
msgstr ""

# ed1aa6635d4e40729562b6f52ca471b5
#: ../source/gmm/matrix.rst:63
msgid ""
"|gmm| provides two types of sparse vectors: ``gmm::wsvector<T>`` and "
"``gmm::rsvector<T>``. ``gmm::wsvector<T>`` is optimized for write "
"operations and ``gmm::rsvector<T>`` is optimized for read operations. It "
"should be appropriate to use ``gmm::wsvector<T>`` for assembling "
"procedures and then to copy the vector in a ``gmm::rsvector<T>`` for the "
"solvers. Those two vector types can be used to create row major or column"
" major matrices (see section  :ref:`gmmracmat`)."
msgstr ""

# 5441debb769d43e48f40fc093a18b325
#: ../source/gmm/matrix.rst:66
msgid "skyline vectors"
msgstr ""

# 4669658acade482dbc1a38b7bb4c7914
#: ../source/gmm/matrix.rst:68
msgid ""
"The type ``gmm::slvector<T>`` defines a skyline vector, in the sense that"
" only an interval of this vector is stored. With this type of vector you "
"can build skyline matrices as ``gmm::row_matrix< gmm::slvector<T> >`` "
"(see next section :ref:`gmmracmat`)."
msgstr ""

# 49f7c293dcc543d9a7bc4f126d00bfc8
#: ../source/gmm/matrix.rst:73
msgid "generic row and column matrices"
msgstr ""

# b0ff70223fe744a2bf712de810a4fe74
#: ../source/gmm/matrix.rst:75
msgid ""
"|gmm| provides the two following types of matrices: "
"``gmm::row_matrix<VECT>`` and ``gmm::col_matrix<VECT>`` where ``VECT`` "
"should be a valid (i.e. interfaced) vector type. Those two type of "
"matrices store an array of ``VECT`` so the memory is not contiguous. "
"Initializations are::"
msgstr ""

# b22c72d81ddb4ad98d130093afac9980
#: ../source/gmm/matrix.rst:81
msgid ""
"Of course ``gmm::row_matrix<VECT>`` is a row matrix and it is impossible "
"to access to a particular column of this matrix."
msgstr ""

# 1ecf1a4a1eeb4a1697e0922f7b712179
#: ../source/gmm/matrix.rst:84
msgid ""
"``gmm::mat_nrows(M)`` gives the number of rows of a matrix and "
"``gmm::mat_ncols(M)`` the number of columns."
msgstr ""

# ee2dfd8f08774c04a064399fa084995b
#: ../source/gmm/matrix.rst:87
msgid "dense matrices"
msgstr ""

# c93c539c8d8a4883814009336b5e1cd8
#: ../source/gmm/matrix.rst:89
msgid "It is recommended to use the type::"
msgstr ""

# a79f0ba2d8af42eeb2e8c1a0402bce7e
#: ../source/gmm/matrix.rst:93
msgid ""
"to represent a dense matrix type because it is compatible with the "
"Fortran format (column major) and some operations are interfaced with "
"blas and Lapack (see section  :ref:`gmm-lapack`). It is considered as a "
"column and row matrix (column preferred) which means that you can access "
"both to the columns and rows."
msgstr ""

# e5f476ef2fdc435a959be5180f5c2b4f
#: ../source/gmm/matrix.rst:95
msgid ""
"However, matrix types as ``gmm::row_matrix< std::vector<double> >`` or "
"``gmm::col_matrix< std::vector<double> >`` represent also some dense "
"matrices."
msgstr ""

# 7d23af7fc02c469585c961efd8037ea4
#: ../source/gmm/matrix.rst:98
msgid "sparse matrices"
msgstr ""

# 6ba941e8dfb0480dba6b520ae57b40bf
#: ../source/gmm/matrix.rst:100
msgid ""
"Similarly, ``gmm::row_matrix< gmm::wsvector<double> >`` or "
"``gmm::col_matrix< gmm::rsvector<double> >`` represents some sparse "
"matrices, but |gmm| provides also two types of classical sparse matrix "
"types::"
msgstr ""

# a45c9a5dabf24b9c92af260c971889d3
#: ../source/gmm/matrix.rst:105
msgid ""
"The type ``gmm::csr_matrix<T>`` represents a compressed sparse row matrix"
" and ``gmm::csc_matrix<T>`` a compressed sparse column matrix. The "
"particularity of these two types of matrices is to be read only, in the "
"sense that it is not possible to access at a particular component to "
"write on it (the operation is too expansive). The only write operation "
"permitted is ``gmm::copy``. The right way to use these matrices is first "
"to execute the write operations on another type of matrix like "
"``gmm::row_matrix< gmm::wsvector<double> >`` then to do a copy::"
msgstr ""

# 6ab0ac21b1454feab4379aec6008642e
#: ../source/gmm/matrix.rst:117
msgid ""
"Matrices ``gmm::csr_matrix<T>`` and ``gmm::csc_matrix<T>`` have the "
"advantage to have a standard format (interfacable with Fortran code) and "
"to have a compact format (contiguous in memory). To be able to be "
"compatible with Fortran programs a second template parameter exists on "
"these type, you can declare::"
msgstr ""

# 1d0d423c613f4189b62b6a8022dfb457
#: ../source/gmm/matrix.rst:122
msgid "The ``1`` means that a shift will be done on all the indices."
msgstr ""

