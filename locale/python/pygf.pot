# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/python/pygf.rst:4
# 5cf8111ed4d149c99a545b97f0d77780
msgid "|py| |gf| interface"
msgstr ""

#: ../source/python/pygf.rst:7
# 9d29fbb763df43f6b5c1892d9d4b227b
msgid "Introduction"
msgstr ""

#: ../source/python/pygf.rst:9
# c63f66ebdc694159b9cfe746fc9f09f8
msgid "|gf| provides an interface to the |py| scripting language. |py| is a nice, cross-platform, and free language. With the addition of the numpy package, python provides a subset of Matlab functionalities (i.e. dense arrays). The `VTK`_ toolkit may provide visualization tools via its python interface (or via `MayaVi`_), and data files for `OpenDX`_  may be exported. In this guide, nevertheless, to visualize the results, we will export to `Gmsh`_ post-processing format. The sparse matrix routines are provided by the getfem interface."
msgstr ""

#: ../source/python/pygf.rst:18
# fd20ec6ac04b4491a82d2adfa59e63e0
msgid "The python interface is available via a python module getfem.py. In order to use the interface you have to load it with::"
msgstr ""

#: ../source/python/pygf.rst:24
# c2f748cb6f9d4267b8472a9d704ec1b6
msgid "or::"
msgstr ""

#: ../source/python/pygf.rst:29
# 164b285d996949e6a9ff0ec387c1e862
msgid "If the getfem.py (and the internal \\_getfem.so) module is not installed in a standard location for python, you may have to set the ``PYTHONPATH`` environment variable to its location. For example with::"
msgstr ""

#: ../source/python/pygf.rst:38
# 55a53ea2177c4ef3b54ff937bef6458a
msgid "Parallel version"
msgstr ""

#: ../source/python/pygf.rst:40
# 360067d795124a84bc71abf43b866117
msgid "The python interface is the only one for the moment to interface the mpi based parallel version of Getfem. See :ref:`ud-parallel`."
msgstr ""

#: ../source/python/pygf.rst:43
# e2f898f14a924589bfecb7e727bbc139
msgid "Memory Management"
msgstr ""

#: ../source/python/pygf.rst:45
# df5505f7dba84d5481f8360421eea448
msgid "A nice advantage over the Matlab interface is that you do not have to explicitly delete objects that are not used any more, this is done automagically. You can however inspect the content of the getfem workspace with the function ``getfem.memstats()``."
msgstr ""

#: ../source/python/pygf.rst:51
# d0f92042f7cd48f29d8573e6e23f9e32
msgid "Documentation"
msgstr ""

#: ../source/python/pygf.rst:53
# c4dacb2dd4e24232a3741d4cebed1db9
msgid "The `getfem` module is largely documented. This documentation has been extracted into the :ref:`api`. The getfem-matlab user guide may also be used, as 95% of its content translates quite directly into python (with the exception of the plotting functions, which are specific to matlab)."
msgstr ""

#: ../source/python/pygf.rst:59
# 7d5e0762960d444f9e7960ac20402fe1
msgid "|py| |gf| organization"
msgstr ""

#: ../source/python/pygf.rst:61
# 722d3152abac4796a72b7d6eea54c3c8
msgid "The general organization of the python-interface is the following:"
msgstr ""

#: ../source/python/pygf.rst:63
# a47415076fe34e2aa7df4cdd98a9b320
msgid "Each class from the matlab interface has a corresponding class in the python interface: the gfMesh class becomes the getfem.Mesh class in python, the gfSlice becomes the getfem.Slice etc."
msgstr ""

#: ../source/python/pygf.rst:66
# 467173aacce84ac7a2c9b732253fdfa4
msgid "Each get and set method of the matlab interface has been translated into a method of the corresponding class in the python interface. For example::"
msgstr ""

#: ../source/python/pygf.rst:72
# 0cd6b0f3f7014b83a61d31aa2203d32f
msgid "becomes::"
msgstr ""

#: ../source/python/pygf.rst:77
# 2e42e256ea934204b9b143e0d2051771
msgid "Some methods have been renamed when there was ambiguity, for example ``gf_mesh_set(m, 'pts', P)`` is ``m.set_pts(P)``."
msgstr ""

#: ../source/python/pygf.rst:79
# 03134e24ded5431dabd60a2d35984746
msgid "The other getfem-matlab function have a very simple mapping to their python equivalent:"
msgstr ""

#: ../source/python/pygf.rst:83
# 16b75a71f161486cb820a92773e19fdc
msgid "gf_compute(mf,U,'foo',...)"
msgstr ""

#: ../source/python/pygf.rst:83
# f752228834e24d4990a4a762823904bf
msgid "getfem.compute_foo(mf,U) or getfem.compute('foo',...)"
msgstr ""

#: ../source/python/pygf.rst:86
# 9809fa2503b64b919a9d3964092d2320
msgid "gf_asm('foobar',...)"
msgstr ""

#: ../source/python/pygf.rst:86
# 97f97e38cb1745778470f8cea3deee47
msgid "getfem.asm_foobar(...) or getfem.asm('foobar',...)"
msgstr ""

#: ../source/python/pygf.rst:89
# f69bf80b7d1540a59d3d8ac700423033
msgid "gf_linsolve('gmres',...)"
msgstr ""

#: ../source/python/pygf.rst:89
# 1e9bb25cd22e448890cd16076ca95ee0
msgid "getfem.linsolve_gmres(...) or getfem.linsolve('gmres',...)"
msgstr ""

#: ../source/python/pygf.rst:97
# d07d273db8704fdfb0d649f97df96aa4
msgid "python-getfem interface main objects hierarchy."
msgstr ""

#: ../source/python/pygf.rst:101
# abb60436c00445a79ebf7bb13842a185
msgid "Descriptor for a convex structure objects, stores formal information convex structures (nb. of points, nb. of faces which are themselves convex structures)"
msgstr ""

#: ../source/python/pygf.rst:107
# 580fd176a2e74d4dac99345c6ff1ea6a
msgid "Descriptor for geometric transformations objects (defines the shape/position of the convexes)."
msgstr ""

#: ../source/python/pygf.rst:112
# ce975659c5734d218d6d9e2b5ddb93c0
msgid "Descriptor for mesh structure (nodes, convexes, geometric transformations for each convex)."
msgstr ""

#: ../source/python/pygf.rst:117
# 40f8a76d38a04ff583ba70844889e1b3
msgid "Descriptor for FEM (Finite Element Method) objects (one per convex, can be PK, QK, HERMITE, etc...)."
msgstr ""

#: ../source/python/pygf.rst:122
# f0255bb43b02404e87a8137b42921976
msgid "Descriptor for Integration Method objects (exact, quadrature formula\\ldots). Although not linked directly to GeoTrans, an integration method is usually specific to a given convex structure."
msgstr ""

#: ../source/python/pygf.rst:128
# 8a11df940eb14598a6e91ef10843d6a7
msgid "Descriptor for object linked to a mesh, where each convex has been assigned a FEM."
msgstr ""

#: ../source/python/pygf.rst:133
# 285e508bceb04f8599fbfd5ef9993fe6
msgid "Descriptor for object linked to a mesh, where each convex has been assigned an integration method."
msgstr ""

#: ../source/python/pygf.rst:138
# 61cd132b18b245b0bdcaa0560c0acefe
msgid "Descriptor for *model* object, holds the global data, variables and description of a model. Evolution of *model state* and *model brick* object for 4.0 version of |gf|."
msgstr ""

