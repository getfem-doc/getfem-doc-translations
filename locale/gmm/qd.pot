# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/gmm/qd.rst:11
# b0be7ce7095c4b4ea473554b9e8f7f21
msgid "How to use |gmm| with QD type (double-double and quad-double)"
msgstr ""

#: ../source/gmm/qd.rst:13
# 83cc53d5ce6c43ca9b538f564423adb4
msgid "The QD library (see http://www.cs.berkeley.edu/\\verb\\~\\yozo or http://www.nersc.gov/\\verb\\~\\dhb/mpdist/mpdist.html) is an efficient library for double-double (32 decimal digits) and quad-double (approx. 64 decimal digits). Once you installed this library on your system you have to link your program with QD library (with -lqd). In your program, include the header files of QD with::"
msgstr ""

#: ../source/gmm/qd.rst:20
# 38c2e9784da04f42b6bf2eb6402e0cce
msgid "Then the two type ``dd_real`` and ``qd_real`` will be usable with |gmm|. You will also be able to use ``std::complex<dd_real>`` and ``std::complex<qdreal>``"
msgstr ""

#: ../source/gmm/qd.rst:22
# 6c18847769c14bb782bb9128c6262742
msgid "IMPORTANT : do not forget to initialize QD before using it with the following call::"
msgstr ""

#: ../source/gmm/qd.rst:27
# 7ded7d9d1abd4ee583365d68e9a3d224
msgid "This disables the 80 bits precision of x86 processors which conflicts with QD. Once you finished to use QD you can reactivate it with::"
msgstr ""

#: ../source/gmm/qd.rst:31
# e29cd9cf401c478b8cf7968f2806edc4
msgid "(see the QD documentation for more details)."
msgstr ""

