# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-15 02:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/model_plasticity_small_strain.rst:14
# eb2be8b124614852a8595567d9834aa5
msgid "Small strain plasticity"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:16
# eb99d24920414439a34599bbfab1e065
msgid "A framework for the approximation of plasticity models in |gf|. See in :file:`src/getfem_plasticity.cc` and :file:`interface/src/gf_model_set.cc` for the brick implementation and to extend the implementation to new plasticity models."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:20
# 603db4ea600648749f67354747b39704
msgid "Theoretical background"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:22
# 10258d493eaf42e7bca6880606c9a26e
msgid "We present a short introduction to small strain plasticity. We refer mainly to [SI-HU1998]_ and [SO-PE-OW2008]_ for a more detailed presentation."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:25
# 7875f2b62fb148568ace67243da38f44
msgid "Additive decomposition of the small strain tensor"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:27
# 785ad48fe4ca4b199bfbab573c15a858
msgid "Let :math:`\\Omega \\subset \\R^3` be the reference configuration of a deformable body and :math:`u : \\Omega \\rightarrow \\R^3` be the displacement field. Small strain plasticity is based on the additive decomposition of the small strain tensor :math:`\\varepsilon(u) = \\Frac{\\nabla u + \\nabla u^T}{2}` in"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:32
# 50ca42342e824c77a8ddfda2f05c5319
msgid "where :math:`\\varepsilon^e` is the elastic part of the strain tensor and :math:`\\varepsilon^p` the plastic one."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:35
# f6ccfecaf44c419b878039a9a312a924
msgid "Internal variables, free energy potential and elastic law"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:37
# af7647d5dc3d409f9161411bff6d8aa8
msgid "We consider"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:42
# 1ad141dd355f4904a8272252c945f3ce
msgid "a vector field of :math:`d_{\\alpha}` strain type internal variables (:math:`d_{\\alpha} = 0` if no internal variables are considered). We consider also a free energy potential"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:47
# 119ebf4addf640258586b8f6c17e587d
msgid "such that corresponding stress type variables are determined by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:52
# 9993bb19719145538af3baa0c1d3a341
msgid "where :math:`\\sigma` is the Cauchy stress tensor and :math:`A` the stress type internal variables. The plastic dissipation is given by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:58
# cf3337f59b884c32bf2b22c66e0e3807
msgid "In the standard cases, :math:`\\psi(\\varepsilon^e, \\alpha)` is decomposed into"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:62
# b2b80be96cdf4c3cb91b33eaa61c5ab2
msgid "In the case of linearized elasticity, one has :math:`\\psi^e(\\varepsilon^e) = \\frac{1}{2} ({\\cal A}\\varepsilon^e) :\\varepsilon^e` where :math:`{\\cal A}` is the fourth order elasticity tensor. For isotropic linearized elasticity this expression reduces to :math:`\\psi^e(\\varepsilon^e) = \\mu \\mbox{dev}(\\varepsilon^e) : \\mbox{dev}(\\varepsilon^e) + \\frac{1}{2} K (\\mbox{tr}(\\varepsilon^e))^2` where :math:`\\mu` is the shear modulus and :math:`K = \\lambda + 2\\mu/3` is the bulk modulus."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:67
# 8b3bda5c46cb4eb8b7207bf535b3992e
msgid "Plastic potential, yield function and plastic flow rule"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:69
# a94a59e18ff047d59fdcf2810c23d23f
msgid "Plastic yielding is supposed to occur when the stress attains a critical value. This limit is determined by a yield function :math:`f(\\sigma, A)` and the condition"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:73
# 15bf2d42a5bc47a58caf2c837f282e8a
msgid "The surface :math:`f(\\sigma, A) = 0` is the yield surface where the plastic deformation may occur."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:75
# 2c6f3b63f7cd4e43879a0dd7cd8e1ec6
msgid "Let us also consider the plastic potential :math:`\\Psi(\\sigma, A)`, (convex with respect to its both variables) which determines the plastic flow direction in the sense that the flow rule is defined as"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:79
# a87ed3c66f394177b68790924c7d9c2a
msgid "with the additional complementarity condition"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:83
# ce74a1eb7a0c4fd3a683e5c460be64e5
msgid "The variable :math:`\\gamma` is called the plastic multiplier. Note that when :math:`\\psi(\\varepsilon^e, \\alpha), f(\\sigma, A) \\mbox{ or } \\Psi(\\sigma, A)` are not differentiable, subdifferentials have to be used. Associated plasticity corresponds to the choice :math:`\\Psi(\\sigma, A) = f(\\sigma, A)`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:86
# 40a453c13c3e4ffca74f4e7f61c37476
msgid "Initial boundary value problem"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:88
# f088f48fcb9046f0864a0afb99974541
msgid "The weak formulation of a dynamic elastoplastic problem can be written, for an arbitrary kinematically admissible test function :math:`v`, as follows:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:98
# c5a9c62372fa401cb3dbc8f881f27244
msgid "for :math:`u_0, \\mathrm{v}_0, \\varepsilon^p_0, \\alpha_0` being initial values and :math:`f` and :math:`g` being prescribed forces in the interior of domain :math:`\\Omega` and on the part of the boundary :math:`\\Gamma_N`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:100
# c26a1beb9bf0421fb1e360932a00fbb7
msgid "Note that plasticity models are often applied on quasi-static problems which correspond to the term :math:`\\rho \\ddot{u}` being neglected."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:102
# 31f87b799c65412c8a11c3bcf8d338b7
msgid "Given a time step :math:`\\Delta t = t_{n+1} -t_n`, from time :math:`t_n` to :math:`t_{n+1}`, we will denote in the sequel :math:`u_n, \\varepsilon^p_n  \\mbox{ and } \\alpha_n` the approximations at time :math:`t_n` of :math:`u(t_n), \\varepsilon^p_n(t_n) \\mbox{ and } \\alpha(t_n)` respectively. These approximations correspond to the chosen time integration scheme (for instance one of the proposed schemes in :ref:`ud-model-time-integration`) which can be different than the time integration scheme used for the integration of the flow rule (see below)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:106
# 5606bc2f44f04e559afd48f5ed4ba1fd
msgid "Flow rule integration"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:108
# 83d4bc74e65b4529922626cc5182bb45
msgid "The plastic flow rule has to be integrated with its own time integration scheme. Among standards schemes, the backward Euler scheme, the :math:`\\theta`-scheme (or generalized trapezoidal rule) and the generalized mid-point scheme are the most commonly used in that context. We make here the choice of the :math:`\\theta`-scheme (:math:`\\theta = 1` corresponds to the backward Euler scheme as a special case)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:111
# 1bd9b8177c6b4e629339ddc023ef2305
msgid "Let :math:`u_{n+1}` be the displacement at the considered time step and  :math:`u_{n}` at the previous one."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:113
# 331eebdcc51c4891ad27ac84754d10ce
msgid "The :math:`\\theta`-scheme for the integration of the plastic flow rules reads as"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:121
# eeb1504c9ced40fca9ff8c4eeb0ade12
msgid "with the complementary condition"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:125
# 29dacecaebec40b5bdbdc3ad87cfb75e
msgid "where :math:`0 < \\theta \\le 1` is the parameter of the :math:`\\theta`-scheme. We exclude :math:`\\theta = 0` because we will not consider explicit integration of plasticity. Let us recall that :math:`\\theta = 1` corresponds to the backward Euler scheme and :math:`\\theta = 1/2` to the Crank-Nicolson scheme (or trapezoidal rule) which is a second order consistent scheme. Note that the complementarity condition for the quantities at time step :math:`n` is prescribed at the previous time step (:math:`\\sigma_{n}, \\alpha_n, \\mbox{and } \\gamma_n` are supposed to be already determined)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:127
# f5a20b86ecf44460bbd055235b41a3b4
msgid "A solution would be to solve the whole problem with all the unknows, that is :math:`u_{n+1},  \\gamma_{n+1}, \\varepsilon^p_{n+1} \\mbox{ and } A_{n+1}`. This is of course possible but would be a rather expensive strategy because of the resulting high number of degrees of freedom. A classical strategy (the return mapping one for instance, see [SO-PE-OW2008]_ or the closest point projection one) consist in integrating locally the plastic flow on each Gauss point of the considered integration method separately, or more precisely to consider on each Gauss point the maps"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:136
# a5cb7acfebad4809a863976a0f8874f1
msgid "with :math:`\\eta_n, \\zeta_{n}` the right hand side of equations :eq:`thetascheme1`, :eq:`thetascheme2`, i.e."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:143
# 0d8ff4502af14a72814dab94bd56e9c8
msgid "This means in particular that :math:`(\\varepsilon^p_{n+1}, \\alpha_{n+1}) = ({\\mathscr E}^p(u_{n+1},  \\zeta_n, \\eta_n), {\\mathscr A}(u_{n+1}, \\zeta_{n}, \\eta_n))` is the solution to equations :eq:`thetascheme1` and :eq:`thetascheme2`. Both these maps and their tangent moduli (usually called consistent tangent moduli) are then used in the global solve of the problem with a Newton method and for :math:`u_{n+1}` the unique remaining variable. The advantage of the return mapping strategy is that the unique variable of the global solve is the displacement :math:`u_{n+1}`. A nonlinear solve on each Gauss point is often necessary which is usualy performed with a local Newton method."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:145
# 7bfc5da8be6341fda58e3bb95ea614d3
msgid "In |gf| we propose both the return mapping strategy and also an alternative strategy developped below which is mainly inspired from  [PO-NI2016]_,  [SE-PO-WO2015]_ and [HA-WO2009]_ and allow more simple tangent moduli. It consists in keeping (a multiple of) :math:`\\gamma_{n+1}` as an additional unknown with respect to :math:`u_{n+1}`. As we will see, this will allow a more generic treatment of the yield functions, the price for the simplicity being this additional unknown scalar field."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:147
# 8e28545a4ac8471ab23763e71292f7dc
msgid "First, we consider an additional (and optional) given function :math:`\\alpha(\\sigma_{n+1}, A_{n+1}) > 0` whose interest will appear later on (it will allow simple local inverses) and the new unknown scalar field"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:151
# 0462759ee86f41a096ad7a1487defb94
msgid "so that our two main unknows are now :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}`. The discretized plastic flow rule integration now reads:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:163
# edbfab84786c43359944e23b675b9db4
msgid "For :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}` be given, we define the two maps"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:171
# c1bdff5c6a0b47d091005f9746ea7990
msgid "where the pair :math:`(\\varepsilon^p_{n+1}, \\alpha_{n+1}) = (\\tilde{\\mathscr E}^p(u_{n+1}, \\theta \\xi_{n+1}, \\zeta_{n}, \\eta_n), \\tilde{\\mathscr A}(u_{n+1}, \\theta \\xi_{n+1}, \\zeta_{n}, \\eta_n))` is the solution to equations :eq:`flowrule1`, :eq:`flowrule2` (without the consideration of  :eq:`flowrule3`). We will see later, that, at least for simple isotropic plastic flow rules, these maps have a simple expression, even sometimes a linear one with respect to :math:`u_{n+1}`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:173
# 51dfbca19053440093436b08ec12362c
msgid "Still :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}` be given the stress :math:`\\sigma_{n+1}` reads"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:179
# a28bfc427e2b421fa233dea1422a2035
msgid "The complementarity equation :eq:`flowrule3` is then prescribed with the use of a well chosen complementarity function, as in [HA-WO2009]_ for :math:`r > 0` such as:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:183
# c4c6f2772ad742918f36b618a072bf34
msgid "or"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:187
# 33cc7b2c6d9f45f7b4d4341d7ff56c5e
msgid "NOTE : The notation :math:`\\Delta \\xi_{n+1} = \\Delta t \\xi_{n+1}` is often used in the litterature. The choice here is to preserve the distinction between the two quantities, mainly because ot the possible use of adaptative time step : when the time step is changing, the value :math:`\\xi_n` has to be multiplied by the new time step, so that it is preferable to store :math:`\\xi_n` instead of :math:`\\Delta \\xi_{n}` when using the :math:`\\theta`-scheme."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:191
# 86c83dfc310c4a6e897de9e9f12bad13
msgid "Plane strain approximation"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:193
# a36651abaf1f46b5862782ee3e9d8e54
msgid "A plane strain approximation is a 2D problem which corresponds to the deformation of a long cylindrical object where the strain in the length direction (assumed to be along the :math:`z` axis) is considered small compared to the ones in the other directions and is neglected. It result in a plane strain tensor of the form"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:197
# aaf03c96d09248608418e51cf55c78ca
msgid "We denote"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:201
# b5bc15259f0c42899fec2c9c4519c03f
msgid "the non neglected components of the strain tensor. In the decomposition of plastic and elastic part of the strain tensor, we assume"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:206
# cad02d626ead43ecaa41b7bb06513b41
msgid "and"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:210
# ce4f4b4ede504ed8ac53f76b6f15a642
msgid "The adaptation to the plane strain approximation to plastic model is most of the time an  easy task. An isotropic linearized elastic response reads"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:214
#: ../source/userdoc/model_plasticity_small_strain.rst:316
# 6d5b25bce0964cfd9aedb23bbc13c836
# 88bb781fb56c471eb2e9ad53c7128ece
msgid "and thus"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:218
# 2f9713b0e4a444b6a8e5cc5155ad308f
msgid "The nonzero :math:`\\sigma_{3,3}` component of the stress tensor is given by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:222
# 3adde0c3d2ab401fb04f933aeb66ca2d
msgid "Note that in the common case where isochoric plastic strain is assumed, one has"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:229
# da1790ab5b1e464f94c0967a8b4fa404
msgid "Plane stress approximation"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:231
# 9963c388f8b54918af997dee94255868
msgid "The plane stress approximation describe generally the 2D membrane deformation of a thin plate. It consist in prescribing the stress tensor to have only in-plane nonzero components, i.e."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:235
# ab8507928e88457a9f0f792ede0aa4b5
msgid "We will still denote"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:239
# 3ed0d8734d5f43288684a78b9d851e0e
msgid "the in-plane components of the stress tensor. For elastoplasticity, it consists generally to apply the 2D plastic flow rule, prescribing the out-plane components of the stress tensor to be zero with the additionnal variables :math:`\\varepsilon^e_{1,3}`, :math:`\\varepsilon^e_{2,3}`, :math:`\\varepsilon^e_{3,3}` being unknown (see for instance [SO-PE-OW2008]_)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:241
# 028e62f88090415eae97b85ecfbacf09
msgid "For an isotropic linearized elastic response, one has :math:`\\sigma = \\lambda \\mbox{tr}(\\varepsilon^e) + 2\\mu\\varepsilon^e` such that"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:245
#: ../source/userdoc/model_plasticity_small_strain.rst:435
# 7e6c572e4865419880db7849334e2bc4
# 6fade134b96c4acb90f26cc9fc6b2646
msgid "with"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:249
# b533531c78144daba3afae761274ff05
msgid "so that"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:254
# d09cb3a358824206bead164a91322dd9
msgid "Moreover"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:259
# d16ff16c47fa4cd1a165de046fe794cd
msgid "Note that in the case where isochoric plastic strain is assumed, one still has"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:265
# 213a6d2b996b4e338dc1e9c3aa6fe77a
msgid "Some classical laws"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:268
# e7329e6b35a242c8be7840e265ba40f4
msgid "Tresca : :math:`\\rho(\\sigma) \\le \\sigma_y` where :math:`\\rho(\\sigma)` spectral radius of the Cauchy stress tensor and :math:`\\sigma_y` the uniaxial yield stress (which may depend on some hardening internal variables)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:270
# b864609cc74f4d199ce9cd6b22e38036
msgid "Von Mises :  :math:`\\|\\mbox{Dev}(\\sigma)\\| \\le \\sqrt{\\frac{2}{3}}\\sigma_y` where :math:`\\mbox{Dev}(\\sigma) = \\sigma - \\frac{1}{3}\\mbox{tr}(\\sigma)I` the deviatoric part of :math:`\\sigma` and :math:`\\|\\sigma\\| = \\sqrt{\\sigma:\\sigma}`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:275
# fe8621114b394f8aa571e94797a5e4df
msgid "Perfect isotropic associated elastoplasticity with Von-Mises criterion (Prandl-Reuss model)"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:277
# 420589c8e65b4fe3bc43d35dc0a28167
msgid "There is no internal variables and we consider an isotropic elastic response. The flow rule reads"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:281
# 8c822d42b7734a04a73b17cf74037b2e
msgid "This corresponds to :math:`\\Psi(\\sigma) = f(\\sigma) = \\|\\mbox{Dev}(\\sigma)\\| - \\sqrt{\\frac{2}{3}}\\sigma_y`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:284
# 5f4cb73ce91d42d69d3af5b82fbb5696
msgid "The :math:`\\theta`-scheme for the integration of the plastic flow rule reads:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:288
# 3821105c5311486da0e456f3e4061454
msgid "Choosing the factor :math:`\\alpha(\\sigma_{n}) = \\|\\mbox{Dev}(\\sigma_{n})\\|` and still with :math:`\\xi_n = \\Frac{\\gamma_n}{\\alpha(\\sigma_{n})}` this gives the equation"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:292
# d6a3c156fde44a57a5f0cbb87b130171
msgid "Since :math:`\\mbox{Dev}(\\sigma_{n+1}) = 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1})) - 2\\mu\\varepsilon^p_{n+1}` this directly gives:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:296
# 7198186510b04fe0a3eb503d0a631c4b
msgid "which is a linear expression with respect to :math:`u_{n+1}` (but not with respect to :math:`\\xi_{n+1}`)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:298
# 453ba2ec82484386be3c84428e7b328b
msgid "Moreover, :math:`\\zeta_n` is defined by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:302
#: ../source/userdoc/model_plasticity_small_strain.rst:394
# 9c994da9913743679947502a1064427f
# 23425841257244ec99caf391bdb737e4
msgid "**Elimination of the multiplier (for the return mapping approach)**"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:304
# ee0a409db5d54b70bd978629a57026f1
msgid "One has"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:308
# 35a444b47b2b4a13aca9c445998982d7
msgid "Thus, denoting :math:`B = \\mbox{Dev}(\\varepsilon(u_{n+1})) - \\zeta_n`, either"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:312
# 98313f9cda784bd89a195f5727882c5e
msgid "and :math:`\\xi_{n+1} = 0`, i.e. we are in the elastic case, or  :math:`\\|\\mbox{Dev}(\\sigma_{n+1})\\| =  \\sqrt{\\frac{2}{3}}` and one obtains"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:320
# 10ac2795125c422fbd516e60a4dc4bf9
msgid "The two options can be summarized by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:324
# 0fd1324092ce4c4a9ab90db8999d0491
msgid "The multiplier :math:`\\xi_{n+1}` (needed for the :math:`\\theta`-scheme for :math:`\\theta \\ne 1`) is given by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:329
#: ../source/userdoc/model_plasticity_small_strain.rst:426
# 35d7282596be47e68f076682804e3352
# f4b2cca8a5304b2d988052a043c18e96
msgid "**Plane strain approximation**"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:331
# 5be5cdae1698410c95c4eb3f1d83f3f3
msgid "The plane strain approximation has the same expression replacing the 3D strain tensors by the in-plane ones :math:`\\bar{\\varepsilon}^p` and  :math:`\\bar{\\varepsilon}(u_{n+1})`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:335
# e4f74b7ed8e249b5ad8d2384478a722b
msgid "where :math:`\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}) = \\bar{\\varepsilon} - \\Frac{\\mbox{tr}(\\bar{\\varepsilon})}{3} \\bar{I}` is the 2D restriction of the 3D deviator."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:337
# ca94705d1b12469a998f85572d012323
msgid "Moreover, for the yield condition,"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:341
# 779e2f43ce2849cd96e4514852f84e7c
msgid "And for the elimination of the multiplier,"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:345
# 2adf2ff2b2f34ae7966e6de2695131d7
msgid "with :math:`\\bar{B} = \\overline{\\mbox{Dev}}(\\bar{\\varepsilon}(u_{n+1}))-\\bar{\\zeta}_{n}` and :math:`\\|B\\|^2 = \\|\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}(u_{n+1})) - \\bar{\\zeta}_n\\|^2 + \\left(\\Frac{\\mbox{tr}(\\bar{\\varepsilon}(u_{n+1}))}{3} -\\mbox{tr}(\\bar{\\zeta}_n) \\right)^2`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:347
# c92c7b9e110a4124b4768f7337cce180
msgid "**Plane stress approximation**"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:349
# 639cf036ee0b4d1fb6d0d09a4f5d3623
msgid "For plane stress approximation, using :eq:`plane_stress_iso` we deduce from the expression of the 3D case"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:353
# 0d5b443fea7446edbdfc201759734af6
msgid "since :math:`\\mbox{Dev}(\\varepsilon(u)) = \\varepsilon(u) - \\Frac{2\\mu}{3(\\lambda+2\\mu)}(\\mbox{tr}(\\bar{\\varepsilon}(u)) - \\mbox{tr}(\\bar{\\varepsilon}^p))`. Of course, this relation still has to be inverted. Denoting :math:`\\alpha = 1+2\\mu\\theta\\Delta \\xi`, :math:`\\beta = \\Frac{4\\mu^2\\theta\\Delta \\xi}{3\\lambda+6\\mu}` and :math:`C = \\bar{\\zeta}_{n} +2\\mu\\theta\\Delta \\xi\\left(\\bar{\\varepsilon}(u_{n+1}) - \\Frac{2\\mu}{3(\\lambda+2\\mu)}(\\mbox{tr}(\\bar{\\varepsilon}(u_{n+1}))))\\bar{I}\\right)` one obtains"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:357
# 8e94f446f823451ebe087b136cc9e04c
msgid "Moreover, for the yield condition, expression :eq:`plane_stress_dev` can be used."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:360
# 708c86d81c2142f289ea268880f43b87
msgid "Isotropic elastoplasticity with linear isotropic and kinematic hardening and Von-Mises criterion"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:362
# f2bc51bd676140e395273ad0297a5d91
msgid "We consider an isotropic elastic reponse and the internal variable :math:`\\alpha : \\Omega \\rightarrow \\R` being the accumulated plastic strain which satisfies"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:366
# effe1c86a433400fa9296ec414a71566
msgid "For :math:`H_i` the isotropic hardening modulus, the linear hardening consists in"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:370
# de26afd805cf4b2a8c029eadf16fd7ef
msgid "i.e. :math:`A = H_i\\alpha` and a uniaxial yield stress defined by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:375
# b473049bc98e45d68ceda8dee309457f
msgid "for :math:`\\sigma_{y0}` the initial uniaxial yield stress. The yield function (and plastic potential since this is an associated plastic model) can be defined by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:379
# 04f49519a3584a20b4baddf170300640
msgid "where :math:`H_k` is the kinematic hardening modulus. The same computation as in the previous section leads to"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:386
# 9a283529d5644d94a28664dc30b3de13
msgid "where :math:`\\zeta_n` and :math:`\\eta_n` are defined by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:392
# 496c8b7a3baf4396a148955524d83e1e
msgid "Note that the isotropic hardening modulus do not intervene in :math:`\\tilde{\\mathscr E}^p(u_{n+1}, \\theta \\Delta \\xi, \\varepsilon^p_{n})` but only in :math:`f(\\sigma, A)`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:396
# 1ce46c0497bd45679bbd3df31c25d253
msgid "Denoting :math:`\\delta = \\Frac{1}{1+2(\\mu+H_k/3)\\theta\\Delta t\\xi_{n+1}}`, :math:`\\beta = \\Frac{1-\\delta}{2(\\mu+H_k/3)}` and :math:`B = 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1}))-2(\\mu+H_k/3)\\zeta_n` the expression for :math:`\\varepsilon^p_{n+1}` and :math:`\\alpha_{n+1}` becomes"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:401
# 2d6b9bcd1dfe4e9c8c59432e9dd86f8b
msgid "and the plastic constraint"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:405
# 7d22c37e28584620bc6494dcf97c582b
msgid "Thus, either we are in the elastic case, i.e. :math:`\\xi_{n+1} = 0, \\delta = 1` and"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:409
# 8b51f0ec3f6746b5af3f3bc5790099d4
msgid "or we are in the plastic case and :math:`\\xi_{n+1} > 0, \\delta < 1`, :math:`\\delta \\|B\\| = \\sqrt{\\Frac{2}{3}}(\\sigma_{y0}+H_i \\alpha_{n+1})` and :math:`(1-\\delta)` solves the equation"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:413
# 5a68c713323942f58bd984cd2f2f0642
msgid "which leads to"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:417
# f38fcdadb021441c96f80fc93992332b
msgid "The two cases can be summarized by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:421
# 9f0141dc2e72417eb370fca217b6e823
msgid "which directly gives :math:`{\\mathscr E}^p(u_{n+1}, \\zeta_n, \\eta_n)` and :math:`{\\mathscr A}(u_{n+1}, \\zeta_n, \\eta_n)` thanks to :eq:`hardeningepsalp`. The multiplier :math:`\\xi_{n+1}` being given by"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:428
# 59745432927743858a68fbe466675101
msgid "Still denoting  :math:`\\delta = \\Frac{1}{1+2(\\mu+H_k/3)\\theta\\Delta t\\xi_{n+1}}`, :math:`\\beta = \\Frac{1-\\delta}{2(\\mu+H_k/3)}`, :math:`B = 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1}))-2(\\mu+H_k/3)\\zeta_n` and :math:`\\overline{B} = 2\\mu\\overline{Dev}(\\bar{\\varepsilon}(u_{n+1}))-2(\\mu+H_k/3)\\bar{\\zeta}_n` its in-plane part, one has"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:439
# 13d58ec50e02434c817be8bff57de66b
msgid "The yield condition still reads"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:443
# fb2c22d47f3d4139a78d44238713d83e
msgid "and for the elimination of the multiplier, :math:`\\beta` has the same expression as in the previous section adapting the value of :math:`\\|B\\|`. The expressions of :math:`\\bar{\\zeta}_n` and :math:`\\eta_n` have to be adpated accoringly."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:450
# 2b645a5c35c3424e8ca263e9a520603b
msgid "Souza-Auricchio elastoplasticity law (for shape memory alloys)"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:452
# 1ff6d0ef190c4ac2b62771a75a383670
msgid "See for instance [GR-ST2015]_ for the justification of the construction of this flow rule. A Von-Mises stress criterion together with an isotropic elastic response, no internal variables and a special type of kinematic hardening is considered with a constraint :math:`\\|\\varepsilon^p\\| \\le c_3`. The plastic potential and yield function have the form"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:456
# 7c660b014ac44c33ac788948dcc92919
msgid "with the complementarity condition"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:461
# fb5a0cd63a8042cbb317516f73d0db9f
msgid "where :math:`c_1, c_2 \\mbox{ and } c_3` are some physical parameters. Note that :math:`\\Frac{\\varepsilon^p}{\\|\\varepsilon^p\\|}` has to be understood to be the whole unit ball for :math:`\\varepsilon^p = 0`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:464
# a7faa4655b094b508e7356a1fa363757
msgid "to be done ..."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:472
# 7b09571530f942e1a989b52d8a0e566a
msgid "Elasto-plasticity bricks"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:474
# 202595a4f22a45adbf6f43f29ca2afd7
msgid "See the test programs :file:`tests/plasticity.cc`, :file:`interface/tests/matlab/demo_plasticity.m`, :file:`interface/tests/matlab/demo_plasticity.py` and in :file:`contrib/test_plasticity`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:477
# e43c86fb00c0434c8068f31d1e9868df
msgid "Generic brick"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:479
# 2670685bfb4b4a439acde77e370aad2c
msgid "There are two versions of the generic brick. A first one when the plastic multiplier is kept as a variable of the problem where the added term is of the form:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:483
# 05d92b8827c04842b701d741b257f99b
msgid "with :math:`r > 0` having a specific value chosen by the brick (in terms of the elasticity coefficients), and when the return mapping strategy is selected (plastic multiplier is just a data), just the added term:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:487
# fa1034fed499462484c2ed3acc582559
msgid "The function which adds the brick to a model `md` is ::"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:495
# b5beacbb92aa431d95c4fac531964752
msgid "where `lawname` is the name of an implemented plastic law, `unknowns_type` indicates the choice between a discretization where the plastic multiplier is an unknown of the problem or (return mapping approach) just a data of the model stored for the next iteration. Remember that in both cases, a multiplier is stored anyway. `varnames` is a set of variable and data names with length which may depend on the plastic law (at least the displacement, the plastic multiplier and the plastic strain). `params` is a list of expressions for the parameters (at least elastic coefficients and the yield stress). These expressions can be some data names (or even variable names) of the model but can also be any scalar valid expression of the weak form language (such as \"1/2\", \"2+sin(X[0])\", \"1+Norm(v)\" ...). The last two parameters optionally provided in `params` are the `theta` parameter of the `theta`-scheme (generalized trapezoidal rule) used for the plastic strain integration and the time-step`dt`. The default value for `theta` if omitted is 1, which corresponds to the classical Backward Euler scheme which is first order consistent. `theta=1/2` corresponds to the Crank-Nicolson scheme (trapezoidal rule) which is second order consistent. Any value between 1/2 and 1 should be a valid value. The default value of `dt` is 'timestep' which simply indicates the time step defined in the model (by md.set_time_step(dt)). Alternatively it can be any expression (data name, constant value ...). The time step can be altered from one iteration to the next one. `region` is a mesh region."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:519
# 69355bb18f1547adb13afd218c49ceea
msgid "The available plasticity laws are:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:521
# 7941500622a14b37b7b4b05693110fe0
msgid "\"Prandtl Reuss\" (or \"isotropic perfect plasticity\"). Isotropic elasto-plasticity with no hardening. The variables are the displacement, the plastic multiplier and the plastic strain. The displacement should be a variable and have a corresponding data having the same name preceded by \"Previous\\_\" corresponding to the displacement at the previous time step (typically \"u\" and \"Previous_u\"). The plastic multiplier should also have two versions (typically \"xi\" and \"Previous_xi\") the first one being defined as data if `unknowns_type = DISPLACEMENT_ONLY` or as a variable if `unknowns_type = DISPLACEMENT_AND_PLASTIC_MULTIPLIER`. The plastic strain should represent a n x n data tensor field stored on mesh_fem or (preferably) on an im_data (corresponding to `mim`). The data are the first Lame coefficient, the second one (shear modulus) and the uniaxial yield stress. IMPORTANT: Note that this law implements the 3D expressions. If it is used in 2D, the expressions are just transposed to the 2D. For the plane strain approximation, see below."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:537
# 0e794c15eada4a259527f980fd330f57
msgid "\"plane strain Prandtl Reuss\" (or \"plane strain isotropic perfect plasticity\") The same law as the previous one but adapted to the plane strain approximation. Can only be used in 2D."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:541
# a305fe784ed64671ba4c7b9bd6bb024b
msgid "\"Prandtl Reuss linear hardening\" (or \"isotropic plasticity linear hardening\"). Isotropic elasto-plasticity with linear isotropic and kinematic hardening. An additional variable compared to \"Prandtl Reuss\" law: the accumulated plastic strain. Similarly to the plastic strain, it is only stored at the end of the time step, so a simple data is required (preferably on an im_data). Two additional parameters: the kinematic hardening modulus and the isotropic one. 3D expressions only."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:550
# c3e82e95bc7e402db47589e095b5ce16
msgid "\"plane strain Prandtl Reuss linear hardening\" (or \"plane strain isotropic plasticity linear hardening\"). The same law as the previous one but adapted to the plane strain approximation. Can only be used in 2D."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:555
# 6b53300fca84400b8ed55b42ff330aa6
msgid "IMPORTANT : remember that `small_strain_elastoplasticity_next_iter` has to be called at the end of each time step, before the next one (and before any post-treatment : this sets the value of the plastic strain and plastic multiplier)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:560
# a40e2d7e8d77487ab7a8e10c2cdfa755
msgid "Additionaly, the following function allow to pass from a time step to another for the small strain plastic brick: ::"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:567
# a5648d349f99401e94448652911f2adc
msgid "The parameters have to be exactly the same as the ones of the `add_small_strain_elastoplasticity_brick`,  so see the documentation of this function for any explanations. Basically, this brick computes the plastic strain and the plastic multiplier and stores them for the next step. Additionaly, it copies the computed displacement to the data that stores the displacement of the previous time step (typically \"u\" to \"Previous\\_u\"). It has to be called before any use of `compute_small_strain_elastoplasticity_Von_Mises`."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:577
# 4f0f6733a2f74a4a81ae3ea6e2405b3d
msgid "The function ::"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:586
# bad7dce6669f40799b9b0fc1ec0481c0
msgid "computes the Von Mises stress field with respect to a small strain elastoplasticity term, approximated on `mf_vm`, and stores the result into `VM`.  All other parameters have to be exactly the same as for `add_small_strain_elastoplasticity_brick`. Remember that `small_strain_elastoplasticity_next_iter` has to be called before any call of this function."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:595
# a49ba57749fe45bc99255954dc25db84
msgid "A specific brick based on the low-level generic assembly for perfect plasticity"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:597
# 77b3355f1de040a293a653f74f4459d8
msgid "This is an previous version of a elastoplasticity brick which is restricted to  isotropic perfect plasticity and is based on the low-level generic assembly. Its specificity which could be interesting for testing is that the flow rule is integrated on  finite element nodes (not on Gauss points)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:599
# 372cf29228ab4384976fdaacfe3052da
msgid "The function adding this brick to a model is: ::"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:611
# 8ad31fb5b2be44f2b4bdd721399c8934
msgid "where:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:605
# 45b2946456cf4b349bd82a2fe926dbff
msgid "``varname`` represents the main displacement unknown on which the brick is added (u)."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:606
# fcb9304b66974de5aa22b60cb4751da8
msgid "``previous_varname`` is the displacement at the previous time step."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:607
# 03182f02dd004d5b950fd43095defc61
msgid "``datalambda`` and ``datamu`` are the data corresponding to the Lame coefficients."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:608
# f9489baa561949b4b33329daf4e1707d
msgid "``datathreshold`` represents the plastic threshold of the studied material."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:609
# 876e257e023c45e3bd355ceacc0459f5
msgid "``datasigma`` represents the stress constraint values supported by the material. It should be composed of 2 iterates for the time scheme needed for the Newton algorithm used. Note that the finite element method on which ``datasigma`` is defined should be able to represent the derivative of ``varname``."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:610
# c721b0ce774248f7ac7e8891ed1ee2ca
msgid "``ACP`` corresponds to the type of projection to be used. It has an `abstract_constraints_projection` type and for the moment, only exists the `VM_projection` corresponding to the Von Mises one."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:613
# f2c1101993224b148ff088b21bb7ed00
msgid "Be careful: ``datalambda``, ``datamu`` and ``datathreshold`` could be constants or described on the same finite element method."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:615
# fd8ceccfcc194554b99c66c743c9aae8
msgid "This function assembles the tangent matrix and the right hand side vector which will be solved using a Newton algorithm."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:618
# 283286d67ec742a39fcae5796d3c2963
msgid "Additionaly, The function: ::"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:623
# 5ebeba69c9674d5b91ed5cfaea6898ce
msgid "computes the new stress constraint values supported by the material after a load or an unload (once a solve has been done earlier) and upload the variables ``varname`` and ``datasigma`` as follows:"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:629
# 156cb914b60942629247a8346b7ac9cb
msgid "Then, :math:`u^n` and :math:`\\sigma^n` contains the new values computed and one can restart the process."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:632
#: ../source/userdoc/model_plasticity_small_strain.rst:640
# 5f7d2197e26c4b9288f33fb30cb0923c
# 400a197c9e06459d8282a44a3f42433a
msgid "The function: ::"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:637
# 8f19afae14ad4c6cac04685c227f21d7
msgid "computes the Von Mises (or Tresca if ``tresca`` = true) criterion on the stress tensor stored in ``datasigma`` . The stress is evaluated on the `mesh_fem` ``mf_vm`` and stored into the vector ``VM``. Of course, this function can be used if and only if the previous function ``elastoplasticity_next_iter`` has been called earlier."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:645
# 3895bdeeda0c41528c8af4ef702372b1
msgid "computes on ``mf_pl`` the plastic part of the material, that could appear after a load and an unload, into the vector ``Plast``."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:647
# 52bbaedd956d473fabb4210dcc7ade7f
msgid "Note that ``datasigma`` should be the vector containing the new stress constraint values, i.e. after a load or an unload of the material."
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:7
# 6841c33fe1584817a3c1735cbcf6904c
msgid "models"
msgstr ""

#: ../source/userdoc/model_plasticity_small_strain.rst:7
# 6841c33fe1584817a3c1735cbcf6904c
msgid "model bricks"
msgstr ""

