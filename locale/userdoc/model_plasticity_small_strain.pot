# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-16 15:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/model_plasticity_small_strain.rst:14
msgid "Small strain plasticity"
msgstr "Small strain plasticity"

#: ../source/userdoc/model_plasticity_small_strain.rst:16
msgid ""
"A framework for the approximation of plasticity models in |gf|. See in "
":file:`src/getfem_plasticity.cc` and :file:`interface/src/gf_model_set.cc` "
"for the brick implementation and to extend the implementation to new "
"plasticity models."
msgstr ""
"A framework for the approximation of plasticity models in |gf|. See in "
":file:`src/getfem_plasticity.cc` and :file:`interface/src/gf_model_set.cc` "
"for the brick implementation and to extend the implementation to new "
"plasticity models."

#: ../source/userdoc/model_plasticity_small_strain.rst:20
msgid "Theoretical background"
msgstr "Theoretical background"

#: ../source/userdoc/model_plasticity_small_strain.rst:22
msgid ""
"We present a short introduction to small strain plasticity. We refer mainly "
"to [SI-HU1998]_ and [SO-PE-OW2008]_ for a more detailed presentation."
msgstr ""
"We present a short introduction to small strain plasticity. We refer mainly "
"to [SI-HU1998]_ and [SO-PE-OW2008]_ for a more detailed presentation."

#: ../source/userdoc/model_plasticity_small_strain.rst:25
msgid "Additive decomposition of the small strain tensor"
msgstr "Additive decomposition of the small strain tensor"

#: ../source/userdoc/model_plasticity_small_strain.rst:27
msgid ""
"Let :math:`\\Omega \\subset \\R^3` be the reference configuration of a "
"deformable body and :math:`u : \\Omega \\rightarrow \\R^3` be the "
"displacement field. Small strain plasticity is based on the additive "
"decomposition of the small strain tensor :math:`\\varepsilon(u) = "
"\\Frac{\\nabla u + \\nabla u^T}{2}` in"
msgstr ""
"Let :math:`\\Omega \\subset \\R^3` be the reference configuration of a "
"deformable body and :math:`u : \\Omega \\rightarrow \\R^3` be the "
"displacement field. Small strain plasticity is based on the additive "
"decomposition of the small strain tensor :math:`\\varepsilon(u) = "
"\\Frac{\\nabla u + \\nabla u^T}{2}` in"

#: ../source/userdoc/model_plasticity_small_strain.rst:32
msgid ""
"where :math:`\\varepsilon^e` is the elastic part of the strain tensor and "
":math:`\\varepsilon^p` the plastic one."
msgstr ""
"where :math:`\\varepsilon^e` is the elastic part of the strain tensor and "
":math:`\\varepsilon^p` the plastic one."

#: ../source/userdoc/model_plasticity_small_strain.rst:35
msgid "Internal variables, free energy potential and elastic law"
msgstr "Internal variables, free energy potential and elastic law"

#: ../source/userdoc/model_plasticity_small_strain.rst:37
msgid "We consider"
msgstr "We consider"

#: ../source/userdoc/model_plasticity_small_strain.rst:42
msgid ""
"a vector field of :math:`d_{\\alpha}` strain type internal variables "
"(:math:`d_{\\alpha} = 0` if no internal variables are considered). We "
"consider also a free energy potential"
msgstr ""
"a vector field of :math:`d_{\\alpha}` strain type internal variables "
"(:math:`d_{\\alpha} = 0` if no internal variables are considered). We "
"consider also a free energy potential"

#: ../source/userdoc/model_plasticity_small_strain.rst:47
msgid "such that corresponding stress type variables are determined by"
msgstr "such that corresponding stress type variables are determined by"

#: ../source/userdoc/model_plasticity_small_strain.rst:52
msgid ""
"where :math:`\\sigma` is the Cauchy stress tensor and :math:`A` the stress "
"type internal variables. The plastic dissipation is given by"
msgstr ""
"where :math:`\\sigma` is the Cauchy stress tensor and :math:`A` the stress "
"type internal variables. The plastic dissipation is given by"

#: ../source/userdoc/model_plasticity_small_strain.rst:58
msgid ""
"In the standard cases, :math:`\\psi(\\varepsilon^e, \\alpha)` is decomposed "
"into"
msgstr ""
"In the standard cases, :math:`\\psi(\\varepsilon^e, \\alpha)` is decomposed "
"into"

#: ../source/userdoc/model_plasticity_small_strain.rst:62
msgid ""
"In the case of linearized elasticity, one has :math:`\\psi^e(\\varepsilon^e)"
" = \\frac{1}{2} ({\\cal A}\\varepsilon^e) :\\varepsilon^e` where "
":math:`{\\cal A}` is the fourth order elasticity tensor. For isotropic "
"linearized elasticity this expression reduces to "
":math:`\\psi^e(\\varepsilon^e) = \\mu \\mbox{dev}(\\varepsilon^e) : "
"\\mbox{dev}(\\varepsilon^e) + \\frac{1}{2} K (\\mbox{tr}(\\varepsilon^e))^2`"
" where :math:`\\mu` is the shear modulus and :math:`K = \\lambda + 2\\mu/3` "
"is the bulk modulus."
msgstr ""
"In the case of linearized elasticity, one has :math:`\\psi^e(\\varepsilon^e)"
" = \\frac{1}{2} ({\\cal A}\\varepsilon^e) :\\varepsilon^e` where "
":math:`{\\cal A}` is the fourth order elasticity tensor. For isotropic "
"linearized elasticity this expression reduces to "
":math:`\\psi^e(\\varepsilon^e) = \\mu \\mbox{dev}(\\varepsilon^e) : "
"\\mbox{dev}(\\varepsilon^e) + \\frac{1}{2} K (\\mbox{tr}(\\varepsilon^e))^2`"
" where :math:`\\mu` is the shear modulus and :math:`K = \\lambda + 2\\mu/3` "
"is the bulk modulus."

#: ../source/userdoc/model_plasticity_small_strain.rst:67
msgid "Plastic potential, yield function and plastic flow rule"
msgstr "Plastic potential, yield function and plastic flow rule"

#: ../source/userdoc/model_plasticity_small_strain.rst:69
msgid ""
"Plastic yielding is supposed to occur when the stress attains a critical "
"value. This limit is determined by a yield function :math:`f(\\sigma, A)` "
"and the condition"
msgstr ""
"Plastic yielding is supposed to occur when the stress attains a critical "
"value. This limit is determined by a yield function :math:`f(\\sigma, A)` "
"and the condition"

#: ../source/userdoc/model_plasticity_small_strain.rst:73
msgid ""
"The surface :math:`f(\\sigma, A) = 0` is the yield surface where the plastic"
" deformation may occur."
msgstr ""
"The surface :math:`f(\\sigma, A) = 0` is the yield surface where the plastic"
" deformation may occur."

#: ../source/userdoc/model_plasticity_small_strain.rst:75
msgid ""
"Let us also consider the plastic potential :math:`\\Psi(\\sigma, A)`, "
"(convex with respect to its both variables) which determines the plastic "
"flow direction in the sense that the flow rule is defined as"
msgstr ""
"Let us also consider the plastic potential :math:`\\Psi(\\sigma, A)`, "
"(convex with respect to its both variables) which determines the plastic "
"flow direction in the sense that the flow rule is defined as"

#: ../source/userdoc/model_plasticity_small_strain.rst:79
msgid "with the additional complementarity condition"
msgstr "with the additional complementarity condition"

#: ../source/userdoc/model_plasticity_small_strain.rst:83
msgid ""
"The variable :math:`\\gamma` is called the plastic multiplier. Note that "
"when :math:`\\psi(\\varepsilon^e, \\alpha), f(\\sigma, A) \\mbox{ or } "
"\\Psi(\\sigma, A)` are not differentiable, subdifferentials have to be used."
" Associated plasticity corresponds to the choice :math:`\\Psi(\\sigma, A) = "
"f(\\sigma, A)`."
msgstr ""
"The variable :math:`\\gamma` is called the plastic multiplier. Note that "
"when :math:`\\psi(\\varepsilon^e, \\alpha), f(\\sigma, A) \\mbox{ or } "
"\\Psi(\\sigma, A)` are not differentiable, subdifferentials have to be used."
" Associated plasticity corresponds to the choice :math:`\\Psi(\\sigma, A) = "
"f(\\sigma, A)`."

#: ../source/userdoc/model_plasticity_small_strain.rst:86
msgid "Initial boundary value problem"
msgstr "Initial boundary value problem"

#: ../source/userdoc/model_plasticity_small_strain.rst:88
msgid ""
"The weak formulation of a dynamic elastoplastic problem can be written, for "
"an arbitrary kinematically admissible test function :math:`v`, as follows:"
msgstr ""
"The weak formulation of a dynamic elastoplastic problem can be written, for "
"an arbitrary kinematically admissible test function :math:`v`, as follows:"

#: ../source/userdoc/model_plasticity_small_strain.rst:98
msgid ""
"for :math:`u_0, \\mathrm{v}_0, \\varepsilon^p_0, \\alpha_0` being initial "
"values and :math:`f` and :math:`g` being prescribed forces in the interior "
"of domain :math:`\\Omega` and on the part of the boundary :math:`\\Gamma_N`."
msgstr ""
"for :math:`u_0, \\mathrm{v}_0, \\varepsilon^p_0, \\alpha_0` being initial "
"values and :math:`f` and :math:`g` being prescribed forces in the interior "
"of domain :math:`\\Omega` and on the part of the boundary :math:`\\Gamma_N`."

#: ../source/userdoc/model_plasticity_small_strain.rst:100
msgid ""
"Note that plasticity models are often applied on quasi-static problems which"
" correspond to the term :math:`\\rho \\ddot{u}` being neglected."
msgstr ""
"Note that plasticity models are often applied on quasi-static problems which"
" correspond to the term :math:`\\rho \\ddot{u}` being neglected."

#: ../source/userdoc/model_plasticity_small_strain.rst:102
msgid ""
"Given a time step :math:`\\Delta t = t_{n+1} -t_n`, from time :math:`t_n` to"
" :math:`t_{n+1}`, we will denote in the sequel :math:`u_n, \\varepsilon^p_n"
"  \\mbox{ and } \\alpha_n` the approximations at time :math:`t_n` of "
":math:`u(t_n), \\varepsilon^p_n(t_n) \\mbox{ and } \\alpha(t_n)` "
"respectively. These approximations correspond to the chosen time integration"
" scheme (for instance one of the proposed schemes in :ref:`ud-model-time-"
"integration`) which can be different than the time integration scheme used "
"for the integration of the flow rule (see below)."
msgstr ""
"Given a time step :math:`\\Delta t = t_{n+1} -t_n`, from time :math:`t_n` to"
" :math:`t_{n+1}`, we will denote in the sequel :math:`u_n, \\varepsilon^p_n"
"  \\mbox{ and } \\alpha_n` the approximations at time :math:`t_n` of "
":math:`u(t_n), \\varepsilon^p_n(t_n) \\mbox{ and } \\alpha(t_n)` "
"respectively. These approximations correspond to the chosen time integration"
" scheme (for instance one of the proposed schemes in :ref:`ud-model-time-"
"integration`) which can be different than the time integration scheme used "
"for the integration of the flow rule (see below)."

#: ../source/userdoc/model_plasticity_small_strain.rst:106
msgid "Flow rule integration"
msgstr "Flow rule integration"

#: ../source/userdoc/model_plasticity_small_strain.rst:108
msgid ""
"The plastic flow rule has to be integrated with its own time integration "
"scheme. Among standards schemes, the backward Euler scheme, the "
":math:`\\theta`-scheme (or generalized trapezoidal rule) and the generalized"
" mid-point scheme are the most commonly used in that context. We make here "
"the choice of the :math:`\\theta`-scheme (:math:`\\theta = 1` corresponds to"
" the backward Euler scheme as a special case)."
msgstr ""
"The plastic flow rule has to be integrated with its own time integration "
"scheme. Among standards schemes, the backward Euler scheme, the "
":math:`\\theta`-scheme (or generalized trapezoidal rule) and the generalized"
" mid-point scheme are the most commonly used in that context. We make here "
"the choice of the :math:`\\theta`-scheme (:math:`\\theta = 1` corresponds to"
" the backward Euler scheme as a special case)."

#: ../source/userdoc/model_plasticity_small_strain.rst:111
msgid ""
"Let :math:`u_{n+1}` be the displacement at the considered time step and  "
":math:`u_{n}` at the previous one."
msgstr ""
"Let :math:`u_{n+1}` be the displacement at the considered time step and  "
":math:`u_{n}` at the previous one."

#: ../source/userdoc/model_plasticity_small_strain.rst:113
msgid ""
"The :math:`\\theta`-scheme for the integration of the plastic flow rules "
"reads as"
msgstr ""
"The :math:`\\theta`-scheme for the integration of the plastic flow rules "
"reads as"

#: ../source/userdoc/model_plasticity_small_strain.rst:121
msgid "with the complementary condition"
msgstr "with the complementary condition"

#: ../source/userdoc/model_plasticity_small_strain.rst:125
msgid ""
"where :math:`0 < \\theta \\le 1` is the parameter of the "
":math:`\\theta`-scheme. We exclude :math:`\\theta = 0` because we will not "
"consider explicit integration of plasticity. Let us recall that "
":math:`\\theta = 1` corresponds to the backward Euler scheme and "
":math:`\\theta = 1/2` to the Crank-Nicolson scheme (or trapezoidal rule) "
"which is a second order consistent scheme. Note that the complementarity "
"condition for the quantities at time step :math:`n` is prescribed at the "
"previous time step (:math:`\\sigma_{n}, \\alpha_n, \\mbox{and } \\gamma_n` "
"are supposed to be already determined)."
msgstr ""
"where :math:`0 < \\theta \\le 1` is the parameter of the "
":math:`\\theta`-scheme. We exclude :math:`\\theta = 0` because we will not "
"consider explicit integration of plasticity. Let us recall that "
":math:`\\theta = 1` corresponds to the backward Euler scheme and "
":math:`\\theta = 1/2` to the Crank-Nicolson scheme (or trapezoidal rule) "
"which is a second order consistent scheme. Note that the complementarity "
"condition for the quantities at time step :math:`n` is prescribed at the "
"previous time step (:math:`\\sigma_{n}, \\alpha_n, \\mbox{and } \\gamma_n` "
"are supposed to be already determined)."

#: ../source/userdoc/model_plasticity_small_strain.rst:127
msgid ""
"A solution would be to solve the whole problem with all the unknows, that is"
" :math:`u_{n+1},  \\gamma_{n+1}, \\varepsilon^p_{n+1} \\mbox{ and } "
"A_{n+1}`. This is of course possible but would be a rather expensive "
"strategy because of the resulting high number of degrees of freedom. A "
"classical strategy (the return mapping one for instance, see [SO-PE-OW2008]_"
" or the closest point projection one) consist in integrating locally the "
"plastic flow on each Gauss point of the considered integration method "
"separately, or more precisely to consider on each Gauss point the maps"
msgstr ""
"A solution would be to solve the whole problem with all the unknows, that is"
" :math:`u_{n+1},  \\gamma_{n+1}, \\varepsilon^p_{n+1} \\mbox{ and } "
"A_{n+1}`. This is of course possible but would be a rather expensive "
"strategy because of the resulting high number of degrees of freedom. A "
"classical strategy (the return mapping one for instance, see [SO-PE-OW2008]_"
" or the closest point projection one) consist in integrating locally the "
"plastic flow on each Gauss point of the considered integration method "
"separately, or more precisely to consider on each Gauss point the maps"

#: ../source/userdoc/model_plasticity_small_strain.rst:136
msgid ""
"with :math:`\\eta_n, \\zeta_{n}` the right hand side of equations "
":eq:`thetascheme1`, :eq:`thetascheme2`, i.e."
msgstr ""
"with :math:`\\eta_n, \\zeta_{n}` the right hand side of equations "
":eq:`thetascheme1`, :eq:`thetascheme2`, i.e."

#: ../source/userdoc/model_plasticity_small_strain.rst:143
msgid ""
"This means in particular that :math:`(\\varepsilon^p_{n+1}, \\alpha_{n+1}) ="
" ({\\mathscr E}^p(u_{n+1},  \\zeta_n, \\eta_n), {\\mathscr A}(u_{n+1}, "
"\\zeta_{n}, \\eta_n))` is the solution to equations :eq:`thetascheme1` and "
":eq:`thetascheme2`. Both these maps and their tangent moduli (usually called"
" consistent tangent moduli) are then used in the global solve of the problem"
" with a Newton method and for :math:`u_{n+1}` the unique remaining variable."
" The advantage of the return mapping strategy is that the unique variable of"
" the global solve is the displacement :math:`u_{n+1}`. A nonlinear solve on "
"each Gauss point is often necessary which is usualy performed with a local "
"Newton method."
msgstr ""
"This means in particular that :math:`(\\varepsilon^p_{n+1}, \\alpha_{n+1}) ="
" ({\\mathscr E}^p(u_{n+1},  \\zeta_n, \\eta_n), {\\mathscr A}(u_{n+1}, "
"\\zeta_{n}, \\eta_n))` is the solution to equations :eq:`thetascheme1` and "
":eq:`thetascheme2`. Both these maps and their tangent moduli (usually called"
" consistent tangent moduli) are then used in the global solve of the problem"
" with a Newton method and for :math:`u_{n+1}` the unique remaining variable."
" The advantage of the return mapping strategy is that the unique variable of"
" the global solve is the displacement :math:`u_{n+1}`. A nonlinear solve on "
"each Gauss point is often necessary which is usualy performed with a local "
"Newton method."

#: ../source/userdoc/model_plasticity_small_strain.rst:145
msgid ""
"In |gf| we propose both the return mapping strategy and also an alternative "
"strategy developped below which is mainly inspired from  [PO-NI2016]_,  [SE-"
"PO-WO2015]_ and [HA-WO2009]_ and allow more simple tangent moduli. It "
"consists in keeping (a multiple of) :math:`\\gamma_{n+1}` as an additional "
"unknown with respect to :math:`u_{n+1}`. As we will see, this will allow a "
"more generic treatment of the yield functions, the price for the simplicity "
"being this additional unknown scalar field."
msgstr ""
"In |gf| we propose both the return mapping strategy and also an alternative "
"strategy developped below which is mainly inspired from  [PO-NI2016]_,  [SE-"
"PO-WO2015]_ and [HA-WO2009]_ and allow more simple tangent moduli. It "
"consists in keeping (a multiple of) :math:`\\gamma_{n+1}` as an additional "
"unknown with respect to :math:`u_{n+1}`. As we will see, this will allow a "
"more generic treatment of the yield functions, the price for the simplicity "
"being this additional unknown scalar field."

#: ../source/userdoc/model_plasticity_small_strain.rst:147
msgid ""
"First, we consider an additional (and optional) given function "
":math:`\\alpha(\\sigma_{n+1}, A_{n+1}) > 0` whose interest will appear later"
" on (it will allow simple local inverses) and the new unknown scalar field"
msgstr ""
"First, we consider an additional (and optional) given function "
":math:`\\alpha(\\sigma_{n+1}, A_{n+1}) > 0` whose interest will appear later"
" on (it will allow simple local inverses) and the new unknown scalar field"

#: ../source/userdoc/model_plasticity_small_strain.rst:151
msgid ""
"so that our two main unknows are now :math:`u_{n+1} \\mbox{ and } "
"\\xi_{n+1}`. The discretized plastic flow rule integration now reads:"
msgstr ""
"so that our two main unknows are now :math:`u_{n+1} \\mbox{ and } "
"\\xi_{n+1}`. The discretized plastic flow rule integration now reads:"

#: ../source/userdoc/model_plasticity_small_strain.rst:163
msgid ""
"For :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}` be given, we define the two "
"maps"
msgstr ""
"For :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}` be given, we define the two "
"maps"

#: ../source/userdoc/model_plasticity_small_strain.rst:171
msgid ""
"where the pair :math:`(\\varepsilon^p_{n+1}, \\alpha_{n+1}) = "
"(\\tilde{\\mathscr E}^p(u_{n+1}, \\theta \\xi_{n+1}, \\zeta_{n}, \\eta_n), "
"\\tilde{\\mathscr A}(u_{n+1}, \\theta \\xi_{n+1}, \\zeta_{n}, \\eta_n))` is "
"the solution to equations :eq:`flowrule1`, :eq:`flowrule2` (without the "
"consideration of  :eq:`flowrule3`). We will see later, that, at least for "
"simple isotropic plastic flow rules, these maps have a simple expression, "
"even sometimes a linear one with respect to :math:`u_{n+1}`."
msgstr ""
"where the pair :math:`(\\varepsilon^p_{n+1}, \\alpha_{n+1}) = "
"(\\tilde{\\mathscr E}^p(u_{n+1}, \\theta \\xi_{n+1}, \\zeta_{n}, \\eta_n), "
"\\tilde{\\mathscr A}(u_{n+1}, \\theta \\xi_{n+1}, \\zeta_{n}, \\eta_n))` is "
"the solution to equations :eq:`flowrule1`, :eq:`flowrule2` (without the "
"consideration of  :eq:`flowrule3`). We will see later, that, at least for "
"simple isotropic plastic flow rules, these maps have a simple expression, "
"even sometimes a linear one with respect to :math:`u_{n+1}`."

#: ../source/userdoc/model_plasticity_small_strain.rst:173
msgid ""
"Still :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}` be given the stress "
":math:`\\sigma_{n+1}` reads"
msgstr ""
"Still :math:`u_{n+1} \\mbox{ and } \\xi_{n+1}` be given the stress "
":math:`\\sigma_{n+1}` reads"

#: ../source/userdoc/model_plasticity_small_strain.rst:179
msgid ""
"The complementarity equation :eq:`flowrule3` is then prescribed with the use"
" of a well chosen complementarity function, as in [HA-WO2009]_ for :math:`r "
"> 0` such as:"
msgstr ""
"The complementarity equation :eq:`flowrule3` is then prescribed with the use"
" of a well chosen complementarity function, as in [HA-WO2009]_ for :math:`r "
"> 0` such as:"

#: ../source/userdoc/model_plasticity_small_strain.rst:183
msgid "or"
msgstr "or"

#: ../source/userdoc/model_plasticity_small_strain.rst:187
msgid ""
"NOTE : The notation :math:`\\Delta \\xi_{n+1} = \\Delta t \\xi_{n+1}` is "
"often used in the litterature. The choice here is to preserve the "
"distinction between the two quantities, mainly because ot the possible use "
"of adaptative time step : when the time step is changing, the value "
":math:`\\xi_n` has to be multiplied by the new time step, so that it is "
"preferable to store :math:`\\xi_n` instead of :math:`\\Delta \\xi_{n}` when "
"using the :math:`\\theta`-scheme."
msgstr ""
"NOTE : The notation :math:`\\Delta \\xi_{n+1} = \\Delta t \\xi_{n+1}` is "
"often used in the litterature. The choice here is to preserve the "
"distinction between the two quantities, mainly because ot the possible use "
"of adaptative time step : when the time step is changing, the value "
":math:`\\xi_n` has to be multiplied by the new time step, so that it is "
"preferable to store :math:`\\xi_n` instead of :math:`\\Delta \\xi_{n}` when "
"using the :math:`\\theta`-scheme."

#: ../source/userdoc/model_plasticity_small_strain.rst:191
msgid "Plane strain approximation"
msgstr "Plane strain approximation"

#: ../source/userdoc/model_plasticity_small_strain.rst:193
msgid ""
"A plane strain approximation is a 2D problem which corresponds to the "
"deformation of a long cylindrical object where the strain in the length "
"direction (assumed to be along the :math:`z` axis) is considered small "
"compared to the ones in the other directions and is neglected. It result in "
"a plane strain tensor of the form"
msgstr ""
"A plane strain approximation is a 2D problem which corresponds to the "
"deformation of a long cylindrical object where the strain in the length "
"direction (assumed to be along the :math:`z` axis) is considered small "
"compared to the ones in the other directions and is neglected. It result in "
"a plane strain tensor of the form"

#: ../source/userdoc/model_plasticity_small_strain.rst:197
msgid "We denote"
msgstr "We denote"

#: ../source/userdoc/model_plasticity_small_strain.rst:201
msgid ""
"the non neglected components of the strain tensor. In the decomposition of "
"plastic and elastic part of the strain tensor, we assume"
msgstr ""
"the non neglected components of the strain tensor. In the decomposition of "
"plastic and elastic part of the strain tensor, we assume"

#: ../source/userdoc/model_plasticity_small_strain.rst:206
msgid "and"
msgstr "and"

#: ../source/userdoc/model_plasticity_small_strain.rst:210
msgid ""
"The adaptation to the plane strain approximation to plastic model is most of"
" the time an  easy task. An isotropic linearized elastic response reads"
msgstr ""
"The adaptation to the plane strain approximation to plastic model is most of"
" the time an  easy task. An isotropic linearized elastic response reads"

#: ../source/userdoc/model_plasticity_small_strain.rst:214
#: ../source/userdoc/model_plasticity_small_strain.rst:316
msgid "and thus"
msgstr "and thus"

#: ../source/userdoc/model_plasticity_small_strain.rst:218
msgid ""
"The nonzero :math:`\\sigma_{3,3}` component of the stress tensor is given by"
msgstr ""
"The nonzero :math:`\\sigma_{3,3}` component of the stress tensor is given by"

#: ../source/userdoc/model_plasticity_small_strain.rst:222
msgid ""
"Note that in the common case where isochoric plastic strain is assumed, one "
"has"
msgstr ""
"Note that in the common case where isochoric plastic strain is assumed, one "
"has"

#: ../source/userdoc/model_plasticity_small_strain.rst:229
msgid "Plane stress approximation"
msgstr "Plane stress approximation"

#: ../source/userdoc/model_plasticity_small_strain.rst:231
msgid ""
"The plane stress approximation describe generally the 2D membrane "
"deformation of a thin plate. It consist in prescribing the stress tensor to "
"have only in-plane nonzero components, i.e."
msgstr ""
"The plane stress approximation describe generally the 2D membrane "
"deformation of a thin plate. It consist in prescribing the stress tensor to "
"have only in-plane nonzero components, i.e."

#: ../source/userdoc/model_plasticity_small_strain.rst:235
msgid "We will still denote"
msgstr "We will still denote"

#: ../source/userdoc/model_plasticity_small_strain.rst:239
msgid ""
"the in-plane components of the stress tensor. For elastoplasticity, it "
"consists generally to apply the 2D plastic flow rule, prescribing the out-"
"plane components of the stress tensor to be zero with the additionnal "
"variables :math:`\\varepsilon^e_{1,3}`, :math:`\\varepsilon^e_{2,3}`, "
":math:`\\varepsilon^e_{3,3}` being unknown (see for instance [SO-PE-"
"OW2008]_)."
msgstr ""
"the in-plane components of the stress tensor. For elastoplasticity, it "
"consists generally to apply the 2D plastic flow rule, prescribing the out-"
"plane components of the stress tensor to be zero with the additionnal "
"variables :math:`\\varepsilon^e_{1,3}`, :math:`\\varepsilon^e_{2,3}`, "
":math:`\\varepsilon^e_{3,3}` being unknown (see for instance [SO-PE-"
"OW2008]_)."

#: ../source/userdoc/model_plasticity_small_strain.rst:241
msgid ""
"For an isotropic linearized elastic response, one has :math:`\\sigma = "
"\\lambda \\mbox{tr}(\\varepsilon^e) + 2\\mu\\varepsilon^e` such that"
msgstr ""
"For an isotropic linearized elastic response, one has :math:`\\sigma = "
"\\lambda \\mbox{tr}(\\varepsilon^e) + 2\\mu\\varepsilon^e` such that"

#: ../source/userdoc/model_plasticity_small_strain.rst:245
#: ../source/userdoc/model_plasticity_small_strain.rst:435
msgid "with"
msgstr "with"

#: ../source/userdoc/model_plasticity_small_strain.rst:249
msgid "so that"
msgstr "so that"

#: ../source/userdoc/model_plasticity_small_strain.rst:254
msgid "Moreover"
msgstr "Moreover"

#: ../source/userdoc/model_plasticity_small_strain.rst:259
msgid ""
"Note that in the case where isochoric plastic strain is assumed, one still "
"has"
msgstr ""
"Note that in the case where isochoric plastic strain is assumed, one still "
"has"

#: ../source/userdoc/model_plasticity_small_strain.rst:265
msgid "Some classical laws"
msgstr "Some classical laws"

#: ../source/userdoc/model_plasticity_small_strain.rst:268
msgid ""
"Tresca : :math:`\\rho(\\sigma) \\le \\sigma_y` where :math:`\\rho(\\sigma)` "
"spectral radius of the Cauchy stress tensor and :math:`\\sigma_y` the "
"uniaxial yield stress (which may depend on some hardening internal "
"variables)."
msgstr ""
"Tresca : :math:`\\rho(\\sigma) \\le \\sigma_y` where :math:`\\rho(\\sigma)` "
"spectral radius of the Cauchy stress tensor and :math:`\\sigma_y` the "
"uniaxial yield stress (which may depend on some hardening internal "
"variables)."

#: ../source/userdoc/model_plasticity_small_strain.rst:270
msgid ""
"Von Mises :  :math:`\\|\\mbox{Dev}(\\sigma)\\| \\le "
"\\sqrt{\\frac{2}{3}}\\sigma_y` where :math:`\\mbox{Dev}(\\sigma) = \\sigma -"
" \\frac{1}{3}\\mbox{tr}(\\sigma)I` the deviatoric part of :math:`\\sigma` "
"and :math:`\\|\\sigma\\| = \\sqrt{\\sigma:\\sigma}`."
msgstr ""
"Von Mises :  :math:`\\|\\mbox{Dev}(\\sigma)\\| \\le "
"\\sqrt{\\frac{2}{3}}\\sigma_y` where :math:`\\mbox{Dev}(\\sigma) = \\sigma -"
" \\frac{1}{3}\\mbox{tr}(\\sigma)I` the deviatoric part of :math:`\\sigma` "
"and :math:`\\|\\sigma\\| = \\sqrt{\\sigma:\\sigma}`."

#: ../source/userdoc/model_plasticity_small_strain.rst:275
msgid ""
"Perfect isotropic associated elastoplasticity with Von-Mises criterion "
"(Prandl-Reuss model)"
msgstr ""
"Perfect isotropic associated elastoplasticity with Von-Mises criterion "
"(Prandl-Reuss model)"

#: ../source/userdoc/model_plasticity_small_strain.rst:277
msgid ""
"There is no internal variables and we consider an isotropic elastic "
"response. The flow rule reads"
msgstr ""
"There is no internal variables and we consider an isotropic elastic "
"response. The flow rule reads"

#: ../source/userdoc/model_plasticity_small_strain.rst:281
msgid ""
"This corresponds to :math:`\\Psi(\\sigma) = f(\\sigma) = "
"\\|\\mbox{Dev}(\\sigma)\\| - \\sqrt{\\frac{2}{3}}\\sigma_y`."
msgstr ""
"This corresponds to :math:`\\Psi(\\sigma) = f(\\sigma) = "
"\\|\\mbox{Dev}(\\sigma)\\| - \\sqrt{\\frac{2}{3}}\\sigma_y`."

#: ../source/userdoc/model_plasticity_small_strain.rst:284
msgid ""
"The :math:`\\theta`-scheme for the integration of the plastic flow rule "
"reads:"
msgstr ""
"The :math:`\\theta`-scheme for the integration of the plastic flow rule "
"reads:"

#: ../source/userdoc/model_plasticity_small_strain.rst:288
msgid ""
"Choosing the factor :math:`\\alpha(\\sigma_{n}) = "
"\\|\\mbox{Dev}(\\sigma_{n})\\|` and still with :math:`\\xi_n = "
"\\Frac{\\gamma_n}{\\alpha(\\sigma_{n})}` this gives the equation"
msgstr ""
"Choosing the factor :math:`\\alpha(\\sigma_{n}) = "
"\\|\\mbox{Dev}(\\sigma_{n})\\|` and still with :math:`\\xi_n = "
"\\Frac{\\gamma_n}{\\alpha(\\sigma_{n})}` this gives the equation"

#: ../source/userdoc/model_plasticity_small_strain.rst:292
msgid ""
"Since :math:`\\mbox{Dev}(\\sigma_{n+1}) = "
"2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1})) - 2\\mu\\varepsilon^p_{n+1}` this "
"directly gives:"
msgstr ""
"Since :math:`\\mbox{Dev}(\\sigma_{n+1}) = "
"2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1})) - 2\\mu\\varepsilon^p_{n+1}` this "
"directly gives:"

#: ../source/userdoc/model_plasticity_small_strain.rst:296
msgid ""
"which is a linear expression with respect to :math:`u_{n+1}` (but not with "
"respect to :math:`\\xi_{n+1}`)."
msgstr ""
"which is a linear expression with respect to :math:`u_{n+1}` (but not with "
"respect to :math:`\\xi_{n+1}`)."

#: ../source/userdoc/model_plasticity_small_strain.rst:298
msgid "Moreover, :math:`\\zeta_n` is defined by"
msgstr "Moreover, :math:`\\zeta_n` is defined by"

#: ../source/userdoc/model_plasticity_small_strain.rst:302
#: ../source/userdoc/model_plasticity_small_strain.rst:394
msgid "**Elimination of the multiplier (for the return mapping approach)**"
msgstr "**Elimination of the multiplier (for the return mapping approach)**"

#: ../source/userdoc/model_plasticity_small_strain.rst:304
msgid "One has"
msgstr "One has"

#: ../source/userdoc/model_plasticity_small_strain.rst:308
msgid ""
"Thus, denoting :math:`B = \\mbox{Dev}(\\varepsilon(u_{n+1})) - \\zeta_n`, "
"either"
msgstr ""
"Thus, denoting :math:`B = \\mbox{Dev}(\\varepsilon(u_{n+1})) - \\zeta_n`, "
"either"

#: ../source/userdoc/model_plasticity_small_strain.rst:312
msgid ""
"and :math:`\\xi_{n+1} = 0`, i.e. we are in the elastic case, or  "
":math:`\\|\\mbox{Dev}(\\sigma_{n+1})\\| =  \\sqrt{\\frac{2}{3}}` and one "
"obtains"
msgstr ""
"and :math:`\\xi_{n+1} = 0`, i.e. we are in the elastic case, or  "
":math:`\\|\\mbox{Dev}(\\sigma_{n+1})\\| =  \\sqrt{\\frac{2}{3}}` and one "
"obtains"

#: ../source/userdoc/model_plasticity_small_strain.rst:320
msgid "The two options can be summarized by"
msgstr "The two options can be summarized by"

#: ../source/userdoc/model_plasticity_small_strain.rst:324
msgid ""
"The multiplier :math:`\\xi_{n+1}` (needed for the :math:`\\theta`-scheme for"
" :math:`\\theta \\ne 1`) is given by"
msgstr ""
"The multiplier :math:`\\xi_{n+1}` (needed for the :math:`\\theta`-scheme for"
" :math:`\\theta \\ne 1`) is given by"

#: ../source/userdoc/model_plasticity_small_strain.rst:329
#: ../source/userdoc/model_plasticity_small_strain.rst:426
msgid "**Plane strain approximation**"
msgstr "**Plane strain approximation**"

#: ../source/userdoc/model_plasticity_small_strain.rst:331
msgid ""
"The plane strain approximation has the same expression replacing the 3D "
"strain tensors by the in-plane ones :math:`\\bar{\\varepsilon}^p` and  "
":math:`\\bar{\\varepsilon}(u_{n+1})`."
msgstr ""
"The plane strain approximation has the same expression replacing the 3D "
"strain tensors by the in-plane ones :math:`\\bar{\\varepsilon}^p` and  "
":math:`\\bar{\\varepsilon}(u_{n+1})`."

#: ../source/userdoc/model_plasticity_small_strain.rst:335
msgid ""
"where :math:`\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}) = "
"\\bar{\\varepsilon} - \\Frac{\\mbox{tr}(\\bar{\\varepsilon})}{3} \\bar{I}` "
"is the 2D restriction of the 3D deviator."
msgstr ""
"where :math:`\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}) = "
"\\bar{\\varepsilon} - \\Frac{\\mbox{tr}(\\bar{\\varepsilon})}{3} \\bar{I}` "
"is the 2D restriction of the 3D deviator."

#: ../source/userdoc/model_plasticity_small_strain.rst:337
msgid "Moreover, for the yield condition,"
msgstr "Moreover, for the yield condition,"

#: ../source/userdoc/model_plasticity_small_strain.rst:341
msgid "And for the elimination of the multiplier,"
msgstr "And for the elimination of the multiplier,"

#: ../source/userdoc/model_plasticity_small_strain.rst:345
msgid ""
"with :math:`\\bar{B} = "
"\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}(u_{n+1}))-\\bar{\\zeta}_{n}` and"
" :math:`\\|B\\|^2 = \\|\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}(u_{n+1}))"
" - \\bar{\\zeta}_n\\|^2 + "
"\\left(\\Frac{\\mbox{tr}(\\bar{\\varepsilon}(u_{n+1}))}{3} "
"-\\mbox{tr}(\\bar{\\zeta}_n) \\right)^2`."
msgstr ""
"with :math:`\\bar{B} = "
"\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}(u_{n+1}))-\\bar{\\zeta}_{n}` and"
" :math:`\\|B\\|^2 = \\|\\overline{\\mbox{Dev}}(\\bar{\\varepsilon}(u_{n+1}))"
" - \\bar{\\zeta}_n\\|^2 + "
"\\left(\\Frac{\\mbox{tr}(\\bar{\\varepsilon}(u_{n+1}))}{3} "
"-\\mbox{tr}(\\bar{\\zeta}_n) \\right)^2`."

#: ../source/userdoc/model_plasticity_small_strain.rst:347
msgid "**Plane stress approximation**"
msgstr "**Plane stress approximation**"

#: ../source/userdoc/model_plasticity_small_strain.rst:349
msgid ""
"For plane stress approximation, using :eq:`plane_stress_iso` we deduce from "
"the expression of the 3D case"
msgstr ""
"For plane stress approximation, using :eq:`plane_stress_iso` we deduce from "
"the expression of the 3D case"

#: ../source/userdoc/model_plasticity_small_strain.rst:353
msgid ""
"since :math:`\\mbox{Dev}(\\varepsilon(u)) = \\varepsilon(u) - "
"\\Frac{2\\mu}{3(\\lambda+2\\mu)}(\\mbox{tr}(\\bar{\\varepsilon}(u)) - "
"\\mbox{tr}(\\bar{\\varepsilon}^p))`. Of course, this relation still has to "
"be inverted. Denoting :math:`\\alpha = 1+2\\mu\\theta\\Delta \\xi`, "
":math:`\\beta = \\Frac{4\\mu^2\\theta\\Delta \\xi}{3\\lambda+6\\mu}` and "
":math:`C = \\bar{\\zeta}_{n} +2\\mu\\theta\\Delta "
"\\xi\\left(\\bar{\\varepsilon}(u_{n+1}) - "
"\\Frac{2\\mu}{3(\\lambda+2\\mu)}(\\mbox{tr}(\\bar{\\varepsilon}(u_{n+1}))))\\bar{I}\\right)`"
" one obtains"
msgstr ""
"since :math:`\\mbox{Dev}(\\varepsilon(u)) = \\varepsilon(u) - "
"\\Frac{2\\mu}{3(\\lambda+2\\mu)}(\\mbox{tr}(\\bar{\\varepsilon}(u)) - "
"\\mbox{tr}(\\bar{\\varepsilon}^p))`. Of course, this relation still has to "
"be inverted. Denoting :math:`\\alpha = 1+2\\mu\\theta\\Delta \\xi`, "
":math:`\\beta = \\Frac{4\\mu^2\\theta\\Delta \\xi}{3\\lambda+6\\mu}` and "
":math:`C = \\bar{\\zeta}_{n} +2\\mu\\theta\\Delta "
"\\xi\\left(\\bar{\\varepsilon}(u_{n+1}) - "
"\\Frac{2\\mu}{3(\\lambda+2\\mu)}(\\mbox{tr}(\\bar{\\varepsilon}(u_{n+1}))))\\bar{I}\\right)`"
" one obtains"

#: ../source/userdoc/model_plasticity_small_strain.rst:357
msgid ""
"Moreover, for the yield condition, expression :eq:`plane_stress_dev` can be "
"used."
msgstr ""
"Moreover, for the yield condition, expression :eq:`plane_stress_dev` can be "
"used."

#: ../source/userdoc/model_plasticity_small_strain.rst:360
msgid ""
"Isotropic elastoplasticity with linear isotropic and kinematic hardening and"
" Von-Mises criterion"
msgstr ""
"Isotropic elastoplasticity with linear isotropic and kinematic hardening and"
" Von-Mises criterion"

#: ../source/userdoc/model_plasticity_small_strain.rst:362
msgid ""
"We consider an isotropic elastic reponse and the internal variable "
":math:`\\alpha : \\Omega \\rightarrow \\R` being the accumulated plastic "
"strain which satisfies"
msgstr ""
"We consider an isotropic elastic reponse and the internal variable "
":math:`\\alpha : \\Omega \\rightarrow \\R` being the accumulated plastic "
"strain which satisfies"

#: ../source/userdoc/model_plasticity_small_strain.rst:366
msgid ""
"For :math:`H_i` the isotropic hardening modulus, the linear hardening "
"consists in"
msgstr ""
"For :math:`H_i` the isotropic hardening modulus, the linear hardening "
"consists in"

#: ../source/userdoc/model_plasticity_small_strain.rst:370
msgid "i.e. :math:`A = H_i\\alpha` and a uniaxial yield stress defined by"
msgstr "i.e. :math:`A = H_i\\alpha` and a uniaxial yield stress defined by"

#: ../source/userdoc/model_plasticity_small_strain.rst:375
msgid ""
"for :math:`\\sigma_{y0}` the initial uniaxial yield stress. The yield "
"function (and plastic potential since this is an associated plastic model) "
"can be defined by"
msgstr ""
"for :math:`\\sigma_{y0}` the initial uniaxial yield stress. The yield "
"function (and plastic potential since this is an associated plastic model) "
"can be defined by"

#: ../source/userdoc/model_plasticity_small_strain.rst:379
msgid ""
"where :math:`H_k` is the kinematic hardening modulus. The same computation "
"as in the previous section leads to"
msgstr ""
"where :math:`H_k` is the kinematic hardening modulus. The same computation "
"as in the previous section leads to"

#: ../source/userdoc/model_plasticity_small_strain.rst:386
msgid "where :math:`\\zeta_n` and :math:`\\eta_n` are defined by"
msgstr "where :math:`\\zeta_n` and :math:`\\eta_n` are defined by"

#: ../source/userdoc/model_plasticity_small_strain.rst:392
msgid ""
"Note that the isotropic hardening modulus do not intervene in "
":math:`\\tilde{\\mathscr E}^p(u_{n+1}, \\theta \\Delta \\xi, "
"\\varepsilon^p_{n})` but only in :math:`f(\\sigma, A)`."
msgstr ""
"Note that the isotropic hardening modulus do not intervene in "
":math:`\\tilde{\\mathscr E}^p(u_{n+1}, \\theta \\Delta \\xi, "
"\\varepsilon^p_{n})` but only in :math:`f(\\sigma, A)`."

#: ../source/userdoc/model_plasticity_small_strain.rst:396
msgid ""
"Denoting :math:`\\delta = \\Frac{1}{1+2(\\mu+H_k/3)\\theta\\Delta "
"t\\xi_{n+1}}`, :math:`\\beta = \\Frac{1-\\delta}{2(\\mu+H_k/3)}` and "
":math:`B = 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1}))-2(\\mu+H_k/3)\\zeta_n` "
"the expression for :math:`\\varepsilon^p_{n+1}` and :math:`\\alpha_{n+1}` "
"becomes"
msgstr ""
"Denoting :math:`\\delta = \\Frac{1}{1+2(\\mu+H_k/3)\\theta\\Delta "
"t\\xi_{n+1}}`, :math:`\\beta = \\Frac{1-\\delta}{2(\\mu+H_k/3)}` and "
":math:`B = 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1}))-2(\\mu+H_k/3)\\zeta_n` "
"the expression for :math:`\\varepsilon^p_{n+1}` and :math:`\\alpha_{n+1}` "
"becomes"

#: ../source/userdoc/model_plasticity_small_strain.rst:401
msgid "and the plastic constraint"
msgstr "and the plastic constraint"

#: ../source/userdoc/model_plasticity_small_strain.rst:405
msgid ""
"Thus, either we are in the elastic case, i.e. :math:`\\xi_{n+1} = 0, \\delta"
" = 1` and"
msgstr ""
"Thus, either we are in the elastic case, i.e. :math:`\\xi_{n+1} = 0, \\delta"
" = 1` and"

#: ../source/userdoc/model_plasticity_small_strain.rst:409
msgid ""
"or we are in the plastic case and :math:`\\xi_{n+1} > 0, \\delta < 1`, "
":math:`\\delta \\|B\\| = \\sqrt{\\Frac{2}{3}}(\\sigma_{y0}+H_i "
"\\alpha_{n+1})` and :math:`(1-\\delta)` solves the equation"
msgstr ""
"or we are in the plastic case and :math:`\\xi_{n+1} > 0, \\delta < 1`, "
":math:`\\delta \\|B\\| = \\sqrt{\\Frac{2}{3}}(\\sigma_{y0}+H_i "
"\\alpha_{n+1})` and :math:`(1-\\delta)` solves the equation"

#: ../source/userdoc/model_plasticity_small_strain.rst:413
msgid "which leads to"
msgstr "which leads to"

#: ../source/userdoc/model_plasticity_small_strain.rst:417
msgid "The two cases can be summarized by"
msgstr "The two cases can be summarized by"

#: ../source/userdoc/model_plasticity_small_strain.rst:421
msgid ""
"which directly gives :math:`{\\mathscr E}^p(u_{n+1}, \\zeta_n, \\eta_n)` and"
" :math:`{\\mathscr A}(u_{n+1}, \\zeta_n, \\eta_n)` thanks to "
":eq:`hardeningepsalp`. The multiplier :math:`\\xi_{n+1}` being given by"
msgstr ""
"which directly gives :math:`{\\mathscr E}^p(u_{n+1}, \\zeta_n, \\eta_n)` and"
" :math:`{\\mathscr A}(u_{n+1}, \\zeta_n, \\eta_n)` thanks to "
":eq:`hardeningepsalp`. The multiplier :math:`\\xi_{n+1}` being given by"

#: ../source/userdoc/model_plasticity_small_strain.rst:428
msgid ""
"Still denoting  :math:`\\delta = \\Frac{1}{1+2(\\mu+H_k/3)\\theta\\Delta "
"t\\xi_{n+1}}`, :math:`\\beta = \\Frac{1-\\delta}{2(\\mu+H_k/3)}`, :math:`B ="
" 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1}))-2(\\mu+H_k/3)\\zeta_n` and "
":math:`\\overline{B} = "
"2\\mu\\overline{Dev}(\\bar{\\varepsilon}(u_{n+1}))-2(\\mu+H_k/3)\\bar{\\zeta}_n`"
" its in-plane part, one has"
msgstr ""
"Still denoting  :math:`\\delta = \\Frac{1}{1+2(\\mu+H_k/3)\\theta\\Delta "
"t\\xi_{n+1}}`, :math:`\\beta = \\Frac{1-\\delta}{2(\\mu+H_k/3)}`, :math:`B ="
" 2\\mu\\mbox{Dev}(\\varepsilon(u_{n+1}))-2(\\mu+H_k/3)\\zeta_n` and "
":math:`\\overline{B} = "
"2\\mu\\overline{Dev}(\\bar{\\varepsilon}(u_{n+1}))-2(\\mu+H_k/3)\\bar{\\zeta}_n`"
" its in-plane part, one has"

#: ../source/userdoc/model_plasticity_small_strain.rst:439
msgid "The yield condition still reads"
msgstr "The yield condition still reads"

#: ../source/userdoc/model_plasticity_small_strain.rst:443
msgid ""
"and for the elimination of the multiplier, :math:`\\beta` has the same "
"expression as in the previous section adapting the value of :math:`\\|B\\|`."
" The expressions of :math:`\\bar{\\zeta}_n` and :math:`\\eta_n` have to be "
"adpated accoringly."
msgstr ""
"and for the elimination of the multiplier, :math:`\\beta` has the same "
"expression as in the previous section adapting the value of :math:`\\|B\\|`."
" The expressions of :math:`\\bar{\\zeta}_n` and :math:`\\eta_n` have to be "
"adpated accoringly."

#: ../source/userdoc/model_plasticity_small_strain.rst:450
msgid "Souza-Auricchio elastoplasticity law (for shape memory alloys)"
msgstr "Souza-Auricchio elastoplasticity law (for shape memory alloys)"

#: ../source/userdoc/model_plasticity_small_strain.rst:452
msgid ""
"See for instance [GR-ST2015]_ for the justification of the construction of "
"this flow rule. A Von-Mises stress criterion together with an isotropic "
"elastic response, no internal variables and a special type of kinematic "
"hardening is considered with a constraint :math:`\\|\\varepsilon^p\\| \\le "
"c_3`. The plastic potential and yield function have the form"
msgstr ""
"See for instance [GR-ST2015]_ for the justification of the construction of "
"this flow rule. A Von-Mises stress criterion together with an isotropic "
"elastic response, no internal variables and a special type of kinematic "
"hardening is considered with a constraint :math:`\\|\\varepsilon^p\\| \\le "
"c_3`. The plastic potential and yield function have the form"

#: ../source/userdoc/model_plasticity_small_strain.rst:456
msgid "with the complementarity condition"
msgstr "with the complementarity condition"

#: ../source/userdoc/model_plasticity_small_strain.rst:461
msgid ""
"where :math:`c_1, c_2 \\mbox{ and } c_3` are some physical parameters. Note "
"that :math:`\\Frac{\\varepsilon^p}{\\|\\varepsilon^p\\|}` has to be "
"understood to be the whole unit ball for :math:`\\varepsilon^p = 0`."
msgstr ""
"where :math:`c_1, c_2 \\mbox{ and } c_3` are some physical parameters. Note "
"that :math:`\\Frac{\\varepsilon^p}{\\|\\varepsilon^p\\|}` has to be "
"understood to be the whole unit ball for :math:`\\varepsilon^p = 0`."

#: ../source/userdoc/model_plasticity_small_strain.rst:464
msgid "to be done ..."
msgstr "to be done ..."

#: ../source/userdoc/model_plasticity_small_strain.rst:472
msgid "Elasto-plasticity bricks"
msgstr "Elasto-plasticity bricks"

#: ../source/userdoc/model_plasticity_small_strain.rst:474
msgid ""
"See the test programs :file:`tests/plasticity.cc`, "
":file:`interface/tests/matlab/demo_plasticity.m`, "
":file:`interface/tests/matlab/demo_plasticity.py` and in "
":file:`contrib/test_plasticity`."
msgstr ""
"See the test programs :file:`tests/plasticity.cc`, "
":file:`interface/tests/matlab/demo_plasticity.m`, "
":file:`interface/tests/matlab/demo_plasticity.py` and in "
":file:`contrib/test_plasticity`."

#: ../source/userdoc/model_plasticity_small_strain.rst:477
msgid "Generic brick"
msgstr "Generic brick"

#: ../source/userdoc/model_plasticity_small_strain.rst:479
msgid ""
"There are two versions of the generic brick. A first one when the plastic "
"multiplier is kept as a variable of the problem where the added term is of "
"the form:"
msgstr ""
"There are two versions of the generic brick. A first one when the plastic "
"multiplier is kept as a variable of the problem where the added term is of "
"the form:"

#: ../source/userdoc/model_plasticity_small_strain.rst:483
msgid ""
"with :math:`r > 0` having a specific value chosen by the brick (in terms of "
"the elasticity coefficients), and when the return mapping strategy is "
"selected (plastic multiplier is just a data), just the added term:"
msgstr ""
"with :math:`r > 0` having a specific value chosen by the brick (in terms of "
"the elasticity coefficients), and when the return mapping strategy is "
"selected (plastic multiplier is just a data), just the added term:"

#: ../source/userdoc/model_plasticity_small_strain.rst:487
msgid "The function which adds the brick to a model `md` is ::"
msgstr "The function which adds the brick to a model `md` is ::"

#: ../source/userdoc/model_plasticity_small_strain.rst:495
msgid ""
"where `lawname` is the name of an implemented plastic law, `unknowns_type` "
"indicates the choice between a discretization where the plastic multiplier "
"is an unknown of the problem or (return mapping approach) just a data of the"
" model stored for the next iteration. Remember that in both cases, a "
"multiplier is stored anyway. `varnames` is a set of variable and data names "
"with length which may depend on the plastic law (at least the displacement, "
"the plastic multiplier and the plastic strain). `params` is a list of "
"expressions for the parameters (at least elastic coefficients and the yield "
"stress). These expressions can be some data names (or even variable names) "
"of the model but can also be any scalar valid expression of the weak form "
"language (such as \"1/2\", \"2+sin(X[0])\", \"1+Norm(v)\" ...). The last two"
" parameters optionally provided in `params` are the `theta` parameter of the"
" `theta`-scheme (generalized trapezoidal rule) used for the plastic strain "
"integration and the time-step`dt`. The default value for `theta` if omitted "
"is 1, which corresponds to the classical Backward Euler scheme which is "
"first order consistent. `theta=1/2` corresponds to the Crank-Nicolson scheme"
" (trapezoidal rule) which is second order consistent. Any value between 1/2 "
"and 1 should be a valid value. The default value of `dt` is 'timestep' which"
" simply indicates the time step defined in the model (by "
"md.set_time_step(dt)). Alternatively it can be any expression (data name, "
"constant value ...). The time step can be altered from one iteration to the "
"next one. `region` is a mesh region."
msgstr ""
"where `lawname` is the name of an implemented plastic law, `unknowns_type` "
"indicates the choice between a discretization where the plastic multiplier "
"is an unknown of the problem or (return mapping approach) just a data of the"
" model stored for the next iteration. Remember that in both cases, a "
"multiplier is stored anyway. `varnames` is a set of variable and data names "
"with length which may depend on the plastic law (at least the displacement, "
"the plastic multiplier and the plastic strain). `params` is a list of "
"expressions for the parameters (at least elastic coefficients and the yield "
"stress). These expressions can be some data names (or even variable names) "
"of the model but can also be any scalar valid expression of the weak form "
"language (such as \"1/2\", \"2+sin(X[0])\", \"1+Norm(v)\" ...). The last two"
" parameters optionally provided in `params` are the `theta` parameter of the"
" `theta`-scheme (generalized trapezoidal rule) used for the plastic strain "
"integration and the time-step`dt`. The default value for `theta` if omitted "
"is 1, which corresponds to the classical Backward Euler scheme which is "
"first order consistent. `theta=1/2` corresponds to the Crank-Nicolson scheme"
" (trapezoidal rule) which is second order consistent. Any value between 1/2 "
"and 1 should be a valid value. The default value of `dt` is 'timestep' which"
" simply indicates the time step defined in the model (by "
"md.set_time_step(dt)). Alternatively it can be any expression (data name, "
"constant value ...). The time step can be altered from one iteration to the "
"next one. `region` is a mesh region."

#: ../source/userdoc/model_plasticity_small_strain.rst:519
msgid "The available plasticity laws are:"
msgstr "The available plasticity laws are:"

#: ../source/userdoc/model_plasticity_small_strain.rst:521
msgid ""
"\"Prandtl Reuss\" (or \"isotropic perfect plasticity\"). Isotropic elasto-"
"plasticity with no hardening. The variables are the displacement, the "
"plastic multiplier and the plastic strain. The displacement should be a "
"variable and have a corresponding data having the same name preceded by "
"\"Previous\\_\" corresponding to the displacement at the previous time step "
"(typically \"u\" and \"Previous_u\"). The plastic multiplier should also "
"have two versions (typically \"xi\" and \"Previous_xi\") the first one being"
" defined as data if `unknowns_type = DISPLACEMENT_ONLY` or as a variable if "
"`unknowns_type = DISPLACEMENT_AND_PLASTIC_MULTIPLIER`. The plastic strain "
"should represent a n x n data tensor field stored on mesh_fem or "
"(preferably) on an im_data (corresponding to `mim`). The data are the first "
"Lame coefficient, the second one (shear modulus) and the uniaxial yield "
"stress. IMPORTANT: Note that this law implements the 3D expressions. If it "
"is used in 2D, the expressions are just transposed to the 2D. For the plane "
"strain approximation, see below."
msgstr ""
"\"Prandtl Reuss\" (or \"isotropic perfect plasticity\"). Isotropic elasto-"
"plasticity with no hardening. The variables are the displacement, the "
"plastic multiplier and the plastic strain. The displacement should be a "
"variable and have a corresponding data having the same name preceded by "
"\"Previous\\_\" corresponding to the displacement at the previous time step "
"(typically \"u\" and \"Previous_u\"). The plastic multiplier should also "
"have two versions (typically \"xi\" and \"Previous_xi\") the first one being"
" defined as data if `unknowns_type = DISPLACEMENT_ONLY` or as a variable if "
"`unknowns_type = DISPLACEMENT_AND_PLASTIC_MULTIPLIER`. The plastic strain "
"should represent a n x n data tensor field stored on mesh_fem or "
"(preferably) on an im_data (corresponding to `mim`). The data are the first "
"Lame coefficient, the second one (shear modulus) and the uniaxial yield "
"stress. IMPORTANT: Note that this law implements the 3D expressions. If it "
"is used in 2D, the expressions are just transposed to the 2D. For the plane "
"strain approximation, see below."

#: ../source/userdoc/model_plasticity_small_strain.rst:537
msgid ""
"\"plane strain Prandtl Reuss\" (or \"plane strain isotropic perfect "
"plasticity\") The same law as the previous one but adapted to the plane "
"strain approximation. Can only be used in 2D."
msgstr ""
"\"plane strain Prandtl Reuss\" (or \"plane strain isotropic perfect "
"plasticity\") The same law as the previous one but adapted to the plane "
"strain approximation. Can only be used in 2D."

#: ../source/userdoc/model_plasticity_small_strain.rst:541
msgid ""
"\"Prandtl Reuss linear hardening\" (or \"isotropic plasticity linear "
"hardening\"). Isotropic elasto-plasticity with linear isotropic and "
"kinematic hardening. An additional variable compared to \"Prandtl Reuss\" "
"law: the accumulated plastic strain. Similarly to the plastic strain, it is "
"only stored at the end of the time step, so a simple data is required "
"(preferably on an im_data). Two additional parameters: the kinematic "
"hardening modulus and the isotropic one. 3D expressions only."
msgstr ""
"\"Prandtl Reuss linear hardening\" (or \"isotropic plasticity linear "
"hardening\"). Isotropic elasto-plasticity with linear isotropic and "
"kinematic hardening. An additional variable compared to \"Prandtl Reuss\" "
"law: the accumulated plastic strain. Similarly to the plastic strain, it is "
"only stored at the end of the time step, so a simple data is required "
"(preferably on an im_data). Two additional parameters: the kinematic "
"hardening modulus and the isotropic one. 3D expressions only."

#: ../source/userdoc/model_plasticity_small_strain.rst:550
msgid ""
"\"plane strain Prandtl Reuss linear hardening\" (or \"plane strain isotropic"
" plasticity linear hardening\"). The same law as the previous one but "
"adapted to the plane strain approximation. Can only be used in 2D."
msgstr ""
"\"plane strain Prandtl Reuss linear hardening\" (or \"plane strain isotropic"
" plasticity linear hardening\"). The same law as the previous one but "
"adapted to the plane strain approximation. Can only be used in 2D."

#: ../source/userdoc/model_plasticity_small_strain.rst:555
msgid ""
"IMPORTANT : remember that `small_strain_elastoplasticity_next_iter` has to "
"be called at the end of each time step, before the next one (and before any "
"post-treatment : this sets the value of the plastic strain and plastic "
"multiplier)."
msgstr ""
"IMPORTANT : remember that `small_strain_elastoplasticity_next_iter` has to "
"be called at the end of each time step, before the next one (and before any "
"post-treatment : this sets the value of the plastic strain and plastic "
"multiplier)."

#: ../source/userdoc/model_plasticity_small_strain.rst:560
msgid ""
"Additionaly, the following function allow to pass from a time step to "
"another for the small strain plastic brick: ::"
msgstr ""
"Additionaly, the following function allow to pass from a time step to "
"another for the small strain plastic brick: ::"

#: ../source/userdoc/model_plasticity_small_strain.rst:567
msgid ""
"The parameters have to be exactly the same as the ones of the "
"`add_small_strain_elastoplasticity_brick`,  so see the documentation of this"
" function for any explanations. Basically, this brick computes the plastic "
"strain and the plastic multiplier and stores them for the next step. "
"Additionaly, it copies the computed displacement to the data that stores the"
" displacement of the previous time step (typically \"u\" to "
"\"Previous\\_u\"). It has to be called before any use of "
"`compute_small_strain_elastoplasticity_Von_Mises`."
msgstr ""
"The parameters have to be exactly the same as the ones of the "
"`add_small_strain_elastoplasticity_brick`,  so see the documentation of this"
" function for any explanations. Basically, this brick computes the plastic "
"strain and the plastic multiplier and stores them for the next step. "
"Additionaly, it copies the computed displacement to the data that stores the"
" displacement of the previous time step (typically \"u\" to "
"\"Previous\\_u\"). It has to be called before any use of "
"`compute_small_strain_elastoplasticity_Von_Mises`."

#: ../source/userdoc/model_plasticity_small_strain.rst:577
msgid "The function ::"
msgstr "The function ::"

#: ../source/userdoc/model_plasticity_small_strain.rst:586
msgid ""
"computes the Von Mises stress field with respect to a small strain "
"elastoplasticity term, approximated on `mf_vm`, and stores the result into "
"`VM`.  All other parameters have to be exactly the same as for "
"`add_small_strain_elastoplasticity_brick`. Remember that "
"`small_strain_elastoplasticity_next_iter` has to be called before any call "
"of this function."
msgstr ""
"computes the Von Mises stress field with respect to a small strain "
"elastoplasticity term, approximated on `mf_vm`, and stores the result into "
"`VM`.  All other parameters have to be exactly the same as for "
"`add_small_strain_elastoplasticity_brick`. Remember that "
"`small_strain_elastoplasticity_next_iter` has to be called before any call "
"of this function."

#: ../source/userdoc/model_plasticity_small_strain.rst:595
msgid ""
"A specific brick based on the low-level generic assembly for perfect "
"plasticity"
msgstr ""
"A specific brick based on the low-level generic assembly for perfect "
"plasticity"

#: ../source/userdoc/model_plasticity_small_strain.rst:597
msgid ""
"This is an previous version of a elastoplasticity brick which is restricted "
"to  isotropic perfect plasticity and is based on the low-level generic "
"assembly. Its specificity which could be interesting for testing is that the"
" flow rule is integrated on  finite element nodes (not on Gauss points)."
msgstr ""
"This is an previous version of a elastoplasticity brick which is restricted "
"to  isotropic perfect plasticity and is based on the low-level generic "
"assembly. Its specificity which could be interesting for testing is that the"
" flow rule is integrated on  finite element nodes (not on Gauss points)."

#: ../source/userdoc/model_plasticity_small_strain.rst:599
msgid "The function adding this brick to a model is: ::"
msgstr "The function adding this brick to a model is: ::"

#: ../source/userdoc/model_plasticity_small_strain.rst:611
msgid "where:"
msgstr "where:"

#: ../source/userdoc/model_plasticity_small_strain.rst:605
msgid ""
"``varname`` represents the main displacement unknown on which the brick is "
"added (u)."
msgstr ""
"``varname`` represents the main displacement unknown on which the brick is "
"added (u)."

#: ../source/userdoc/model_plasticity_small_strain.rst:606
msgid "``previous_varname`` is the displacement at the previous time step."
msgstr "``previous_varname`` is the displacement at the previous time step."

#: ../source/userdoc/model_plasticity_small_strain.rst:607
msgid ""
"``datalambda`` and ``datamu`` are the data corresponding to the Lame "
"coefficients."
msgstr ""
"``datalambda`` and ``datamu`` are the data corresponding to the Lame "
"coefficients."

#: ../source/userdoc/model_plasticity_small_strain.rst:608
msgid ""
"``datathreshold`` represents the plastic threshold of the studied material."
msgstr ""
"``datathreshold`` represents the plastic threshold of the studied material."

#: ../source/userdoc/model_plasticity_small_strain.rst:609
msgid ""
"``datasigma`` represents the stress constraint values supported by the "
"material. It should be composed of 2 iterates for the time scheme needed for"
" the Newton algorithm used. Note that the finite element method on which "
"``datasigma`` is defined should be able to represent the derivative of "
"``varname``."
msgstr ""
"``datasigma`` represents the stress constraint values supported by the "
"material. It should be composed of 2 iterates for the time scheme needed for"
" the Newton algorithm used. Note that the finite element method on which "
"``datasigma`` is defined should be able to represent the derivative of "
"``varname``."

#: ../source/userdoc/model_plasticity_small_strain.rst:610
msgid ""
"``ACP`` corresponds to the type of projection to be used. It has an "
"`abstract_constraints_projection` type and for the moment, only exists the "
"`VM_projection` corresponding to the Von Mises one."
msgstr ""
"``ACP`` corresponds to the type of projection to be used. It has an "
"`abstract_constraints_projection` type and for the moment, only exists the "
"`VM_projection` corresponding to the Von Mises one."

#: ../source/userdoc/model_plasticity_small_strain.rst:613
msgid ""
"Be careful: ``datalambda``, ``datamu`` and ``datathreshold`` could be "
"constants or described on the same finite element method."
msgstr ""
"Be careful: ``datalambda``, ``datamu`` and ``datathreshold`` could be "
"constants or described on the same finite element method."

#: ../source/userdoc/model_plasticity_small_strain.rst:615
msgid ""
"This function assembles the tangent matrix and the right hand side vector "
"which will be solved using a Newton algorithm."
msgstr ""
"This function assembles the tangent matrix and the right hand side vector "
"which will be solved using a Newton algorithm."

#: ../source/userdoc/model_plasticity_small_strain.rst:618
msgid "Additionaly, The function: ::"
msgstr "Additionaly, The function: ::"

#: ../source/userdoc/model_plasticity_small_strain.rst:623
msgid ""
"computes the new stress constraint values supported by the material after a "
"load or an unload (once a solve has been done earlier) and upload the "
"variables ``varname`` and ``datasigma`` as follows:"
msgstr ""
"computes the new stress constraint values supported by the material after a "
"load or an unload (once a solve has been done earlier) and upload the "
"variables ``varname`` and ``datasigma`` as follows:"

#: ../source/userdoc/model_plasticity_small_strain.rst:629
msgid ""
"Then, :math:`u^n` and :math:`\\sigma^n` contains the new values computed and"
" one can restart the process."
msgstr ""
"Then, :math:`u^n` and :math:`\\sigma^n` contains the new values computed and"
" one can restart the process."

#: ../source/userdoc/model_plasticity_small_strain.rst:632
#: ../source/userdoc/model_plasticity_small_strain.rst:640
msgid "The function: ::"
msgstr "The function: ::"

#: ../source/userdoc/model_plasticity_small_strain.rst:637
msgid ""
"computes the Von Mises (or Tresca if ``tresca`` = true) criterion on the "
"stress tensor stored in ``datasigma`` . The stress is evaluated on the "
"`mesh_fem` ``mf_vm`` and stored into the vector ``VM``. Of course, this "
"function can be used if and only if the previous function "
"``elastoplasticity_next_iter`` has been called earlier."
msgstr ""
"computes the Von Mises (or Tresca if ``tresca`` = true) criterion on the "
"stress tensor stored in ``datasigma`` . The stress is evaluated on the "
"`mesh_fem` ``mf_vm`` and stored into the vector ``VM``. Of course, this "
"function can be used if and only if the previous function "
"``elastoplasticity_next_iter`` has been called earlier."

#: ../source/userdoc/model_plasticity_small_strain.rst:645
msgid ""
"computes on ``mf_pl`` the plastic part of the material, that could appear "
"after a load and an unload, into the vector ``Plast``."
msgstr ""
"computes on ``mf_pl`` the plastic part of the material, that could appear "
"after a load and an unload, into the vector ``Plast``."

#: ../source/userdoc/model_plasticity_small_strain.rst:647
msgid ""
"Note that ``datasigma`` should be the vector containing the new stress "
"constraint values, i.e. after a load or an unload of the material."
msgstr ""
"Note that ``datasigma`` should be the vector containing the new stress "
"constraint values, i.e. after a load or an unload of the material."

#: ../source/userdoc/model_plasticity_small_strain.rst:7
msgid "models"
msgstr "models"

#: ../source/userdoc/model_plasticity_small_strain.rst:7
msgid "model bricks"
msgstr "model bricks"
