# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-15 02:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/bmesh.rst:10
# a6a03b724a2e40989cf612e6cf4923ae
msgid "Build a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:12
# b06309fb1f9f46c4a6531af92dc9bda4
msgid "As a preliminary, you may want to read this short introduction to the |gf| `vocabulary`_."
msgstr ""

#: ../source/userdoc/bmesh.rst:15
# 9946073a0ca74a879cfcc630151c9cf9
msgid "|gf| has its own structure to store meshes defined in the files :file:`getfem/bgeot_mesh_structure.h` and :file:`getfem/getfem_mesh.h`. The main structure is defined in :file:`getfem/getfem_mesh.h` by the object |gf_m|."
msgstr ""

#: ../source/userdoc/bmesh.rst:19
# c21c8fa022a24959b28d78d889e5011f
msgid "This object is able to store any element in any dimension even if you mix elements with different dimensions."
msgstr ""

#: ../source/userdoc/bmesh.rst:22
# 9a9248caafea4fd2b7ee377e57fa6e11
msgid "There is only a (very) experimental meshing procedure in |gf| to mesh complex geometries. But you can easily load a mesh from any format (some procedures are in :file:`getfem/getfem_import.h` to load meshes from some public domain mesh generators)."
msgstr ""

#: ../source/userdoc/bmesh.rst:26
# 07b0ee7185d649d6bf46001b884f6f78
msgid "The structure |gf_m| may also contain a description about a region of the mesh, such as a boundary or a set of elements. This is handled via a container of convexes and convex faces, |gf_mr|."
msgstr ""

#: ../source/userdoc/bmesh.rst:32
# eca5067370be42fcb1c43d6a48a752bf
msgid "Add an element to a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:34
# 4c84fe0e269b4df68c5dc663a3cc5752
msgid "Suppose the variable ``mymesh`` has been declared by::"
msgstr ""

#: ../source/userdoc/bmesh.rst:38
# 6b13a75efd254c7c85ec43b44e935a95
msgid "then you have two ways to insert a new element to this mesh: from a list of points or from a list of indexes of already existing points."
msgstr ""

#: ../source/userdoc/bmesh.rst:41
# ef4dc397f76c4defb124b278d59b2802
msgid "To enter a new point on a mesh use the method::"
msgstr ""

#: ../source/userdoc/bmesh.rst:45
# 406775ac06234038a1e97405f3d602f2
msgid "where ``pt`` is of type |bg_bn|. The index ``i`` is the index of this point on the mesh. If the point already exists in the mesh, a new point is not inserted and the index of the already existing point is returned. A mesh has a principal dimension, which is the dimension of its points. It is not possible to have points of different dimensions in a same mesh."
msgstr ""

#: ../source/userdoc/bmesh.rst:51
# 014cdb910a2a47e6b774949851c514e6
msgid "The most basic function to add a new element to a mesh is::"
msgstr ""

#: ../source/userdoc/bmesh.rst:55
# 39c47bd265f7417098366ab2584c94b6
msgid "This is a template function, with ``pgt`` of type |bg_pgt| (basically a pointer to an instance of type |bg_gt|) and ``it`` is an iterator on a list of indexes of already existing points. For instance, if one needs to add a new triangle in a 3D mesh, one needs to define first an array with the indexes of the three points::"
msgstr ""

#: ../source/userdoc/bmesh.rst:65
# a6a2d848f1ed442580e7ec161828a2a3
msgid "then adding the element is done by::"
msgstr ""

#: ../source/userdoc/bmesh.rst:69
# 542aac22519a41248df1c83c4247cc83
msgid "where ``bgeot::simplex_geotrans(N,1);`` denotes the usual linear geometric transformation for simplices of dimension N."
msgstr ""

#: ../source/userdoc/bmesh.rst:72
# bf8b86d858b449818005785386ef59d1
msgid "For simplices, a more specialized function exists, which is::"
msgstr ""

#: ../source/userdoc/bmesh.rst:76
# d971c13f0fe242b78598f149d16d6bd0
msgid "It is also possible to give directly the list of points with the function::"
msgstr ""

#: ../source/userdoc/bmesh.rst:80
# a623e4e98c2c4e48be046859cb6356b6
msgid "where now ``itp`` is an iterator on an array of points. For example::"
msgstr ""

#: ../source/userdoc/bmesh.rst:88
# 1a6e473dee6742749acec65e6357a618
msgid "It is possible to use also::"
msgstr ""

#: ../source/userdoc/bmesh.rst:92
# db113b48e7c846f2b141861291780479
msgid "For other elements than simplices, it is still possible to use ``mymesh.add_convex_by_points`` or ``mymesh.add_convex`` with the appropriate geometric transformation."
msgstr ""

#: ../source/userdoc/bmesh.rst:96
# 2c63e5b8b7414600b2d40fc84496c997
msgid "``bgeot::parallelepiped_geotrans(N, 1)`` describes the usual transformation for parallelepipeds of dimension ``N`` (quadrilateron for ``N=2``, hexahedron for ``N=3``, ...)"
msgstr ""

#: ../source/userdoc/bmesh.rst:100
# 15602da90f8c4129a7a3faa9a7a6fa57
msgid "``bgeot::prism_geotrans(N, 1)`` describes the usual transformation for prisms of dimension ``N`` (usual prism is for ``N=3``. A generalized prism is the product of a simplex of dimension ``N-1`` with a segment)"
msgstr ""

#: ../source/userdoc/bmesh.rst:104
# 4f9e3c0a138347aaa99d00c4a32eb944
msgid "Specialized functions exist also::"
msgstr ""

#: ../source/userdoc/bmesh.rst:111
# 69738888016b40779f89988a4ae79b22
msgid "The order of the points in the array of points is not important for simplices (except if you care about the orientation of your simplices). For other elements, it is important to respect the vertex order shown in :ref:`ud-fig-elem` (first order elements)."
msgstr ""

#: ../source/userdoc/bmesh.rst:119
# 20fb72390a724c179c6fcfd8eda6e757
msgid "Vertex numeration for usual first order elements"
msgstr ""

#: ../source/userdoc/bmesh.rst:121
# fc13b988949d431c809c0f3edb12735d
msgid "Note that a general rule, including for higher order transformations, is that the vertex numeration follows the one of the corresponding Lagrange finite element method (see  :ref:`ud-appendixa`)."
msgstr ""

#: ../source/userdoc/bmesh.rst:125
# c409927375504aa988c2e0cbdc16e202
msgid "Remove an element from a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:127
# 431b07c24aa44910ae2b7405d9dc1f0d
msgid "To remove an element from a mesh, simply use::"
msgstr ""

#: ../source/userdoc/bmesh.rst:131
# c1395da5b663491c868b325c8074a056
msgid "where ``i`` is the index of the element."
msgstr ""

#: ../source/userdoc/bmesh.rst:135
# e47da49706224a108bc1fd80a07c01dc
msgid "Simple structured meshes"
msgstr ""

#: ../source/userdoc/bmesh.rst:137
# 6f910d51e0c648b0ac12036e381ba926
msgid "For parallelepiped domains, it is possible to obtain structured meshes with simplices, parallelepipeds or prisms elements from three functions defined in :file:`getfem/getfem_regular_meshes.h`."
msgstr ""

#: ../source/userdoc/bmesh.rst:141
# 82fa5fbab2044c288b0e9f857e2942e3
msgid "The simplest function to use is::"
msgstr ""

#: ../source/userdoc/bmesh.rst:146
# 4a1a205f05d04ae2a3b541cada743538
msgid "which fills the mesh ``m`` with a regular mesh of simplices/parallelepipeds/prisms (depending on the value of ``pgt``). The number of cells in each direction is given by ``nsubdiv``. The following example builds a mesh of quadratic triangles on the unit square (the mesh can be scaled and translated afterwards)::"
msgstr ""

#: ../source/userdoc/bmesh.rst:155
# 3aa370794e1046dcb7beb039ca4d4730
msgid "More specialized regular mesh functions are also available::"
msgstr ""

#: ../source/userdoc/bmesh.rst:162
# 81273c5edaf74bba96826325df811c54
msgid "where ``mymesh`` is a mesh variable in which the structured mesh will be built, ``N`` is the dimension (limited to 4 for simplices, 5 for prisms, unlimited for parallelepipeds), ``org`` is of type ``bgeot::base_node`` and represents the origin of the mesh, ``ivect`` is an iterator on an array of ``N`` vectors to build the parallelepiped domain, ``iref`` is an iterator on an array of ``N`` integers representing the number of division on each direction."
msgstr ""

#: ../source/userdoc/bmesh.rst:169
# e2e5a692940d4ce6a2b63b64f03a7b25
msgid "For instance, to build a mesh with tetrahedrons for a unit cube with :math:`10\\times~10\\times~10` cells one can write::"
msgstr ""

#: ../source/userdoc/bmesh.rst:184
# ab01b2f1ed51450da4ee319e58560b61
msgid "``base_node`` and ``base_small_vector`` are almost identical, they are both ''small'' vector classes (they cannot store more than 16 elements), used to describe geometrical points, and geometrical vectors. Their memory footprint is lower than a ``std::vector``."
msgstr ""

#: ../source/userdoc/bmesh.rst:192
# e1955c12d2b040f7a3ef49c72458e3af
msgid "Mesh regions"
msgstr ""

#: ../source/userdoc/bmesh.rst:194
# 71b7b2c73ecb4256af9992ad60852cac
msgid "A mesh object can contain many |gf_mr| objects (declaration in :file:`getfem/getfem_mesh_region.h`). These objects are containers for a set of convexes and convex faces. They are used to define boundaries, or a partition of the mesh for parallel solvers, etc.::"
msgstr ""

#: ../source/userdoc/bmesh.rst:209
# c17ed993780c434aa74d2ec07cd8f0ce
msgid "Methods of the |gf_m| object"
msgstr ""

#: ../source/userdoc/bmesh.rst:211
# bb8c699ba68d4795969f9610f51fd776
msgid "The list is not exhaustive."
msgstr ""

#: ../source/userdoc/bmesh.rst:215
# 5b2317a01c0e47e7857aa94ba016c938
msgid "main dimension of the mesh."
msgstr ""

#: ../source/userdoc/bmesh.rst:219
# 1dc1828beadf4cde9069bc21e6b733d7
msgid "gives a ``dal::bit_vector`` object which represents all the indexes of valid points of a mesh (see below)."
msgstr ""

#: ../source/userdoc/bmesh.rst:224
# 3b869878cceb42ab8427cea9da8fdfa5
msgid "gives the point of index ``i`` (a ``bgeot::base_node``)."
msgstr ""

#: ../source/userdoc/bmesh.rst:228
# ba2ce6744a3d46f195c7a649784124e1
msgid "gives a ``dal::bit_vector`` object which represents all the indexes of valid elements of a mesh (see below)."
msgstr ""

#: ../source/userdoc/bmesh.rst:233
# a5813a9271b24bb6bc38c428b338e485
msgid "gives the description of the structure of element of index ``i``. The function return a |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:238
# 3158c187bdc0467d970aa1e0dce093c2
msgid "number of faces of element of index ``i``."
msgstr ""

#: ../source/userdoc/bmesh.rst:242
# 71f94c0461d94a2aa5e2a91a7e5868a3
msgid "number of vertices of element of index ``i``."
msgstr ""

#: ../source/userdoc/bmesh.rst:246
# d4460ac01ddb4254a4142b3227c22de1
msgid "intrinsic dimension of element of index ``i``."
msgstr ""

#: ../source/userdoc/bmesh.rst:251
# bb29de0f69dc409199fe264af8b85034
msgid "number of vertices of the face of local index ``f`` of element of index ``i``."
msgstr ""

#: ../source/userdoc/bmesh.rst:256
# e236c14b34e245e6ab3156ed5fed53e3
msgid "return a container with the local indexes of all vertices of the face of local index ``f`` of element of index ``i``. For instance ``mesh.structure_of_convex(i)->ind_points_of_face(f)[0]`` is the local index of the first vertex."
msgstr ""

#: ../source/userdoc/bmesh.rst:263
# 3b66e4406779480e8ecc5c11523e964d
msgid "gives the structure (a |bg_pcs|) of local index ``f`` of element of index ``i``."
msgstr ""

#: ../source/userdoc/bmesh.rst:268
# 0c9a44c136ce4c3da2aee9cb32582772
msgid "gives a container with the global indexes of vertices of element of index ``i``."
msgstr ""

#: ../source/userdoc/bmesh.rst:273
# 04f41e4042354671b423823f13c66b3b
msgid "gives a container with the vertices of element of index ``i``. This is an array of ``bgeot::base_node``."
msgstr ""

#: ../source/userdoc/bmesh.rst:278
# ae364660d8ae43c9ba7e55f9768e8a28
msgid "gives a container with the indexes of all elements attached to the point of global index ``ipt``."
msgstr ""

#: ../source/userdoc/bmesh.rst:283
# 87d086c646c5496ba6f2133e432b9a92
msgid "gives a container with the indexes of all elements in ``mesh`` having the common face of local index ``f`` of element ``ic`` except element ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:289
# d7984a0254e64339a45b1ab200b9c56c
msgid "gives the index of the first elements in ``mesh`` having the common face of local index ``f`` of element ``ic`` except element ``ic``. return size_type(-1) if none is found."
msgstr ""

#: ../source/userdoc/bmesh.rst:295
# 9967782e8b21442387ab920cdbfe61d2
msgid "return whether or not the element ``ic`` has a neighbour with respect to its face of local index ``f``."
msgstr ""

#: ../source/userdoc/bmesh.rst:300
# 67dcec44a33c431b92d87a44bba3485a
msgid "delete all elements and points from the mesh."
msgstr ""

#: ../source/userdoc/bmesh.rst:305
# fb2259ae7b7647ff8b330e65a574b6f3
msgid "compact the structure (renumbers points and convexes such that there is no hole in their numbering)."
msgstr ""

#: ../source/userdoc/bmesh.rst:310
# fd14aeccb9014e36b05d92225653ba0d
msgid "return the geometric transformation of the element of index ``i`` (in a |bg_pgt|). See :ref:`dp` for more details about geometric transformations."
msgstr ""

#: ../source/userdoc/bmesh.rst:315
# 42cab213d65d4eb0a7af4db2fb8a830a
msgid "gives a ``bgeot::base_small_vector`` representing an outward normal to the element at the face of local index ``f`` at the point of local coordinates (coordinates in the element of reference) ``pt``. The point ``pt`` has no influence if the geometric transformation is linear. This is not a unit normal, the norm of the resulting vector is the ratio between the surface of the face of the reference element and the surface of the face of the real element."
msgstr ""

#: ../source/userdoc/bmesh.rst:325
# 87479e0598e14631ba8daa320dc31aea
msgid "gives an estimate of the area of convex ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:329
# 94a8a98cd4da436da73b6316d8f479fc
msgid "gives a rough estimate of the quality of element ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:333
# 577c2547ef4c41889ff59ee095c6d99f
msgid "gives an estimate of the radius of element ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:337
# 3f6985bb02504e75b313f25280557321
msgid "return a |gf_mr|. The region is stored in the mesh, and can contain a set of convex numbers and or convex faces."
msgstr ""

#: ../source/userdoc/bmesh.rst:342
# c9ef947366724223830181dcc1edbf5e
msgid "returns true if the region of index ``irg`` has been created."
msgstr ""

#: ../source/userdoc/bmesh.rst:344
# edf0f91e476943839f174e55264ce3db
msgid "The methods of the convexes/convex faces container ``getfem::mesh_region`` are:"
msgstr ""

#: ../source/userdoc/bmesh.rst:348
# 8a822ede6c9845d58fb6b76072cf864d
msgid "add the convex of index ``ic`` to the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:352
# 2abca9ac0a684c1faab505ff9097f93e
msgid "add the face number ``f`` of the convex ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:357
# ad72c7235be542109600b63e3a9b2fce
msgid "remove the convex or the convex face from the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:362
# d64b9f8dffcd48f1bd545f4ece38084d
msgid "return true if the convex (or convex face) is in the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:366
# 279a5015976e48c8a69fd59b1b0646fd
msgid "return true if the region does not contain any convex."
msgstr ""

#: ../source/userdoc/bmesh.rst:370
# 5fdbd5304892411aa4ddfa4304a47629
msgid "return true if the region does not contain any convex face."
msgstr ""

#: ../source/userdoc/bmesh.rst:374
# 070a414ce42a43209444f89e3592bb0b
msgid "return a ``dal::bit_vector`` containing the list of convexes which are stored (or whose faces are stored) in the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:377
# c26d622c8e5b4dad9a98455348ba0888
msgid "Iteration over a |gf_mr| should be done with |gf_mrv|::"
msgstr ""

#: ../source/userdoc/bmesh.rst:386
# 74fac157d16e4263aa2eba1129aa4771
msgid "Using |dal_bv|"
msgstr ""

#: ../source/userdoc/bmesh.rst:388
# 8e881fea87b74b7db425b13930e8e31c
msgid "The object |dal_bv| (declared in :file:`getfem/dal_bit_vector.h`) is a structure heavily used in |gf|. It is very close to ``std::bitset`` and ``std::vector<bool>`` but with additional functionalities to represent a set of non negative integers and iterate over them."
msgstr ""

#: ../source/userdoc/bmesh.rst:393
# 9d5d605fe2ca4f7fa395a120138e33f0
msgid "If ``nn`` is declared to be a |dal_bv|, the two instructions ``nn.add(6)`` or ``nn[6] = true`` are equivalent and means that integer 6 is added to the set."
msgstr ""

#: ../source/userdoc/bmesh.rst:397
# 461278ba3ac0466e95bbaa41a909a5dd
msgid "In a same way ``nn.sup(6)`` or ``nn[6] = false`` remove the integer 6 from the set. The instruction ``nn.add(6, 4)`` adds 6,7,8,9 to the set."
msgstr ""

#: ../source/userdoc/bmesh.rst:401
# 595b535a79f046a5b1600d11546d2065
msgid "To iterate on a |dal_bv|, it is possible to use iterators as usual, but, most of the time, as this object represents a set of integers, one just wants to iterate on the integers included into the set. The simplest way to do that is to use the pseudo-iterator |dal_bv_v|."
msgstr ""

#: ../source/userdoc/bmesh.rst:407
# 3500cfbc95a5436c96d7674f28973f56
msgid "For instance, here is the code to iterate on the points of a mesh and print it to the standard output::"
msgstr ""

#: ../source/userdoc/bmesh.rst:414
# cc0ef1ccc3484bdcb252235397b8f77d
msgid "Face numbering"
msgstr ""

#: ../source/userdoc/bmesh.rst:416
# 56fee0a8ce3142ae8e83f09667f213d7
msgid "The numeration of faces on usual elements is given in figure :ref:`ud-fig-elemf`."
msgstr ""

#: ../source/userdoc/bmesh.rst:423
# d172246ba04e4efd905f6f46a092eca7
msgid "faces numeration for usual elements"
msgstr ""

#: ../source/userdoc/bmesh.rst:425
# e51cf72a8f894105a0fafb35f3ace959
msgid "Note that, while the convexes and the points are globally numbered in a |gf_m| object, there is no global numbering of the faces, so the only way to refer to a given face, is to give the convex number, and the local face number in the convex."
msgstr ""

#: ../source/userdoc/bmesh.rst:433
# f0df907e990145d9a14e2c8e65c2c643
msgid "Save and load meshes"
msgstr ""

#: ../source/userdoc/bmesh.rst:436
# 51eaa88a26aa4dd88dbd83180337292d
msgid "From |gf| file format"
msgstr ""

#: ../source/userdoc/bmesh.rst:438
# e642acee8aa94ae696667c11226bd780
msgid "In :file:`getfem/getfem_mesh.h`, two methods are defined to load meshes from file and write meshes to a file."
msgstr ""

#: ../source/userdoc/bmesh.rst:443
# 50f92e9cda96494b859ea04d42e99ed7
msgid "save the mesh into a file."
msgstr ""

#: ../source/userdoc/bmesh.rst:447
# 320033f472164ebca597de559c590bca
msgid "load the mesh from a file."
msgstr ""

#: ../source/userdoc/bmesh.rst:449
# 5c92621e4b4a4ba3814576af5b6f7f95
msgid "The following is an example of how to load a mesh and extract information on it::"
msgstr ""

#: ../source/userdoc/bmesh.rst:482
# bbb20758e92d4d11876560b244316ae3
msgid "Import a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:484
# 949084f8366c4780bf5acd9b6be8c50d
msgid "The file :file:`getfem/getfem_import.h` provides the function::"
msgstr ""

#: ../source/userdoc/bmesh.rst:488
# 02794e8e8c4d4dc3b8c3ad42748781dc
msgid "Here the string ``fmtfilename`` must contain a descriptor of the file format (\"gid\", \"gmsh\", \"cdb\", \"noboite\", \"am_fmt\", \"emc2_mesh\", or \"structured\"), followed by a colon and the file name (if there is not format descriptor, it is assumed that the file is a native getfem mesh and the ``mesh::read_from_file()`` method is used). Example::"
msgstr ""

#: ../source/userdoc/bmesh.rst:497
# 8fb7a40d25634cc396f1ec4b5a08f997
msgid "Alternatively the function::"
msgstr ""

#: ../source/userdoc/bmesh.rst:502
# 684ffefa3e4a4ccdb9c184933cdf33d7
msgid "can be used in an equivalent manner with the string ``fmt`` being one of the aforementioned format specifiers."
msgstr ""

#: ../source/userdoc/bmesh.rst:505
# 45d4dd0bc2f04a5295e2075f8f0f9b85
msgid "The \"gid\" format specifier is for meshes generated by `GiD`_ and \"gmsh\" is for meshes generated by the open-source mesh generator `Gmsh`_. The \"cdb\" format specifier is for reading meshes from `ANSYS <http://www.ansys.com>`_ models exported in blocked format with the CDWRITE command. Currently the `ANSYS`_ element types 42,45,73,82,87,89,90,92,95,162,182,183,185,186,187 and 191 can be imported, this however does not include any finite element techology linked to these elements but only their geometry. The \"noboite\" format is for TetMesh-GHS3D, and the \"am_fmt\" and \"emc2_mesh\" are for files built with `EMC2`_ (but 2D only)."
msgstr ""

#: ../source/userdoc/bmesh.rst:515
# 45a3308eb2b74c10887de3766397cbda
msgid "The \"structured\" format is just a short specification for regular meshes: the rest of ``fmtfilename`` in that case is not a filename, but a string whose format is following::"
msgstr ""

#: ../source/userdoc/bmesh.rst:525
# f04e8124fbef400a85215b2c2b2d7bed
msgid "where ``GT`` is the name of the geometric transformation, ``NSUBDIV`` a vector of the number of subdivisions in each coordinate (default value 2), ``ORG`` is the origin of the mesh (default value ``[0,0,...]``), ``SIZES`` is a vector of the sizes in each direction (default value ``[1, 1, ...]`` and if ``NOISED=1`` the nodes of the interior of the mesh are randomly \"shaken\" (default value ``NOISED=0``). In that string, all the parameters are optional except ``GT``."
msgstr ""

