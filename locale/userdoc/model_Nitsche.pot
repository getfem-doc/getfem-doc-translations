# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-15 02:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/model_Nitsche.rst:13
# cc7268a92fe24bc48564d1f2e2287b48
msgid "Nitsche's method for dirichlet and contact boundary conditions"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:15
# 076c0c2c5150446c84b5ce7d170a8ac3
msgid "|gf| provides a generic implementation of Nitche's method which allows to account for Dirichlet type or contact with friction boundary conditions in a weak sense without the use of Lagrange multipliers. The method is very attractive because it transforms a Dirichlet boundary condition into a weak term similar to a Neumann boundary condition. However, this advantage is at the cost that the implementation of Nitche's method is model dependent, since it requires an approximation of the corresponding Neumann term. In order to add a boundary condition with Nitsche's method on a variable of a model, the corresponding brick needs to have access to an approximation of the Neumann term of all partial differential terms applied to this variable. In the following, considering a variable :math:`u`, we will denote by"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:24
# 697a23a591d64d7388ab94c368e5653f
msgid "the sum of all Neumann terms on this variable. Note that the Neumann term :math:`G` will often depend on the variable :math:`u` but it may also depend on other variables of the model. This is the case for instance for mixed formulations of incompressible elasticity. The Neumann terms depend also frequently on some parameters of the model (elasticity coefficients ...) but this is assumed to be contained in its expression."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:29
# 159cb15f47044648b22f6a7722e3ba5a
msgid "For instance, if there is a Laplace term (:math:`\\Delta u`), applied on the variable :math:`u`, the Neumann term will be :math:`G = \\Frac{\\partial u}{\\partial n}` where :math:`n` is the outward unit normal on the considered boundary. If :math:`u` represents the displacements of a deformable body, the Neumann term will be :math:`G = \\sigma(u)n`, where :math:`\\sigma(u)` is the stress tensor depending on the consitutive law. Of course, in that case :math:`G` also depends on some material parameters. If additionally a mixed incompressibility brick is added with a variable :math:`p` denoting the pressure, the Neumann term on :math:`u` will depend on :math:`p` in the following way: :math:`G = \\sigma(u)n - pn`"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:35
# 1c46304b49744f5a96118435bac7679c
msgid "In order to allow a generic implementation in which the brick imposing Nitsche's method will work for every partial differential term applied to the concerned variables, each brick adding a partial differential term to a model is required to give its expression via an assembly string (weak form language)."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:37
# 1d45279226f049c4a331278fceae963c
msgid "These expressions are utilized in a special method of the model object::"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:41
# 2b5fe07d758046ffa6fd32fff73fb9ab
msgid "which allows to automatically derive an expression for the sum of all Neumann terms, by scanning the expressions provided by all partial differential term bricks and performing appropriate manipulations. Of course it is required that all volumic bricks were added to the model prior to the call of this method. The derivation of the Neumann term works only for second order partial differential equations. A generic implementation for higher order pde would be more complicated."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:48
# d47fea8bc98243a68c83769f58f61c3b
msgid "Generic Nitsche's method for a Dirichlet condition"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:50
# 184276bcbc204e5f8c7761826d630f4b
msgid "Assume that the variable :math:`u` is considered and that one wants to prescribe the condition"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:55
# b856840fead74f9990d0ba2e8f492273
msgid "on a part :math:`\\Gamma_D`  of the boundary of the considered domain. Here :math:`H` is considered equal to one in the scalar case or can be either the identity matrix in the vectorial case either a singular matrix having only 1 or 0 as eigenvalues. This allow here to prescribe only the normal or tangent component of :math:`u`. For instance if one wants to prescribe only the normal component, :math:`H` will be chosen to be equal to :math:`nn^T` where :math:`n` is the outward unit normal on :math:`\\Gamma_D`."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:60
# 733597039c7d42b08a8bdb66146f8532
msgid "Nitsche's method for prescribing this Dirichlet condition consists in adding the following term to the weak formulation of the problem"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:65
# 1482bb89d7ec4c6e80676765422b98cd
msgid "where :math:`\\gamma` and :math:`\\theta` are two parameters of Nitsche's method and :math:`v` is the test function corresponding to :math:`u`. The parameter :math:`\\theta` can be chosen positive or negative. :math:`\\theta = 1` corresponds to the more standard method which leads to a symmetric tangent term in standard situations, :math:`\\theta = 0` corresponds to a non-symmetric method which has the advantage of a reduced number of terms and not requiring the second derivatives of :math:`G` in the nonlinear case, and :math:`\\theta = -1` is a kind of skew-symmetric method which ensures an inconditonal coercivity (which means independent of :math:`\\gamma`) at least in standard situations. The parameter :math:`\\gamma` is a kind of penalization parameter (although the method is consistent) which is taken to be :math:`\\gamma = \\gamma_0 h_T` where :math:`\\gamma_0` is taken uniform on the mesh and :math:`h_T` is the diameter of the element :math:`T`. Note that, in standard situations, except for :math:`\\theta = -1` the parameter :math:`\\gamma_0` has to be taken sufficiently small in order to ensure the convergence of Nitsche's method."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:70
# 9f34c3d56267443cacfd479f7305d4ed
msgid "The bricks adding a Dirichlet condition with Nitsche's method to a model are the following::"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:80
# 8a2afa3a6cfa4ba8b272c54f233eb053
msgid "This function adds a Dirichlet condition on the variable `varname` and the mesh region `region`. This region should be a boundary. `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the weak form language. This term can be obtained with md.Neumann_term(varname, region) once all volumic bricks have been added to the model. The Dirichlet condition is prescribed with Nitsche's method. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary even for nonlinear problems. Returns the brick index in the model. ::"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:108
# a67f03b961804945870739527f966ba2
msgid "This function adds a Dirichlet condition to the normal component of the vector (or tensor) valued variable `varname` and the mesh region `region`. This region should be a boundary. `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the weak form language. This term can be obtained with md.Neumann_term(varname, region) once all volumic bricks have been added to the model. The Dirichlet condition is prescribed with Nitsche's method. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary even for nonlinear problems. Returns the brick index in the model. (This brick is not fully tested) ::"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:136
# bada66a47fbe40f6963cbb10e7886c89
msgid "This function adds a Dirichlet condition on the variable `varname` and the mesh region `region`. This version is for vector field. It prescribes a condition :math:`Hu = r` where :math:`H` is a matrix field. The region should be a boundary. This region should be a boundary. `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the weak form language. This term can be obtained with md.Neumann_term(varname, region) once all volumic bricks have been added to the model. The Dirichlet condition is prescribed with Nitsche's method. CAUTION : the matrix H should have all eigenvalues equal to 1 or 0. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary even for nonlinear problems. `Hname` is the data corresponding to the matrix field `H`. It has to be a constant matrix or described on a scalar fem. Returns the brick index in the model. (This brick is not fully tested)"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:164
# 3c02a45c3d3d44de94b3e51bd53a69af
msgid "Generic Nitsche's method for contact with friction condition"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:166
# 7883a715e6d5477a893f6c4590329500
msgid "We describe here the use of Nitsch's method to prescribe a contact with Coulomb friction condition in the small deformations framework. This corresponds to a weak integral contact condition which as some similarity with the ones which use Lagrange multipliers describe in the corresponding section, see :ref:`weak_integral_contact_section`"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:168
# b2ed94f90a604fefb6481489afbc5f35
msgid "In order to simplify notations, let use denote by :math:`P_{n,\\mathscr{F}}` the following map which corresponds to a couple of projections:"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:173
# 818646d570cc472a99e64082581e11eb
msgid "This application make the projection of the normal part of :math:`x` on :math:`\\Reel_-` and the tangential part on the ball of center :math:`0` and radius :math:`\\mathscr{F}(x.n)_-`, where :math:`\\mathscr{F}` is the friction coefficient."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:175
# 4ceb4cadd1244cba977c03734d436364
msgid "Using this, and considering that the sliding velocity is approximated by :math:`\\alpha(u_{_T} - w_{_T})` where the expression of :math:`\\alpha` and :math:`w_{_T}` depend on the time integration scheme used (see :ref:`weak_integral_contact_section`), Nitsche's term for contact with friction reads as:"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:181
# e4db80603ffb409a9ce66265152233c1
msgid "where :math:`\\Gamma_C` is the contact boundary, :math:`G` is the Neumann term which represents here :math:`\\sigma n` the stress at the contact boundary and :math:`A` is the :math:`d\\times d` matrix"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:186
# 30e9ff9dfcf74c1b8f34583b2d070ebb
msgid "Note that for the variant with :math:`\\theta=0` a majority of terms vanish."
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:191
# 12d377a9cd5e430a99fd0f5a3670becf
msgid "The following function adds a contact condition with or without Coulomb friction on the variable `varname_u` and the mesh boundary `region`.  `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the weak form language. This term can be obtained with md.Neumann_term(varname, region) once all volumic bricks have been added to the model. The contact condition is prescribed with Nitsche's method. The rigid obstacle should be described with the data `dataname_obstacle` being a signed distance to the obstacle (interpolated on a finite element method). `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary. The optional parameter `dataexpr_friction_coeff` is the friction coefficient which could be any expression of the weak form language. Returns the brick index in the model.::"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:7
# bf59a9beb12a4d8e93ffa6580fa53356
msgid "models"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:7
# bf59a9beb12a4d8e93ffa6580fa53356
msgid "model bricks"
msgstr ""

#: ../source/userdoc/model_Nitsche.rst:7
# bf59a9beb12a4d8e93ffa6580fa53356
msgid "Nitsche's method"
msgstr ""

