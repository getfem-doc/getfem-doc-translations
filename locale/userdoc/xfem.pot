# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-15 02:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/xfem.rst:10
# 6077a18fa35d4176bd9f51cf32724822
msgid "Level-sets, Xfem, fictitious domains, Cut-fem"
msgstr ""

#: ../source/userdoc/xfem.rst:12
# 1254f2c41af64002919f102aafc8471d
msgid "Since v2.0, |gf| offers a certain number of facilities to support Xfem and fictitious domain methods with a cut-fem strategy. Most of these tools have been initially mainly developed by Julien Pommier for the study published in [LA-PO-RE-SA2005]_."
msgstr ""

#: ../source/userdoc/xfem.rst:17
# 0b41bb5354864e3ab1eed2dc5d078548
msgid "The implementation is a fairly large generality, based on the use of level-sets, as suggested in [SU-CH-MO-BE2001]_ and allows simultaneous use of a large number of level-sets which can cross."
msgstr ""

#: ../source/userdoc/xfem.rst:21
# 006adc01fe0c40b2ab6fc45e000b0c0b
msgid "The Xfem implementation for the discretization of the jump follows the strategy of [HA-HA2004]_ although we had no knowledge of this work during implementation. This means that there is no degree of freedom representing the jump across the level-set. Instead, the degrees of freedom represent the displacement of each side of the level-set. This is essential in any way in the presence of level-set that intersect each other because it may exist more than two different zones of continuity inside a single element."
msgstr ""

#: ../source/userdoc/xfem.rst:30
# dae271261a164f339c27801d13779801
msgid "The cut fem strategy for fictitious domain method has been used for the first time with |gf| for the study published in [HA-RE2009]_ where a quite simple stabilization strategy is proposed. Here also, before knowing the existence of the Work of E. Burman and P. Hanbo [bu-ha2010]_ on that topic."
msgstr ""

#: ../source/userdoc/xfem.rst:36
# ae1509d514d84424a61bd3d37ab66457
msgid "The tools for Xfem have been then enriched by the PhD works of J. Larsy (see for instance [LA-RE-SA2010]_) the one of E. Chahine (see for instance [CH-LA-RE2011]_, [NI-RE-CH2011]_), of S. Amdouni  (see for instance [AM-MO-RE2014]_, [AM-MO-RE2014b]_) and of M. Fabre (see for instance  [Fa-Po-Re2015]_)."
msgstr ""

#: ../source/userdoc/xfem.rst:45
# ad7a841b86d744f79e0898fb8dd210ff
msgid "All the tools listed below needs the package `qhull <http://www.qhull.org>`_ installed on your system. This package is widely available. It computes convex hull and Delaunay triangulations in arbitrary dimension."
msgstr ""

#: ../source/userdoc/xfem.rst:49
# b1e58b09d9894d07a8865577600e831b
msgid "The programs :file:`tests/crack.cc`, :file:`interface/tests/matlab/crack.m` and :file:`interface/tests/python/crack.py` are some good examples of use of these tools."
msgstr ""

#: ../source/userdoc/xfem.rst:53
# 9f2e60a9f1354cfcb67e2bb0cf43b49b
msgid "Representation of level-sets"
msgstr ""

#: ../source/userdoc/xfem.rst:55
# 93bcee1fb9084847883197080ac02bb9
msgid "Some structure are defined to manipulate level-set functions defined by piecewise polynomial function on a mesh. In the file :file:`getfem/getfem_levelset.h` a level-set is represented by a function defined on a Lagrange fem of a certain degree on a mesh. The constructor to define a new |gf_ls| is the following::"
msgstr ""

#: ../source/userdoc/xfem.rst:63
# 6f4543d58fe4433581a7d121f5f9d84a
msgid "where ``mesh`` is a valid mesh of type |gf_m|, ``degree`` is the degree of the polynomials (1 is the default value), and ``with_secondary`` is a boolean whose default value is false. The secondary level-set is used to represent fractures (if :math:`p(x)` is the primary level-set function and :math:`s(x)` is the secondary level-set function, the crack is defined by :math:`p(x) = 0` and :math:`s(x) \\leq 0`: the role of the secondary is to delimit the crack)."
msgstr ""

#: ../source/userdoc/xfem.rst:71
# f1ee32043dd14d1599ababa29be824aa
msgid "Each level-set function is defined by a |mf| ``mf`` and the dof values over this |mf|, in a vector. The object |gf_ls| contains a |mf| and the vectors of dof for the corresponding function(s). The method ``ls.value(0)`` returns the vector of dof for the primary level-set function, so that these values can be set. The method ``ls.value(1)`` returns the dof vector for the secondary level-set function if any. The method ``ls.get_mesh_fem()`` returns a reference on the |gf_mf| object."
msgstr ""

#: ../source/userdoc/xfem.rst:79
# 722f96c4b7384e90a32d466bf81d1fa0
msgid "Note that, in applications, the level-set function often evolves thanks to an Hamilton-Jacobi equation (for its re-initialization for instance). See the :ref:`ud-convect` which can be used in the approximation of a Hamilton-Jacobi equation."
msgstr ""

#: ../source/userdoc/xfem.rst:86
# efe73747ab2f4bc1883961220a5f582c
msgid "Mesh cut by level-sets"
msgstr ""

#: ../source/userdoc/xfem.rst:88
# 808fee01cb154699bc7a03d120c07fb6
msgid "In order to compute adapted integration methods and finite element methods to represent a field which is discontinuous across one or several level-sets, a certain number of pre-computations have to be done at the mesh level. In :file:`getfem/getfem_mesh_level_set.h` is defined the object |gf_mls| which handles these pre-computations. The constructor of this object is the following::"
msgstr ""

#: ../source/userdoc/xfem.rst:97
# b317645fc4d84ce7988b7ab48bdd667d
msgid "where ``mesh`` is a valid mesh of type |gf_m|. In order to indicate that the mesh is cut by a level-set, one has to call the method ``mls.add_level_set(ls)``, where ``ls`` is an object of type |gf_ls|. An arbitrary number of level-sets can be added. To initialize the object or to actualize it when the value of the level-set function is modified, one has to call the method ``mls.adapt()``."
msgstr ""

#: ../source/userdoc/xfem.rst:104
# 167f8347cc9a475d852c209f3d47b0ae
msgid "In particular a subdivision of each element cut by the level-set is made with simplices. Note that the whole cut-mesh is generally not conformal."
msgstr ""

#: ../source/userdoc/xfem.rst:107
# e20027839a03459ca0affa90593f9d87
msgid "The cut-mesh can be obtained for instance for post-treatment thanks to ``mls.global_cut_mesh(m)`` which fill ``m`` with the cut-mesh."
msgstr ""

#: ../source/userdoc/xfem.rst:113
# ca483f5fc9fa4d799853833a6eaff01e
msgid "Adapted integration methods"
msgstr ""

#: ../source/userdoc/xfem.rst:115
# 5e718a51f1134108891f1fe0aa797794
msgid "For fields which are discontinuous across a level-set, integration methods have to be adapted. The object |gf_mimls| defined in the file :file:`getfem/getfem_mesh_im_level_set.h` defines a composite integration method for the elements cut by the level-set. The constructor of this object is the following::"
msgstr ""

#: ../source/userdoc/xfem.rst:123
# 59bb777ff0574f5fad09917dae5b56b3
msgid "where ``mls`` is an object of type |gf_mls|, ``where`` is an enum for which possible values are"
msgstr ""

#: ../source/userdoc/xfem.rst:126
# dcef6521b2ac4cc69434556cad27fc27
msgid "``getfem::mesh_im_level_set::INTEGRATE_INSIDE`` (integrate over :math:`p(x)<0`),"
msgstr ""

#: ../source/userdoc/xfem.rst:128
# 7783647f07614277ac3246c5d303e159
msgid "``getfem::mesh_im_level_set::INTEGRATE_OUTSIDE`` (integrate over :math:`p(x)>0`),"
msgstr ""

#: ../source/userdoc/xfem.rst:130
# 3fd973d14d1848d5b2ccf44df773fb8d
msgid "``getfem::mesh_im_level_set::INTEGRATE_ALL``,"
msgstr ""

#: ../source/userdoc/xfem.rst:132
# d1a9e2f93dd54131a58ee1aa393bd13b
msgid "``getfem::mesh_im_level_set::INTEGRATE_BOUNDARY`` (integrate over :math:`p(x)=0` and :math:`s(x)\\leq 0`)"
msgstr ""

#: ../source/userdoc/xfem.rst:135
# 1066f5393fdc40788e2ae0b9badafd97
msgid "The argument ``regular_im`` should be of type ``pintegration_method``, and will be the integration method applied on each sub-simplex of the composite integration for elements cut by the level-set. The optional ``singular_im`` should be also of type ``pintegration_method`` and is used for crack singular functions: it is applied to sub-simplices which share a vertex with the crack tip (the specific integration method ``IM_QUASI_POLAR(..)`` is well suited for this purpose)."
msgstr ""

#: ../source/userdoc/xfem.rst:142
# 200972c3e3e7466eb3d488c397ffacac
msgid "The object |gf_mimls| can be used as a classical |gf_mim| object (for instance the method ``mim.set_integration_method(...)`` allows to set the integration methods for the elements which are not cut by the level-set)."
msgstr ""

#: ../source/userdoc/xfem.rst:146
# d84183498d4542129eb209ca1deb77a8
msgid "To initialize the object or to actualize it when the value of the level-set function is modified, one has to call the method ``mim.adapt()``."
msgstr ""

#: ../source/userdoc/xfem.rst:150
# 95453cfb1e774bcc83947c5dc8b16ee0
msgid "When more than one level-set is declared on the |gf_mls| object, it is possible to set more precisely the integration domain using the method::"
msgstr ""

#: ../source/userdoc/xfem.rst:154
# 359deccc3487499fa4b284588a88987e
msgid "where \"desc\" is a string containing the description of the boolean operation which defines the integration domain. The syntax is simple, for example if there are 3 different level-set,"
msgstr ""

#: ../source/userdoc/xfem.rst:156
# 6887bcc1bccf4ec9932c2cb3649e5504
msgid "\"a*b*c\" is the intersection of the domains defined by each level-set (this is the default behavior if this function is not called)."
msgstr ""

#: ../source/userdoc/xfem.rst:160
# cb9a6fcbf897455f81bd7fa927f567a2
msgid "\"a+b+c\" is the union of their domains."
msgstr ""

#: ../source/userdoc/xfem.rst:162
# 170fa7af3fac411f81f753e175e48ad9
msgid "\"c-(a+b)\" is the domain of the third level-set minus the union of the domains of the two others."
msgstr ""

#: ../source/userdoc/xfem.rst:165
# ebe3deeddae44d1fa7a27f47e87f0276
msgid "\"!a\" is the complementary of the domain of a (i.e. it is the domain where a(x)>0)"
msgstr ""

#: ../source/userdoc/xfem.rst:168
# 29058658e2dc4fb9812475c9508fa219
msgid "The first level-set is always referred to with \"a\", the second with \"b\", and so on."
msgstr ""

#: ../source/userdoc/xfem.rst:173
# 140e8686e6f94fa8a86a1f14d4b51b84
msgid "Cut-fem"
msgstr ""

#: ../source/userdoc/xfem.rst:175
# fd3e43517f924527b017a065ef1932d1
msgid "The implementation of a cut finite element method such as described in [bu-ha2010]_, i.e. a finite element on a fictitious domain restricted to a smaller real domain, is possible just using the previous tools and mainly the adapted integration method. Several examples are available on |gf| test programs. See for instance :file:`interface/tests/python/demo_fictitious_domain.py` or :file:`interface/tests/matlab/demo_fictitious_domain.m`."
msgstr ""

#: ../source/userdoc/xfem.rst:177
# 2f95a3e29c344681994e24401ee6da53
msgid "In this context, one often needs to restrict the unknown finite element field to the degrees of freedom whose corresponding shape function supports have an intersection with the real domain. This can be done using the ``partial_mesh_fem`` object. See for instance :file:`interface/tests/matlab/demo_structural_optimization.m`."
msgstr ""

#: ../source/userdoc/xfem.rst:179
# c0dbbc6b1f874e528694a24d940fe6c7
msgid "Note that often, a stabilization technique have to be considered in order to treat eventual locking phenomena due to element with very small intersection with the real domain for example when applying a Dirichlet condition. See for instance [bu-ha2010]_,  [HA-RE2009]_ and [Fa-Po-Re2015]_."
msgstr ""

#: ../source/userdoc/xfem.rst:183
# b382cf5702e24cf2aef381e9eeb65e2d
msgid "Discontinuous field across some level-sets"
msgstr ""

#: ../source/userdoc/xfem.rst:185
# ffbb7239491c4754b3e6a9e39fb2d388
msgid "The object |gf_mfls| is defined in the file :file:`getfem/getfem_mesh_fem_level_set.h`. It is derived from |gf_mf| object and can be used in the same way. It defines a finite element method with discontinuity across the level-sets (it can deal with an arbitrary number of level-sets). The constructor is the following::"
msgstr ""

#: ../source/userdoc/xfem.rst:193
# 1b530fef5ca544e3bbc2dc49592e7f3e
msgid "where ``mls`` is a valid mesh of type ``getfem::mesh_level_set`` and ``mf`` is the an object of type |gf_mf| which defines the finite element method used for elements which are not cut by the level-sets."
msgstr ""

#: ../source/userdoc/xfem.rst:197
# 54454a512cd74f3ebdc5b0a4712fc937
msgid "To initialize the object or to actualize it when the value of the level-set function is modified, one has to call the method ``mfls.adapt()``."
msgstr ""

#: ../source/userdoc/xfem.rst:200
# 508d6412697d438c946b635d54fc1600
msgid "To represent discontinuous fields, the finite element method is enriched with discontinuous functions which are the product of some Heaviside functions by the shape functions of the finite element method represented by ``mf`` (see [HA-HA2004]_ and [Xfem]_ for more details)."
msgstr ""

#: ../source/userdoc/xfem.rst:207
# 3735c344fc2e4def906a8f0fb23eb421
msgid "Xfem"
msgstr ""

#: ../source/userdoc/xfem.rst:209
# 0271907023f748f5894468506a716e1a
msgid "The Xfem (see [Xfem]_) consists not only in the enrichment with some Heaviside functions (which is done by the object ``getfem::mesh_fem_level_set``) but also the enrichment with asymptotic displacement at the crack tip. There is several manner to enrich with an asymptotic displacement: enrichment only on the element containing the crack tip as in [Xfem]_, enrichment in a fixed size zone as in [LA-PO-RE-SA2005]_ or [Be-Mi-Mo-Bu2005]_, enrichment with a cut-off function as in [CH-LA-RE2008]_ or [NI-RE-CH2011]_ or with an integral matching condition between the enriched and non-enriched zones as in [CH-LA-RE2011]_. The choice in Getfem fell on maximum flexibility to easily implement all possibilities. As it is mainly a transformation of the finite element method itself, two tools have been defined to produce some enriched finite elements::"
msgstr ""

#: ../source/userdoc/xfem.rst:214
# 56aae5e953294105b474bd0965e0a731
msgid "where ``mf_sing`` should be a global 'finite element method', in fact just a collection of global functions (with or without a cut-off function) defined thanks to the object ``getfem::mesh_fem_global_function`` (see the file :file:`src/getfem/getfem_mesh_fem_global_function.h`) and ``mf_part_unity`` a basic scalar finite element method. The resulting `` getfem::mesh_fem_product`` is the linear combination of all the product of the shape function of the two given finite element methods, possibly restricted to a sub-set of degrees of freedom of the first finite element method given by the method ``mf_asympt.set_enrichment(enriched_dofs)``."
msgstr ""

#: ../source/userdoc/xfem.rst:216
# 9be3efa1fca847c6ab74953c8b51ce95
msgid "Once the asymptotic enrichment is defined, the object ``getfem::mesh_fem_sum`` allows to produce the direct sum of two finite element methods. For instance of the one enriched by the Heaviside functions (``getfem::mesh_fem_level_set`` object) and the asymptotic enrichment."
msgstr ""

#: ../source/userdoc/xfem.rst:218
# e15fa06e7993441db9e33bab2caf93f2
msgid "See :file:`interface/tests/matlab/demo_crack.m`, :file:`interface/tests/python/demo_crack.py` or :file:`tests/crack.cc` for some examples of use of these tools."
msgstr ""

#: ../source/userdoc/xfem.rst:220
# 863d706be85145a2b5bdcb1488008012
msgid "Additionally, the weak form language defines the two commands ``Xfem_plus`` and ``Xfem_minus`` allowing to take into account the jump of any field or derivative of any field across a level-set (see :ref:`ud-gasm-high_xfem`). This a priori allows to write any interface law easily."
msgstr ""

#: ../source/userdoc/xfem.rst:223
# 242a7534e76044b39ecb9f65802fce43
msgid "Note also that some procedures are available in the file :file:`src/getfem/getfem_crack_sif.h` to compute the stress intensity factors in 2D (restricted to homogeneous isotropic linearized elasticity)."
msgstr ""

#: ../source/userdoc/xfem.rst:228
# 2ec3344b4a0e4bfa9f87b898cf6f503a
msgid "Post treatment"
msgstr ""

#: ../source/userdoc/xfem.rst:230
# efee8eec12874a9da6caceb15fc905bb
msgid "Several tools are available to represent the solution only on a side of a levels-set or on both taking into account the discontinuity (for Xfem approximation)."
msgstr ""

#: ../source/userdoc/xfem.rst:232
# bfac646833f142e389777caade0def50
msgid "When a cut-mesh ``mls`` is used (i.e. a ``getfem::mesh_level_set`` object), is is possible to obtain the set of all sub-elements with the command::"
msgstr ""

#: ../source/userdoc/xfem.rst:236
# abc074ae37c94f67857ee9ae11e32ff5
msgid "where ``mcut`` has to be an empty mesh which will be fill by the sub-elements. Note that the resulting mesh is a non-regular one in the sense that the sub-mesh of all elements are not conformal at the element edges/faces. It is however possible to interolate on a Lagrange fem on this mesh and make a post-treatment with it to correctly represent a discontinuous field."
msgstr ""

#: ../source/userdoc/xfem.rst:238
# d9739860e1ad4105a20c87a0ba2dc849
msgid "Another mean to represent only the interesting part of the solution when a fictitious domain method is used is to use the mesh slices defined by an isovalue level-set (see :ref:`ud-export_slices`)."
msgstr ""

#: ../source/userdoc/xfem.rst:240
# 72f5f7a6402e441088cb7e873b08cd8c
msgid "see for instance files :file:`interface/tests/matlab/demo_crack.m`, :file:`interface/tests/python/demo_fictitious_domain.py` and :file:`interface/tests/matlab/demo_structural_optimization.m`."
msgstr ""

