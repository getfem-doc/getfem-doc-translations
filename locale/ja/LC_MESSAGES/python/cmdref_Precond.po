# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/python/cmdref_Precond.rst:8
msgid "Precond"
msgstr ""

#: getfem.Precond:1 of
msgid "GeFEM Precond object"
msgstr ""

#: getfem.Precond:3 of
msgid ""
"The preconditioners may store REAL or COMPLEX values. They accept getfem "
"sparse matrices and Matlab sparse matrices."
msgstr ""

#: getfem.Precond:7 of
msgid "General constructor for Precond objects"
msgstr ""

#: getfem.Precond:9 of
msgid "``PC = Precond('identity')`` Create a REAL identity precondioner."
msgstr ""

#: getfem.Precond:12 of
msgid "``PC = Precond('cidentity')`` Create a COMPLEX identity precondioner."
msgstr ""

#: getfem.Precond:15 of
msgid "``PC = Precond('diagonal', vec D)`` Create a diagonal precondioner."
msgstr ""

#: getfem.Precond:18 of
msgid ""
"``PC = Precond('ildlt', SpMat m)`` Create an ILDLT (Cholesky) "
"preconditioner for the (symmetric) sparse matrix `m`. This preconditioner"
" has the same sparsity pattern than `m` (no fill-in)."
msgstr ""

#: getfem.Precond:23 of
msgid ""
"``PC = Precond('ilu', SpMat m)`` Create an ILU (Incomplete LU) "
"preconditioner for the sparse matrix `m`. This preconditioner has the "
"same sparsity pattern than `m` (no fill-in)."
msgstr ""

#: getfem.Precond:28 of
msgid ""
"``PC = Precond('ildltt', SpMat m[, int fillin[, scalar threshold]])`` "
"Create an ILDLTT (Cholesky with filling) preconditioner for the "
"(symmetric) sparse matrix `m`. The preconditioner may add at most "
"`fillin` additional non-zero entries on each line. The default value for "
"`fillin` is 10, and the default threshold is1e-7."
msgstr ""

#: getfem.Precond:34 of
msgid ""
"``PC = Precond('ilut', SpMat m[, int fillin[, scalar threshold]])`` "
"Create an ILUT (Incomplete LU with filling) preconditioner for the sparse"
" matrix `m`. The preconditioner may add at most `fillin` additional non-"
"zero entries on each line. The default value for `fillin` is 10, and the "
"default threshold is 1e-7."
msgstr ""

#: getfem.Precond:40 of
msgid ""
"``PC = Precond('superlu', SpMat m)`` Uses SuperLU to build an exact "
"factorization of the sparse matrix `m`. This preconditioner is only "
"available if the getfem-interface was built with SuperLU support. Note "
"that LU factorization is likely to eat all your memory for 3D problems."
msgstr ""

#: getfem.Precond:46 of
msgid ""
"``PC = Precond('spmat', SpMat m)`` Preconditionner given explicitely by a"
" sparse matrix."
msgstr ""

#: getfem.Precond.char:1 of
msgid "Output a (unique) string representation of the Precond."
msgstr ""

#: getfem.Precond.char:3 of
msgid ""
"This can be used to perform comparisons between two different Precond "
"objects. This function is to be completed."
msgstr ""

#: getfem.Precond.display:1 of
msgid "displays a short summary for a Precond object."
msgstr ""

#: getfem.Precond.is_complex:1 of
msgid "Return 1 if the preconditioner stores complex values."
msgstr ""

#: getfem.Precond.mult:1 of
msgid "Apply the preconditioner to the supplied vector."
msgstr ""

#: getfem.Precond.size:1 of
msgid "Return the dimensions of the preconditioner."
msgstr ""

#: getfem.Precond.tmult:1 of
msgid "Apply the transposed preconditioner to the supplied vector."
msgstr ""

#: getfem.Precond.type:1 of
msgid ""
"Return a string describing the type of the preconditioner ('ilu', "
"'ildlt',..)."
msgstr ""

