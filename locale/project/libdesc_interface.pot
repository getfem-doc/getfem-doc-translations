# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/project/libdesc_interface.rst:11
# ee0c6b59b2534cce87d5bb442557b210
msgid "Interface with scripts languages (Python, Scilab and Matlab)"
msgstr ""

#: ../source/project/libdesc_interface.rst:13
# 168bd2fb6c324b83a73104f56ad09ed3
msgid "A simplified (but rather complete) interface of |gf| is provided, so that it is possible to use getfem in some script languages."
msgstr ""

#: ../source/project/libdesc_interface.rst:16
# 551f044983c34352b856a4de2846d19a
msgid "Description"
msgstr ""

#: ../source/project/libdesc_interface.rst:18
# e414c2ba9a484cf2bf3df1432b9d2b4a
msgid "All sources are located in the :file:`interface/src` directory. The interface is composed of one large library ``getfemint`` (which stands for getfem interaction), which acts as a layer above the |gf| library, and is used by the python, matlab and scilab interfaces."
msgstr ""

#: ../source/project/libdesc_interface.rst:23
# eac1c3acbacc4944852f2cc46787c984
msgid "This interface is not something that is generated automatically from c++ sources (as that could be the case with tools such as swig). It is something that has been designed as a simplified and consistent interface to getfem. Adding a new language should be quite easy (assuming the language provides some structures for dense arrays manipulations)."
msgstr ""

#: ../source/project/libdesc_interface.rst:30
# 1322273bbe574d92a3ed903549d6cbb9
msgid "Files"
msgstr ""

#: ../source/project/libdesc_interface.rst:32
# a47a8c02b64540a089205189f61e3e5f
msgid "All the files in the directory :file:`interface\\src`. A short description of main files:"
msgstr ""

#: ../source/project/libdesc_interface.rst:34
# 6ffdc198c38f459da80307e6d52852d8
msgid ":file:`getfem_interface.cc`."
msgstr ""

#: ../source/project/libdesc_interface.rst:36
# 4016839e914e4033a6a7c45fc123d64d
msgid "This is the bridge between the script language and the getfem interface. The function getfem_interface_main is exported as an ``extern \"C\"`` function, so this is a sort of c++ barrier between the script language and the getfem interface (exporting only a C interface avoids many compilation problems)."
msgstr ""

#: ../source/project/libdesc_interface.rst:41
# 5865c147d7c74ffa82aeeaad5e68b689
msgid ":file:`matlab/gfm_mex.c`."
msgstr ""

#: ../source/project/libdesc_interface.rst:43
# 6162090a4b18402cb94d668997d5d179
msgid "The matlab interface. The only thing it knows about getfem is in :file:`getfem_interface.h`."
msgstr ""

#: ../source/project/libdesc_interface.rst:46
# 8d960a8f23bc4817b66c16cf509eab4f
msgid ":file:`python/getfem_python.c`."
msgstr ""

#: ../source/project/libdesc_interface.rst:48
# 27ec5ef449a14498b91c6172882c761e
msgid "The python interface. The only thing it knows about getfem is in :file:`getfem_interface.h`."
msgstr ""

#: ../source/project/libdesc_interface.rst:51
# 7366eab9d52b430ea561dcee481007cd
msgid ":file:`gfi_array.h`, :file:`gfi_array.c`."
msgstr ""

#: ../source/project/libdesc_interface.rst:53
# 41a6b8cd93464382ae3d907b7da1920a
msgid "Both :file:`gfm_mex.c` and :file:`getfem_python.c` need a simple convention on how to send and receive arrays, and object handles, from ``getfem_interface_main()``. This file provide such functionnality."
msgstr ""

#: ../source/project/libdesc_interface.rst:57
# f93cb551781c4e0996d12655aeb5e165
msgid ":file:`getfemint_gsparse.h`, :file:`getfemint_precond.h`, etc."
msgstr ""

#: ../source/project/libdesc_interface.rst:59
# 31ae0e61863a4c92ad2f5b2f4dc387fe
msgid "Files specific to an interfaced object if needed. (getfemint_gsparse which export some kind of mutable sparse matrix that can switch between different storage types, and real of complex elements)."
msgstr ""

#: ../source/project/libdesc_interface.rst:63
# 9ee403cc2c7c43d2bfe24914d48b14ae
msgid ":file:`gf_workspace.cc`, :file:`gf_delete.cc`."
msgstr ""

#: ../source/project/libdesc_interface.rst:65
# 0b8a764d74724c20bda218c68085002b
msgid "Memory management for getfem objects. There is a layer which handles the dependency between for example a ``mesh`` and a ``mesh_fem``. It makes sure that no object will be destroyed while there is still another getfem_object using it. The goal is to make sure that under no circumstances the user is able to crash getfem (and the host program, matlab, scilab or python) by passing incorrect argument to the getfem interface."
msgstr ""

#: ../source/project/libdesc_interface.rst:74
# 61207afebf57476e9ecf6c21a8607a11
msgid "It also provides a kind of workspace stack, which was designed to simplify handling and cleaning of many getfem objects in matlab (since matlab does not have \"object destructors\")."
msgstr ""

#: ../source/project/libdesc_interface.rst:78
# 8e502393794a44d989f3138fe980683e
msgid ":file:`getfemint.h`, :file:`getfemint.cc`."
msgstr ""

#: ../source/project/libdesc_interface.rst:80
# 1ff2908b01904219976b63c66e3b2fa4
msgid "Define the ``mexarg_in``, ``mexarg_out`` classes, which are used to parse the list of input and output arguments to the getfem interface functions. The name  is not adequate anymore since any reference to \"mex\" has been moved into :file:`gfm_mex.c`."
msgstr ""

#: ../source/project/libdesc_interface.rst:86
# f723cd859d7346fbbd5d0a7833dbf155
msgid ":file:`gf_mesh.cc`, :file:`gf_mesh_get.cc`, :file:`gf_mesh_set.cc`, :file:`gf_fem.cc`, etc."
msgstr ""

#: ../source/project/libdesc_interface.rst:89
# 7f6f4986cea64be5958d06e537c3ee80
msgid "All the functions exported be the getfem interfaces, sorted by object type (``gf_mesh*``, ``gf_mesh_fem*``, ``gf_fem*``), and then organized as one for the object construction (``gf_mesh``), one for the object modification (``gf_mesh_set``), and one for the object inquiry (``gf_mesh_get``). Each of these files contain one main function, that receives a ``mexargs_in`` and ``mexargs_out`` stack of arguments. It parses then, and usually interprets the first argument as the name of a subfunction (``gf_mesh_get('nbpts')`` in matlab, or ``Mesh.nbpts()`` in python)."
msgstr ""

#: ../source/project/libdesc_interface.rst:98
# a24a1d1842e84242a2887a678e61d867
msgid ":file:`matlab/gfm_rpx_mexint.c`."
msgstr ""

#: ../source/project/libdesc_interface.rst:100
# a951b96cf8254062a86b469dac83cd0b
msgid "An alternative to :file:`gfm_mex.c` which is used when the ``--enable-matlab-rpc`` is passed to the ``./configure`` script. The main use for that is debugging the interface, since in that case, the matlab interface communicates via sockets with a \"getfem_server\" program, so it is possible to debug that server program, and identify memory leaks or anything else without having to mess with matlab (it is pain to debug)."
msgstr ""

#: ../source/project/libdesc_interface.rst:107
# 0d6be8aa857c4a12a242efaec4d32306
msgid ":file:`python/getfem.py`."
msgstr ""

#: ../source/project/libdesc_interface.rst:109
# c25a1d9f6c4c4ab19d71a26f010b0d91
msgid "The python interface is available as a \":file:`getfem.py`\" file which is produced during compilation by the python script \":file:`bin/extract_doc.py`\"."
msgstr ""

#: ../source/project/libdesc_interface.rst:116
# 2fb61c0fcc5c4d1086d3e2e16bb7a4ed
msgid "Objects, methods and functions of the interface"
msgstr ""

#: ../source/project/libdesc_interface.rst:118
# 0aa91cfeb66a4ffea40161bc3095712f
msgid "The main concepts manipulated by the interface are a limited number of objects (Fem, Mesh, MeshFem, Model ...), the associated methods and some functions defined on these objects."
msgstr ""

#: ../source/project/libdesc_interface.rst:121
# 17b7e17f1786480d9e108f67a4003926
msgid "A special effort has been done to facilitate the addition of new objects, methods and functions to the interface without doing it separetaly for each partsupported script language (Python, Scilab, Matlab)."
msgstr ""

#: ../source/project/libdesc_interface.rst:124
# ea446a0042964cbe91149e7b51ebaacc
msgid "All the information needed to build the interface for the different objects, methods and functions is contained in the files `interface/src/gf*.cc`. A python script (`bin/extract_doc`) produces all the necessary files from the information it takes there. In particular, it produces the python file getfem.py, the matlab m-files for the different functions and objects (including subdirectories) and it also produces the automatic documentations."
msgstr ""

#: ../source/project/libdesc_interface.rst:126
# 4acc256228fc4b099f99733e6310131a
msgid "To make all the things work automatically, a certain number of rules have to be respected:"
msgstr ""

#: ../source/project/libdesc_interface.rst:129
# 9a50308c8d5743d2bccb076af7c02d8a
msgid "An object have to be defined by three files on the interface"
msgstr ""

#: ../source/project/libdesc_interface.rst:131
# 58103c867b4f4cceb00b89ebc75859bd
msgid ":file:`gf_objectname.cc` : contains the constructors of the object"
msgstr ""

#: ../source/project/libdesc_interface.rst:133
# 6c0bce05d88e49bd93782b953232de21
msgid ":file:`gf_objectname_get.cc` : contains the methods which only get some information about the object (if any)."
msgstr ""

#: ../source/project/libdesc_interface.rst:135
# ab9a11aa742e4a7b871edc56315385cb
msgid ":file:`gf_objectname_set.cc` : contains the methods which transform the object (if any)."
msgstr ""

#: ../source/project/libdesc_interface.rst:137
# 7a3c51cdb3544f0a87eea6257e736916
msgid "A list of function is defined by only one file :file:`gf_commandname.cc` it contains a list of sub-comands."
msgstr ""

#: ../source/project/libdesc_interface.rst:141
# 107cb177ba6942d6bb196cfbc01b993d
msgid "For each file, the main commentary on the list of functions or methods is delimited by the tags '/*@GFDOC' and '@*/'. For a file corresponding to the constructors of an object, the commentary should correspond to the description of the object."
msgstr ""

#: ../source/project/libdesc_interface.rst:144
# a81413e7f6cf4246b3c2a1bd46c31184
msgid "Each non trivial file gf_*.cc contains a macro allowing to define the methods of the object or the sub-commands. In particular, this system allows to have a efficient search of the called method/function. This macro allows to declare a new method/function with the following syntax::"
msgstr ""

#: ../source/project/libdesc_interface.rst:160
# 2e471fd7a7cb4ff184c30a9e556cfac0
msgid "The first three line are a c++ commentary which describes the call of the method/function with a special syntax and also gives a description of the method/function which will be included in the documentations. The first line of this commentary is important since it will be analyzed to produce the right interface for Python, Matlab and Scilab."
msgstr ""

#: ../source/project/libdesc_interface.rst:166
# 5e48987c21ea4430ac48e3eebc9719c9
msgid "The syntax for the description of the call of a method/function is the following: After ``/*@`` a special keyword should be present. It is either ``INIT``, ``GET``, ``SET``, ``RDATTR`` or ``FUNC``. The keyword ``INIT`` means that this is the description of a constructor of an object. ``RDATTR`` is for a short method allowing to get an attribut of an object. ``GET`` is for a method of an object which does not modify it. ``SET`` is for a method which modifies an object and ``FUNC`` is for the sub-command of a function list."
msgstr ""

#: ../source/project/libdesc_interface.rst:175
# 5da2e53b6f8b40bfbb65d621dd7e0c9e
msgid "If the method/function returns a value, then a name for the return value is given (which is arbitrary) followed by ``=``."
msgstr ""

#: ../source/project/libdesc_interface.rst:178
# 7a5c7f393d3342b0a46c51b255973a61
msgid "The parameters of the method/function are described. For a method, the object itself is not mentionned. The first parameter should be the method or sub-command name between single quotes (a speical case is when this name begins with a dot; this means that it corresponds to a method/function where the command name is not required)."
msgstr ""

#: ../source/project/libdesc_interface.rst:184
# a8cca94b18864b62811362463ec8604d
msgid "The other parameters, if any, should be declared with a type. Predefined types are the following:"
msgstr ""

#: ../source/project/libdesc_interface.rst:187
# bc4f33384dae4942a7f0d7a1e7a1d204
msgid "``@CELL``   : a cell array,"
msgstr ""

#: ../source/project/libdesc_interface.rst:188
# c0825b1b250c44e191655cffcae54a69
msgid "``@imat``   : matrix of integers,"
msgstr ""

#: ../source/project/libdesc_interface.rst:189
# 03382475c4c042b0957f97cde784f412
msgid "``@ivec``   : vector of integers,"
msgstr ""

#: ../source/project/libdesc_interface.rst:190
# 955173dbe3fd47118e7477e12e3eb942
msgid "``@cvec``   : vector of complex values,"
msgstr ""

#: ../source/project/libdesc_interface.rst:191
# 3c574bf7fffa40069601b2a22851e8b4
msgid "``@dcvec``  : vector of complex values,"
msgstr ""

#: ../source/project/libdesc_interface.rst:192
# 044d9014f06c470981975547f863597d
msgid "``@dvec``   : vector of real values,"
msgstr ""

#: ../source/project/libdesc_interface.rst:193
# b0c6ab0951674ecda3fcfc6e2ad89815
msgid "``@vec``    : vector of real or complex values,"
msgstr ""

#: ../source/project/libdesc_interface.rst:194
# 3e1a0475aa9d44b9b87dea58a1597c14
msgid "``@dmat``   : matrix of real values,"
msgstr ""

#: ../source/project/libdesc_interface.rst:195
# ecb484ac9cdb4008a5ef792cb463593e
msgid "``@mat``    : matrix of real or complex values,"
msgstr ""

#: ../source/project/libdesc_interface.rst:196
# 3e199cb47db844ef90f4b6f53808107a
msgid "``@str``    : a string,"
msgstr ""

#: ../source/project/libdesc_interface.rst:197
# fe48b2bbaa5f46309d91b4891dc24be6
msgid "``@int``    : an integer,"
msgstr ""

#: ../source/project/libdesc_interface.rst:198
# e99429e921234db78650544c3ca2453b
msgid "``@bool``   : a boolean,"
msgstr ""

#: ../source/project/libdesc_interface.rst:199
# 1e4f51470a934ff0b8a57b4b1cd65f38
msgid "``@real``   : a real value,"
msgstr ""

#: ../source/project/libdesc_interface.rst:200
# fd1d2aa05ecc44d88c2e4f55220f7f8d
msgid "``@scalar`` : a real or complex value,"
msgstr ""

#: ../source/project/libdesc_interface.rst:201
# d5702e1a04574c72857f1dd8a28fddb8
msgid "``@list``   : a list."
msgstr ""

#: ../source/project/libdesc_interface.rst:203
# f05eb217e9ae4a0d9ef5c903215fd6e4
msgid "Moreover, ``@tobj`` refers to an object defined by the interface. For instance, ou can refer to ``@tmesh``, ``@tmesh_fem``, ``@tfem``, etc. There are some authorized abreviations:"
msgstr ""

#: ../source/project/libdesc_interface.rst:207
# b2281c1c7dfc4ce49babfdb67d2abd5d
msgid "``@tcs``  for  ``@tcont_struct``"
msgstr ""

#: ../source/project/libdesc_interface.rst:208
# bd00a0e799854489b1892f9824de54e0
msgid "``@tmf``  for  ``@tmesh_fem``"
msgstr ""

#: ../source/project/libdesc_interface.rst:209
# e4a1f60cdd0b4e10a016f90ca0d8eb27
msgid "``@tgt``  for  ``@tgeotrans``"
msgstr ""

#: ../source/project/libdesc_interface.rst:210
# aa934153d85e47d480d1a2697246a319
msgid "``@tgf``  for  ``@tglobal_function``"
msgstr ""

#: ../source/project/libdesc_interface.rst:211
# b20c964545f543b1856a942adc677e4b
msgid "``@tmo``  for  ``@tmesher_object``"
msgstr ""

#: ../source/project/libdesc_interface.rst:212
# 2c760b1d7bb94f7aaa242133962f439c
msgid "``@tmls``  for  ``@tmesh_levelset``"
msgstr ""

#: ../source/project/libdesc_interface.rst:213
# b96ead903ee64b4f89a7476b85691baa
msgid "``@tmim``  for  ``@tmesh_im``"
msgstr ""

#: ../source/project/libdesc_interface.rst:214
# 50bed88ac574422f8afe4ddd77951872
msgid "``@tls``  for  ``@tlevelset``"
msgstr ""

#: ../source/project/libdesc_interface.rst:215
# 3d19503a994046b584be385c7af85722
msgid "``@tsl``  for  ``@tslice``"
msgstr ""

#: ../source/project/libdesc_interface.rst:216
# a11d73825580471eb54508d3aebf72fc
msgid "``@tsp``  for  ``@tspmat``"
msgstr ""

#: ../source/project/libdesc_interface.rst:217
# ec8753fc28d245b29d8991aff4bf13b8
msgid "``@tpre``  for  ``@tprecond``"
msgstr ""

#: ../source/project/libdesc_interface.rst:220
# 5ca5c4ead6c3498b91dcf6fde43c0b90
msgid "Three dots at the end of the parameter list (``...``) mean that additional parameters are possible. Optional parameters can be described with brackets. For instance ``/*@SET v = ('name'[, @int i])``. But be carreful how it is interpreted by the :file:`extract_doc` script to build the python interface."
msgstr ""

#: ../source/project/libdesc_interface.rst:226
# 782f4e585c5c440caef17a51f5f952fc
msgid "The second to fifth parameters of the macro correspond respectively to the minimum number of input arguments, the maximum one, the minimum number of output arguments and the maximum number of output arguments. It is dynamically verified."
msgstr ""

#: ../source/project/libdesc_interface.rst:231
# e10b128313ee4f3a8649dbdab8baf7e8
msgid "Additional parameters for the function lists ...."
msgstr ""

#: ../source/project/libdesc_interface.rst:233
# 599edb5407804e09b0ead4cf5ac3a8cb
msgid "For unknown reasons, the body of the function cannot contain multiple declarations such as ``int a, b;`` (c++ believes that it is an additional parameter of the macro)."
msgstr ""

#: ../source/project/libdesc_interface.rst:239
# 2481a596813b40e1a8baa69521fe41bd
msgid "The parts of documentation included in the c++ commentaries should be in `reStructuredText`_ format. In particular, math formulas can be included with \\:math\\:\\`f(x) = 3x^2+2x+4\\` or with::"
msgstr ""

#: ../source/project/libdesc_interface.rst:247
# 3b54d57395ab4020b0be6c8117bf11c2
msgid "It is possible to refer to another method or function of the interface with the syntax ``INIT::OBJNAME('method-name', ...)``, ``GET::OBJNAME('method-name', ...)``, ``SET::OBJNAME('method-name', ...)``, ``FUNC::FUNCNAME('subcommand-name', ...)``. This will be replaced with the right syntax depending on the language (Matlab, Scilab or Python)."
msgstr ""

#: ../source/project/libdesc_interface.rst:253
# d8c9a1ad5a4541e190609d910be67568
msgid "Still in the documentations, parts for a specific language can be added by ``@MATLAB{specific part ...}``, ``@SCILAB{specific part ...}`` and ``@PYTHON{specific part ...}``. If a method/sub-command is specific to an interface, it can be added, for instance for Matlab, replacing `GET` by `MATLABGET`, `FUNC` by `MATLABFUNC`, etc. If a specific code is needed for this additional function, it can be added with the tags ``/*@MATLABEXT``, ``/*@SCILABEXT``, ``/*@PYTHONEXT``. See for instance the file :file:`gf_mesh_fem_get.cc`."
msgstr ""

#: ../source/project/libdesc_interface.rst:263
# 17d5853d1bfa462cb0a358317850e439
msgid "For Python and the Matlab object, if a `SET` method has the same name as a `GET` method, the `SET` method is prefixed by `set_`."
msgstr ""

#: ../source/project/libdesc_interface.rst:273
# 6d7703bc13da45b091d02ae02c2fa637
msgid "Adding a new function or object method to the getfem interface"
msgstr ""

#: ../source/project/libdesc_interface.rst:275
# 8f1c9ac2ae9840dbacdbd1d6042db896
msgid "If one want to add a new function ``gf_mesh_get(m, \"foobar\", .)``, then the main file to modify is :file:`gf_mesh_get.cc`. Remember to check every argument passed to the function in order to make sure that the user cannot crash scilab, matlab or python when using that function. Use the macro defined in :file:`gf_mesh_get.cc` to add your function."
msgstr ""

#: ../source/project/libdesc_interface.rst:279
# 2102d491fdca42949862f46c3445e8a0
msgid "Do not forget to add documentation for that function: in :file:`gf_mesh_get.cc`, this is the documentation that appears in the matlab/scilab/python help files (that is when on type \"``help gf_mesh_get``\" at the matlab prompt), and in the getfem_python autogenerated documentation."
msgstr ""

#: ../source/project/libdesc_interface.rst:284
# aa742c68d4d24b3c8721046b8b728748
msgid "IMPORTANT. Note that the array indices start at 0 in Python and 1 in Matlab and Scilab. A specific function::"
msgstr ""

#: ../source/project/libdesc_interface.rst:288
# eb3c35916a114067a87fefc45a57afcb
msgid "whose value is 0 in python and 1 in Matlab and Scilab has to be used to exchange indices and array of indices. Take care not to make the correction twice. Some Array of indices are automatically shifted."
msgstr ""

#: ../source/project/libdesc_interface.rst:291
# a4c8a11086d74e99949327c78a97f631
msgid "Adding a new object to the getfem interface"
msgstr ""

#: ../source/project/libdesc_interface.rst:293
# 2181306e9cfa4d40afc5abaad3adcc07
msgid "In order to add a new object to the interface, you have to build the new corresponding sources :file:`gf_obj.cc`, :file:`gf_obj_get.cc` and :file:`gf_obj_set.cc`. Of course you can take the existing ones as a model."
msgstr ""

#: ../source/project/libdesc_interface.rst:295
# 76ff99c7287e4987b1140d41d56f7c22
msgid "For the management of the object, you have to declare the class at the begining of :file:`getfemint.h` (with respect to the alphabetic order), and declare three functions::"
msgstr ""

#: ../source/project/libdesc_interface.rst:301
# 66815dce890747eeaafd884c07bc25d7
msgid "where \"name\" is the name of the object in the interface and ``object_class`` is the class name in getfem (for instance  ``getfem::mesh`` for the mesh object). Alternatively, for the object that are manipulated by a shared pointer in |gf|, the third function can return a shared pointer."
msgstr ""

#: ../source/project/libdesc_interface.rst:303
# d2bd8eb45c1e442a96ebfe368336efd5
msgid "IMPORTANT: In order to be interfaced, a |gf| object has to derive from ``dal::static_stored_object``. However, if it is not the case, a wrapper class can be defined such as the one for ``bgeot::base_poly`` (see the end of :file:`getfemint.h`)."
msgstr ""

#: ../source/project/libdesc_interface.rst:305
# e75e9fe585b44acb888c01d1b44e2aee
msgid "The previous three functions have to be implemented at the end of :file:`getfemint.cc`.It is possible to use one of the two macros defined in :file:`getfemint.cc`. The firs macro is for a standard object and the second one for an object which is manipulated in |gf| with a shared pointer."
msgstr ""

#: ../source/project/libdesc_interface.rst:307
# 836399906e0d42948050e812ce9503ca
msgid "You have also to complete functions ``name_of_getfemint_class_id`` and ``class_id_of_object`` at the end of :file:`getfemint.cc`."
msgstr ""

#: ../source/project/libdesc_interface.rst:310
# 16ba4ab2cc114c4ea175fe0eb4c564c0
msgid "You have to add the call of the interface function in :file:`getfem_interface.cc` and modifiy the file :file:`bin/extract_doc` and run the configure file."
msgstr ""

#: ../source/project/libdesc_interface.rst:312
# 2e6e43e4475244cdbf1eacceb9ab3f02
msgid "The methods ``get('char')`` and ``get('display')`` should be defined for each object. The first one should give a string allowing the object to be saved in a file and the second one is to give some information about the object. Additionaly, a constructor from a string is necessary to load the object from a file."
msgstr ""

#: ../source/project/libdesc_interface.rst:314
# eec1f3f7daab4aae8d6a8c885c3c4f46
msgid "For the Scilab interface the file :file:`sci_gateway/c/builder_gateway_c.sce.in` has to be modified and the files in the directory :file:`macros/overload`."
msgstr ""

#: ../source/project/libdesc_interface.rst:318
# 2ee06ee5c6654f328885836ee8a9936b
msgid "State"
msgstr ""

#: ../source/project/libdesc_interface.rst:322
# 46f257fc8d5e4d5686f17f19ac9af125
msgid "Perspectives"
msgstr ""

#: ../source/project/libdesc_interface.rst:323
# 00d017d818ca42139439ae7a73a4e525
msgid "The interface grows in conjunction with |gf|. The main |gf| functionalities are interfaced."
msgstr ""

