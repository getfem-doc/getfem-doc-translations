# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/project/libdesc_high_gen_assemb.rst:12
# cc4ff650ba5d4f06acd06aa6576bf691
msgid "The high-level generic assembly module in |gf|"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:16
#: ../source/project/libdesc_high_gen_assemb.rst:1
# 6a63201c535240f588f0e883a048a849
# 1c7b443cbf834a71af7d0ac3e24264b0
msgid "Description"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:18
# 99bab244310d4bf6a564d51382fc20cc
msgid "The high level generic assembly module of |gf| and its weak form language is a key module which allows to describe weak formulation of partial differential equation problems. See the description of the language in the user documentation section :ref:`ud-gasm-high`."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:21
# 1848014453814f0e816d647bdbe4062d
msgid "Files"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 597693b10a864d36b4469f427223690c
msgid "File(s)"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# ba155daba3454748ba05f5997e6ef640
msgid ":file:`getfem_generic_assembly.h`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 2851e6ea486744138ace639c6ddb96dc
msgid "Main header for exported definitions. Only this header has to be included to use the generic assembly. Other headers of the module are for internal use only."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 9dbf8cdec7484bf881eefda75e15bbee
msgid ":file:`getfem_generic_assembly_tree.h` and :file:`getfem_generic_assembly_tree.cc`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# d8266818579f4b27af637876fbd73f47
msgid "Definition of the tree structure and basic operations on it, including reading an assembly string and transform it in a syntax tree and make the invert transformation of a tree into a string."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 97ae88d316fa4ec2adf7aa191aa00190
msgid ":file:`getfem_generic_assembly_fonction_and_operators.h` and :file:`getfem_generic_assembly_fonction_and_operators.cc`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 0c9d72c7f23f42ae9d40dfbd4bd5e8cb
msgid "Definition of redefined function and nonlinear operator of the weak form language."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 4240b745dc8a4adf9fe7701c4a4e913e
msgid ":file:`getfem_generic_assembly_semantic.h` and :file:`getfem_generic_assembly_semantic.cc`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 3fc91242ebab4d49a858b31a59c0bd81
msgid "Semantic analysis and enrichment of the syntax tree. Include some operations such as making the derivation of a tree with respect to a variable or computing the tree corresponding to the gradient of an expression."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# e0dc5a067bd84dc3ae233b3dca922974
msgid ":file:`getfem_generic_assembly_workspace.cc`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# b6888aa7d14b4717aa721aa0566fc701
msgid "Methodes of the workspace object (defined in :file:`getfem_generic_assembly.h`)."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# fe93399083f1464db15c0fce1995310c
msgid ":file:`getfem_generic_assembly_compile_and_exec.h` and :file:`getfem_generic_assembly_compile_and_exec.cc`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 79c4fbdb94b946d8a8b7c1f9a38ceb9e
msgid "Definition of the optimized instructions, compilation into a sequel of optimize instructions and execution of the instructions on Gauss point/interpolation points."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# f955ed6060744303ad9a8879fa283bbd
msgid ":file:`getfem_generic_assembly_interpolation.cc`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 8a0cb581efd642358ef6d3fe2d07b32f
msgid "Interpolation operations and interpolate transformations."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:37
# 915c44c5e5b9473e9186a9a05479024b
msgid "A few implementation details"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:39
# 661ffb96073042de89c523b80dfba3ce
msgid "The assembly string is transformed in an assembly tree by a set of function in :file:`src/getfem\\_generic\\_assembly.cc`. The process has 6 steps:"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:41
# 87a63f1fba0c4514827d1fbe626497b4
msgid "Lexical analysis with the procedure ``ga_get_token(...)``."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:43
# 556a001b55e247e39ce1644a7881dc17
msgid "Syntax analysis and transformation into a syntax tree by ``ga_read_string(...)``."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:45
# 5ae06465fc6849508ea0a290027f89d4
msgid "Semantic analysis, simplification (pre-computation) of constant expressions and enrichment of the tree by ``ga_semantic_analysis(...)``."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:47
# ba1070eeea224759896f6c5a9e72c0b6
msgid "Symbolic (automatic) differentiation of an assembly tree by ``ga_derivative(...)``"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:49
# 3b0d8c2e96f0491e9a22453e19b33531
msgid "Symbolic (automatic) gradient computation of an assembly tree by ``ga_gradient(...)``"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:51
# 77fecae8674a4178af3ef8d178a013f8
msgid "Compilation in a sequence of instructions with optimizations by ``ga_compile(...)``."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:53
# ac05b56f612648e8885f6f3453de4d02
msgid "Execution of the sequence of instructions and assembly by ``ga_exec(...)``."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:55
# 3e088fb3ab9048339bfdddea0168d732
msgid "These steps are performed only once at the beginning of the assembly. The final tree is compiled in a sequence of optimized instructions which are executed on each Gauss point of each element. The compilation performed some optimizations : repeated terms are automatically detected and evaluated only once, simplifications if the mesh has uniform type of elements, simplifications for vectorized fnite element methods."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:57
# 3b05841bfe284969a811bf4b3580c615
msgid "Moreover, there is specifics function for interpolation operations (ga_interpolation(...), ga_interpolation_exec(...), ga_interpolation_Lagrange_fem, ga_interpolation_mti, ga_interpolation_im_data, ...)"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:60
# 1f603bbe2d5443c5850d76a8c7c6bcc7
msgid "Assembly tree"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:62
# 0c4ab467aa004167bdf04b6eabae85ac
msgid "Assembly strings are transformed into assembly trees by ``ga_read_string(...)``. Assembly trees are syntax trees that are progressively enriched in information in the differents steps (semantic analysis, derivation, compilation)."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:64
# 60a7b76376e5472d992ba4894035910a
msgid "The object ``ga_tree`` represents an assembly tree. It is a copyable object that only contains a pointer to the root of the tree. Each tree node is an object ``ga_tree_node`` that contains the main following information:"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:66
# 2de7810f7acb40b99af07e5ec82411a0
msgid "node_type (function, variable value, variable gradient, operation ...)"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:67
# 1195c0d4d6c040f18d933e5d64373e42
msgid "operation type for operation nodes."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:68
# b1ca53962d02407280baff087554c993
msgid "assembly tensor: used at execution time by optimized instructions to compute the intermediary results. The final result is in the assembly string of the root node at the end of the execution (for each Gauss point)."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:69
# 81b74568710143e7846cc4fc549af9bb
msgid "term type: value, order one term (ith order one test functions), order two term (with order two test functions) or with both order one and order two test functions (tangent term)."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:72
# f80991ec28844f5db0efc45d70b5087f
msgid "variable name of tests functions for order 1 or 2 terms."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:73
# 5228d94621f943c491e5ac27b560b8ec
msgid "pointer to the parent node."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:74
# 99ed1797ce8e497b91a5d719d1130d94
msgid "pointers to the children nodes."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:76
# 82b90aa1ec97433facea4c60758cc753
msgid "For example, the assembly tree for the assembly string \"a*Grad_Test2_u.Grad_Test_u\" for the stiffness matrix of a Laplacian problem can be represented as follows with its assembly tensors at each node:"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:85
# 5285d1d2f6ff4fcda948be3b9af5eb30
msgid "Assembly tensors"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:87
# c9a1bd28817e4212b9ff1a7e204b5b07
msgid "Assembly tensors are represented on each node by a ``bgeot::tensor<double>`` object. However, there is a specific structure in :file:`src/getfem\\_generic\\_assembly.cc` for assembly tensors because there is several format of assembly tensors :"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:89
# 2e71cfae3715457fb9e295f34bf12167
msgid "Normal tensor. The first and second indices may represent the test function local indices if the node represent a first or second order term. Remember that in |gf| all tensors are stored with a Fortran order. This means that for instance a for a :math:`N\\times P\\times Q` tensor one has ``t(i, j, k) = t[i + j*N + k*N*P]``."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:91
# 5b43c283d2364996bfa63b8a37424b3b
msgid "Copied tensor. When a node is detected to have exactly the same expression compared to an already compiled one, the assembly tensor will contain a pointer to the assembly tensor of the already compiled node. The consequence is that no unnecessary copy is made."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:93
# 610640c211a74836878be3a8366e7fa2
msgid "Sparse tensor with a listed sparsity. When working with a vector field, the finite element method is applied on each component. This results on vector base functions having only one nonzero component and some components are duplicated. The tensor are fully represented because it would be difficul to gain in efficiency with that kind of small sparse tensor format. However, some operation can be optimized with the knoledge of a certain sparsity (and duplication). This can change the order of complexity of a reduction. In order to allows this gain in efficiency, the tensor are labellised with some known sparsity format (vectorisation and format coming from operation applied on vectorized tensors). This results in a certain number of sparsity formats that are listed below:"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:95
# 3a8b408e6ce74acb9c3807ee0c2acf9e
msgid "1: Vectorized base sparsity format: The tensor represent a vectorized value. Each value of the condensed tensor is repeated on :math:`Q` components of the vectorized tensor. The mesh dimensions is denoted :math:`N`. For instance if :math:`\\varphi_i` are the :math:`M` local base functions on an element and the evaluation is on a Gauss point :math:`x`, then the non vectorized tensor is :math:`\\bar{t}(i) = \\varphi_i(x)` and the vectorized one is :math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k, j \\mbox{ mod } Q}` where :math:`j/M` is the integer division. For :math:`M=2`, :math:`Q=2` and :math:`N=3` the components of the two tensors are represented in the following table"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
#: ../source/project/libdesc_high_gen_assemb.rst:1
# df5b8a610aea4c54b3122f1262efc6c1
# 04545d4355cf4ed09c6dedabac439b55
msgid "Scalar tensor"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
#: ../source/project/libdesc_high_gen_assemb.rst:1
# d49d8062861841ef95f2500d673a3689
# 552ec01f3c0f45bdaacdbac84d8d1ee4
msgid "Vectorized tensor"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 5fe691bca1924cea97c70b6d892e7066
msgid ":math:`\\bar{t}(i) = \\varphi_i(x)`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# c4b8128011e7460f9353ac6340bd4319
msgid ":math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k, (j \\mbox{ mod } Q)}`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# a220814167f045c5b4c6791f1f273b4d
msgid ":math:`[\\varphi_0(x), \\varphi_1(x)]`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# e843824c27294e5a861100a84ef9e369
msgid ":math:`[\\varphi_0(x), 0, \\varphi_1(x), 0, 0, \\varphi_0(x), 0, \\varphi_1(x)]`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:114
# d88f988d2c404eb6b1eb48075574fea4
msgid "2: Grad condensed format"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# bfcc615902624557a5d7f2cb533d6802
msgid ":math:`\\bar{t}(i,j) = \\partial_j\\varphi_i(x)`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 3d8577b1b02f4d0488cfd72c715fc6e1
msgid ":math:`t(k,l,m) = \\partial_m\\varphi_{k/Q}(x) \\delta_{l, (m \\mbox{ mod } Q)}`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:1
# 8b98b78174204b3aa471c9149147e815
msgid ":math:`[\\partial_0\\varphi_0(x), \\partial_0\\varphi_1(x),` :math:`\\partial_1\\varphi_0(x), \\partial_1\\varphi_1(x),` :math:`\\partial_2\\varphi_0(x), \\partial_2\\varphi_1(x)]`"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:123
# 9741300390374b56a3399f91ade9c704
msgid "3: Hessian condensed format"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:126
# 7fd99bea32b4404cb8a2bbdd00a6082a
msgid "10: Vectorized mass: the tensor represent a scalar product of two vectorised base functions. This means a tensor :math:`t(\\cdot,\\cdot)` where :math:`t(i*Q+k, j*Q+l) = 0` for :math:`k \\ne l` and :math:`t(i*Q+k, j*Q+k)` are equals for :math:`0 \\le k < Q`."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:135
# 4f002639c0384c86a54a44bb5da755b2
msgid "Optimized instructions"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:137
# 5e758a8b78da43aca60a95aa99687acb
msgid "Optimized instructions for variable evaluation, operations, vector and matrix assembly ... to be described."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:140
# fc22c9769fb54be4bd840b1f711ee6b4
msgid "Predefined functions"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:147
# 14f5803976904e6b8c116de7e62831fa
msgid "Some predefined scalar functions are available in |gf| weak form language in order to describe a weak formulation (or also to make basic algebraic computations). This is limited to scalar functions of one or two arguments. Due to the automatic differentiation used to obtain the tangent system of described problems, the derivative each function have to be available. The principle retained is the following: For each predefined function is available:"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:143
# c154fb8a7fe84103b124422a5d7cb3a8
msgid "A C++ function which computes the value given the argument(s)."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:144
# e42c66194a39426095524b707efbb75f
msgid "The support of the function in the first each argument in term of a (possibly infinite) interval (this is for simplification of expressions)."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:146
# 373f7f93cc704010b770a2aa1b865fa8
msgid "The string corresponding of the derivative in terms of already known functions"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:149
# abb90a5769eb4096b42114bd6333c7cd
msgid "A new predefined function is easy to add. See init_predefined_functions() in file :file:`src/getfem_generic_assembly.cc`. + describe how to give the derivative ..."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:152
# 1f212fa437484b4f96fe55c01bebc120
msgid "Predefined nonlinear operators"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:154
# 9c36b05289f74d9d8542bde2637db6b1
msgid "to be described ..."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:157
# b3b97fa08afb413ab23f32eb42d47b54
msgid "State"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:158
# 31cf1529d0824739a1a51d5f22b8c58e
msgid "Stable."
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:161
# 44109c2bac004dd98326a225de3512b0
msgid "Perspectives"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:163
# ca51f75bde49403690063dffda907aee
msgid "Is a certain extension to complex data possible ?"
msgstr ""

#: ../source/project/libdesc_high_gen_assemb.rst:165
# da3550769d934d018b9924046bba1d17
msgid "More simplifications : study the possibility to automatically factorize some terms (for instance scalar ones) to reduce the number of operations."
msgstr ""

