# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/matlab/cmdref_gf_model_set.rst:8
# 9d3255f61a374645968c560dddac2efd
msgid "gf_model_set"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:10
# 2622cd1e01ce45e18e8f2d4471c62210
msgid "**Synopsis**"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:140
# c57cc95cead3439f8e04932ed55d2061
msgid "**Description :**"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:143
# cd689b60c2d74ce2ba4cf5c99fd81881
msgid "Modifies a model object."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:146
# 5503580df8234b999bc49ba68fefa719
msgid "**Command list :**"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:150
# 8659516923454083bbcdca1e1ae8820d
msgid "``gf_model_set(model M, 'clear')``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:152
# e6ce0561134e4985ac11a8e7e76b81f3
msgid "Clear the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:155
# 2fc042c22b67411897c04c412e18f58e
msgid "``gf_model_set(model M, 'add fem variable', string name, mesh_fem mf)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:157
# a43a14eb62324f8fa9c64b469d7a383e
msgid "Add a variable to the model linked to a mesh_fem. `name` is the variable name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:161
# 4adbeea397634111b2dd72793e334880
msgid "``gf_model_set(model M, 'add filtered fem variable', string name, mesh_fem mf, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:163
# 7ca55d04f8f741ff9ab390609b0e72a5
msgid "Add a variable to the model linked to a mesh_fem. The variable is filtered in the sense that only the dof on the region are considered. `name` is the variable name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:168
# 9cd7bef1554e427e92639a78390950c7
msgid "``gf_model_set(model M, 'add variable', string name, sizes)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:170
# 9c03982f9af645d28e6fbf8ce7a6f1d8
msgid "Add a variable to the model of constant sizes. `sizes` is either a integer (for a scalar or vector variable) or a vector of dimensions for a tensor variable. `name` is the variable name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:175
# d3bca3fbc87b415b9d74ef7e991d446d
msgid "``gf_model_set(model M, 'delete variable', string name)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:177
#: ../source/matlab/cmdref_gf_model_set.rst:267
# 1ea75cec2f8d454f9a0f98c42e510143
# 53720d43a8184ac1a09ce427a6f8fd3f
msgid "Delete a variable or a data from the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:180
# a224296547164801aff351d9e34fa692
msgid "``gf_model_set(model M, 'resize variable', string name, sizes)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:182
# c3bbd09d6864475d83abea81c3021c21
msgid "Resize a  constant size variable of the model.  `sizes` is either a integer (for a scalar or vector variable) or a vector of dimensions for a tensor variable. `name` is the variable name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:187
# 60abc74a2de540f18c4970d323b2826b
msgid "``gf_model_set(model M, 'add multiplier', string name, mesh_fem mf, string primalname[, mesh_im mim, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:189
# 19958ccec8394da28e42a3c9eb0b0e8a
msgid "Add a particular variable linked to a fem being a multiplier with respect to a primal variable. The dof will be filtered with the ``gmm::range_basis`` function applied on the terms of the model which link the multiplier and the primal variable. This in order to retain only linearly independent constraints on the primal variable. Optimized for boundary multipliers."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:197
# bdc8cf6c0f88447b8f9b92639129d2b8
msgid "``gf_model_set(model M, 'add im data', string name, mesh_imd mimd)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:199
# 002f0407abfd4a649d749e5814e806bf
msgid "Add a data set to the model linked to a mesh_imd. `name` is the data name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:203
# 6b427086b7ea4df69128ab8aa87fa68c
msgid "``gf_model_set(model M, 'add fem data', string name, mesh_fem mf[, sizes])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:205
# 9ec75d44161c410b9ce53d538d49de3f
msgid "Add a data to the model linked to a mesh_fem. `name` is the data name, `sizes` an optional parameter which is either an integer  or a vector of suplementary dimensions with respect to `mf`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:210
# 535d514c6eeb43a5bbddfe5005bde828
msgid "``gf_model_set(model M, 'add initialized fem data', string name, mesh_fem mf, vec V[, sizes])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:212
# d2e1e73a070c422bacd7b61adc46ed2a
msgid "Add a data to the model linked to a mesh_fem. `name` is the data name. The data is initiakized with `V`. The data can be a scalar or vector field. `sizes` an optional parameter which is either an integer or a vector of suplementary dimensions with respect to `mf`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:218
# b3c83e7971764b16a9a7f73ffcbfe721
msgid "``gf_model_set(model M, 'add data', string name, int size)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:220
# 582713e7bc894abcae69371c1973c950
msgid "Add a fixed size data to the model.  `sizes` is either a integer (for a scalar or vector data) or a vector of dimensions for a tensor data. `name` is the data name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:225
# faa2a51519c14c8e8874f30a97a498f4
msgid "``gf_model_set(model M, 'add macro', string name, string expr)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:227
# 83f634e787094f4088a47fda6a668256
msgid "Define a new macro for the high generic assembly language. The name include the parameters. For instance name='sp(a,b)', expr='a.b' is a valid definition. Macro without parameter can also be defined. For instance name='x1', expr='X[1]' is valid. Teh form name='grad(u)', expr='Grad_u' is also allowed but in that case, the parameter 'u' will only be allowed to be a variable name when using the macro. Note that macros can be directly defined inside the assembly strings with the keyword 'Def'."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:238
# 460f3bdb60b14ca8b9bf5d4fe7c3a71a
msgid "``gf_model_set(model M, 'del macro', string name)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:240
# a86a086e50b84f9bb2255ad68b864b4a
msgid "Delete a previously defined macro for the high generic assembly language."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:244
# b4c9352fe13a4ba0b023a1a903948946
msgid "``gf_model_set(model M, 'add initialized data', string name, vec V[, sizes])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:246
# 787cb1af412245e98e61e76ef4207289
msgid "Add an initialized fixed size data to the model. `sizes` an optional parameter which is either an integer  or a vector dimensions that describes the format of the data. By default, the data is considered to b a vector field. `name` is the data name and `V` is the value of the data."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:253
# 0cae03a0fc804dfe98d10b1a3e8bded6
msgid "``gf_model_set(model M, 'variable', string name, vec V)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:255
# 0c68a786780945eca3f3487ca390bfe4
msgid "Set the value of a variable or data. `name` is the data name."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:258
# e0d9ecea5a1a4490aff5cfaf568634bc
msgid "``gf_model_set(model M, 'to variables', vec V)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:260
# d2a9081b569b484bbbb258638c500453
msgid "Set the value of the variables of the model with the vector `V`. Typically, the vector `V` results of the solve of the tangent linear system (useful to solve your problem with you own solver)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:265
# 1571c7fee351418ca868b6bb12a65c3c
msgid "``gf_model_set(model M, 'delete brick', int ind_brick)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:270
# 12b6ad43c5004251b4e78e8ba6ae10ab
msgid "``gf_model_set(model M, 'define variable group', string name[, string varname, ...])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:272
# e27400e15e41492ea54c9c0e82fab414
msgid "Defines a group of variables for the interpolation (mainly for the raytracing interpolation transformation."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:276
# dbe9c0aec4c14bed95be0a7f47401da6
msgid "``gf_model_set(model M, 'add elementary rotated RT0 projection', string transname)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:278
# 222b3b36cec44df4a6ea705603c7fe2e
msgid "Experimental method ..."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:281
# 5053c7d28bf441f2b241a09a431a793f
msgid "``gf_model_set(model M, 'add interpolate transformation from expression', string transname, mesh source_mesh, mesh target_mesh, string expr)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:283
# 4802bdb8b2e84360a720617bbe67ea1d
msgid "Add a transformation to the model from mesh `source_mesh` to mesh `target_mesh` given by the expression `expr` which corresponds to a high-level generic assembly expression which may contains some variable of the model. CAUTION: the derivative of the transformation with used variable is taken into account in the computation of the tangen system. However, order two derivative is not implemented, so such tranformation is not allowed in the definition of a potential."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:293
# 41ba633031b84d36a2d6fa95f50ab72a
msgid "``gf_model_set(model M, 'add element extrapolation transformation', string transname, mesh source_mesh, mat elt_corr)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:295
# a7acb6dcb788431b9eff86e045942182
msgid "Add a special interpolation transformation which represents the identity transformation but allows to evaluate the expression on another element than the current element by polynomial extrapolation. It is used for stabilization term in fictitious domain applications. the array elt_cor should be a two entry array whose first line contains the elements concerned by the transformation and the second line the respective elements on which the extrapolation has to be made. If an element is not listed in elt_cor the evaluation is just made on the current element."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:306
# 1ecdde6f7b634197b84d832980522de5
msgid "``gf_model_set(model M, 'add standard secondary domain', string name, mesh_im mim, int region = -1)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:308
# f9ffbd8271a0425f9c7de57702c0921d
msgid "Add a secondary domain to the model which can be used in a weak-form language expression for integration on the product of two domains. `name` is the name of the secondary domain, `mim` is an integration method on this domain and `region` the region on which the integration is to be performed."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:313
# 636c8794423b496c9ad6d0cde6d819b1
msgid "``gf_model_set(model M, 'set element extrapolation correspondance', string transname, mat elt_corr)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:315
# dd234ba6aacc4a87a9db8f2172520eeb
msgid "Change the correspondance map of an element extrapolation interpolate transformation."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:319
# f6dc77cb6a7d40239f1cadf04c7e15ec
msgid "``gf_model_set(model M, 'add raytracing transformation', string transname, scalar release_distance)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:321
# d71850d2a802419abdcd515c08b2e2ec
msgid "Add a raytracing interpolate transformation called `transname` to a model to be used by the generic assembly bricks. CAUTION: For the moment, the derivative of the transformation is not taken into account in the model solve."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:327
# 556df7eb4bbb4bf1b77b65b4313491f8
msgid "``gf_model_set(model M, 'add master contact boundary to raytracing transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:329
# 0938d78dda1644969550ca278de2a394
msgid "Add a master contact boundary with corresponding displacement variable `dispname` on a specific boundary `region` to an existing raytracing interpolate transformation called `transname`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:334
# a74a69955c654e6189cef2cc677d016a
msgid "``gf_model_set(model M, 'add slave contact boundary to raytracing transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:336
# 489b1bfb49c44caba82294c595fa4554
msgid "Add a slave contact boundary with corresponding displacement variable `dispname` on a specific boundary `region` to an existing raytracing interpolate transformation called `transname`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:341
# 64918a46355a4a2fbcc3b2e6461bd61f
msgid "``gf_model_set(model M, 'add rigid obstacle to raytracing transformation', string transname, string expr, int N)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:343
# 01fd690711b841e99102320cda9ddc5b
msgid "Add a rigid obstacle whose geometry corresponds to the zero level-set of the high-level generic assembly expression `expr` to an existing raytracing interpolate transformation called `transname`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:349
# 28605c1c197b40eeaeb4154c63751817
msgid "``gf_model_set(model M, 'add projection transformation', string transname, scalar release_distance)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:351
# 3293cf45cbae4eeda294ff55c7e82f9e
msgid "Add a projection interpolate transformation called `transname` to a model to be used by the generic assembly bricks. CAUTION: For the moment, the derivative of the transformation is not taken into account in the model solve."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:357
# f00a74c5b46247c298d72d4d63579291
msgid "``gf_model_set(model M, 'add master contact boundary to projection transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:359
# eb8e1ede9d674e93bd418a37097ee463
msgid "Add a master contact boundary with corresponding displacement variable `dispname` on a specific boundary `region` to an existing projection interpolate transformation called `transname`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:364
# 052fa469fa854c30a7c32f2a0265ba49
msgid "``gf_model_set(model M, 'add slave contact boundary to projection transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:366
# 83ccd065e7ad4cba86767007c30199f1
msgid "Add a slave contact boundary with corresponding displacement variable `dispname` on a specific boundary `region` to an existing projection interpolate transformation called `transname`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:371
# 934b84dbe0784e13aa297c5a92667c6f
msgid "``gf_model_set(model M, 'add rigid obstacle to projection transformation', string transname, string expr, int N)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:373
# f196f085074b488c85bb0cdd5abc529e
msgid "Add a rigid obstacle whose geometry corresponds to the zero level-set of the high-level generic assembly expression `expr` to an existing projection interpolate transformation called `transname`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:379
# e18de316da924d61a3af4718bd0c1474
msgid "``ind = gf_model_set(model M, 'add linear term', mesh_im mim, string expression[, int region[, int is_symmetric[, int is_coercive]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:381
# 150eebeae62c4e4285d0f75399c738a8
msgid "Adds a matrix term given by the assembly string `expr` which will be assembled in region `region` and with the integration method `mim`. Only the matrix term will be taken into account, assuming that it is linear. The advantage of declaring a term linear instead of nonlinear is that it will be assembled only once and no assembly is necessary for the residual. Take care that if the expression contains some variables and if the expression is a potential or of first order (i.e. describe the weak form, not the derivative of the weak form), the expression will be derivated with respect to all variables. You can specify if the term is symmetric, coercive or not. If you are not sure, the better is to declare the term not symmetric and not coercive. But some solvers (conjugate gradient for instance) are not allowed for non-coercive problems. `brickname` is an otpional name for the brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:399
# 428cfba4c3914b2f9b304f1034e8a9f4
msgid "``ind = gf_model_set(model M, 'add linear twodomain term', mesh_im mim, string expression, int region, string secondary_domain[, int is_symmetric[, int is_coercive]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:401
# 87b5c6f46ec445e88e6cceb8dd903715
msgid "Adds a linear term given by a weak form language expression like gf_model_set(model M, 'add linear term') but for an integration on a direct product of two domains, a first specfied by ``mim`` and ``region`` and a second one by ``secondary_domain`` which has to be declared first into the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:408
# 4ab1aa70dff044e4a028f7a050e2b0cd
msgid "``ind = gf_model_set(model M, 'add linear generic assembly brick', mesh_im mim, string expression[, int region[, int is_symmetric[, int is_coercive]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:410
# 5791dde63cc541238915b6867378e322
msgid "Deprecated. Use gf_model_set(model M, 'add linear term') instead."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:413
# 01ee841ffb194dd099a9045ece0bcb63
msgid "``ind = gf_model_set(model M, 'add nonlinear term', mesh_im mim, string expression[, int region[, int is_symmetric[, int is_coercive]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:415
# 88324c740f71406895ce18f45793640b
msgid "Adds a nonlinear term given by the assembly string `expr` which will be assembled in region `region` and with the integration method `mim`. The expression can describe a potential or a weak form. Second order terms (i.e. containing second order test functions, Test2) are not allowed. You can specify if the term is symmetric, coercive or not. If you are not sure, the better is to declare the term not symmetric and not coercive. But some solvers (conjugate gradient for instance) are not allowed for non-coercive problems. `brickname` is an otpional name for the brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:427
# 96b5e91df1af4789bc44ca4d35730415
msgid "``ind = gf_model_set(model M, 'add nonlinear twodomain term', mesh_im mim, string expression, int region, string secondary_domain[, int is_symmetric[, int is_coercive]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:429
# ac009c13b6d742ee8b7b63b05bb752eb
msgid "Adds a nonlinear term given by a weak form language expression like gf_model_set(model M, 'add nonlinear term') but for an integration on a direct product of two domains, a first specfied by ``mim`` and ``region`` and a second one by ``secondary_domain`` which has to be declared first into the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:436
# c1876632d2c3467bbd93703bbaa27899
msgid "``ind = gf_model_set(model M, 'add nonlinear generic assembly brick', mesh_im mim, string expression[, int region[, int is_symmetric[, int is_coercive]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:438
# 72911d85e2604259ad5880480b994e8a
msgid "Deprecated. Use gf_model_set(model M, 'add nonlinear term') instead."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:441
# 942ce3c880724270905a02a27c02fdc3
msgid "``ind = gf_model_set(model M, 'add source term', mesh_im mim, string expression[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:443
# 52b27ec60f55403db4469237bdb3c7b7
msgid "Adds a source term given by the assembly string `expr` which will be assembled in region `region` and with the integration method `mim`. Only the residual term will be taken into account. Take care that if the expression contains some variables and if the expression is a potential, the expression will be derivated with respect to all variables. `brickname` is an optional name for the brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:452
# cd52830098cb4e7bb3209a0598475298
msgid "``ind = gf_model_set(model M, 'add twodomain source term', mesh_im mim, string expression, int region, string secondary_domain)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:454
# 22e472aa4bc24bfa8707bc9e9681be60
msgid "Adds a source term given by a weak form language expression like gf_model_set(model M, 'add source term') but for an integration on a direct product of two domains, a first specfied by ``mim`` and ``region`` and a second one by ``secondary_domain`` which has to be declared first into the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:461
# 069e0f5fb8194e62b1afeddbe79a12e3
msgid "``ind = gf_model_set(model M, 'add source term generic assembly brick', mesh_im mim, string expression[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:463
# 23a7f8c7b89e438f8eb0b40b1cd1ad58
msgid "Deprecated. Use gf_model_set(model M, 'add source term') instead."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:466
# 51a013c14fb6431c8dbf62cf136ccacf
msgid "``gf_model_set(model M, 'add assembly assignment', string dataname, string expression[, int region[, int order[, int before]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:468
# 4bb2b78ed6fb432fa0f6497295b91f57
msgid "Adds expression `expr` to be evaluated at assembly time and being assigned to the data `dataname` which has to be of im_data type. This allows for instance to store a sub-expression of an assembly computation to be used on an other assembly. It can be used for instance to store the plastic strain in plasticity models. `order` represents the order of assembly where this assignement has to be done (potential(0), weak form(1) or tangent system(2) or at each order(-1)). The default value is 1. If before = 1, the the assignement is perfromed before the computation of the other assembly terms, such that the data can be used in the remaining of the assembly as an intermediary result (be careful that it is still considered as a data, no derivation of the expression is performed for the tangent system). If before = 0 (default), the assignement is done after the assembly terms."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:485
# 78239ba46894487ba09e4c9120e9b592
msgid "``gf_model_set(model M, 'clear assembly assignment')``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:487
# a3b687ca766d4164bf6c479e8882fff8
msgid "Delete all added assembly assignments"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:491
# e3d20fad6ce742a0adc20233a2a68fee
msgid "``ind = gf_model_set(model M, 'add Laplacian brick', mesh_im mim, string varname[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:493
# 9765afb80a44487987922b913bc8df4b
msgid "Add a Laplacian term to the model relatively to the variable `varname` (in fact with a minus : :math:`-\\text{div}(\\nabla u)`). If this is a vector valued variable, the Laplacian term is added componentwise. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:501
# 9165219c326f4ceba0785f042fbb74d7
msgid "``ind = gf_model_set(model M, 'add generic elliptic brick', mesh_im mim, string varname, string dataname[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:503
# 4a176f43b2864dd08a818c636b17c4fe
msgid "Add a generic elliptic term to the model relatively to the variable `varname`. The shape of the elliptic term depends both on the variable and the data. This corresponds to a term :math:`-\\text{div}(a\\nabla u)` where :math:`a` is the data and :math:`u` the variable. The data can be a scalar, a matrix or an order four tensor. The variable can be vector valued or not. If the data is a scalar or a matrix and the variable is vector valued then the term is added componentwise. An order four tensor data is allowed for vector valued variable only. The data can be constant or describbed on a fem. Of course, when the data is a tensor describe on a finite element method (a tensor field) the data can be a huge vector. The components of the matrix/tensor have to be stored with the fortran order (columnwise) in the data vector (compatibility with blas). The symmetry of the given matrix/tensor is not verified (but assumed). If this is a vector valued variable, the elliptic term is added componentwise. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Note that for the real version which uses the high-level generic assembly language, `dataname` can be any regular expression of the high-level generic assembly language (like \"1\", \"sin(X(1))\" or \"Norm(u)\" for instance) even depending on model variables. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:529
# f9b7b079b3954ece89f25ccc132f25d7
msgid "``ind = gf_model_set(model M, 'add source term brick', mesh_im mim, string varname, string dataexpr[, int region[, string directdataname]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:531
# 81c96e087aa548d8bb09a5f99db10b25
msgid "Add a source term to the model relatively to the variable `varname`. The source term is represented by `dataexpr` which could be any regular expression of the high-level generic assembly language (except for the complex version where it has to be a declared data of the model). `region` is an optional mesh region on which the term is added. An additional optional data `directdataname` can be provided. The corresponding data vector will be directly added to the right hand side without assembly. Note that when region is a boundary, this brick allows to prescribe a nonzero Neumann boundary condition. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:544
# 034789e6b0264242ad43fd8f10e3adf7
msgid "``ind = gf_model_set(model M, 'add normal source term brick', mesh_im mim, string varname, string dataname, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:546
# a6b53dadb1514aae8b05c096c9d30faf
msgid "Add a source term on the variable `varname` on a boundary `region`. This region should be a boundary. The source term is represented by the data `dataepxpr` which could be any regular expression of the high-level generic assembly language (except for the complex version where it has to be a declared data of the model). A scalar product with the outward normal unit vector to the boundary is performed. The main aim of this brick is to represent a Neumann condition with a vector data without performing the scalar product with the normal as a pre-processing. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:558
# 0282f45f3fad42e1806a0a437a113d47
msgid "``ind = gf_model_set(model M, 'add Dirichlet condition with simplification', string varname, int region[, string dataname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:560
# 640a96f308ef4b809af4906d931b01cb
msgid "Adds a (simple) Dirichlet condition on the variable `varname` and the mesh region `region`. The Dirichlet condition is prescribed by a simple post-treatment of the final linear system (tangent system for nonlinear problems) consisting of modifying the lines corresponding to the degree of freedom of the variable on `region` (0 outside the diagonal, 1 on the diagonal of the matrix and the expected value on the right hand side). The symmetry of the linear system is kept if all other bricks are symmetric. This brick is to be reserved for simple Dirichlet conditions (only dof declared on the correspodning boundary are prescribed). The application of this brick on reduced dof may be problematic. Intrinsic vectorial finite element method are not supported. `dataname` is the optional right hand side of  the Dirichlet condition. It could be constant (but in that case, it can only be applied to Lagrange f.e.m.) or (important) described on the same finite element method as `varname`. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:580
# 65a3313008a54ed58a2e315d61eb2468
msgid "``ind = gf_model_set(model M, 'add Dirichlet condition with multipliers', mesh_im mim, string varname, mult_description, int region[, string dataname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:582
# 257c7765b23a41039232d3aa1f509e96
msgid "Add a Dirichlet condition on the variable `varname` and the mesh region `region`. This region should be a boundary. The Dirichlet condition is prescribed with a multiplier variable described by `mult_description`. If `mult_description` is a string this is assumed to be the variable name corresponding to the multiplier (which should be first declared as a multiplier variable on the mesh region in the model). If it is a finite element method (mesh_fem object) then a multiplier variable will be added to the model and build on this finite element method (it will be restricted to the mesh region `region` and eventually some conflicting dofs with some other multiplier variables will be suppressed). If it is an integer, then a  multiplier variable will be added to the model and build on a classical finite element of degree that integer. `dataname` is the optional right hand side of  the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:600
# f49dadf6b6dc4dc1a10457c3954ca65c
msgid "``ind = gf_model_set(model M, 'add Dirichlet condition with Nitsche method', mesh_im mim, string varname, string Neumannterm, string datagamma0, int region[, scalar theta][, string dataname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:602
# 7dc08efa11f14cc4a9eceb7835a18122
msgid "Add a Dirichlet condition on the variable `varname` and the mesh region `region`. This region should be a boundary. `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the high-level generic assembly language. This term can be obtained by gf_model_get(model M, 'Neumann term', varname, region) once all volumic bricks have been added to the model. The Dirichlet condition is prescribed with Nitsche's method. `datag` is the optional right hand side of the Dirichlet condition. `datagamma0` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` (default) is the simplest method for which the second derivative of the Neumann term is not necessary even for nonlinear problems. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:621
# d83c3baa62f446d0b31eb48e56d99771
msgid "``ind = gf_model_set(model M, 'add Dirichlet condition with penalization', mesh_im mim, string varname, scalar coeff, int region[, string dataname, mesh_fem mf_mult])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:623
# 008eedc11838461597917e1fd3d1935c
msgid "Add a Dirichlet condition on the variable `varname` and the mesh region `region`. This region should be a boundary. The Dirichlet condition is prescribed with penalization. The penalization coefficient is initially `coeff` and will be added to the data of the model. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed. `mf_mult` is an optional parameter which allows to weaken the Dirichlet condition specifying a multiplier space. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:635
# ef06d99e30b9420fb88891b4cd0d73fb
msgid "``ind = gf_model_set(model M, 'add normal Dirichlet condition with multipliers', mesh_im mim, string varname, mult_description, int region[, string dataname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:637
# a9b007683fd141e6a14725836e41c18e
msgid "Add a Dirichlet condition to the normal component of the vector (or tensor) valued variable `varname` and the mesh region `region`. This region should be a boundary. The Dirichlet condition is prescribed with a multiplier variable described by `mult_description`. If `mult_description` is a string this is assumed to be the variable name corresponding to the multiplier (which should be first declared as a multiplier variable on the mesh region in the model). If it is a finite element method (mesh_fem object) then a multiplier variable will be added to the model and build on this finite element method (it will be restricted to the mesh region `region` and eventually some conflicting dofs with some other multiplier variables will be suppressed). If it is an integer, then a  multiplier variable will be added to the model and build on a classical finite element of degree that integer. `dataname` is the optional right hand side of  the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed (scalar if the variable is vector valued, vector if the variable is tensor valued). Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:658
# a8ddc15262a84472a3c19bb64d78d36c
msgid "``ind = gf_model_set(model M, 'add normal Dirichlet condition with penalization', mesh_im mim, string varname, scalar coeff, int region[, string dataname, mesh_fem mf_mult])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:660
# c5402b4e7d7a4045b36311de2faf783e
msgid "Add a Dirichlet condition to the normal component of the vector (or tensor) valued variable `varname` and the mesh region `region`. This region should be a boundary. The Dirichlet condition is prescribed with penalization. The penalization coefficient is initially `coeff` and will be added to the data of the model. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed (scalar if the variable is vector valued, vector if the variable is tensor valued). `mf_mult` is an optional parameter which allows to weaken the Dirichlet condition specifying a multiplier space. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:675
# d1255dbc8bdf4a34a347672c3479c0f3
msgid "``ind = gf_model_set(model M, 'add normal Dirichlet condition with Nitsche method', mesh_im mim, string varname, string Neumannterm, string gamma0name, int region[, scalar theta][, string dataname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:677
# 9308f0838c70427eb7eee5fa054a7bad
msgid "Add a Dirichlet condition to the normal component of the vector (or tensor) valued variable `varname` and the mesh region `region`. This region should be a boundary. `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the high-level generic assembly language. This term can be obtained by gf_model_get(model M, 'Neumann term', varname, region) once all volumic bricks have been added to the model. The Dirichlet condition is prescribed with Nitsche's method. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary even for nonlinear problems. Returns the brick index in the model. (This brick is not fully tested)"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:700
# f0f3ceacefad40b7b6296346e8605a31
msgid "``ind = gf_model_set(model M, 'add generalized Dirichlet condition with multipliers', mesh_im mim, string varname, mult_description, int region, string dataname, string Hname)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:702
# cbfb93cac9994484a4107d85d4b94c7d
msgid "Add a Dirichlet condition on the variable `varname` and the mesh region `region`.  This version is for vector field. It prescribes a condition :math:`Hu = r` where `H` is a matrix field. The region should be a boundary. The Dirichlet condition is prescribed with a multiplier variable described by `mult_description`. If `mult_description` is a string this is assumed to be the variable name corresponding to the multiplier (which should be first declared as a multiplier variable on the mesh region in the model). If it is a finite element method (mesh_fem object) then a multiplier variable will be added to the model and build on this finite element method (it will be restricted to the mesh region `region` and eventually some conflicting dofs with some other multiplier variables will be suppressed). If it is an integer, then a  multiplier variable will be added to the model and build on a classical finite element of degree that integer. `dataname` is the right hand side of  the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed. `Hname` is the data corresponding to the matrix field `H`. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:724
# 15bcab2128d643a48c2e89e1e2a9689c
msgid "``ind = gf_model_set(model M, 'add generalized Dirichlet condition with penalization', mesh_im mim, string varname, scalar coeff, int region, string dataname, string Hname[, mesh_fem mf_mult])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:726
# d04ef0d42215466091ec931dd31f6617
msgid "Add a Dirichlet condition on the variable `varname` and the mesh region `region`. This version is for vector field. It prescribes a condition :math:`Hu = r` where `H` is a matrix field. The region should be a boundary. The Dirichlet condition is prescribed with penalization. The penalization coefficient is intially `coeff` and will be added to the data of the model. `dataname` is the right hand side of the Dirichlet condition. It could be constant or described on a fem; scalar or vector valued, depending on the variable on which the Dirichlet condition is prescribed. `Hname` is the data corresponding to the matrix field `H`. It has to be a constant matrix or described on a scalar fem. `mf_mult` is an optional parameter which allows to weaken the Dirichlet condition specifying a multiplier space. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:744
# 4714ccb963114254b9371bfd46f7e06d
msgid "``ind = gf_model_set(model M, 'add generalized Dirichlet condition with Nitsche method', mesh_im mim, string varname, string Neumannterm, string gamma0name, int region[, scalar theta], string dataname, string Hname)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:746
# 1f192c8116e5426f9e3742df87c3deb2
msgid "Add a Dirichlet condition on the variable `varname` and the mesh region `region`. This version is for vector field. It prescribes a condition @f$ Hu = r @f$ where `H` is a matrix field. CAUTION : the matrix H should have all eigenvalues equal to 1 or 0. The region should be a boundary.   `Neumannterm` is the expression of the Neumann term (obtained by the Green formula) described as an expression of the high-level generic assembly language. This term can be obtained by gf_model_get(model M, 'Neumann term', varname, region) once all volumic bricks have been added to the model.  The Dirichlet condition is prescribed with Nitsche's method. `dataname` is the optional right hand side of the Dirichlet condition. It could be constant or described on a fem. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary even for nonlinear problems. `Hname` is the data corresponding to the matrix field `H`. It has to be a constant matrix or described on a scalar fem. Returns the brick index in the model. (This brick is not fully tested)"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:773
# 9b2d328041544037b0b1690dcd2143bc
msgid "``ind = gf_model_set(model M, 'add pointwise constraints with multipliers', string varname, string dataname_pt[, string dataname_unitv] [, string dataname_val])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:775
# 7a7b73457d6f452ba849ea526c6d786b
msgid "Add some pointwise constraints on the variable `varname` using multiplier. The multiplier variable is automatically added to the model. The conditions are prescribed on a set of points given in the data `dataname_pt` whose dimension is the number of points times the dimension of the mesh. If the variable represents a vector field, one has to give the data `dataname_unitv` which represents a vector of dimension the number of points times the dimension of the vector field which should store some unit vectors. In that case the prescribed constraint is the scalar product of the variable at the corresponding point with the corresponding unit vector. The optional data `dataname_val` is the vector of values to be prescribed at the different points. This brick is specifically designed to kill rigid displacement in a Neumann problem. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:793
# d8b820784278477eb0bd57e339e0fa4e
msgid "``ind = gf_model_set(model M, 'add pointwise constraints with given multipliers', string varname, string multname, string dataname_pt[, string dataname_unitv] [, string dataname_val])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:795
# 5ef5f50abea74d6bbc4ec1bfcac05b1c
msgid "Add some pointwise constraints on the variable `varname` using a given multiplier `multname`. The conditions are prescribed on a set of points given in the data `dataname_pt` whose dimension is the number of points times the dimension of the mesh. The multiplier variable should be a fixed size variable of size the number of points. If the variable represents a vector field, one has to give the data `dataname_unitv` which represents a vector of dimension the number of points times the dimension of the vector field which should store some unit vectors. In that case the prescribed constraint is the scalar product of the variable at the corresponding point with the corresponding unit vector. The optional data `dataname_val` is the vector of values to be prescribed at the different points. This brick is specifically designed to kill rigid displacement in a Neumann problem. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:815
# 227721c3e7494d899ce7da8e5dffb335
msgid "``ind = gf_model_set(model M, 'add pointwise constraints with penalization', string varname, scalar coeff, string dataname_pt[, string dataname_unitv] [, string dataname_val])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:817
# 90b4ba3e4bd142ee9363ed1cb939fc6e
msgid "Add some pointwise constraints on the variable `varname` thanks to a penalization. The penalization coefficient is initially `penalization_coeff` and will be added to the data of the model. The conditions are prescribed on a set of points given in the data `dataname_pt` whose dimension is the number of points times the dimension of the mesh. If the variable represents a vector field, one has to give the data `dataname_unitv` which represents a vector of dimension the number of points times the dimension of the vector field which should store some unit vectors. In that case the prescribed constraint is the scalar product of the variable at the corresponding point with the corresponding unit vector. The optional data `dataname_val` is the vector of values to be prescribed at the different points. This brick is specifically designed to kill rigid displacement in a Neumann problem. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:836
# 79b9addafc1a4eeaac2ad2c7c0be4d54
msgid "``gf_model_set(model M, 'change penalization coeff', int ind_brick, scalar coeff)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:838
# 1e25c4a782d546fda98d1bd54fc9dfe7
msgid "Change the penalization coefficient of a Dirichlet condition with penalization brick. If the brick is not of this kind, this function has an undefined behavior."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:843
# 5810561703724878a581b0c44a415519
msgid "``ind = gf_model_set(model M, 'add Helmholtz brick', mesh_im mim, string varname, string dataexpr[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:845
# 0148e4423c3341b2a43181cad73b1290
msgid "Add a Helmholtz term to the model relatively to the variable `varname`. `dataexpr` is the wave number. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:851
# ba706b69a30d424ca8910e13c0231f59
msgid "``ind = gf_model_set(model M, 'add Fourier Robin brick', mesh_im mim, string varname, string dataexpr, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:853
# 220851f15588497ab833e1717796991e
msgid "Add a Fourier-Robin term to the model relatively to the variable `varname`. This corresponds to a weak term of the form :math:`\\int (qu).v`. `dataexpr` is the parameter :math:`q` of the Fourier-Robin condition.  It can be an arbitrary valid expression of the high-level generic assembly language (except for the complex version for which it should be a data of the model). `region` is the mesh region on which the term is added. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:862
# 4bb245f3c74e4aa1bcaf46d4e0982f45
msgid "``ind = gf_model_set(model M, 'add constraint with multipliers', string varname, string multname, spmat B, {vec L | string dataname})``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:864
# 3ac5e65192624a6ead23ad4bb991b9d9
msgid "Add an additional explicit constraint on the variable `varname` thank to a multiplier `multname` peviously added to the model (should be a fixed size variable). The constraint is :math:`BU=L` with `B` being a rectangular sparse matrix. It is possible to change the constraint at any time with the methods gf_model_set(model M, 'set private matrix') and gf_model_set(model M, 'set private rhs'). If `dataname` is specified instead of `L`, the vector `L` is defined in the model as data with the given name. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:874
# b329b63e325d4223a46f1393c38fc7d0
msgid "``ind = gf_model_set(model M, 'add constraint with penalization', string varname, scalar coeff, spmat B, {vec L | string dataname})``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:876
# c0aec4b09d154d95af333a0cc6a86d0d
msgid "Add an additional explicit penalized constraint on the variable `varname`. The constraint is :math`BU=L` with `B` being a rectangular sparse matrix. Be aware that `B` should not contain a palin row, otherwise the whole tangent matrix will be plain. It is possible to change the constraint at any time with the methods gf_model_set(model M, 'set private matrix') and gf_model_set(model M, 'set private rhs'). The method gf_model_set(model M, 'change penalization coeff') can be used. If `dataname` is specified instead of `L`, the vector `L` is defined in the model as data with the given name. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:889
# d59e0e87dd0448c48c157635eabd7bff
msgid "``ind = gf_model_set(model M, 'add explicit matrix', string varname1, string varname2, spmat B[, int issymmetric[, int iscoercive]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:891
# 4eda4d41fad340529015c8e81207c539
msgid "Add a brick representing an explicit matrix to be added to the tangent linear system relatively to the variables `varname1` and `varname2`. The given matrix should have has many rows as the dimension of `varname1` and as many columns as the dimension of `varname2`. If the two variables are different and if `issymmetric` is set to 1 then the transpose of the matrix is also added to the tangent system (default is 0). Set `iscoercive` to 1 if the term does not affect the coercivity of the tangent system (default is 0). The matrix can be changed by the command gf_model_set(model M, 'set private matrix'). Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:903
# 79bbcb84e4994676b9c605f5b799639b
msgid "``ind = gf_model_set(model M, 'add explicit rhs', string varname, vec L)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:905
# 6fc04eb30f0a4f30b3d1eebac390df33
msgid "Add a brick representing an explicit right hand side to be added to the right hand side of the tangent linear system relatively to the variable `varname`. The given rhs should have the same size than the dimension of `varname`. The rhs can be changed by the command gf_model_set(model M, 'set private rhs'). If `dataname` is specified instead of `L`, the vector `L` is defined in the model as data with the given name. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:914
# acb94433a2824f1fa61adf14d79f95fe
msgid "``gf_model_set(model M, 'set private matrix', int indbrick, spmat B)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:916
# 281f3afdd7814132a90424a3ed48e238
msgid "For some specific bricks having an internal sparse matrix (explicit bricks: 'constraint brick' and 'explicit matrix brick'), set this matrix."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:921
# ace77e34a3a74b5f874e6be9d05a7c58
msgid "``gf_model_set(model M, 'set private rhs', int indbrick, vec B)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:923
# 9bc087871d094b9d8584caa0d0ca41fa
msgid "For some specific bricks having an internal right hand side vector (explicit bricks: 'constraint brick' and 'explicit rhs brick'), set this rhs."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:928
# 02782aa121f049c88ac4c081241dad44
msgid "``ind = gf_model_set(model M, 'add isotropic linearized elasticity brick', mesh_im mim, string varname, string dataname_lambda, string dataname_mu[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:930
# d68e184ca8dd438887e42d050d2a146b
msgid "Add an isotropic linearized elasticity term to the model relatively to the variable `varname`. `dataname_lambda` and `dataname_mu` should contain the Lame coefficients. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:937
# 63f1536733674be78cb1267fa331ad04
msgid "``ind = gf_model_set(model M, 'add isotropic linearized elasticity brick pstrain', mesh_im mim, string varname, string data_E, string data_nu[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:939
# fe4a9fc247bc4e499cc614706d3c88cd
msgid "Add an isotropic linearized elasticity term to the model relatively to the variable `varname`. `data_E` and `data_nu` should contain the Young modulus and Poisson ratio, respectively. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. On two-dimensional meshes, the term will correpsond to a plain strain approximation. On three-dimensional meshes, it will correspond to the standard model. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:951
# 686a172f9dbf44d9b5561900bffd25f5
msgid "``ind = gf_model_set(model M, 'add isotropic linearized elasticity brick pstress', mesh_im mim, string varname, string data_E, string data_nu[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:953
# 69b513b03d6c4601ae2b5ceb4f8003a0
msgid "Add an isotropic linearized elasticity term to the model relatively to the variable `varname`. `data_E` and `data_nu` should contain the Young modulus and Poisson ratio, respectively. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. On two-dimensional meshes, the term will correpsond to a plain stress approximation. On three-dimensional meshes, it will correspond to the standard model. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:965
# a44705521c2f4a00959b7c4976f6c326
msgid "``ind = gf_model_set(model M, 'add linear incompressibility brick', mesh_im mim, string varname, string multname_pressure[, int region[, string dataexpr_coeff]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:967
# 0a002b8018cf46a6b66dee8f2cbd0700
msgid "Add a linear incompressibility condition on `variable`. `multname_pressure` is a variable which represent the pressure. Be aware that an inf-sup condition between the finite element method describing the pressure and the primal variable has to be satisfied. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. `dataexpr_coeff` is an optional penalization coefficient for nearly incompressible elasticity for instance. In this case, it is the inverse of the Lame coefficient :math:`\\lambda`. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:978
# 63e42bd91a5a406187b2afdc8acd836b
msgid "``ind = gf_model_set(model M, 'add nonlinear elasticity brick', mesh_im mim, string varname, string constitutive_law, string dataname[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:980
# 85c2eb85b5ab48fcba1798f81f2c679c
msgid "Add a nonlinear elasticity term to the model relatively to the variable `varname` (deprecated brick, use add_finite_strain_elaticity instead). `lawname` is the constitutive law which could be 'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean', 'Ciarlet Geymonat' or 'generalized Blatz Ko'. 'Mooney Rivlin' and 'neo Hookean' law names can be preceded with the word 'compressible' or 'incompressible' to force using the corresponding version. The compressible version of these laws requires one additional material coefficient. By default, the incompressible version of 'Mooney Rivlin' law and the compressible one of the 'neo Hookean' law are considered. In general, 'neo Hookean' is a special case of the 'Mooney Rivlin' law that requires one coefficient less. IMPORTANT : if the variable is defined on a 2D mesh, the plane strain approximation is automatically used. `dataname` is a vector of parameters for the constitutive law. Its length depends on the law. It could be a short vector of constant values or a vector field described on a finite element method for variable coefficients. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. This brick use the low-level generic assembly. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1003
# 7f6072d18fe74ae7a2ed14986e1bdc7e
msgid "``ind = gf_model_set(model M, 'add finite strain elasticity brick', mesh_im mim, string constitutive_law, string varname, string params[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1005
# d65726b597954e34871cbc2a05c3cd2c
msgid "Add a nonlinear elasticity term to the model relatively to the variable `varname`. `lawname` is the constitutive law which could be 'SaintVenant Kirchhoff', 'Mooney Rivlin', 'Neo Hookean', 'Ciarlet Geymonat' or 'Generalized Blatz Ko'. 'Mooney Rivlin' and 'Neo Hookean' law names have to be preceeded with the word 'Compressible' or 'Incompressible' to force using the corresponding version. The compressible version of these laws requires one additional material coefficient."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1015
# 6937f56354024a89921661c69ac1da8d
msgid "IMPORTANT : if the variable is defined on a 2D mesh, the plane strain approximation is automatically used. `params` is a vector of parameters for the constitutive law. Its length depends on the law. It could be a short vector of constant values or a vector field described on a finite element method for variable coefficients. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. This brick use the high-level generic assembly. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1026
# 59dbce01d45d4d4f936d978d2f102d52
msgid "``ind = gf_model_set(model M, 'add small strain elastoplasticity brick', mesh_im mim,  string lawname, string unknowns_type [, string varnames, ...] [, string params, ...] [, string theta = '1' [, string dt = 'timestep']] [, int region = -1])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1028
# 447493414a8742c5bda7d0d65ff9febc
msgid "Adds a small strain plasticity term to the model `M`. This is the main GetFEM++ brick for small strain plasticity. `lawname` is the name of an implemented plastic law, `unknowns_type` indicates the choice between a discretization where the plastic multiplier is an unknown of the problem or (return mapping approach) just a data of the model stored for the next iteration. Remember that in both cases, a multiplier is stored anyway. `varnames` is a set of variable and data names with length which may depend on the plastic law (at least the displacement, the plastic multiplier and the plastic strain). `params` is a list of expressions for the parameters (at least elastic coefficients and the yield stress). These expressions can be some data names (or even variable names) of the model but can also be any scalar valid expression of the high level assembly language (such as '1/2', '2+sin(X[0])', '1+Norm(v)' ...). The last two parameters optionally provided in `params` are the `theta` parameter of the `theta`-scheme (generalized trapezoidal rule) used for the plastic strain integration and the time-step`dt`. The default value for `theta` if omitted is 1, which corresponds to the classical Backward Euler scheme which is first order consistent. `theta=1/2` corresponds to the Crank-Nicolson scheme (trapezoidal rule) which is second order consistent. Any value between 1/2 and 1 should be a valid value. The default value of `dt` is 'timestep' which simply indicates the time step defined in the model (by md.set_time_step(dt)). Alternatively it can be any expression (data name, constant value ...). The time step can be altered from one iteration to the next one. `region` is a mesh region."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1054
# 7e9e88bee0c94c1faa00c1625c4c5a12
msgid "The available plasticity laws are:"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1056
# 88f0e491b69f4c069e01c461518c1160
msgid "'Prandtl Reuss' (or 'isotropic perfect plasticity'). Isotropic elasto-plasticity with no hardening. The variables are the displacement, the plastic multiplier and the plastic strain. The displacement should be a variable and have a corresponding data having the same name preceded by 'Previous\\_' corresponding to the displacement at the previous time step (typically 'u' and 'Previous_u'). The plastic multiplier should also have two versions (typically 'xi' and 'Previous_xi') the first one being defined as data if `unknowns_type ` is 'DISPLACEMENT_ONLY' or the integer value 0, or as a variable if `unknowns_type` is DISPLACEMENT_AND_PLASTIC_MULTIPLIER or the integer value 1. The plastic strain should represent a n x n data tensor field stored on mesh_fem or (preferably) on an im_data (corresponding to `mim`). The data are the first Lame coefficient, the second one (shear modulus) and the uniaxial yield stress. A typical call is gf_model_get(model M, 'add small strain elastoplasticity brick', mim, 'Prandtl Reuss', 0, 'u', 'xi', 'Previous_Ep', 'lambda', 'mu', 'sigma_y', '1', 'timestep'); IMPORTANT: Note that this law implements the 3D expressions. If it is used in 2D, the expressions are just transposed to the 2D. For the plane strain approximation, see below."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1075
# 06fdd67e3edc455c8c265a11dc0f77ad
msgid "\"plane strain Prandtl Reuss\" (or \"plane strain isotropic perfect plasticity\") The same law as the previous one but adapted to the plane strain approximation. Can only be used in 2D."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1079
# 9802de44aa1947f7817164fbadca4ac1
msgid "\"Prandtl Reuss linear hardening\" (or \"isotropic plasticity linear hardening\"). Isotropic elasto-plasticity with linear isotropic and kinematic hardening. An additional variable compared to \"Prandtl Reuss\" law: the accumulated plastic strain. Similarly to the plastic strain, it is only stored at the end of the time step, so a simple data is required (preferably on an im_data). Two additional parameters: the kinematic hardening modulus and the isotropic one. 3D expressions only. A typical call is gf_model_get(model M, 'add small strain elastoplasticity brick', mim, 'Prandtl Reuss linear hardening', 0, 'u', 'xi', 'Previous_Ep', 'Previous_alpha', 'lambda', 'mu', 'sigma_y', 'H_k', H_i', '1', 'timestep');"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1089
# 0105c49ac0b8474bbc2e329cf257c9d1
msgid "\"plane strain Prandtl Reuss linear hardening\" (or \"plane strain isotropic plasticity linear hardening\"). The same law as the previous one but adapted to the plane strain approximation. Can only be used in 2D."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1094
# ce2b5bb4c73a4f9fa436f84571cbbf42
msgid "See GetFEM++ user documentation for further explanations on the discretization of the plastic flow and on the implemented plastic laws. See also GetFEM++ user documentation on time integration strategy (integration of transient problems)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1099
# 62f425b8e6db4e12a2254a87ed5a85ca
msgid "IMPORTANT : remember that `small_strain_elastoplasticity_next_iter` has to be called at the end of each time step, before the next one (and before any post-treatment : this sets the value of the plastic strain and plastic multiplier)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1106
# f7b99511e8194adf823a565adfaa6085
msgid "``ind = gf_model_set(model M, 'add elastoplasticity brick', mesh_im mim ,string projname, string varname, string previous_dep_name, string datalambda, string datamu, string datathreshold, string datasigma[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1108
# fa926471a3fd49c4896bc93e67efb88e
msgid "Old (obsolete) brick which do not use the high level generic assembly. Add a nonlinear elastoplastic term to the model relatively to the variable `varname`, in small deformations, for an isotropic material and for a quasistatic model. `projname` is the type of projection that used: only the Von Mises projection is available with 'VM' or 'Von Mises'. `datasigma` is the variable representing the constraints on the material. `previous_dep_name` represents the displacement at the previous time step. Moreover, the finite element method on which `varname` is described is an K ordered mesh_fem, the `datasigma` one have to be at least an K-1 ordered mesh_fem. `datalambda` and `datamu` are the Lame coefficients of the studied material. `datathreshold` is the plasticity threshold of the material. The three last variables could be constants or described on the same finite element method. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1129
# 05a9f67721174fa59a21bd181684824b
msgid "``ind = gf_model_set(model M, 'add finite strain elastoplasticity brick', mesh_im mim , string lawname, string unknowns_type [, string varnames, ...] [, string params, ...] [, int region = -1])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1131
# 26db8bb9586145af8a6c5d22585f5174
msgid "Add a finite strain elastoplasticity brick to the model. For the moment there is only one supported law defined through `lawname` as \"Simo_Miehe\". This law supports to possibilities of unknown variables to solve for defined by means of `unknowns_type` set to either 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER' (integer value 1) or 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' (integer value 3). The  \"Simo_Miehe\" law expects as `varnames` a set of the following names that have to be defined as variables in the model:"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1141
# 08d17fd13e974e2382f7b4e5987d37b1
msgid "the displacement variable which has to be defined as an unknown,"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1142
# a266fd00d8db470f9eec785c0802e1e3
msgid "the plastic multiplier which has also defined as an unknown,"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1143
# d6a8c694a58d4a30bfbeae069c888581
msgid "optionally the pressure variable for a mixed displacement-pressure formulation for 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' as `unknowns_type`,"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1146
# b8df90c5554245ebb8b9577cd0e7404a
msgid "the name of a (scalar) fem_data or im_data field that holds the plastic strain at the previous time step, and"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1148
# d5996deff25b4409895a45d490d18a2d
msgid "the name of a fem_data or im_data field that holds all non-repeated components of the inverse of the plastic right Cauchy-Green tensor at the previous time step (it has to be a 4 element vector for plane strain 2D problems and a 6 element vector for 3D problems)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1154
# 50a78e0c28c0417985c50226bad2a8ae
msgid "The  \"Simo_Miehe\" law also expects as `params` a set of the following three parameters:"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1157
# db77bef8a01141159c819f7c7797c76f
msgid "an expression for the initial bulk modulus K,"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1158
# f5374b66aae741d2b30ac433573ef803
msgid "an expression for the initial shear modulus G,"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1159
# 77560640739d4a299a1659603c09f33c
msgid "the name of a user predefined function that decribes the yield limit as a function of the hardening variable (both the yield limit and the hardening variable values are assumed to be Frobenius norms of appropriate stress and strain tensors, respectively)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1165
# cbbcc04e137648ba8da3364d8676cb3e
msgid "As usual, `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1170
# 0cade9de1ff24d30a3d2247779c27f45
msgid "``ind = gf_model_set(model M, 'add nonlinear incompressibility brick', mesh_im mim, string varname, string multname_pressure[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1172
# e1dec57705b74f678691cad9d8763811
msgid "Add a nonlinear incompressibility condition on `variable` (for large strain elasticity). `multname_pressure` is a variable which represent the pressure. Be aware that an inf-sup condition between the finite element method describing the pressure and the primal variable has to be satisfied. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1181
# 8815c0326bfd43c888cfd2bed4bb607a
msgid "``ind = gf_model_set(model M, 'add finite strain incompressibility brick', mesh_im mim, string varname, string multname_pressure[, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1183
# 61562a4bf8a84fe1987c212cf45d7ce2
msgid "Add a finite strain incompressibility condition on `variable` (for large strain elasticity). `multname_pressure` is a variable which represent the pressure. Be aware that an inf-sup condition between the finite element method describing the pressure and the primal variable has to be satisfied. `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model. This brick is equivalent to the ``nonlinear incompressibility brick`` but uses the high-level generic assembly adding the term ``p*(1-Det(Id(meshdim)+Grad_u))`` if ``p`` is the multiplier and ``u`` the variable which represent the displacement."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1196
# cbd3992742d346339b856f850829a342
msgid "``ind = gf_model_set(model M, 'add bilaplacian brick', mesh_im mim, string varname, string dataname [, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1198
# 52fadb2c9d12466396431f59fa3336d7
msgid "Add a bilaplacian brick on the variable `varname` and on the mesh region `region`. This represent a term :math:`\\Delta(D \\Delta u)`. where :math:`D(x)` is a coefficient determined by `dataname` which could be constant or described on a f.e.m. The corresponding weak form is :math:`\\int D(x)\\Delta u(x) \\Delta v(x) dx`. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1207
# a470a94e74cb4247beb045b696391abc
msgid "``ind = gf_model_set(model M, 'add Kirchhoff-Love plate brick', mesh_im mim, string varname, string dataname_D, string dataname_nu [, int region])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1209
# a0ea3ccb51984b45a7783b1e8677e920
msgid "Add a bilaplacian brick on the variable `varname` and on the mesh region `region`. This represent a term :math:`\\Delta(D \\Delta u)` where :math:`D(x)` is a the flexion modulus determined by `dataname_D`. The term is integrated by part following a Kirchhoff-Love plate model with `dataname_nu` the poisson ratio. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1218
# ee83f8d62d4642f68ef7cb09142af422
msgid "``ind = gf_model_set(model M, 'add normal derivative source term brick', mesh_im mim, string varname, string dataname, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1220
# bb691438ee4c458cb9e35c0c38768a87
msgid "Add a normal derivative source term brick :math:`F = \\int b.\\partial_n v` on the variable `varname` and the mesh region `region`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1224
# b7d96f592f2d4b4f9eee8f9f9bee343a
msgid "Update the right hand side of the linear system. `dataname` represents `b` and `varname` represents `v`. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1229
# ba372cf830e540e19c408833154a376f
msgid "``ind = gf_model_set(model M, 'add Kirchhoff-Love Neumann term brick', mesh_im mim, string varname, string dataname_M, string dataname_divM, int region)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1231
# 68a5c9226b324d34bd4106255817fdc2
msgid "Add a Neumann term brick for Kirchhoff-Love model on the variable `varname` and the mesh region `region`. `dataname_M` represents the bending moment tensor and  `dataname_divM` its divergence. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1238
# ac54dd84a63846479a074a8e0357e18f
msgid "``ind = gf_model_set(model M, 'add normal derivative Dirichlet condition with multipliers', mesh_im mim, string varname, mult_description, int region [, string dataname, int R_must_be_derivated])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1240
# 3d430be363d541d49941b2b7854fdd99
msgid "Add a Dirichlet condition on the normal derivative of the variable `varname` and on the mesh region `region` (which should be a boundary. The general form is :math:`\\int \\partial_n u(x)v(x) = \\int r(x)v(x) \\forall v` where :math:`r(x)` is the right hand side for the Dirichlet condition (0 for homogeneous conditions) and :math:`v` is in a space of multipliers defined by `mult_description`. If `mult_description` is a string this is assumed to be the variable name corresponding to the multiplier (which should be first declared as a multiplier variable on the mesh region in the model). If it is a finite element method (mesh_fem object) then a multiplier variable will be added to the model and build on this finite element method (it will be restricted to the mesh region `region` and eventually some conflicting dofs with some other multiplier variables will be suppressed). If it is an integer, then a  multiplier variable will be added to the model and build on a classical finite element of degree that integer. `dataname` is an optional parameter which represents the right hand side of the Dirichlet condition. If `R_must_be_derivated` is set to `true` then the normal derivative of `dataname` is considered. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1264
# 509b7c56cd094a578d317a233fd7b20b
msgid "``ind = gf_model_set(model M, 'add normal derivative Dirichlet condition with penalization', mesh_im mim, string varname, scalar coeff, int region [, string dataname, int R_must_be_derivated])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1266
# 4664c640847a42a8af10976cddfbc67e
msgid "Add a Dirichlet condition on the normal derivative of the variable `varname` and on the mesh region `region` (which should be a boundary. The general form is :math:`\\int \\partial_n u(x)v(x) = \\int r(x)v(x) \\forall v` where :math:`r(x)` is the right hand side for the Dirichlet condition (0 for homogeneous conditions). The penalization coefficient is initially `coeff` and will be added to the data of the model. It can be changed with the command gf_model_set(model M, 'change penalization coeff'). `dataname` is an optional parameter which represents the right hand side of the Dirichlet condition. If `R_must_be_derivated` is set to `true` then the normal derivative of `dataname` is considered. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1283
# 7c7ee13920dd4bf0b2e6a2e573fe626d
msgid "``ind = gf_model_set(model M, 'add Mindlin Reissner plate brick', mesh_im mim, mesh_im mim_reduced, string varname_u3, string varname_theta , string param_E, string param_nu, string param_epsilon, string param_kappa [,int variant [, int region]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1285
# 3a1ab32f0868422180a899a90db4f76e
msgid "Add a term corresponding to the classical Reissner-Mindlin plate model for which `varname_u3` is the transverse displacement, `varname_theta` the rotation of fibers normal to the midplane, 'param_E' the Young Modulus, `param_nu` the poisson ratio, `param_epsilon` the plate thickness, `param_kappa` the shear correction factor. Note that since this brick uses the high level generic assembly language, the parameter can be regular expression of this language. There are three variants. `variant = 0` corresponds to the an unreduced formulation and in that case only the integration method `mim` is used. Practically this variant is not usable since it is subject to a strong locking phenomenon. `variant = 1` corresponds to a reduced integration where `mim` is used for the rotation term and `mim_reduced` for the transverse shear term. `variant = 2` (default) corresponds to the projection onto a rotated RT0 element of the transverse shear term. For the moment, this is adapted to quadrilateral only (because it is not sufficient to remove the locking phenomenon on triangle elements). Note also that if you use high order elements, the projection on RT0 will reduce the order of the approximation. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1311
# bbf246311f354e108b1855cfe03b8baf
msgid "``ind = gf_model_set(model M, 'add mass brick', mesh_im mim, string varname[, string dataexpr_rho[, int region]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1313
# 8b35519387e54fcf89f8345fa12efc4a
msgid "Add mass term to the model relatively to the variable `varname`. If specified, the data `dataexpr_rho` is the density (1 if omitted). `region` is an optional mesh region on which the term is added. If it is not specified, it is added on the whole mesh. Return the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1320
# 97fb1930d60b479abd950a5f8bc63b97
msgid "``gf_model_set(model M, 'shift variables for time integration')``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1322
# 53477de4eb514b95a4990f95c40f3864
msgid "Function used to shift the variables of a model to the data corresponding of ther value on the previous time step for time integration schemes. For each variable for which a time integration scheme has been declared, the scheme is called to perform the shift. This function has to be called between two time steps."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1329
# eb319d6a4fc245208d4b7a6aa77ede41
msgid "``gf_model_set(model M, 'perform init time derivative', scalar ddt)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1331
# 0cc96ceeda27408591cac09558de5067
msgid "By calling this function, indicates that the next solve will compute the solution for a (very) small time step `ddt` in order to initalize the data corresponding to the derivatives needed by time integration schemes (mainly the initial time derivative for order one in time problems  and the second order time derivative for second order in time problems). The next solve will not change the value of the variables."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1339
# 7c7439278cf84e65a6837070151e90a2
msgid "``gf_model_set(model M, 'set time step', scalar dt)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1341
# d30eb86d9d8740dd96471ad5aaae8d40
msgid "Set the value of the time step to `dt`. This value can be change from a step to another for all one-step schemes (i.e for the moment to all proposed time integration schemes)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1346
# 44ad3ddfb68745fbacb7d036319e463d
msgid "``gf_model_set(model M, 'set time', scalar t)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1348
# 881a3e20a2cb43db86f1730bb0e48700
msgid "Set the value of the data `t` corresponding to the current time to `t`."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1352
# f9343f39f68d4ade89f66135bb292f91
msgid "``gf_model_set(model M, 'add theta method for first order', string varname, scalar theta)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1354
# 886203546c9046709f76428d9337866f
msgid "Attach a theta method for the time discretization of the variable `varname`. Valid only if there is at most first order time derivative of the variable."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1359
# c3da413a400d4918be5dc5eb67e1f4d0
msgid "``gf_model_set(model M, 'add theta method for second order', string varname, scalar theta)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1361
#: ../source/matlab/cmdref_gf_model_set.rst:1368
# 29cce0e4006342ab9d1234423c32395e
# c03bdfbff0bc4ed9bea2a148f20c1e07
msgid "Attach a theta method for the time discretization of the variable `varname`. Valid only if there is at most second order time derivative of the variable."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1366
# 7bdb2587e84343ed8fb6db7cac90f45c
msgid "``gf_model_set(model M, 'add Newmark scheme', string varname, scalar beta, scalar gamma)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1373
# ec2a5d570d6f4eb7859cc346e5205d7d
msgid "``gf_model_set(model M, 'disable bricks', ivec bricks_indices)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1375
# b0e384100e734eb18a9db8be188c1644
msgid "Disable a brick (the brick will no longer participate to the building of the tangent linear system)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1379
# 1efe5a1988e24db9a4163335b3043f49
msgid "``gf_model_set(model M, 'enable bricks', ivec bricks_indices)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1381
# b49e873d229141f9afef69c329394b93
msgid "Enable a disabled brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1384
# 5c373e3f1d304bd081fa0544e66e634f
msgid "``gf_model_set(model M, 'disable variable', string varname)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1386
# b8cd06b2de3f4acab889ccd796e14142
msgid "Disable a variable for a solve (and its attached multipliers). The next solve will operate only on the remaining variables. This allows to solve separately different parts of a model. If there is a strong coupling of the variables, a fixed point strategy can the be used."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1393
# 6281be4d2d964a1e9cd3222ca8c8e520
msgid "``gf_model_set(model M, 'enable variable', string varname)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1395
# be2bc70c001c4cb9b9a0ef6ad3e4966e
msgid "Enable a disabled variable (and its attached multipliers)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1398
# 113b51f603eb4cdcbff723bc1bcc31d0
msgid "``gf_model_set(model M, 'first iter')``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1400
# 83142761eba947e4bb94b72b9721f721
msgid "To be executed before the first iteration of a time integration scheme."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1404
# 83b1d2c6cde940738b44e32926c1c170
msgid "``gf_model_set(model M, 'next iter')``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1406
# d1c59c9521b8456ca89a615ebec719f9
msgid "To be executed at the end of each iteration of a time integration scheme."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1410
# b6df9d6e400b483d99b6f5286f99c8fc
msgid "``ind = gf_model_set(model M, 'add basic contact brick', string varname_u, string multname_n[, string multname_t], string dataname_r, spmat BN[, spmat BT, string dataname_friction_coeff][, string dataname_gap[, string dataname_alpha[, int augmented_version[, string dataname_gamma, string dataname_wt]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1412
# 46048ee84e594346bc64ac150789366d
msgid "Add a contact with or without friction brick to the model. If U is the vector of degrees of freedom on which the unilateral constraint is applied, the matrix `BN` have to be such that this constraint is defined by :math:`B_N U \\le 0`. A friction condition can be considered by adding the three parameters `multname_t`, `BT` and `dataname_friction_coeff`. In this case, the tangential displacement is :math:`B_T U` and the matrix `BT` should have as many rows as `BN` multiplied by :math:`d-1` where :math:`d` is the domain dimension. In this case also, `dataname_friction_coeff` is a data which represents the coefficient of friction. It can be a scalar or a vector representing a value on each contact condition.  The unilateral constraint is prescribed thank to a multiplier `multname_n` whose dimension should be equal to the number of rows of `BN`. If a friction condition is added, it is prescribed with a multiplier `multname_t` whose dimension should be equal to the number of rows of `BT`. The augmentation parameter `r` should be chosen in a range of acceptabe values (see Getfem user documentation). `dataname_gap` is an optional parameter representing the initial gap. It can be a single value or a vector of value. `dataname_alpha` is an optional homogenization parameter for the augmentation parameter (see Getfem user documentation).  The parameter `augmented_version` indicates the augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented Lagrangian, 2 for the symmetric one (except for the coupling between contact and Coulomb friction), 3 for the unsymmetric method with augmented multipliers, 4 for the unsymmetric method with augmented multipliers and De Saxce projection."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1442
# 36fb11a715864182a7735a7bccaeb047
msgid "``ind = gf_model_set(model M, 'add basic contact brick two deformable bodies', string varname_u1, string varname_u2, string multname_n, string dataname_r, spmat BN1, spmat BN2[, string dataname_gap[, string dataname_alpha[, int augmented_version]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1461
# 5f5981a26d894821a2c24c720889ef09
msgid "Add a frictionless contact condition to the model between two deformable"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1445
# a9d16577f3684634bea8ad57f332dbc7
msgid "bodies. If U1, U2 are the vector of degrees of freedom on which the unilateral constraint is applied, the matrices `BN1` and `BN2` have to be such that this condition is defined by $B_{N1} U_1 B_{N2} U_2 + \\le gap$. The constraint is prescribed thank to a multiplier `multname_n` whose dimension should be equal to the number of lines of `BN`. The augmentation parameter `r` should be chosen in a range of acceptabe values (see Getfem user documentation). `dataname_gap` is an optional parameter representing the initial gap. It can be a single value or a vector of value. `dataname_alpha` is an optional homogenization parameter for the augmentation parameter (see Getfem user documentation). The parameter `aug_version` indicates the augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented Lagrangian, 2 for the symmetric one, 3 for the unsymmetric method with augmented multiplier."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1463
# 3bfac54aa67a4d6c8910e85dab3e9145
msgid "``gf_model_set(model M, 'contact brick set BN', int indbrick, spmat BN)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1465
# 0f71ca29502a4e49b55ab7f660e0a170
msgid "Can be used to set the BN matrix of a basic contact/friction brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1468
# 08394408c82647408c040bcf7b11f182
msgid "``gf_model_set(model M, 'contact brick set BT', int indbrick, spmat BT)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1470
# 1a378b96fcf2415caf3de6a3b5283a9b
msgid "Can be used to set the BT matrix of a basic contact with friction brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1474
# 19b878ccb870453ba2a9a61e6a0087eb
msgid "``ind = gf_model_set(model M, 'add nodal contact with rigid obstacle brick',  mesh_im mim, string varname_u, string multname_n[, string multname_t], string dataname_r[, string dataname_friction_coeff], int region, string obstacle[,  int augmented_version])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1476
# 75ff4d38588e4c599c8b29113c7105e0
msgid "Add a contact with or without friction condition with a rigid obstacle to the model. The condition is applied on the variable `varname_u` on the boundary corresponding to `region`. The rigid obstacle should be described with the string `obstacle` being a signed distance to the obstacle. This string should be an expression where the coordinates are 'x', 'y' in 2D and 'x', 'y', 'z' in 3D. For instance, if the rigid obstacle correspond to :math:`z \\le 0`, the corresponding signed distance will be simply \"z\". `multname_n` should be a fixed size variable whose size is the number of degrees of freedom on boundary `region`. It represents the contact equivalent nodal forces. In order to add a friction condition one has to add the `multname_t` and `dataname_friction_coeff` parameters. `multname_t` should be a fixed size variable whose size is the number of degrees of freedom on boundary `region` multiplied by :math:`d-1` where :math:`d` is the domain dimension. It represents the friction equivalent nodal forces. The augmentation parameter `r` should be chosen in a range of acceptabe values (close to the Young modulus of the elastic body, see Getfem user documentation).  `dataname_friction_coeff` is the friction coefficient. It could be a scalar or a vector of values representing the friction coefficient on each contact node. The parameter `augmented_version` indicates the augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented Lagrangian, 2 for the symmetric one (except for the coupling between contact and Coulomb friction), 3 for the new unsymmetric method. Basically, this brick compute the matrix BN and the vectors gap and alpha and calls the basic contact brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1505
# 5ca77fb26c61475ba348cc79d1b564bb
msgid "``ind = gf_model_set(model M, 'add contact with rigid obstacle brick',  mesh_im mim, string varname_u, string multname_n[, string multname_t], string dataname_r[, string dataname_friction_coeff], int region, string obstacle[,  int augmented_version])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1507
# 18a1f6f006f54a99bdea5e87f207fc6a
msgid "DEPRECATED FUNCTION. Use 'add nodal contact with rigid obstacle brick' instead."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1510
# b262e3645d3e45e9a5286d37aafe94d6
msgid "``ind = gf_model_set(model M, 'add integral contact with rigid obstacle brick',  mesh_im mim, string varname_u, string multname, string dataname_obstacle, string dataname_r [, string dataname_friction_coeff], int region [, int option [, string dataname_alpha [, string dataname_wt [, string dataname_gamma [, string dataname_vt]]]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1512
# 6e60ad45897d468d8ad43d1b8c1a1a06
msgid "Add a contact with or without friction condition with a rigid obstacle to the model. This brick adds a contact which is defined in an integral way. It is the direct approximation of an augmented Lagrangian formulation (see Getfem user documentation) defined at the continuous level. The advantage is a better scalability: the number of Newton iterations should be more or less independent of the mesh size. The contact condition is applied on the variable `varname_u` on the boundary corresponding to `region`. The rigid obstacle should be described with the data `dataname_obstacle` being a signed distance to the obstacle (interpolated on a finite element method). `multname` should be a fem variable representing the contact stress. An inf-sup condition beetween `multname` and `varname_u` is required. The augmentation parameter `dataname_r` should be chosen in a range of acceptabe values. The optional parameter `dataname_friction_coeff` is the friction coefficient which could be constant or defined on a finite element method. Possible values for `option` is 1 for the non-symmetric Alart-Curnier augmented Lagrangian method, 2 for the symmetric one, 3 for the non-symmetric Alart-Curnier method with an additional augmentation and 4 for a new unsymmetric method. The default value is 1. In case of contact with friction, `dataname_alpha` and `dataname_wt` are optional parameters to solve evolutionary friction problems. `dataname_gamma` and `dataname_vt` represent optional data for adding a parameter-dependent sliding velocity to the friction condition."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1539
# 730f8aa237984d22974ce9b7fe8f06f8
msgid "``ind = gf_model_set(model M, 'add penalized contact with rigid obstacle brick',  mesh_im mim, string varname_u, string dataname_obstacle, string dataname_r [, string dataname_coeff], int region [, int option, string dataname_lambda, [, string dataname_alpha [, string dataname_wt]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1541
# 80f10106c2bf4c09b28acbd556f72d05
msgid "Add a penalized contact with or without friction condition with a rigid obstacle to the model. The condition is applied on the variable `varname_u` on the boundary corresponding to `region`. The rigid obstacle should be described with the data `dataname_obstacle` being a signed distance to the obstacle (interpolated on a finite element method). The penalization parameter `dataname_r` should be chosen large enough to prescribe approximate non-penetration and friction conditions but not too large not to deteriorate too much the conditionning of the tangent system. `dataname_lambda` is an optional parameter used if option is 2. In that case, the penalization term is shifted by lambda (this allows the use of an Uzawa algorithm on the corresponding augmented Lagrangian formulation)"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1558
# 7283a81990c64eb0abe18e95e8144028
msgid "``ind = gf_model_set(model M, 'add Nitsche contact with rigid obstacle brick', mesh_im mim, string varname, string Neumannterm, string dataname_obstacle, string gamma0name,  int region[, scalar theta[, string dataname_friction_coeff[, string dataname_alpha, string dataname_wt]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1560
# 4bacacf9bb1e4a9d90174026ee445581
msgid "Adds a contact condition with or without Coulomb friction on the variable `varname` and the mesh boundary `region`. The contact condition is prescribed with Nitsche's method. The rigid obstacle should be described with the data `dataname_obstacle` being a signed distance to the obstacle (interpolated on a finite element method). `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary. The optional parameter `dataname_friction_coeff` is the friction coefficient which could be constant or defined on a finite element method. CAUTION: This brick has to be added in the model after all the bricks corresponding to partial differential terms having a Neumann term. Moreover, This brick can only be applied to bricks declaring their Neumann terms. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1582
# f2b60ceb4a154f378d9bb31c2b66c8e3
msgid "``ind = gf_model_set(model M, 'add Nitsche midpoint contact with rigid obstacle brick', mesh_im mim, string varname, string Neumannterm, string Neumannterm_wt, string dataname_obstacle, string gamma0name,  int region, scalar theta, string dataname_friction_coeff, string dataname_alpha, string dataname_wt)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1584
# 189a67b3168649ffa21cb8b18f1f9ccf
msgid "EXPERIMENTAL BRICK: for midpoint scheme only !! Adds a contact condition with or without Coulomb friction on the variable `varname` and the mesh boundary `region`. The contact condition is prescribed with Nitsche's method. The rigid obstacle should be described with the data `dataname_obstacle` being a signed distance to the obstacle (interpolated on a finite element method). `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary. The optional parameter `dataname_friction_coeff` is the friction coefficient which could be constant or defined on a finite element method. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1605
# e30e97ad905e4a04b4b2db32d36d57de
msgid "``ind = gf_model_set(model M, 'add Nitsche fictitious domain contact brick', mesh_im mim, string varname1, string varname2, string dataname_d1, string dataname_d2, string gamma0name [, scalar theta[, string dataname_friction_coeff[, string dataname_alpha, string dataname_wt1,string dataname_wt2]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1607
# a43ab8c479fc41299eaa53358ca7c8b7
msgid "Adds a contact condition with or without Coulomb friction between two bodies in a fictitious domain. The contact condition is applied on the variable `varname_u1` corresponds with the first and slave body with Nitsche's method and on the variable `varname_u2` corresponds with the second and master body with Nitsche's method. The contact condition is evaluated on the fictitious slave boundary. The first body should be described by the level-set `dataname_d1` and the second body should be described by the level-set `dataname_d2`. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar value which can be positive or negative. `theta = 1` corresponds to the standard symmetric method which is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method which is inconditionnaly coercive. `theta = 0` is the simplest method for which the second derivative of the Neumann term is not necessary. The optional parameter `dataname_friction_coeff` is the friction coefficient which could be constant or defined on a finite element method. CAUTION: This brick has to be added in the model after all the bricks corresponding to partial differential terms having a Neumann term. Moreover, This brick can only be applied to bricks declaring their Neumann terms. Returns the brick index in the model."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1630
# 491c97602027432db4e5965ba30d81f1
msgid "``ind = gf_model_set(model M, 'add nodal contact between nonmatching meshes brick',  mesh_im mim1[, mesh_im mim2], string varname_u1[, string varname_u2], string multname_n[, string multname_t], string dataname_r[, string dataname_fr], int rg1, int rg2[, int slave1, int slave2,  int augmented_version])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1632
# ef9e13640bdf46d0ab98e128b9b9ccda
msgid "Add a contact with or without friction condition between two faces of one or two elastic bodies. The condition is applied on the variable `varname_u1` or the variables `varname_u1` and `varname_u2` depending if a single or two distinct displacement fields are given. Integers `rg1` and `rg2` represent the regions expected to come in contact with each other. In the single displacement variable case the regions defined in both `rg1` and `rg2` refer to the variable `varname_u1`. In the case of two displacement variables, `rg1` refers to `varname_u1` and `rg2` refers to `varname_u2`. `multname_n` should be a fixed size variable whose size is the number of degrees of freedom on those regions among the ones defined in `rg1` and `rg2` which are characterized as \"slaves\". It represents the contact equivalent nodal normal forces. `multname_t` should be a fixed size variable whose size corresponds to the size of `multname_n` multiplied by qdim - 1 . It represents the contact equivalent nodal tangent (frictional) forces. The augmentation parameter `r` should be chosen in a range of acceptabe values (close to the Young modulus of the elastic body, see Getfem user documentation). The friction coefficient stored in the parameter `fr` is either a single value or a vector of the same size as `multname_n`. The optional parameters `slave1` and `slave2` declare if the regions defined in `rg1` and `rg2` are correspondingly considered as \"slaves\". By default `slave1` is true and `slave2` is false, i.e. `rg1` contains the slave surfaces, while 'rg2' the master surfaces. Preferrably only one of `slave1` and `slave2` is set to true.  The parameter `augmented_version` indicates the augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented Lagrangian, 2 for the symmetric one (except for the coupling between contact and Coulomb friction), 3 for the new unsymmetric method. Basically, this brick computes the matrices BN and BT and the vectors gap and alpha and calls the basic contact brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1664
# 386f5e37a3a844a0bf47eeef2616055c
msgid "``ind = gf_model_set(model M, 'add nonmatching meshes contact brick',  mesh_im mim1[, mesh_im mim2], string varname_u1[, string varname_u2], string multname_n[, string multname_t], string dataname_r[, string dataname_fr], int rg1, int rg2[, int slave1, int slave2,  int augmented_version])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1666
# e8881e1805e14296b32d474f2f3d7b23
msgid "DEPRECATED FUNCTION. Use 'add nodal contact between nonmatching meshes brick' instead."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1669
# 423c086f4e3848ac8f0a24b4259c0337
msgid "``ind = gf_model_set(model M, 'add integral contact between nonmatching meshes brick',  mesh_im mim, string varname_u1, string varname_u2, string multname, string dataname_r [, string dataname_friction_coeff], int region1, int region2 [, int option [, string dataname_alpha [, string dataname_wt1 , string dataname_wt2]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1671
# 883cc12516f14870bc6925e56c8f0f51
msgid "Add a contact with or without friction condition between nonmatching meshes to the model. This brick adds a contact which is defined in an integral way. It is the direct approximation of an augmented agrangian formulation (see Getfem user documentation) defined at the continuous level. The advantage should be a better scalability: the number of Newton iterations should be more or less independent of the mesh size. The condition is applied on the variables `varname_u1` and `varname_u2` on the boundaries corresponding to `region1` and `region2`. `multname` should be a fem variable representing the contact stress for the frictionless case and the contact and friction stress for the case with friction. An inf-sup condition between `multname` and `varname_u1` and `varname_u2` is required. The augmentation parameter `dataname_r` should be chosen in a range of acceptable values. The optional parameter `dataname_friction_coeff` is the friction coefficient which could be constant or defined on a finite element method on the same mesh as `varname_u1`. Possible values for `option` is 1 for the non-symmetric Alart-Curnier augmented Lagrangian method, 2 for the symmetric one, 3 for the non-symmetric Alart-Curnier method with an additional augmentation and 4 for a new unsymmetric method. The default value is 1. In case of contact with friction, `dataname_alpha`, `dataname_wt1` and `dataname_wt2` are optional parameters to solve evolutionary friction problems."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1699
# 8faf0ea3116542d096cb6083467c264c
msgid "``ind = gf_model_set(model M, 'add penalized contact between nonmatching meshes brick',  mesh_im mim, string varname_u1, string varname_u2, string dataname_r [, string dataname_coeff], int region1, int region2 [, int option [, string dataname_lambda, [, string dataname_alpha [, string dataname_wt1, string dataname_wt2]]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1701
# 3d6989067baa42429c81e92b4174c160
msgid "Add a penalized contact condition with or without friction between nonmatching meshes to the model. The condition is applied on the variables `varname_u1` and  `varname_u2` on the boundaries corresponding to `region1` and `region2`. The penalization parameter `dataname_r` should be chosen large enough to prescribe approximate non-penetration and friction conditions but not too large not to deteriorate too much the conditionning of the tangent system. The optional parameter `dataname_friction_coeff` is the friction coefficient which could be constant or defined on a finite element method on the same mesh as `varname_u1`. `dataname_lambda` is an optional parameter used if option is 2. In that case, the penalization term is shifted by lambda (this allows the use of an Uzawa algorithm on the corresponding augmented Lagrangian formulation) In case of contact with friction, `dataname_alpha`, `dataname_wt1` and `dataname_wt2` are optional parameters to solve evolutionary friction problems."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1722
# 9059b1c3eb014f91a56b2e75497e8bd8
msgid "``ind = gf_model_set(model M, 'add integral large sliding contact brick raytracing', string dataname_r, scalar release_distance, [, string dataname_fr[, string dataname_alpha[, int version]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1724
# 983b5931696348f6b93b16269a7f33f9
msgid "Adds a large sliding contact with friction brick to the model. This brick is able to deal with self-contact, contact between several deformable bodies and contact with rigid obstacles. It uses the high-level generic assembly. It adds to the model a raytracing_interpolate_transformation object. For each slave boundary a multiplier variable should be defined. The release distance should be determined with care (generally a few times a mean element size, and less than the thickness of the body). Initially, the brick is added with no contact boundaries. The contact boundaries and rigid bodies are added with special functions. `version` is 0 (the default value) for the non-symmetric version and 1 for the more symmetric one (not fully symmetric even without friction)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1739
# fa846eaa6a0748c0bdd7c2884d63fad0
msgid "``gf_model_set(model M, 'add rigid obstacle to large sliding contact brick', int indbrick, string expr, int N)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1741
#: ../source/matlab/cmdref_gf_model_set.rst:1787
# b481a7c160314be9baf2373392462665
# a3f6cb5cd9f148a8b3752bcbaa1bd9e2
msgid "Adds a rigid obstacle to an existing large sliding contact with friction brick. `expr` is an expression using the high-level generic assembly language (where `x` is the current point n the mesh) which should be a signed distance to the obstacle. `N` is the mesh dimension."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1748
# 55d581dc20e74cfe9cc38343a1410d71
msgid "``gf_model_set(model M, 'add master contact boundary to large sliding contact brick', int indbrick, mesh_im mim, int region, string dispname[, string wname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1750
# 49ffd89b03cf4e63b456a4858fccb828
msgid "Adds a master contact boundary to an existing large sliding contact with friction brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1754
# 2fbc86c89bfd4901ae6c1ac1311f7b41
msgid "``gf_model_set(model M, 'add slave contact boundary to large sliding contact brick', int indbrick, mesh_im mim, int region, string dispname, string lambdaname[, string wname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1756
# 3b8e233a62574be088d5f2fd76fda58d
msgid "Adds a slave contact boundary to an existing large sliding contact with friction brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1760
# a445fcd347474e03b565db3859795632
msgid "``gf_model_set(model M, 'add master slave contact boundary to large sliding contact brick', int indbrick, mesh_im mim, int region, string dispname, string lambdaname[, string wname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1762
# caa327a88cc2434d955f52355afd6fd2
msgid "Adds a contact boundary to an existing large sliding contact with friction brick which is both master and slave (allowing the self-contact)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1767
# bb838387e7984df490bfce913b9aead4
msgid "``ind = gf_model_set(model M, 'add Nitsche large sliding contact brick raytracing', bool unbiased_version, string dataname_r, scalar release_distance[, string dataname_fr[, string dataname_alpha[, int version]]])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1769
# 85eed45491bb4552b5f16f1cf9668599
msgid "Adds a large sliding contact with friction brick to the model based on the Nitsche's method. This brick is able to deal with self-contact, contact between several deformable bodies and contact with rigid obstacles. It uses the high-level generic assembly. It adds to the model a raytracing_interpolate_transformation object. \"unbiased_version\" refers to the version of Nische's method to be used. (unbiased or biased one). For each slave boundary a  material law should be defined as a function of the dispacement variable on this boundary. The release distance should be determined with care (generally a few times a mean element size, and less than the thickness of the body). Initially, the brick is added with no contact boundaries. The contact boundaries and rigid bodies are added with special functions. `version` is 0 (the default value) for the non-symmetric version and 1 for the more symmetric one (not fully symmetric even without friction)."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1785
# e8bbfbac40a543b4a24c83c909573f77
msgid "``gf_model_set(model M, 'add rigid obstacle to Nitsche large sliding contact brick', int indbrick, string expr, int N)``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1794
# 20f67ad13f25496ba1eaf9fb61722cc7
msgid "``gf_model_set(model M, 'add master contact boundary to biased Nitsche large sliding contact brick', int indbrick, mesh_im mim, int region, string dispname[, string wname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1796
# 2d2628f5a95841cda275123b81d5740e
msgid "Adds a master contact boundary to an existing biased Nitsche's large sliding contact with friction brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1800
# 84b7d1b857634936a23799ec2d8c8053
msgid "``gf_model_set(model M, 'add slave contact boundary to biased Nitsche large sliding contact brick', int indbrick, mesh_im mim, int region, string dispname, string lambdaname[, string wname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1802
# 736bd68e53f348c2915655037dece8e9
msgid "Adds a slave contact boundary to an existing biased Nitsche's large sliding contact with friction brick."
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1806
# 1244b6d34a1447bd9c13153f5a4f19ad
msgid "``gf_model_set(model M, 'add contact boundary to unbiased Nitsche large sliding contact brick', int indbrick, mesh_im mim, int region, string dispname, string lambdaname[, string wname])``"
msgstr ""

#: ../source/matlab/cmdref_gf_model_set.rst:1808
# 2d036c06fe4c4f9b90d41ef402a4cba9
msgid "Adds a contact boundary to an existing unbiased Nitschelarge sliding contact with friction brick which is both master and slave."
msgstr ""

