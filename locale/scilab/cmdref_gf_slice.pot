# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/scilab/cmdref_gf_slice.rst:8
# 24ef89dc823148d0a4f16f3daa0fa4f2
msgid "gf_slice"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:10
# 8355eb031b6a4486a8074410e476f4e7
msgid "**Synopsis**"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:19
# 1ad238aab0fd4c848d1a698598bb41cf
msgid "**Description :**"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:22
# 78c7edebfeb34e379fd21d4e56b389c7
msgid "General constructor for slice objects."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:24
# 169d366ba2b24d13bc727052d33cfdf3
msgid "Creation of a mesh slice. Mesh slices are very similar to a P1-discontinuous mesh_fem on which interpolation is very fast. The slice is built from a mesh object, and a description of the slicing operation, for example::"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:31
# 6b7c4804b4df4f0f9144926278b25353
msgid "cuts the original mesh with the half space {y>0}. Each convex of the original mesh <literal>m</literal> is simplexified (for example a quadrangle is splitted into 2 triangles), and each simplex is refined 5 times."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:35
# 7f65f83212524cbcaee5757eb503d2d5
msgid "Slicing operations can be:"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:37
# 2eec8d3780184c53b0def921d52fe3d6
msgid "cutting with a plane, a sphere or a cylinder"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:38
# 1c59c68cb288439d92ccd749d3a6711e
msgid "intersection or union of slices"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:39
# 4ba364ea5154474eb952b18eab44215e
msgid "isovalues surfaces/volumes"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:40
# 2ac35dfef804476db17b1a58f0f87934
msgid "\"points\", \"streamlines\" (see below)"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:42
# 39cc10531f84448f87fdb176cccb30d1
msgid "If the first argument is a mesh_fem <literal>mf</literal> instead of a mesh, and if it is followed by a <literal>mf</literal>-field <literal>u</literal>, then the deformation <literal>u</literal> will be applied to the mesh before the slicing operation."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:46
# 9b9c2c8afbf5409593d50e5e2c0d6688
msgid "The first argument can also be a slice."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:49
# b4f4744defb84c1bb9630fad2ea89d02
msgid "**Command list :**"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:53
# 669035e3afb74a33a43feba480fc54b1
msgid "``sl = gf_slice(sliceop, {slice sl|{mesh m| mesh_fem mf, vec U}, int refine}[, mat CVfids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:55
# 493719b4f64b4d8ebc973313736e5663
msgid "Create a slice using <literal>sliceop</literal> operation."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:57
# 2abde541ffa0400cb32a0e21018add7a
msgid "<literal>sliceop</literal> operation is specified with Scilab CELL arrays (i.e. with braces) . The first element is the name of the operation, followed the slicing options:"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:60
# 9f63a9d98f7f4a92b0dd7d77e1d27437
msgid "{'none'} : Does not cut the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:63
# 633ea693dff8425494a262d3fa35e83e
msgid "{'planar', int orient, vec p, vec n} : Planar cut. <literal>p</literal> and <literal>n</literal> define a half-space, <literal>p</literal> being a point belong to the boundary of the half-space, and <literal>n</literal> being its normal. If <literal>orient</literal> is equal to -1 (resp. 0, +1), then the slicing operation will cut the mesh with the \"interior\" (resp. \"boundary\", \"exterior\") of the half-space. <literal>orient</literal> may also be set to +2 which means that the mesh will be sliced, but both the outer and inner parts will be kept."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:71
# e2f8d45ccc084811b2d7919878eef753
msgid "{'ball', int orient, vec c, scalar r} : Cut with a ball of center <literal>c</literal> and radius <literal>r</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:74
# a9b838c182da4b31a6f825cd7f7bb4b6
msgid "{'cylinder', int orient, vec p1, vec p2, scalar r} : Cut with a cylinder whose axis is the line <literal>(p1, p2)</literal> and whose radius is <literal>r</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:78
# 42002850c06440c5a3dd2ac44628d788
msgid "{'isovalues', int orient, mesh_fem mf, vec U, scalar s} : Cut using the isosurface of the field <literal>U</literal> (defined on the mesh_fem <literal>mf</literal>). The result is the set <literal>{x such that <latex style=\"text\"><![CDATA[U(x) \\leq s]]></latex>}</literal> or <literal>{x such that </literal>U<literal>(x)=</literal>s<literal>}</literal> or <literal>{x such that </literal>U<literal>(x) >= </literal>s<literal>}</literal> depending on the value of <literal>orient</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:84
# f6fcfd0513b648acb4c3ee5ea3c3764e
msgid "{'boundary'[, SLICEOP]} : Return the boundary of the result of SLICEOP, where SLICEOP is any slicing operation. If SLICEOP is not specified, then the whole mesh is considered (i.e. it is equivalent to {'boundary',{'none'}})."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:89
# 14d1cafb44dc4a00a0618e1822292d44
msgid "{'explode', mat Coef} : Build an 'exploded' view of the mesh: each convex is shrinked (<latex style=\"text\"><![CDATA[0 < \\text{Coef} \\leq 1]]></latex>). In the case of 3D convexes, only their faces are kept."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:93
# 994598c77875402f884b03cb935ebd04
msgid "{'union', SLICEOP1, SLICEOP2} : Returns the union of slicing operations."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:96
# fd7b2eaaadd94ac38a5507ff3de0e109
msgid "{'intersection', SLICEOP1, SLICEOP2} : Returns the intersection of slicing operations, for example::"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:102
# 5e5e9a9328124fe58cccf7b58782cff9
msgid "{'comp', SLICEOP} : Returns the complementary of slicing operations."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:105
# 8c4c14849d604f159e95da9c024a5aba
msgid "{'diff', SLICEOP1, SLICEOP2} : Returns the difference of slicing operations."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:108
# 6725b0bba1e44816a457e3de2a76000a
msgid "{'mesh', mesh m} : Build a slice which is the intersection of the sliced mesh with another mesh. The slice is such that all of its simplexes are stricly contained into a convex of each mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:115
# 046ae1bf9b684c44bcd1df313ddfd048
msgid "``sl = gf_slice('streamlines', mesh_fem mf, mat U, mat S)``"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:117
# 0d44a489c45442c58bbcfe24e556a574
msgid "Compute streamlines of the (vector) field <literal>U</literal>, with seed points given by the columns of <literal>S</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:121
# 1e66798be63c4f5c8f86088588264679
msgid "``sl = gf_slice('points', mesh m, mat Pts)``"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:123
# 0d9f427171ef41ce85b2cea928e25cad
msgid "Return the \"slice\" composed of points given by the columns of <literal>Pts</literal> (useful for interpolation on a given set of sparse points, see <literal></literal>gf_compute('interpolate on',sl)<literal></literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:128
# 3a3ecce9568640868e423be1bfdad8db
msgid "``sl = gf_slice('load', string filename[, mesh m])``"
msgstr ""

#: ../source/scilab/cmdref_gf_slice.rst:130
# 14959f47dbb24e309ea84ea483c8f902
msgid "Load the slice (and its linked mesh if it is not given as an argument) from a text file."
msgstr ""

