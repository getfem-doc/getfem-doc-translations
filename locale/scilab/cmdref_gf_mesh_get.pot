# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 02:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/scilab/cmdref_gf_mesh_get.rst:8
# 9c0a99ef93334c20b7489a0dfbe5c925
msgid "gf_mesh_get"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:10
# ac62c6d636324fcabc115c3e6e1a7c3f
msgid "**Synopsis**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:59
# 068a34b839404e34bc35ed9b7f3f3abf
msgid "**Description :**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:62
# 80a49c5c6ce84e12ba2a1e44ed1e2718
msgid "General mesh inquiry function. All these functions accept also a mesh_fem argument instead of a mesh M (in that case, the mesh_fem linked mesh will be used)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:67
# 63c6d6f1241243309017dd9bd6ae5766
msgid "**Command list :**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:71
# 59166a923d4c41c6a6974f261e27d68d
msgid "``d = gf_mesh_get(mesh M, 'dim')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:73
# 5ea00acb386d40a2b5d6d89f39265063
msgid "Get the dimension of the mesh (2 for a 2D mesh, etc)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:76
# 1557b82b65164d349ed0ff8bea313b72
msgid "``np = gf_mesh_get(mesh M, 'nbpts')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:78
# 6db5655232864a789b050a5f9a20a471
msgid "Get the number of points of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:81
# 3459bc13d97d4b38b0c74e4e8d4091af
msgid "``nc = gf_mesh_get(mesh M, 'nbcvs')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:83
# 44ab7a26a9cf4531912d13e269b50208
msgid "Get the number of convexes of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:86
# 5eb7bfbf315846cdb78f4eb84168b6f9
msgid "``P = gf_mesh_get(mesh M, 'pts'[, ivec PIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:88
# 4da6fdf6a072478c980aeec4534223e6
msgid "Return the list of point coordinates of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:90
# 55425fd85a3e46be9ccacd6e36e080ff
msgid "Each column of the returned matrix contains the coordinates of one point. If the optional argument <literal>PIDs</literal> was given, only the points whose #id is listed in this vector are returned. Otherwise, the returned matrix will have gf_mesh_get(mesh M, 'max_pid') columns, which might be greater than gf_mesh_get(mesh M, 'nbpts') (if some points of the mesh have been destroyed and no call to gf_mesh_set(mesh M, 'optimize structure') have been issued). The columns corresponding to deleted points will be filled with NaN. You can use gf_mesh_get(mesh M, 'pid') to filter such invalid points."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:101
# 1bfc7c258ee44d768fc12c82e8d42fe1
msgid "``Pid = gf_mesh_get(mesh M, 'pid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:103
# f6f173434caf4de98c7ce3427603cda4
msgid "Return the list of points #id of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:105
# 2e48bb56930f4af8b17fb67b2f3076af
msgid "Note that their numbering is not supposed to be contiguous from 1 to gf_mesh_get(mesh M, 'nbpts'), especially if some points have been removed from the mesh. You can use gf_mesh_set(mesh M, 'optimize_structure') to enforce a contiguous numbering."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:112
# 3be91e5125dd47b1a04459110b54bad6
msgid "``PIDs = gf_mesh_get(mesh M, 'pid in faces', imat CVFIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:114
# cd4aae99c0014f4ea57d412d6feafc2e
msgid "Search point #id listed in <literal>CVFIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:116
# 2312c7ff5b81446bad2901b9afc5c0dd
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers. On return, <literal>PIDs</literal> is a vector containing points #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:121
# 8c38b1793d1e48c983f8fecdb004fc88
msgid "``PIDs = gf_mesh_get(mesh M, 'pid in cvids', imat CVIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:123
# a3a5ef8bc4074fc68e996d77fc2e9a95
msgid "Search point #id listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:125
#: ../source/scilab/cmdref_gf_mesh_get.rst:132
# b146288f33a446499dc198b6abcd9e69
# 45698ce7a815471484ff108c75831c6c
msgid "<literal>PIDs</literal> is a vector containing points #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:128
# a0d2e550d0c84e98a83376734c98b462
msgid "``PIDs = gf_mesh_get(mesh M, 'pid in regions', imat RIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:130
# 5656accc791b4e5191329a5f9fb9e8e3
msgid "Search point #id listed in <literal>RIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:135
# d3d97c304d064b7b9a82225a17412a3b
msgid "``PIDs = gf_mesh_get(mesh M, 'pid from coords', mat PTS[, scalar radius=0])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:137
# 0cec58632e134c8c87f35ff18dcb7df3
msgid "Search point #id whose coordinates are listed in <literal>PTS</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:139
# 2980b8f58e8b4252a2e68f93ec927531
msgid "<literal>PTS</literal> is an array containing a list of point coordinates. On return, <literal>PIDs</literal> is a vector containing points #id for each point found in <literal>eps</literal> range, and -1 for those which where not found in the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:145
# 8c1024660d43427f93b129cc2eeefc29
msgid "``{Pid, IDx} = gf_mesh_get(mesh M, 'pid from cvid'[, imat CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:147
# d9bcf9be0505401796b33a7ce798e7d5
msgid "Return the points attached to each convex of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:149
# c3163eef41d54c57a2996955562b31ea
msgid "If <literal>CVIDs</literal> is omitted, all the convexes will be considered (equivalent to <literal>CVIDs = gf_mesh_get(mesh M, 'max cvid')</literal>). <literal>IDx</literal> is a vector, length(IDx) = length(CVIDs)+1. <literal>Pid</literal> is a vector containing the concatenated list of #id of points of each convex in <literal>CVIDs</literal>. Each entry of <literal>IDx</literal> is the position of the corresponding convex point list in <literal>Pid</literal>. Hence, for example, the list of #id of points of the second convex is Pid(IDx(2):IDx(3)-1)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:158
#: ../source/scilab/cmdref_gf_mesh_get.rst:175
# 5cecf7f134e343adadb35730459485fb
# 4bc5ef5e130b4a7493ef2cfef78c6d3e
msgid "If <literal>CVIDs</literal> contains convex #id which do not exist in the mesh, their point list will be empty."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:162
# 7a4e8584f0fc4b2a98b1db27cd07dd00
msgid "``{Pts, IDx} = gf_mesh_get(mesh M, 'pts from cvid'[, imat CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:164
# ae7448e731924daf954546ba59ce22d7
msgid "Search point listed in <literal>CVID</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:166
# 60b11076ac31412cbcc371b360c23a21
msgid "If <literal>CVIDs</literal> is omitted, all the convexes will be considered (equivalent to <literal>CVIDs = gf_mesh_get(mesh M, 'max cvid')</literal>). <literal>IDx</literal> is a vector, length(IDx) = length(CVIDs)+1. <literal>Pts</literal> is a vector containing the concatenated list of points of each convex in <literal>CVIDs</literal>. Each entry of <literal>IDx</literal> is the position of the corresponding convex point list in <literal>Pts</literal>. Hence, for example, the list of points of the second convex is Pts(:,IDx(2):IDx(3)-1)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:179
# 2075b9b926144887972180b3b6a265cc
msgid "``CVid = gf_mesh_get(mesh M, 'cvid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:181
# 63436d5d0e3746ffa87bd10ed399be1d
msgid "Return the list of all convex #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:183
# 737a72daa7ce4ccb99404868543c3cd8
msgid "Note that their numbering is not supposed to be contiguous from 1 to gf_mesh_get(mesh M, 'nbcvs'), especially if some points have been removed from the mesh. You can use gf_mesh_set(mesh M, 'optimize_structure') to enforce a contiguous numbering."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:190
# 1995c64212b448a98859841df2d3dd0b
msgid "``m = gf_mesh_get(mesh M, 'max pid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:192
# a56c6968681941e2b6dfcebc8a20ead2
msgid "Return the maximum #id of all points in the mesh (see 'max cvid')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:195
# 67f0c18d294647d9a2a33bcb82ad4728
msgid "``m = gf_mesh_get(mesh M, 'max cvid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:197
# e6a7c868fea34d029100cddddde319d8
msgid "Return the maximum #id of all convexes in the mesh (see 'max pid')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:200
# 289cfbed9be04dd3b80cb783de4e468c
msgid "``[E,C] = gf_mesh_get(mesh M, 'edges' [, CVLST][, 'merge'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:202
#: ../source/scilab/cmdref_gf_mesh_get.rst:217
# c2617522a7c546faa8feb32b0eda9866
# 8ac931cd70704f5aaec5340ef6c7b50e
msgid "[OBSOLETE FUNCTION! will be removed in a future release]"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:204
# 04fd17efa9484243bdd4d14ee1d1fc0c
msgid "Return the list of edges of mesh M for the convexes listed in the row vector CVLST. E is a 2 x nb_edges matrix containing point indices. If CVLST is omitted, then the edges of all convexes are returned. If CVLST has two rows then the first row is supposed to contain convex numbers, and the second face numbers, of which the edges will be returned.  If 'merge' is indicated, all common edges of convexes are merged in a single edge.  If the optional output argument C is specified, it will contain the convex number associated with each edge."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:215
# 0056d7dadd6a4d4d81f352ab5fd4b560
msgid "``[E,C] = gf_mesh_get(mesh M, 'curved edges', int N [, CVLST])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:219
# b7f3ef67262e4c11952bfcda16c80dd8
msgid "More sophisticated version of gf_mesh_get(mesh M, 'edges') designed for curved elements. This one will return N (N>=2) points of the (curved) edges. With N==2, this is equivalent to gf_mesh_get(mesh M, 'edges'). Since the points are no more always part of the mesh, their coordinates are returned instead of points number, in the array E which is a [ mesh_dim x 2 x nb_edges ] array.  If the optional output argument C is specified, it will contain the convex number associated with each edge."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:229
# 3183b000a288488fa766641c820ded9d
msgid "``PIDs = gf_mesh_get(mesh M, 'orphaned pid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:231
# b70f473cd8db468097b44cc3a58cc68f
msgid "Search point #id which are not linked to a convex."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:234
# 5ef190b0c84c40b2830264fb7361913c
msgid "``CVIDs = gf_mesh_get(mesh M, 'cvid from pid', ivec PIDs[, bool share=False])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:236
# ef6cdae0e4a34df78bf661f3f60bdacb
msgid "Search convex #ids related with the point #ids given in <literal>PIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:238
# c11ba7d8344a43bcbab45554a35af3ed
msgid "If <literal>share=False</literal>, search convex whose vertex #ids are in <literal>PIDs</literal>. If <literal>share=True</literal>, search convex #ids that share the point #ids given in <literal>PIDs</literal>. <literal>CVIDs</literal> is a  vector (possibly empty)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:244
# 9f17d335d5de489b9d71e3081f227b6d
msgid "``CVFIDs = gf_mesh_get(mesh M, 'faces from pid', ivec PIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:246
# 2a58b8c3b8e44178a3f6208fac0b20dc
msgid "Return the convex faces whose vertex #ids are in <literal>PIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:248
# c9fec84d2e7f45f28e4946a96c3f176c
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). For a convex face to be returned, EACH of its points have to be listed in <literal>PIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:254
# cb2bc5a9575a40d8b3fc0b76ad58dcd4
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces'[, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:256
# 8ebd365cf3ab4eed880d8eaa87b3dbd8
msgid "Return the set of faces not shared by two elements."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:258
# 917c6e4d0d2c423abe6fec7a061c17bc
msgid "The output <literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). If <literal>CVIDs</literal> is not given, all convexes are considered, and it basically returns the mesh boundary. If <literal>CVIDs</literal> is given, it returns the boundary of the convex set whose #ids are listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:266
# c495bed4d0964d67baa18bbbb65a6e69
msgid "``CVFIDs = gf_mesh_get(mesh M, 'inner faces'[, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:268
# 033415173ba64c72bec6251631999888
msgid "Return the set of faces shared at least by two elements in CVIDs. Each face is represented only once and is arbitrarily chosen between the two neighbour elements."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:273
# 75f2d5ac48c749cd8881c12f12290eae
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces with direction', vec v, scalar angle [, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:275
# afca2d19e28243c5975a813ef2606dd8
msgid "Return the set of faces not shared by two convexes and with a mean outward vector lying within an angle <literal>angle</literal> (in radians) from vector <literal>v</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:277
#: ../source/scilab/cmdref_gf_mesh_get.rst:287
# 6886be50cab24f1198e77c92d5f84f7a
# 6917c08b6dc948ac8627d87b23a9fc2b
msgid "The output <literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). If <literal>CVIDs</literal> is given, it returns portion of the boundary of the convex set defined by the #ids listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:283
# d88e6f201caf4095b1c275d90e14f5a2
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces in box', vec pmin, vec pmax [, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:285
# 586a74c13104464c95c469d2088bf71e
msgid "Return the set of faces not shared by two convexes and lying within the box defined by the corner points <literal>pmin</literal> and <literal>pmax</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:293
# 0fcdb8dc496d4d49aa8ccbcb5bd7c4ce
msgid "``CVFIDs = gf_mesh_get(mesh M, 'adjacent face', int cvid, int fid)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:295
# fb2fa8606840458b8a0683700279377a
msgid "Return convex face of the neighbour element if it exists. If the convex have more than one neighbour relativley to the face <literal></literal>f<literal></literal> (think to bar elements in 3D for instance), return the first face found."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:301
# 2ed2f57f298a490587aa3e83ad3aa1f9
msgid "``CVFIDs = gf_mesh_get(mesh M, 'faces from cvid'[, ivec CVIDs][, 'merge'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:303
# b843a19cb3ad42e49a0dd639bc46b8b1
msgid "Return a list of convex faces from a list of convex #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:305
# cccb53854b2b4ee0ba68651d4103f530
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). If <literal>CVIDs</literal> is not given, all convexes are considered. The optional argument 'merge' merges faces shared by the convex of <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:311
# 34f49e4a1aa944bab36ffdb106825857
msgid "``[mat T] = gf_mesh_get(mesh M, 'triangulated surface', int Nrefine [,CVLIST])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:313
# 14d3fc2e8aa948dca9b2815e8e8147d5
msgid "[DEPRECATED FUNCTION! will be removed in a future release]"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:315
# 58a9b6c24a914d248c23ee73efd55008
msgid "Similar function to gf_mesh_get(mesh M, 'curved edges') : split (if necessary, i.e. if the geometric transformation if non-linear) each face into sub-triangles and return their coordinates in T (see also gf_compute('eval on P1 tri mesh'))"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:321
# 207e79dfcda248cf890b61dc92eef60e
msgid "``N = gf_mesh_get(mesh M, 'normal of face', int cv, int f[, int nfpt])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:323
# f5f35b9ab01b4180a087040c71d13882
msgid "Evaluates the normal of convex <literal>cv</literal>, face <literal>f</literal> at the <literal>nfpt</literal> point of the face."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:325
# 28e8396c214b49a7b7c2f17bc0368edd
msgid "If <literal>nfpt</literal> is not specified, then the normal is evaluated at each geometrical node of the face."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:329
# b86c7645292e4c088588cf63d9fd9c04
msgid "``N = gf_mesh_get(mesh M, 'normal of faces', imat CVFIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:331
# 169129d8ce74414385a5c90e5cf2344d
msgid "Evaluates (at face centers) the normals of convexes."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:333
# 83a4451aa46b401690edcebcfaf0529b
msgid "<literal>CVFIDs</literal> is supposed a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:337
# 950da744b7df4d5a9c0aca091581a7b5
msgid "``Q = gf_mesh_get(mesh M, 'quality'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:339
# 5f0c7346dd894809b1b4dfbc4cd671c6
msgid "Return an estimation of the quality of each convex (<latex style=\"text\"><![CDATA[0 \\leq Q \\leq 1]]></latex>)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:342
# 6e3d769defe34e9b9c045209ea339cde
msgid "``A = gf_mesh_get(mesh M, 'convex area'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:344
# 7b9dc2c2c5d94850b7d4dbed8729a20e
msgid "Return an estimate of the area of each convex."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:347
# 2b634006874a4daba357bc16b1ca59e3
msgid "``A = gf_mesh_get(mesh M, 'convex radius'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:349
# 38412e95da0046359392e39c3760f459
msgid "Return an estimate of the radius of each convex."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:352
# 0bf459a570e543d78b31c78203ec3f49
msgid "``{S, CV2S} = gf_mesh_get(mesh M, 'cvstruct'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:354
# 7efb29fb87044c97a557849c2ea32d06
msgid "Return an array of the convex structures."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:356
# 968397fd5c714c189b9cfc93e7a05fe7
msgid "If <literal>CVIDs</literal> is not given, all convexes are considered. Each convex structure is listed once in <literal>S</literal>, and <literal>CV2S</literal> maps the convexes indice in <literal>CVIDs</literal> to the indice of its structure in <literal>S</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:361
# 2f42e28889dc4de4a803d07435f85cbb
msgid "``{GT, CV2GT} = gf_mesh_get(mesh M, 'geotrans'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:363
# e5008772f8874ddfb4c34637faccaeec
msgid "Returns an array of the geometric transformations."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:365
# d1a0a4e40efe463f8c912cd1a8b446f0
msgid "See also gf_mesh_get(mesh M, 'cvstruct')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:368
# 2bc71c4f73bb46da82439c5954b51613
msgid "``RIDs = gf_mesh_get(mesh M, 'boundaries')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:370
# 1962106ebc0046609f5dd1b9470775f1
msgid "DEPRECATED FUNCTION. Use 'regions' instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:373
# 636067c438c9489183347466686cf736
msgid "``RIDs = gf_mesh_get(mesh M, 'regions')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:375
# 9c667533cc4747ae972d858b8bf504f6
msgid "Return the list of valid regions stored in the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:378
# 8b93d8eba3ec4e159c412a78d40024c6
msgid "``RIDs = gf_mesh_get(mesh M, 'boundary')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:380
# fe8a0b4a73434947a0e6a7329d7b9ddf
msgid "DEPRECATED FUNCTION. Use 'region' instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:383
# 8897ff19710e44cb920f5e3ace8a2456
msgid "``CVFIDs = gf_mesh_get(mesh M, 'region', ivec RIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:385
# ddccbd96e8fd443e8338346098d52e51
msgid "Return the list of convexes/faces on the regions <literal>RIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:387
# 30d8ac9bdb3a4d8d90f4935dad4fce13
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). (and 0 when the whole convex is in the regions)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:393
# 3ddbcf96b72b43f18532955d58449303
msgid "``gf_mesh_get(mesh M, 'save', string filename)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:395
# 94050d6055c44ff7aaf9eefa2d558265
msgid "Save the mesh object to an ascii file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:397
# 722922cb7c314ab4a37670ed66310afb
msgid "This mesh can be restored with gf_mesh('load', filename)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:400
# 3a40f58eb6924abe86d56ceffa59364d
msgid "``s = gf_mesh_get(mesh M, 'char')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:402
# 4d2a0ab87dfc43daa5874b6b05f56556
msgid "Output a string description of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:405
# d57fb7a04cb5416aa5a325677b778ecc
msgid "``gf_mesh_get(mesh M, 'export to vtk', string filename, ... [,'ascii'][,'quality'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:407
# 7d44b7394f5649c9a2d4b6ff8f421a09
msgid "Exports a mesh to a VTK file ."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:409
# d491083d4061461f8944214bce33e929
msgid "If 'quality' is specified, an estimation of the quality of each convex will be written to the file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:412
# a2cbcc92ddc649fc9718727f1e1e011f
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to vtk'), gf_slice_get(slice S, 'export to vtk')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:415
# fe6da84276474566ac01a0724ec3815d
msgid "``gf_mesh_get(mesh M, 'export to dx', string filename, ... [,'ascii'][,'append'][,'as',string name,[,'serie',string serie_name]][,'edges'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:417
# 683b41e0d1b1412fa04b824f2693b7dc
msgid "Exports a mesh to an OpenDX file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:419
# a35784d556da42119879116fefa67d5e
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to dx'), gf_slice_get(slice S, 'export to dx')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:422
# 6e38da5f282b4feca6528560f188cca8
msgid "``gf_mesh_get(mesh M, 'export to pos', string filename[, string name])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:424
# a344fc0da5fe498fba576df0ae881843
msgid "Exports a mesh to a POS file ."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:426
# 6cbc6d5f268a43ea90bea1ce8f67b3b9
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to pos'), gf_slice_get(slice S, 'export to pos')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:429
# 3a31772d0b4247bb92da351c20b32c29
msgid "``z = gf_mesh_get(mesh M, 'memsize')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:431
# 9b75771b7afc4d9ea43228d191093b44
msgid "Return the amount of memory (in bytes) used by the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:434
# e8fef23e52f74f1c8d9d4f23b737d4bd
msgid "``gf_mesh_get(mesh M, 'display')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:436
# 039d9226a56d4a77bd482543115c3f6f
msgid "displays a short summary for a mesh object."
msgstr ""

