# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-27 09:05+0000\n"
"PO-Revision-Date: 2018-07-16 07:09+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:10
msgid "Preliminary"
msgstr "準備"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:12
msgid ""
"This is just a short summary of the terms employed in this manual. If you "
"are not familiar with finite elements, this should be useful (but in any "
"case, you should definitively read the :ref:`dp`)."
msgstr ""
"これは、このマニュアルで使用されている用語の簡単な要約です。有限要素に慣れていない場合であれば便利です(但し、どんな場合でも :ref:`dp` "
"は読みましょう)。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:16
msgid ""
"The :envvar:`mesh` is composed of :envvar:`convexes`. What we call convexes "
"can be simple line segments, prisms, tetrahedrons, curved triangles, of even"
" something which is not convex (in the geometrical sense). They all have an "
"associated :envvar:`reference convex`: for segments, this will be the "
":math:`[0,1]` segment, for triangles this will be the canonical triangle "
":math:`(0,0)-(0,1)-(1,0)`, etc. All convexes of the mesh are constructed "
"from the reference convex through a :envvar:`geometric transformation`. In "
"simple cases (when the convexes are simplices for example), this "
"transformation will be linear (hence it is easily inverted, which can be a "
"great advantage). In order to define the geometric transformation, one "
"defines :envvar:`geometrical nodes` on the reference convex. The geometrical"
" transformation maps these nodes to the :envvar:`mesh nodes`."
msgstr ""
":envvar:`mesh` は :envvar:`convexes` "
"から構成されます。凸包と呼ばれるものは、単純な線分、角柱、四面体、曲三角形であり、(幾何学的な意味で)凸包でないものであってもかまいません。これらはすべて関連する"
" :envvar:`reference convex`: セグメントの場合は :math:`[0,1]`  セグメント、三角形の場合は正準三角形 "
":math:`(0,0)-(0,1)-(1,0)` などになります。メッシュのすべての凸包は、参照凸包から :envvar:`geometric "
"transformation` "
"を介して構築されます。単純な場合(例えば凸包が単純な場合)、この変換は(簡単に逆変換できることが大きな利点となる)線形になります。幾何学的変換を定義するために、基準凸包上に"
" :envvar:`geometrical nodes` を定義します。幾何変換はこれらのノードを :envvar:`mesh nodes` "
"にマップします。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:28
msgid ""
"On the mesh, one defines a set of basis functions: the :envvar:`FEM`. A FEM "
"is associated at each convex. The basis functions are also attached to some "
"geometrical points (which can be arbitrarily chosen). These points are "
"similar to the mesh nodes, but **they don't have to be the same** (this only"
" happens on very simple cases, such as a classical :math:`P_1` fem on a "
"triangular mesh). The set of all basis functions on the mesh forms the basis"
" of a vector space, on which the PDE will be solved. These basis functions "
"(and their associated geometrical point) are the :envvar:`degrees of "
"freedom` (contracted to :envvar:`dof`). The FEM is said to be "
":envvar:`Lagrangian` when each of its basis functions is equal to one at its"
" attached geometrical point, and is null at the geometrical points of others"
" basis functions. This is an important property as it is very easy to "
":envvar:`interpolate` an arbitrary function on the finite elements space."
msgstr ""
"メッシュ上で、基底関数の集合 :envvar:`FEM` "
"を定義します。FEMを各凸包に関連付けます。基底関数は、一部の(自由に選ぶことができる)形状点にもアタッチされます。これらのポイントはメッシュノードに似ていますが、"
" **同じである必要はありません** (これは、古典的な :math:`P_1` "
"三角形メッシュ有限要素法のような非常に単純な場合にのみ発生します)。メッシュ上のすべての基底関数の集合は、偏微分方程式が解かれるベクトル空間の基底を形成します。これらの基底関数(および関連する形状点)は"
" :envvar:`自由度` ( :envvar:`dof` "
"に関連)します。FEMは各基底関数が積分された形状点で1に等しく、他の基底関数の形状点でnullであるとき、 :envvar:`Lagrangian` "
"であるといいます。有限要素空間上の任意の関数を :envvar:`補間` することが非常に簡単になるため、これは重要な特性です。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:41
msgid ""
"The finite elements method involves evaluation of integrals of these basis "
"functions (or product of basis functions etc.) on convexes (and faces of "
"convexes). In simple cases (polynomial basis functions and linear "
"geometrical transformation), one can evaluate analytically these integrals. "
"In other cases, one has to approximate it using :envvar:`quadrature "
"formulas`. Hence, at each convex is attached an :envvar:`integration method`"
" along with the FEM. If you have to use an approximate integration method, "
"always choose carefully its order (i.e. highest degree of the polynomials "
"who are exactly integrated with the method): the degree of the FEM, of the "
"polynomial degree of the geometrical transformation, and the nature of the "
"elementary matrix have to be taken into account. If you are unsure about the"
" appropriate degree, always prefer a high order integration method (which "
"will slow down the assembly) to a low order one which will produce a useless"
" linear-system."
msgstr ""
"有限要素法は凸包(の面)上のこれらの基底関数(基本関数などの積)の積分の評価を含みます。(多項式基底関数や線形幾何変換などの)単純な場合では、これらの積分を解析的に評価することができます。他の場合には、以下を用いて近似しなければなりません。したがって、各凸包にはFEMとともに"
" :envvar:`積分法` の :envvar:`求積公式` の式が付加されます "
"。近似積分法を使用する必要がある場合は、常にその次数(すなわち、方法と正確に積分された多項式の最高次数)を慎重に選択してください。FEMの次数、幾何変換の多項式次数、および基本行列の性質を考慮する必要があります。適切な次数がわからない場合は、不要な線形システムを生成する低次積分法よりも、(アセンブリが遅くなりますが)常に高次積分法を選択します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:55
msgid ""
"The process of construction of a global linear system from integrals of "
"basis functions on each convex is the :envvar:`assembly`."
msgstr "各凸包の基底関数の積分から全体線形システムを構築するプロセスは :envvar:`assembly` です。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:58
msgid ""
"A mesh, with a set of FEM attached to its convexes is called a "
":envvar:`mesh_fem` object in |gf|."
msgstr "一連のFEMが凸包に接続されたメッシュは |gf| で :envvar:`mesh_fem` オブジェクトと呼ばれます。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:61
msgid ""
"A mesh, with a set of integration methods attached to its convexes is called"
" a :envvar:`mesh_im` object in |gf|."
msgstr "一連の積分法が接続されたメッシュは |gf| で :envvar:`mesh_im` オブジェクトと呼ばれます。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:64
msgid ""
"A |mf| can be used to approximate scalar fields (heat, pression, ...), or "
"vector fields (displacement, electric field, ...). A |mim| will be used to "
"perform numerical integrations on these fields. Most of the finite elements "
"implemented in |gf| are scalar (however, :math:`TR_0` and edges elements are"
" also available). Of course, these scalar FEMs can be used to approximate "
"each component of a vector field. This is done by setting the :math:`Qdim` "
"of the |mf| to the dimension of the vector field (i.e. :math:`Qdim=1` "
":math:`\\Rightarrow` scalar field, :math:`Qdim=2` :math:`\\Rightarrow` 2D "
"vector field etc.)."
msgstr ""
"|mf| を使用してスカラーフィールド(熱、圧力、...)またはベクトルフィールド(変位、電場、...)を近似できます。 |mim| "
"はこれらのフィールドで数値積分を実行するために使用されます。 |gf| に実装されているほとんどの有限要素はスカラー(ただし :math:`TR_0` "
"とedges要素も利用可能)です。もちろん、これらのスカラーFEMを使用して、ベクトル場の各成分を近似することができます。これを行うには、|mf| の "
":math:`Qdim` をベクトルフィールドの次元に設定します(例えば :math:`Qdim=1` :math:`\\Rightarrow` "
"スカラーフィールド、 :math:`Qdim=2` :math:`\\Rightarrow` ベクトルフィールドなど)。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:73
msgid ""
"When solving a PDE, one often has to use more than one FEM. The most "
"important one will be of course the one on which is defined the solution of "
"the PDE. But most PDEs involve various coefficients, for example:"
msgstr ""
"偏微分方程式を解く場合、多くの場合、複数のFEMを使用する必要があります。もちろん偏微分方程式の解が定義されている問題は最も重要です。ただし、ほとんどの偏微分方程式にはさまざまな係数が含まれます。たとえば、次のような場合です。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:77
msgid "\\nabla\\cdot(\\lambda(x)\\nabla u) = f(x)."
msgstr "\\nabla\\cdot(\\lambda(x)\\nabla u) = f(x)."

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:81
msgid ""
"Hence one has to define a FEM for the main unknown :math:`u`, but also for "
"the data :math:`\\lambda(x)` and :math:`f(x)` if they are not constant. In "
"order to interpolate easily these coefficients in their finite element "
"space, one often choose a Lagrangian FEM."
msgstr ""
"したがって、メインの未知数の :math:`u` に対してFEMを定義する必要もありますが、定数でない場合 :math:`\\lambda(x)` と "
":math:`f(x)` に対しても定義が必要になります。これらの係数を有限要素空間で容易に補間するためにLagrange "
"有限要素法を選択することが多いです。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:86
msgid ""
"The convexes, mesh nodes, and dof are all numbered. We sometimes refer to "
"the number associated to a convex as its :envvar:`convex id` (contracted to "
":envvar:`cvid`). Mesh node numbers are also called :envvar:`point id` "
"(contracted to :envvar:`pid`). Faces of convexes do not have a global "
"numbering, but only a local number in each convex. Hence functions which "
"need or return a list of faces will always use a two-rows matrix, the first "
"one containing convex ids, and the second one containing local face number."
msgstr ""
"凸包、メッシュ節点、および自由度にはすべて番号が付けられます。凸包に関連する数をその数 :envvar:`凸包id` ( :envvar:`cvid` "
"とします) で参照することがあります。メッシュ節点番号は :envvar:`ポイントid` ( :envvar:`pid` "
"とします)とも呼ばれます。凸包面にはグローバルな番号付けはなく、各凸包のローカルな番号のみが付けられます。したがって、面のリストを必要とする関数や返す関数は、常に2行の行列を使用します。最初の行列には凸包idが含まれ、2番目の行列にはローカル面番号が含まれます。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/matlab/pre.rst:94
msgid ""
"While the dof are always numbered consecutively, **this is not always the "
"case for point ids and convex ids**, especially if you have removed points "
"or convexes from the mesh. To ensure that they form a continuous sequence "
"(starting from 1), you have to call::"
msgstr ""
"自由度は常に連続した番号が付けられますが、 **点のIDと凸包のIDに対しては常に成り立つわけではありません** "
"。特に、メッシュから点や凸包を削除した場合は成り立ちません。これらが連続した配列(1から開始)を形成することを保証するためには、次のように実行する必要があります。"
