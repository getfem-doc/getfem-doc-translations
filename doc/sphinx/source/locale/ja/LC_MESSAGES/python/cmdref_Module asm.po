# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-26 18:08+0000\n"
"PO-Revision-Date: 2018-07-16 07:18+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/python/cmdref_Module
#: asm.rst:8
msgid "Module asm"
msgstr "モジュール asm"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:1
msgid ""
"Synopsis: (...) = asm_generic(MeshIm mim, int order, string expression, int "
"region, [Model model, ['Secondary_domain', 'name',]] [string varname, int "
"is_variable[, {MeshFem mf, MeshImd mimd}], value], ['select_output', "
"'varname1'[, 'varname2]], ...)"
msgstr ""
"概要: (...) = asm_generic(MeshIm mim, int order, string expression, int "
"region, [Model model, ['Secondary_domain', 'name',]] [string varname, int "
"is_variable[, {MeshFem mf, MeshImd mimd}], value], ['select_output', "
"'varname1'[, 'varname2]], ...)"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:3
msgid ""
"High-level generic assembly procedure for volumic or boundary assembly."
msgstr "ボリュームアセンブリまたは境界アセンブリの高水準の汎用アセンブリ手順。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:5
msgid ""
"Performs the generic assembly of `expression` with the integration method "
"`mim` on the mesh region of index `region` (-1 means all elements of the "
"mesh). The same mesh should be shared by the integration method and all the "
"finite element methods or mesh_im_data corresponding to the variables."
msgstr ""
"積分法 `mim` を使用して、インデックス `region` (-1はメッシュのすべての要素を意味します)のメッシュ領域上で `expression`"
" の汎用アセンブリを実行します。同じメッシュを積分法と、変数に対応するすべての有限要素法またはmesh_im_dataで共有する必要があります。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:11
msgid ""
"`order` indicates either that the (scalar) potential (order = 0) or the "
"(vector) residual (order = 1) or the tangent (matrix) (order = 2) is to be "
"computed."
msgstr ""
"`order` は、(スカラー)ポテンシャル (order=0) "
"、(ベクトル)残差(order=1)、または接線(行列)(order=2)のいずれかが計算されることを示します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:15
msgid ""
"`model` is an optional parameter allowing to take into account all variables"
" and data of a model. Note that all enabled variables of the model will "
"occupy space in the returned vector/matrix corresponding to their degrees of"
" freedom in the global system, even if they are not present in `expression`."
msgstr ""
"`model` はモデルのすべての変数とデータを考慮に入れることができるオプションのパラメータです。モデルのすべての使用可能な変数は、たとえ "
"`expression` に存在しなくても、全体系での自由度に対応する返されたベクトル/行列の空間を占めることに注意してください。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:21
msgid ""
"The variables and constants (data) are listed after the region number (or "
"optionally the model). For each variable/constant, a name must be given "
"first (as it is referred in the assembly string), then an integer equal to 1"
" or 0 is expected respectively for declaring a variable or a constant, then "
"the finite element method if it is a fem variable/constant or the "
"mesh_im_data if it is data defined on integration points, and the vector "
"representing the value of the variable/constant. It is possible to give an "
"arbitrary number of variable/constant. The difference between a variable and"
" a constant is that test functions are only available for variables, not for"
" constants."
msgstr ""
"変数と定数(データ)は、領域番号(またはオプションでモデル)の後にリストされます。変数/定数ごとに、最初に名前を指定する必要があります(アセンブリ文字列で参照されるとおり)。次に、変数または定数を宣言するために、それぞれ1または0に等しい整数が必要です。次に、fem変数/定数の場合は有限要素法、積分点で定義されたデータの場合はmesh_im_data、および変数/定数の値を表すベクトルが必要です。任意の数の変数/定数を指定できます。変数と定数の違いは、試験関数は変数に対してのみ使用でき、定数に対しては使用できないことです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:33
msgid ""
"`select_output` is an optional parameter which allows to reduce the output "
"vector (for `order` equal to 1) or the matrix (for `order` equal to 2) to "
"the degrees of freedom of the specified variables. One variable has to be "
"specified for a vector output and two for a matrix output."
msgstr ""
"`select_output` は出力ベクトル( `order` が1の場合)または行列( `order` "
"が2の場合)を指定された変数の自由度まで減らすことができるオプションのパラメータです。ベクトル出力には1つの変数を指定し、行列出力には2つの変数を指定する必要があります。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:39
msgid ""
"Note that if several variables are given, the assembly of the tangent "
"matrix/residual vector will be done considering the order in the call of the"
" function (the degrees of freedom of the first variable, then of the second "
"one, and so on). If a model is provided, all degrees of freedom of the model"
" will be counted first, even if some of the model variables do not appear in"
" `expression`."
msgstr ""
"複数の変数が与えられた場合、正接行列/残差ベクトルのアセンブリは、関数の呼び出しの順序を考慮して行われます(最初の変数の自由度、次に2番目の変数の自由度、というように続きます)。モデルが提供されている場合、一部のモデル変数が"
" `expression` に現れない場合でも、モデルのすべての自由度が最初にカウントされます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:46
msgid "For example, the L2 norm of a vector field \"u\" can be computed with::"
msgstr "例えば、ベクトルフィールド \"u\" のL2ノルムは"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_generic:52
msgid ""
"The nonhomogeneous Laplacian stiffness matrix of a scalar field can be "
"evaluated with::"
msgstr "スカラー場の不均質Laplacian剛性行列は以下で評価できます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_mass_matrix:1
msgid ""
"Synopsis: M = asm_mass_matrix(MeshIm mim, MeshFem mf1[, MeshFem mf2[, int "
"region]])"
msgstr ""
"概要: M = asm_mass_matrix(MeshIm mim, MeshFem mf1[, MeshFem mf2[, int "
"region]])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_mass_matrix:3
msgid "Assembly of a mass matrix."
msgstr "質量行列のアセンブリ。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_mass_matrix:5
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_laplacian:5
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_linear_elasticity:6
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_helmholtz:5
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_bilaplacian:5
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_bilaplacian_KL:5
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary_qu_term:7
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_lsneuman_matrix:3
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nlsgrad_matrix:3
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_stabilization_patch_matrix:3
msgid "Return a SpMat object."
msgstr "SpMatオブジェクトを返します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_laplacian:1
msgid "Assembly of the matrix for the Laplacian problem."
msgstr "Laplacian問題の行列の組み立て。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_laplacian:3
msgid ":math:`\\nabla\\cdot(a(x)\\nabla u)`  with `a` a scalar."
msgstr ":math:`\\nabla\\cdot(a(x)\\nabla u)` ここで `a` はスカラーです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_linear_elasticity:1
msgid "Assembles of the matrix for the linear (isotropic) elasticity problem."
msgstr "線形(等方性)弾性問題のためのマトリックスの集合。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_linear_elasticity:3
msgid ""
":math:`\\nabla\\cdot(C(x):\\nabla u)` with :math:`C` defined via `lambda_d` "
"and `mu_d`."
msgstr ""
":math:`\\nabla\\cdot(C(x):\\nabla u)` ここで :math:`C` は `lambda_d` と `mu_d` "
"によって定義されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:1
msgid ""
"Synopsis: TRHS = asm_nonlinear_elasticity(MeshIm mim, MeshFem mf_u, vec U, "
"string law, MeshFem mf_d, mat params, {'tangent "
"matrix'|'rhs'|'incompressible tangent matrix', MeshFem mf_p, vec "
"P|'incompressible rhs', MeshFem mf_p, vec P})"
msgstr ""
"概要: TRHS = asm_nonlinear_elasticity(MeshIm mim, MeshFem mf_u, vec U, string "
"law, MeshFem mf_d, mat params, {'tangent matrix'|'rhs'|'incompressible "
"tangent matrix', MeshFem mf_p, vec P|'incompressible rhs', MeshFem mf_p, vec"
" P})"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:3
msgid ""
"Assembles terms (tangent matrix and right hand side) for nonlinear "
"elasticity."
msgstr "非線形弾性の項(接線行列と右辺)をアセンブルします。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:5
msgid ""
"The solution `U` is required at the current time-step. The `law` may be "
"choosen among:"
msgstr "現在の時間ステップでは解 `U` が必要です。 `law` は次の中から選択することができます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:8
msgid ""
"'SaintVenant Kirchhoff': Linearized law, should be avoided). This law has "
"the two usual Lame coefficients as parameters, called lambda and mu."
msgstr ""
"'SaintVenant Kirchhoff': "
"線形は避けるべきです)。この法則には、パラメータとして、lambdaおよびmuと呼ばれる2つの通常のLame係数があります。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:11
msgid ""
"'Mooney Rivlin': This law has three parameters, called C1, C2 and D1. Can be"
" preceded with the words 'compressible' or 'incompressible' to force a "
"specific version. By default, the incompressible version is considered which"
" requires only the first two material coefficients."
msgstr ""
"'Mooney Rivlin': この法則にはC1、C2、D1という3つのパラメータがあります。前に 'compressible' または "
"'incompressible' "
"を付けることで、特定のバージョンを強制するころができます。デフォルトでは、最初の2つの材料係数のみを必要とする非圧縮性バージョンが考慮されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:16
msgid ""
"'neo Hookean': A special case of the 'Mooney Rivlin' law that requires one "
"material coefficient less (C2 = 0). By default, its compressible version is "
"used."
msgstr ""
"'neo Hookean':  'Mooney Rivlin' 法の特殊なケースです。材料係数がひとつ少なくなります (C2 = "
"0)。デフォルトでは圧縮性のバージョンが使用されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:19
msgid ""
"'Ciarlet Geymonat': This law has 3 parameters, called lambda, mu and gamma, "
"with gamma chosen such that gamma is in ]-lambda/2-mu, -mu[."
msgstr ""
"'Ciarlet Geymonat': この法則にはlambda、mu と gammaと呼ばれる3つのパラメータがあります。ここでgammaは "
"]-lambda/2-mu, -mu[ になるように選択されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:23
msgid ""
"The parameters of the material law are described on the MeshFem `mf_d`. The "
"matrix `params` should have `nbdof(mf_d)` columns, each row correspounds to "
"a parameter."
msgstr ""
"材料法則のパラメータは、MeshFem `mf_d` で記述します。行列 `params` では、行はパラメータに対応し列は `nbdof(mf_d)`"
" に対応します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:27
msgid ""
"The last argument selects what is to be built: either the tangent matrix, or"
" the right hand side. If the incompressibility is considered, it should be "
"followed by a MeshFem `mf_p`, for the pression."
msgstr "最後の引数は作成するもの、接線行列またはRHS、を選択します。非圧縮性を考慮する場合、圧縮にはMeshFem `mf_p` が必要です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nonlinear_elasticity:32
msgid ""
"Return a SpMat object (tangent matrix), vec object (right hand side), tuple "
"of SpMat objects (incompressible tangent matrix), or tuple of vec objects "
"(incompressible right hand side)."
msgstr ""
"SpMatオブジェクト(接線行列)、vecオブジェクト(右辺)、SpMatオブジェクトのタプル(非圧縮接線行列)、またはvecオブジェクトのタプル(非圧縮性右辺)を返します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_helmholtz:1
msgid "Assembly of the matrix for the Helmholtz problem."
msgstr "Helmholtz問題の行列の組み立て。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_helmholtz:3
msgid ":math:`\\Delta u + k^2 u` = 0,  with `k` complex scalar."
msgstr ":math:`\\Delta u + k^2 u` = 0 、ただし `k` は複素数スカラーです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_bilaplacian:1
msgid "Assembly of the matrix for the Bilaplacian problem."
msgstr "Bilaplacian問題のための行列の組み立てです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_bilaplacian:3
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_bilaplacian_KL:3
msgid ":math:`\\Delta(a(x)\\Delta u) = 0`   with `a` scalar."
msgstr ":math:`\\Delta(a(x)\\Delta u) = 0` ただし `a` はスカラーです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_bilaplacian_KL:1
msgid ""
"Assembly of the matrix for the Bilaplacian problem with Kirchhoff-Love "
"formulation."
msgstr "Kirchhoff-Love 定式化を用いたBilaplacian問題に対する行列の組み立て。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic_source:1
msgid "Assembly of a volumic source term."
msgstr "体積ソース項のアセンブリ。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic_source:3
msgid ""
"Output a vector `V`, assembled on the MeshFem `mf_u`, using the data vector "
"`fd` defined on the data MeshFem `mf_d`. `fd` may be real or complex-valued."
msgstr ""
"データMeshFem `mf_d` で定義されたデータベクトル `fd` を使用して、MeshFem `mf_u` 上で組み立てられたベクトル `V` "
"を出力します。 `fd` は実数値でも複素数値でもよいです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic_source:7
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary_source:7
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_integral_contact_Uzawa_projection:7
#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_level_set_normal_source_term:6
msgid "Return a vec object."
msgstr "vecオブジェクトを返します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary_source:1
msgid "Assembly of a boundary source term."
msgstr "境界ソース項の構築。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary_source:3
msgid ""
"`G` should be a [Qdim x N] matrix, where N is the number of dof of `mf_d`, "
"and Qdim is the dimension of the unkown u (that is set when creating the "
"MeshFem)."
msgstr ""
"`G` は [Qdim x N] 行列でなければなりません。ここでNは `mf_d` "
"の自由度数であり、(MeshFemの作成時に設定される)Qdimは未知のuの次元です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:1
msgid "Assembly of Dirichlet conditions of type `h.u = r`."
msgstr "`h.u = r` 型のDirichlet条件の集合です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:3
msgid ""
"Handle `h.u = r` where h is a square matrix (of any rank) whose size is "
"equal to the dimension of the unkown u. This matrix is stored in `H`, one "
"column per dof in `mf_d`, each column containing the values of the matrix h "
"stored in fortran order:"
msgstr ""
"ハンドル `h.u = r` ここでhは(あらゆるrankの)正方行列で、その大きさは未知のuの次元と等しいです。この行列は `H` 、 `mf_d` "
"の自由度ごとに1列ずつ格納され、各列には行列hの値がFortranの次数で格納されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:8
msgid "`H(:,j) = [h11(x_j) h21(x_j) h12(x_j) h22(x_j)]`"
msgstr "`H(:,j) = [h11(x_j) h21(x_j) h12(x_j) h22(x_j)]`"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:12
msgid "if u is a 2D vector field."
msgstr "uが2次元ベクトルフィールドの場合。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:14
msgid ""
"Of course, if the unknown is a scalar field, you just have to set `H = "
"ones(1, N)`, where N is the number of dof of `mf_d`."
msgstr ""
"もちろん、未知のスカラーフィールドである場合、単に `H = ones(1, N)` を設定する必要があります。ここでNは `mf_d` "
"の自由度数です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:17
msgid ""
"This is basically the same than calling gf_asm('boundary qu term') for `H` "
"and calling gf_asm('neumann') for `R`, except that this function tries to "
"produce a 'better' (more diagonal) constraints matrix (when possible)."
msgstr ""
"これは基本的に、 gf_asm('boundary qu term') を `H` に対して呼び出し、 gf_asm('neumann') を `R` "
"に対して呼び出すのと同じですが、この関数は(可能な場合) 'より良い ' (より多くの対角線)制約行列を生成しようとします。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_dirichlet:22
msgid "See also Spmat.Dirichlet_nullspace()."
msgstr "Spmat.Dirichlet_nullspace() も参照してください。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary_qu_term:1
msgid "Assembly of a boundary qu term."
msgstr "境界qu項のアセンブリです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary_qu_term:3
msgid ""
"`q` should be be a [Qdim x Qdim x N] array, where N is the number of dof of "
"`mf_d`, and Qdim is the dimension of the unkown u (that is set when creating"
" the MeshFem)."
msgstr ""
"`q` は [Qdim x Qdim x N] 配列でなければなりません。ここでNは `mf_d` "
"の自由度数であり、Qdimは(MeshFemの作成時に設定される)未知変数uの次元です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_define_function:1
msgid ""
"Synopsis: asm_define_function(string name, int nb_args, string expression[, "
"string expression_derivative_t[, string expression_derivative_u]])"
msgstr ""
"概要: asm_define_function(string name, int nb_args, string expression[, string"
" expression_derivative_t[, string expression_derivative_u]])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_define_function:3
msgid ""
"Define a new function `name` which can be used in high level generic "
"assembly. The function can have one or two parameters. In `expression` all "
"available predefined function or operation of the generic assembly can be "
"used. However, no reference to some variables or data can be specified. The "
"argument of the function is `t` for a one parameter function and `t` and `u`"
" for a two parameter function. For instance 'sin(pi*t)+2*t*t' is a valid "
"expression for a one parameter function and 'sin(max(t,u)*pi)' is a valid "
"expression for a two parameters function. `expression_derivative_t` and "
"`expression_derivative_u` are optional expressions for the derivatives with "
"respect to `t` and `u`. If they are not furnished, a symbolic derivation is "
"used."
msgstr ""
"高水準汎用アセンブリで使用できる新しい関数 `name` を定義します。関数には、1つまたは2つのパラメータを指定できます。 `expression` "
"では、汎用アセンブリの使用可能なすべての定義済み関数またはオペレーションを使用できます。ただし、一部の変数またはデータへの参照は指定できません。関数の引数は、1つのパラメータ関数の場合は"
" `t` 、2つのパラメータ関数の場合は `t` と `u` です。例えば、 'sin(pi*t)+2*t*t' "
"は1つのパラメータ関数のための有効な式であり、 'sin(max(t,u)*pi)' は2つのパラメータ関数のための有効な式です。 "
"`expression_derivative_t` と `expression_derivative_u` は `t` と `u` "
"に関する導関数のオプション式です。指定されていない場合は、記号による微分が使用されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_undefine_function:1
msgid ""
"Cancel the definition of a previously defined function `name` for the high "
"level generic assembly."
msgstr "高水準の汎用アセンブリに対して以前に定義された関数 `name` の定義をキャンセルします。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_define_linear_hardening_function:1
msgid ""
"Synopsis: asm_define_linear_hardening_function(string name, scalar sigma_y0,"
" scalar H, ... [string 'Frobenius'])"
msgstr ""
"概要: asm_define_linear_hardening_function(string name, scalar sigma_y0, "
"scalar H, ... [string 'Frobenius'])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_define_linear_hardening_function:3
msgid ""
"Define a new linear hardening function under the name `name`, with initial "
"yield stress `sigma_y0` and hardening modulus H. If an extra string argument"
" with the value 'Frobenius' is provided, the hardening function is expressed"
" in terms of Frobenius norms of its input strain and output stress, instead "
"of their Von-Mises equivalents."
msgstr ""
"初期降伏応力が `sigma_y0` で硬化係数がHの新しい線形硬化関数をnameという名前で定義します。値が 'Frobenius' "
"の特別な文字列引数が指定された場合、硬化関数はVon-Mises相当ではなく、入力ひずみと出力応力のFrobeniusノルムで表されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_define_Ramberg_Osgood_hardening_function:1
msgid ""
"Synopsis: asm_define_Ramberg_Osgood_hardening_function(string name, scalar "
"sigma_ref, {scalar eps_ref | scalar E, scalar alpha}, scalar n[, string "
"'Frobenius'])"
msgstr ""
"概要: asm_define_Ramberg_Osgood_hardening_function(string name, scalar "
"sigma_ref, {scalar eps_ref | scalar E, scalar alpha}, scalar n[, string "
"'Frobenius'])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_define_Ramberg_Osgood_hardening_function:3
msgid ""
"Define a new Ramberg Osgood hardening function under the name `name`, with "
"initial yield stress `sigma_y0` and hardening modulus H. If an extra string "
"argument with the value 'Frobenius' is provided, the hardening function is "
"expressed in terms of Frobenius norms of its input strain and output stress,"
" instead of their Von-Mises equivalents."
msgstr ""
"新しいRamberg Osgood硬化関数を、初期降伏応力を `sigma_y0` 、硬化係数をHとして名前 `name` で定義します。値が "
"'Frobenius' の特別な文字列引数が指定されている場合、硬化関数は、Von-"
"Mises相当ではなく、入力ひずみと出力応力のFrobeniusノルムで表されます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_expression_analysis:1
msgid ""
"Synopsis: asm_expression_analysis(string expression [, {Mesh mesh | MeshIm "
"mim}] [, der_order] [, Model model] [, string varname, int is_variable[, "
"{MeshFem mf | MeshImd mimd}], ...])"
msgstr ""
"概要: asm_expression_analysis(string expression [, {Mesh mesh | MeshIm mim}] "
"[, der_order] [, Model model] [, string varname, int is_variable[, {MeshFem "
"mf | MeshImd mimd}], ...])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_expression_analysis:3
msgid ""
"Analyse a high-level generic assembly expression and print information about"
" the provided expression."
msgstr "高水準汎用アセンブリ表現を解析し、指定された表現に関する情報を出力します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic:1
msgid ""
"Synopsis: (...) = asm_volumic(,CVLST], expr [, mesh_ims, mesh_fems, "
"data...])"
msgstr ""
"概要: (...) = asm_volumic(,CVLST], expr [, mesh_ims, mesh_fems, data...])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic:3
msgid "Low-level generic assembly procedure for volumic assembly."
msgstr "体積構築の低水準汎用アセンブリ手順。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic:5
msgid ""
"The expression `expr` is evaluated over the MeshFem's listed in the "
"arguments (with optional data) and assigned to the output arguments. For "
"details about the syntax of assembly expressions, please refer to the getfem"
" user manual (or look at the file getfem_assembling.h in the getfem++ "
"sources)."
msgstr ""
"式 `expr` "
"は引数(オプションのデータ)にリストされたMeshFemに対して評価され、出力引数に割り当てられます。アセンブリ式の構文の詳細については、getfemユーザマニュアル(か"
" getfem++ のソースファイル getfem_assembling.h )を参照してください。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic:11
msgid "For example, the L2 norm of a field can be computed with::"
msgstr "たとえば、フィールドのL2ノルムは次のように計算できます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_volumic:17
msgid "The Laplacian stiffness matrix can be evaluated with::"
msgstr "Laplacian剛性マトリックスは、次の式で評価できます。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary:1
msgid ""
"Synopsis: (...) = asm_boundary(int bnum, string expr [, MeshIm mim, MeshFem "
"mf, data...])"
msgstr ""
"概要: (...) = asm_boundary(int bnum, string expr [, MeshIm mim, MeshFem mf, "
"data...])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary:3
msgid "Low-level generic boundary assembly."
msgstr "低水準の汎用境界のアセンブリです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_boundary:5
msgid "See the help for gf_asm('volumic')."
msgstr "gf_asm('volumic') のヘルプを参照してください。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_interpolation_matrix:1
msgid ""
"Synopsis: Mi = asm_interpolation_matrix(MeshFem mf, {MeshFem mfi | vec pts})"
msgstr ""
"概要: Mi = asm_interpolation_matrix(MeshFem mf, {MeshFem mfi | vec pts})"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_interpolation_matrix:3
msgid ""
"Build the interpolation matrix from a MeshFem onto another MeshFem or a set "
"of points."
msgstr "MeshFemから別のMeshFemまたはポイント集合の補間行列を構築します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_interpolation_matrix:5
msgid ""
"Return a matrix `Mi`, such that `V = Mi.U` is equal to "
"gf_compute('interpolate_on',mfi). Useful for repeated interpolations. Note "
"that this is just interpolation, no elementary integrations are involved "
"here, and `mfi` has to be lagrangian. In the more general case, you would "
"have to do a L2 projection via the mass matrix."
msgstr ""
"行列 `Mi` を返します。`V = Mi.U` は gf_compute('interpolate_on',mfi) "
"と等しいです。反復補間に便利です。これは単なる補間であり、ここでは基本的な積分は行われず、 `mfi` "
"はlagrangianでなければならないことに注意してください。より汎用的なケースでは、質量行列を介してL2投影を行う必要があります。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_interpolation_matrix:12
msgid "`Mi` is a SpMat object."
msgstr "`Mi` はSpMatオブジェクトです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_extrapolation_matrix:1
msgid ""
"Synopsis: Me = asm_extrapolation_matrix(MeshFem mf,  {MeshFem mfe | vec "
"pts})"
msgstr ""
"概要: Me = asm_extrapolation_matrix(MeshFem mf, {MeshFem mfe | vec pts})"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_extrapolation_matrix:3
msgid ""
"Build the extrapolation matrix from a MeshFem onto another MeshFem or a set "
"of points."
msgstr "MeshFemから別のMeshFemまたはポイントの集合に外挿行列を構築します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_extrapolation_matrix:5
msgid ""
"Return a matrix `Me`, such that `V = Me.U` is equal to "
"gf_compute('extrapolate_on',mfe). Useful for repeated extrapolations."
msgstr ""
"行列Meを返します。 `V = Me.U` は gf_compute('extrapolate_on',mfe) と等しいです。反復外挿に便利です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_extrapolation_matrix:9
msgid "`Me` is a SpMat object."
msgstr "`Me` はSpMatオブジェクトです。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_integral_contact_Uzawa_projection:1
msgid ""
"Synopsis: B = asm_integral_contact_Uzawa_projection(int bnum, MeshIm mim, "
"MeshFem mf_u, vec U, MeshFem mf_lambda, vec vec_lambda, MeshFem mf_obstacle,"
" vec obstacle, scalar r [, {scalar coeff | MeshFem mf_coeff, vec coeff} [, "
"int option[, scalar alpha, vec W]]])"
msgstr ""
"概要: B = asm_integral_contact_Uzawa_projection(int bnum, MeshIm mim, MeshFem "
"mf_u, vec U, MeshFem mf_lambda, vec vec_lambda, MeshFem mf_obstacle, vec "
"obstacle, scalar r [, {scalar coeff | MeshFem mf_coeff, vec coeff} [, int "
"option[, scalar alpha, vec W]]])"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_integral_contact_Uzawa_projection:5
msgid "Specific assembly procedure for the use of an Uzawa algorithm to solve"
msgstr "Uzawaアルゴリズムを用いて解くための具体的な構築手順です。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_integral_contact_Uzawa_projection:4
msgid ""
"contact problems. Projects the term $-(\\lambda - r (u_N-g))_-$ on the "
"finite element space of $\\lambda$."
msgstr "接触問題。 $-(\\lambda - r (u_N-g))_-$ の項を $\\lambda$ の有限要素空間に投影します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_level_set_normal_source_term:1
msgid ""
"Performs an assembly of the source term represented by `vec_lambda` on "
"`mf_lambda` considered to be a component in the direction of the gradient of"
" a levelset function (normal to the levelset) of a vector field defined on "
"`mf_u` on the boundary `bnum`."
msgstr ""
"境界 `bnum` 上の `mf_u` 上で定義されたベクトルフィールドのlevelset関数(levelsetの法線)の勾配方向の成分と考えられる "
"`mf_lambda` 上で `vec_lambda` で表されるソース項のアセンブリを実行します。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_lsneuman_matrix:1
msgid "Assembly of a level set Neuman  matrix."
msgstr "levelset行列のアセンブリ。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_nlsgrad_matrix:1
msgid "Assembly of a nlsgrad matrix."
msgstr "nlsgrad行列のアセンブリ。"

#: /home/travis/virtualenv/python3.6.9/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.asm_stabilization_patch_matrix:1
msgid "Assembly of stabilization patch matrix ."
msgstr "安定化パッチ行列のアセンブリ。"
