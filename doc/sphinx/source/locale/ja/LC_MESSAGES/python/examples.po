# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 12:21+0000\n"
"PO-Revision-Date: 2018-07-16 07:18+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/python/examples.rst:10
msgid "Examples"
msgstr "例題"

#: ../source/python/examples.rst:17
msgid "A step-by-step basic example"
msgstr "ステップごとの基本的な例"

#: ../source/python/examples.rst:19
msgid ""
"This example shows the basic usage of getfem, on the über-canonical problem "
"above all others: solving the :envvar:`Laplacian`, :math:`-\\Delta u = f` on"
" a square, with the Dirichlet condition :math:`u = g(x)` on the domain "
"boundary. You can find the **py-file** of this example under the name "
"**demo_step_by_step.py** in the directory ``interface/tests/python/`` of the"
" |gf| distribution."
msgstr ""
"この例は、以下のような über-canonical 問題に対するgetfemの基本的な使い方を示しています。これは "
":envvar:`Laplacian`, :math:`-\\Delta u = f` を正方形上で、Dirichlet条件 :math:`u = "
"g(x)` をドメイン境界上で解きます。この例の **py-file** は **demo_step_by_step.py** "
"という名前の下にあります。 |gf| ディストリビューションの ``interface/tests/python/`` ディレクトリにあります。"

#: ../source/python/examples.rst:25
msgid ""
"The first step is to **create a Mesh object**. It is possible to create "
"simple structured meshes or unstructured meshes for simple geometries (see "
"``getfem.Mesh('generate', mesher_object mo, scalar h))``) or to rely on an "
"external mesher (see ``getfem.Mesh('import', string FORMAT, string "
"FILENAME)``), or use very simple meshes. For this example, we just consider "
"a regular mesh\\index{cartesian mesh} whose nodes are "
":math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}`"
msgstr ""
"最初のステップは **メッシュオブジェクトを作成する** ことです。単純なジオメトリ( ``getfem.Mesh('generate', "
"mesher_object mo, scalar h))`` を参照)用に単純な構造化メッシュまたは非構造化メッシュを作成することも、外部メッシャ( "
"``getfem.Mesh('import', string FORMAT, string FILENAME)`` "
"を参照)に依存することも、非常に単純なメッシュを使用することも可能です。この例では、ノードが "
":math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}` である通常の mesh "
"\\index{cartesian mesh} を考えます。"

#: ../source/python/examples.rst:34
msgid ""
"The next step is to **create a MeshFem object**. This one links a mesh with "
"a set of FEM"
msgstr "次のステップでは **MeshFemオブジェクト** を作成します。これは、メッシュをFEMの集合とリンクします。"

#: ../source/python/examples.rst:41
msgid ""
"The first instruction builds a new |py_mf| object, the second argument "
"specifies that this object will be used to interpolate scalar fields (since "
"the unknown :math:`u` is a scalar field). The second instruction assigns the"
" :math:`Q^2` FEM to every convex (each basis function is a polynomial of "
"degree 4, remember that :math:`P^k\\Rightarrow` polynomials of degree "
":math:`k`, while :math:`Q^k\\Rightarrow` polynomials of degree :math:`2k`). "
"As :math:`Q^2` is a polynomial FEM, you can view the expression of its basis"
" functions on the reference convex:"
msgstr ""
"最初の命令は新しい |py_mf| オブジェクトを構築し、2番目の引数はこのオブジェクトがスカラーフィールドの補間に使用されることを指定します(未知変数"
" :math:`u` はスカラーフィールドです)。第2の命令は、すべての凸包(各基底関数は4次の多項式であり :math:`k` 次 "
":math:`P^k\\Rightarrow` 多項式であることを覚えておいてください、ここで :math:`2k` 次 "
":math:`Q^k\\Rightarrow` 多項式です)に :math:`Q^2` FEMを割り当てます。 :math:`Q^2` "
"は多項式FEMなので、参照凸包でその基底関数の式を見ることができます。"

#: ../source/python/examples.rst:54
msgid ""
"Now, in order to perform numerical integrations on ``mf``, we need to "
"**build a MeshIm object**"
msgstr "さて、 ``mf`` で数値積分を行うには、 **MeshImオブジェクトを構築する** 必要があります。"

#: ../source/python/examples.rst:61
msgid ""
"The integration method will be used to compute the various integrals on each"
" element: here we choose to perform exact computations (no "
":envvar:`quadrature formula`), which is possible since the geometric "
"transformation of these convexes from the reference convex is linear (this "
"is true for all simplices, and this is also true for the parallelepipeds of "
"our regular mesh, but it is not true for general quadrangles), and the "
"chosen FEM is polynomial. Hence it is possible to analytically integrate "
"every basis function/product of basis functions/gradients/etc. There are "
"many alternative FEM methods and integration methods (see :ref:`ud`)."
msgstr ""
"積分法を使用して各要素の各種積分を計算します。ここでは、正確な計算(非 "
":envvar:`求積公式`)を実行することを選択します。これは、参照凸包からのこれらの凸包の幾何変換が線形(これはすべてのシンプレックスに当てはまり、通常のメッシュの平行六面体にも当てはまりますが、一般的な四角形には当てはまりません)であり、選択したFEMが多項式であるために可能です。このため、すべての基底関数/基底関数の積/傾き/などを解析的に積分することが可能であり、FEMの手法や積分法にも多くの選択肢があります("
" :ref:`ud` を参照)。"

#: ../source/python/examples.rst:71
msgid ""
"Note however that in the general case, approximate integration methods are a"
" better choice than exact integration methods."
msgstr "ただし、一般的なケースでは、厳密な積分法よりも近似積分法の方が適しています。"

#: ../source/python/examples.rst:74
msgid ""
"Now we have to **find the** <:envvar:`boundary`> **of the domain**, in order"
" to set a Dirichlet condition. A mesh object has the ability to store some "
"sets of convexes and convex faces. These sets (called <regions>) are "
"accessed via an integer *#id*"
msgstr ""
"次に、Dirichlet条件を設定するために、**領域の** <:envvar:`boundary`> を **検索する** "
"必要があります。メッシュオブジェクトには、凸包面と凸包面の集合を保存する機能があります。これらの集合(<regions> と呼ばれます)には、整数 "
"*#id* を使用してアクセスします。"

#: ../source/python/examples.rst:83
msgid ""
"Here we find the faces of the convexes which are on the boundary of the mesh"
" (i.e. the faces which are not shared by two convexes)."
msgstr "ここでは、メッシュの境界上にある凸包の面(つまり、2つの凸包によって共有されていない面)を見つけます。"

#: ../source/python/examples.rst:86
msgid ""
"The array ``border`` has two rows, on the first row is a convex number, on "
"the second row is a face number (which is local to the convex, there is no "
"global numbering of faces). Then this set of faces is assigned to the region"
" number 42."
msgstr ""
"配列 ``border`` "
"には二つの行があり、最初の行は凸包の番号で、次の行は面の番号です(これは凸包に対してローカルであり、面のグローバルな番号付けはありません)。次に、この面の集合を領域番号42に割り当てます。"

#: ../source/python/examples.rst:90
msgid ""
"At this point, we just have to describe the model and run the solver to get "
"the solution! The \":envvar:`model`\" is created with the |py_md| "
"constructor. A model is basically an object which build a global linear "
"system (tangent matrix for non-linear problems) and its associated right "
"hand side. Typical modifications are insertion of the stiffness matrix for "
"the problem considered (linear elasticity, laplacian, etc), handling of a "
"set of constraints, Dirichlet condition, addition of a source term to the "
"right hand side etc. The global tangent matrix and its right hand side are "
"stored in the \":envvar:`model`\" structure."
msgstr ""
"この時点では、モデルを記述し、ソルバを実行して解を取得するだけです。 \":envvar:`model`\" は |py_md| "
"コンストラクタで作成されます。モデルは基本的に、全体線形システム(非線形問題の接線行列)とそれに関連するRHSを構築するオブジェクトです。代表的な修正は、考慮される問題(線形弾性、Laplacian等)に対する剛性マトリックスの挿入、拘束の集合の処理、Dirichlet条件、ソース項のRHSへの追加などです。全体正接行列とその右辺は、"
" \":envvar:`model`\" 構造に格納されます。"

#: ../source/python/examples.rst:99
msgid ""
"Let us build a problem with an easy solution: :math:`u = x(x-1)-y(y-1)`, "
"then we have :math:`-\\Delta u = 0` (the FEM won't be able to catch the "
"exact solution since we use a :math:`Q^2` method)."
msgstr ""
"簡単な方法で問題を作成してみましょう。 :math:`u = x(x-1)-y(y-1)` とすると、 :math:`-\\Delta u = 0` ("
" :math:`Q^2` 法を使っているので、FEMは正確な解を捕らえることができません)となります。"

#: ../source/python/examples.rst:103
msgid "We start with an empty real model"
msgstr "まず空の実数モデルから始めます。"

#: ../source/python/examples.rst:109
msgid ""
"(a model is either ``'real'`` or ``'complex'``). And we declare that ``u`` "
"is an unknown of the system on the finite element method `mf` by"
msgstr ""
"(モデルは  ``'real'`` か ``'complex'`` のどちらかです)。そして有限要素法 `mf` のシステムでは、 ``u`` "
"は未知であると宣言します。"

#: ../source/python/examples.rst:116
msgid ""
"Now, we add a `generic elliptic` brick, which handles "
":math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` problems, where :math:`A` can "
"be a scalar field, a matrix field, or an order 4 tensor field. By default, "
":math:`A=1`. We add it on our main variable ``u`` with"
msgstr ""
"ここで、以下の問題を処理する `generic elliptic` ブリックを追加します。ここで "
":math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` 問題をハンドルします。ここで :math:`A` "
"はスカラー場、行列場、4次テンソル場の場合があります。デフォルトでは、 :math:`A=1` です。これを変数 ``u`` に追加します。"

#: ../source/python/examples.rst:125
msgid "Next we add a Dirichlet condition on the domain boundary"
msgstr "次に、領域の境界にDirichlet条件を追加します。"

#: ../source/python/examples.rst:131
msgid ""
"The two first lines defines a data of the model which represents the value "
"of the Dirichlet condition. The third one add a Dirichlet condition to the "
"variable ``u`` on the boundary number ``42``. The dirichlet condition is "
"imposed with lagrange multipliers. Another possibility is to use a "
"penalization. A |py_mf| argument is also required, as the Dirichlet "
"condition :math:`u=g` is imposed in a weak form :math:`\\int_\\Gamma "
"u(x)v(x) = \\int_\\Gamma g(x)v(x)\\ \\forall v` where :math:`v` is taken in "
"the space of multipliers given by here by ``mf``."
msgstr ""
"最初の2行は、Dirichlet条件の値を表すモデルのデータを定義します。3つ目は、境界番号 ``42`` の変数 ``u`` "
"にDirichlet条件を追加します。Dirichlet条件はLagrange乗数を用いて課しました。他にはペナルティ法があります。 |py_mf| "
"引数も必要です。これはDirichlet条件 :math:`u=g` が弱形式 :math:`\\int_\\Gamma u(x)v(x) = "
"\\int_\\Gamma g(x)v(x)\\ \\forall v` で課されるからです。ここで :math:`v` はここでは ``mf`` "
"で与えられる乗数空間で使われます。"

#: ../source/python/examples.rstNone
msgid "Remark:"
msgstr "備考:"

#: ../source/python/examples.rst:141
msgid ""
"the polynomial expression was interpolated on ``mf``. It is possible only if"
" ``mf`` is of Lagrange type. In this first example we use the same |py_mf| "
"for the unknown and for the data such as ``g``, but in the general case, "
"``mf`` won't be Lagrangian and another (Lagrangian) |py_mf| will be used for"
" the description of Dirichlet conditions, source terms etc."
msgstr ""
"多項式は ``mf`` で補間されます。これは ``mf`` がLagrange型の場合のみ可能です。この最初の例では、未知変数と ``g`` "
"のようなデータに同じ |py_mf| を使用していますが、一般的なケースでは ``mf`` "
"はLagrangianではなく、Dirichlet条件やソース項などの記述には別の(Lagrangian) |py_mf| が使用されます。"

#: ../source/python/examples.rst:147
msgid "A source term can be added with (uncommented) the following lines"
msgstr "ソース項は以下の行(コメントなし)で追加できます。"

#: ../source/python/examples.rst:153
msgid ""
"It only remains now to launch the solver. The linear system is assembled and"
" solve with the instruction"
msgstr "残るはソルバを起動するだけです。次の命令で線形系をアセンブルして解きます。"

#: ../source/python/examples.rst:160
msgid ""
"The model now contains the solution (as well as other things, such as the "
"linear system which was solved). It is extracted"
msgstr "これで、(解かれた線形系のような他のものと同様に)モデルに解が含まれました。次のように抽出します。"

#: ../source/python/examples.rst:167
msgid "Then export solution"
msgstr "次に、解をエクスポートします"

#: ../source/python/examples.rst:173
msgid "and view with ``gmsh u.pos``, see figure :ref:`py-fig-sbs`."
msgstr "そして ``gmsh u.pos`` で見てください。図 :ref:`py-fig-sbs` を参照。"

#: ../source/python/examples.rst:180
msgid "Computed solution"
msgstr "計算された解"

#: ../source/python/examples.rst:184
msgid "Another Laplacian with exact solution (source term)"
msgstr "別のLaplacianによる厳密解(ソース項)"

#: ../source/python/examples.rst:186
msgid ""
"This example shows the basic usage of getfem, on the canonical problem: "
"solving the Laplacian, :math:`-\\Delta u = f` on a square, with the "
"Dirichlet condition :math:`u = g(x)` on the domain boundary "
":math:`\\Gamma_D` and the Neumann condition :math:`\\frac{\\partial "
"u}{\\partial\\eta} = h(x)` on the domain boundary :math:`\\Gamma_N`. You can"
" find the **py-file** of this example under the name **demo_laplacian.py** "
"in the directory ``interface/tests/python/`` of the |gf| distribution."
msgstr ""
"この例では、正規問題でのgetfemの基本的な使い方を示しています。正規問題とは、四角形上でLaplacian、 :math:`-\\Delta u ="
" f` を解くことです、ここで、Dirichlet条件は :math:`\\Gamma_D` ドメイン境界上で :math:`u = g(x)` "
"、Neumann条件は :math:`\\Gamma_N` ドメイン境界上で :math:`\\frac{\\partial "
"u}{\\partial\\eta} = h(x)` です。この例の **py-file** は |gf| ディストリビューションの "
"``interface/tests/python/`` ディレクトリに **demo_laplacian.py** という名前であります。"

#: ../source/python/examples.rst:194
msgid ""
"We create Mesh, MeshFem, MeshIm object and find the boundary of the domain "
"in the same way as the previous example"
msgstr "Mesh、MeshFem、MeshImオブジェクトを作成し、前の例と同じ方法で領域の境界を見つけます。"

#: ../source/python/examples.rst:201
msgid "then, we interpolate the exact solution and source terms"
msgstr "次に、厳密解とソース項を補間します。"

#: ../source/python/examples.rst:207
msgid "and we bricked the problem as in the previous example"
msgstr "前の例のように問題をブリックにしました"

#: ../source/python/examples.rst:213
msgid ""
"the only change is the add of `source term` bricks. Finally the solution of "
"the problem is extracted and exported"
msgstr "唯一の変更点は `ソース項` ブリックの追加です。最後に問題の解を抽出しエクスポートします。"

#: ../source/python/examples.rst:220
msgid "view with ``gmsh sol.pos``:"
msgstr "``gmsh sol.pos`` で見てください。"

#: ../source/python/examples.rst:226
msgid "Differences"
msgstr "差分"

#: ../source/python/examples.rst:230
msgid "Linear and non-linear elasticity"
msgstr "線形および非線形弾性"

#: ../source/python/examples.rst:232
msgid ""
"This example uses a mesh that was generated with `GiD`_. The object is "
"meshed with quadratic tetrahedrons. You can find the **py-file** of this "
"example under the name :file:`demo_tripod.py` in the directory "
":file:`interface/tests/python/` of the |gf| distribution."
msgstr ""
"この例では、 `GiD`_ で生成されたメッシュを使用しています。オブジェクトは2次4面体でメッシュ分割されます。この例の **py-file** は "
"|gf| ディストリビューションの :file:`interface/tests/python/` ディレクトリの "
":file:`demo_tripod.py` にあります。"

#: ../source/python/examples.rst:241
msgid ""
"Here is the final figure, displaying the :envvar:`Von Mises` stress and "
"displacements norms:"
msgstr "次の図は :envvar:`Von Mises` 応力および変位ノルムを示しています。"

#: ../source/python/examples.rst:248
msgid "\\(a\\) Tripod Von Mises, \\(b\\) Tripod displacements norms."
msgstr "\\(a\\) 三脚 Von Mises, \\(b\\) 三脚変位ノルム。"

#: ../source/python/examples.rst:252
msgid "Avoiding the model framework"
msgstr "モデルフレームワークを使わない"

#: ../source/python/examples.rst:254
msgid ""
"The model bricks are very convenient, as they hide most of the details of "
"the assembly of the final linear systems. However it is also possible to "
"stay at a lower level, and handle the assembly of linear systems, and their "
"resolution, directly in |py|. For example, the demonstration "
":file:`demo_tripod_alt.py` is very similar to the :file:`demo_tripod.py` "
"except that the assembly is explicit"
msgstr ""
"モデルブリックは、最終的な線形システムのアセンブリのほとんどの詳細を隠蔽するため、非常に便利です。しかし、より低い水準で、線形システムのアセンブリと解析を直接"
" |py| で処理することも可能です。例えば、 :file:`demo_tripod_alt.py` はアセンブリが明示的であることを除き、 "
":file:`demo_tripod.py` によく似ています。"

#: ../source/python/examples.rst:263
msgid ""
"In |gfi|, the assembly of vectors, and matrices is done via the ``gf.asm_*``"
" functions. The Dirichlet condition :math:`h(x)u(x) = r(x)` is handled in "
"the weak form :math:`\\int (h(x)u(x)).v(x) = \\int r(x).v(x)\\quad\\forall "
"v` (where :math:`h(x)` is a :math:`3\\times 3` matrix field -- here it is "
"constant and equal to the identity). The reduced system ``KK UU = FF`` is "
"then built via the elimination of Dirichlet constraints from the original "
"system. Note that it might be more efficient (and simpler) to deal with "
"Dirichlet condition via a penalization technique."
msgstr ""
"|gfi| では、ベクトルと行列のアセンブリは ``gf.asm_*`` 関数により行われます。Dirichlet条件 :math:`h(x)u(x) "
"= r(x)` は、弱形式 :math:`\\int (h(x)u(x)).v(x) = \\int r(x).v(x)\\quad\\forall "
"v` で処理されます(ここで、 :math:`h(x)` は :math:`3\\times 3` "
"行列です。これは定数であり、単位と等価です)。元のシステムからDirichlet条件を除去することにより、縮退システム ``KK UU = FF`` "
"を構築します。ペナルティ法を使用してDirichlet条件を処理する方が効率的(よりシンプル)であることに注意してください。"

#: ../source/python/examples.rst:273
msgid "Other examples"
msgstr "その他の例"

#: ../source/python/examples.rst:275
msgid ""
"the :file:`demo_refine.py` script shows a simple 2D or 3D bar whose "
"extremity is clamped. An adaptative refinement is used to obtain a better "
"approximation in the area where the stress is singular (the transition "
"between the clamped area and the neumann boundary)."
msgstr ""
":file:`demo_refine.py` "
"スクリプトは、端部がクランプされた単純な2次元または3次元バーを示します。応力が特異な領域(クランプ領域とNeumann境界の間の遷移)でより良い近似を得るために適合リファインメントを用いました。"

#: ../source/python/examples.rst:280
msgid ""
"the :file:`demo_nonlinear_elasticity.py` script shows a 3D bar which is is "
"bended and twisted. This is a quasi-static problem as the deformation is "
"applied in many steps. At each step, a non-linear (large deformations) "
"elasticity problem is solved."
msgstr ""
":file:`demo_nonlinear_elasticity.py` "
"スクリプトは、曲げ捻りの3次元バーを示しています。これは、変形が多数のステップで適用されるため、準静的な問題です。各ステップで非線形(有限変形)弾性問題を解きます。"

#: ../source/python/examples.rst:285
msgid ""
"the :file:`demo_stokes_3D_tank.py` script shows a Stokes (viscous fluid) "
"problem in a tank. The :file:`demo_stokes_3D_tank_draw.py` shows how to draw"
" a nice plot of the solution, with mesh slices and stream lines. Note that "
"the :file:`demo_stokes_3D_tank_alt.py` is the old example, which uses the "
"deprecated ``gf_solve`` function."
msgstr ""
":file:`demo_stokes_3D_tank.py` スクリプトはタンク内のStokes(粘性流体)問題を示します。 "
":file:`demo_stokes_3D_tank_draw.py` "
"はメッシュスライスとストリームラインを使用して、解の適切なプロットを描画する方法を示します。 "
":file:`demo_stokes_3D_tank_alt.py` は古い例で、廃止された ``gf_solve`` 関数を使っています。"

#: ../source/python/examples.rst:291
msgid ""
"the :file:`demo_bilaplacian.py` script is just an adaption of the |gf| "
"example :file:`tests/bilaplacian.cc`. Solve the bilaplacian (or a Kirchhoff-"
"Love plate model) on a square."
msgstr ""
":file:`demo_bilaplacian.py` スクリプトは、 |gf| の例である :file:`tests/bilaplacian.cc` "
"を改作したものです。bilaplacian(かKirchhoff-Loveのプレートモデル)を正方形で求解します。"

#: ../source/python/examples.rst:295
msgid ""
"the :file:`demo_plasticity.py` script is an adaptation of the |gf| example "
":file:`tests/plasticity.cc`: a 2D or 3D bar is bended in many steps, and the"
" plasticity of the material is taken into account (plastification occurs "
"when the material's Von Mises exceeds a given threshold)."
msgstr ""
":file:`demo_plasticity.py` スクリプトは、 |gf| の例である :file:`tests/plasticity.cc` "
"を応用したものです。2次元または3次元バーは多数のステップで曲げられ、材料の塑性が考慮されます(材料の Von Mises "
"が所定の閾値を超えたときに塑化が起こります)。"

#: ../source/python/examples.rst:300
msgid ""
"the :file:`demo_wave2D.py` is a 2D scalar wave equation example (diffraction"
" of a plane wave by a cylinder), with high order geometric transformations "
"and high order FEMs."
msgstr ""
":file:`demo_wave2D.py` は高次の幾何学的変換と高次のFEMを持つ2次元スカラー波動方程式の例(円柱による平面波の回折)です。"
