# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-26 14:46+0000\n"
"PO-Revision-Date: 2018-07-16 07:17+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/python/cmdref_Model.rst:8
msgid "Model"
msgstr "Model"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model:1
msgid "GeFEM Model object"
msgstr "GeFEM Model オブジェクト"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model:3
msgid ""
"Model variables store the variables and the state data and the description "
"of a model. This includes the global tangent matrix, the right hand side and"
" the constraints. There are two kinds of models, the `real` and the "
"`complex` models."
msgstr ""
"モデル変数には、変数、状態データ、モデルの説明が格納されます。これには、全体接線行列、RHS、および制約条件が含まれます。モデルには  `real` "
"モデルと `complex` モデルの2つの種類があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model:9
msgid "General constructor for Model objects"
msgstr "Modelオブジェクトの汎用的なコンストラクタ"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model:11
msgid "``MD = Model('real')`` Build a model for real unknowns."
msgstr "``MD = Model('real')`` 実数が未知数のモデルを作ります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model:14
msgid "``MD = Model('complex')`` Build a model for complex unknowns."
msgstr "``MD = Model('complex')`` 複素数が未知数のモデルを構築します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.Neumann_term:1
msgid ""
"Gives the assembly string corresponding to the Neumann term of the fem "
"variable `varname` on `region`. It is deduced from the assembly string "
"declared by the model bricks. `region` should be the index of a boundary "
"region on the mesh where `varname` is defined. Care to call this function "
"only after all the volumic bricks have been declared. Complains, if a brick "
"omit to declare an assembly string."
msgstr ""
"`region` のfem変数 `varname` "
"のNeumann項に対応するアセンブリ文字列を返します。モデルブリックによって宣言されたアセンブリ文字列から推定されます。 `region` は "
"`varname` "
"が定義されているメッシュ上の境界領域のインデックスである必要があります。この関数は、すべての体積ブリックが宣言された後で呼び出すようにしてください。ブリックがアセンブリ文字列の宣言を省略した場合はエラーが発生します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Dirichlet_condition_with_Nitsche_method:1
msgid ""
"Synopsis: ind = Model.add_Dirichlet_condition_with_Nitsche_method(self, "
"MeshIm mim, string varname, string Neumannterm, string datagamma0, int "
"region[, scalar theta][, string dataname])"
msgstr ""
"概要:  ind = Model.add_Dirichlet_condition_with_Nitsche_method(self, MeshIm "
"mim, string varname, string Neumannterm, string datagamma0, int region[, "
"scalar theta][, string dataname])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Dirichlet_condition_with_Nitsche_method:3
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This region should be a boundary. `Neumannterm` is the expression "
"of the Neumann term (obtained by the Green formula) described as an "
"expression of the high-level generic assembly language. This term can be "
"obtained by  Model.Neumann_term(varname, region) once all volumic bricks "
"have been added to the model. The Dirichlet condition is prescribed with "
"Nitsche's method. `datag` is the optional right hand side of the Dirichlet "
"condition. `datagamma0` is the Nitsche's method parameter. `theta` is a "
"scalar value which can be positive or negative. `theta = 1` corresponds to "
"the standard symmetric method which is conditionally coercive for  `gamma0` "
"small. `theta = -1` corresponds to the skew-symmetric method which is "
"inconditionally coercive. `theta = 0` (default) is the simplest method for "
"which the second derivative of the Neumann term is not necessary even for "
"nonlinear problems. Return the brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` "
"にDirichlet条件を追加します。この領域は境界である必要があります。Neumann項は、高水準汎用アセンブリ言語の表現である(Green公式により得られる)Neumann項の式です。すべての体積ブリックをモデルに追加すると、この項は"
" Model.Neumann_term(varname, region) によって得られます "
"。Dirichlet条件はNitsche法により処理されます。 `datag` はDirichlet条件のオプションのRHSです。 "
"`datagamma0` はNitsche法のパラメータです。 `theta` は正または負のスカラー値です。 `theta = 1` は "
"`gamma0` が小さい場合に条件的が強制される標準的な対称法です。 `theta = -1` は無条件に強制的なskew対称法に対応します。 "
"`theta = 0` (デフォルト) "
"は非線形問題に対してもNeumann項の二次導関数を必要としない最も単純な方法です。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Dirichlet_condition_with_multipliers:1
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This region should be a boundary. The Dirichlet condition is "
"prescribed with a multiplier variable described by `mult_description`. If "
"`mult_description` is a string this is assumed to be the variable name "
"corresponding to the multiplier (which should be first declared as a "
"multiplier variable on the mesh region in the model). If it is a finite "
"element method (mesh_fem object) then a multiplier variable will be added to"
" the model and build on this finite element method (it will be restricted to"
" the mesh region `region` and eventually some conflicting dofs with some "
"other multiplier variables will be suppressed). If it is an integer, then a"
"  multiplier variable will be added to the model and build on a classical "
"finite element of degree that integer. `dataname` is the optional right hand"
" side of  the Dirichlet condition. It could be constant or described on a "
"fem; scalar or vector valued, depending on the variable on which the "
"Dirichlet condition is prescribed. Return the brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` "
"にDirichlet条件を追加します。この領域は境界である必要があります。Dirichlet条件は `mult_description` "
"によって記述される乗数変数で規定されます。 `mult_description` "
"が文字列の場合は、乗数(これは、最初にモデルのメッシュ領域で乗数変数として宣言する必要があります)に対応する変数名と見なされます。有限要素法(mesh_femオブジェクト)の場合は、乗数変数がモデルに追加され、この有限要素法(メッシュ領域"
" `region` "
"で制限され、最終的に他の乗数変数との自由度の競合が抑制されます)に基づいて構築されます。整数の場合は、乗数変数がモデルに追加され、その整数の次数の従来の有限要素に基づいて構築されます。"
" `dataname` "
"はDirichlet条件のオプションのRHSです。定数の場合もあれば、femで記述される場合もあります。スカラー値またはベクトル値で、Dirichlet条件が指定されている変数によって異なります。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Dirichlet_condition_with_penalization:1
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This region should be a boundary. The Dirichlet condition is "
"prescribed with penalization. The penalization coefficient is initially "
"`coeff` and will be added to the data of the model. `dataname` is the "
"optional right hand side of the Dirichlet condition. It could be constant or"
" described on a fem; scalar or vector valued, depending on the variable on "
"which the Dirichlet condition is prescribed. `mf_mult` is an optional "
"parameter which allows to weaken the Dirichlet condition specifying a "
"multiplier space. Return the brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` "
"にDirichlet条件を追加します。この領域は境界である必要があります。Dirichlet条件はペナルティとともに処理されます。ペナルティ係数は初期値は"
" `coeff` であり、モデルのデータに追加されます。`dataname` "
"はDirichlet条件のオプションの右辺です。定数の場合もあれば、有限要素法で記述される場合もあります。スカラー値またはベクトル値で、Dirichlet条件が指定されている変数によって異なります。"
" `mf_mult` "
"はオプションのパラメータで、乗数空間を指定してDirichlet条件を弱めることができます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Dirichlet_condition_with_simplification:1
msgid ""
"Adds a (simple) Dirichlet condition on the variable `varname` and the mesh "
"region `region`. The Dirichlet condition is prescribed by a simple post-"
"treatment of the final linear system (tangent system for nonlinear problems)"
" consisting of modifying the lines corresponding to the degree of freedom of"
" the variable on `region` (0 outside the diagonal, 1 on the diagonal of the "
"matrix and the expected value on the right hand side). The symmetry of the "
"linear system is kept if all other bricks are symmetric. This brick is to be"
" reserved for simple Dirichlet conditions (only dof declared on the "
"corresponding boundary are prescribed). The application of this brick on "
"reduced dof may be problematic. Intrinsic vectorial finite element method "
"are not supported.  `dataname` is the optional right hand side of  the "
"Dirichlet condition. It could be constant (but in that case, it can only be "
"applied to Lagrange f.e.m.) or (important) described on the same finite "
"element method as `varname`. Returns the brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` "
"に(単純な)Dirichlet条件を追加します。Dirichlet条件は、(0は対角線の外側、1はマトリックスの対角線、期待値は右側)上の変数の自由度に対応する行を修正することからなる最終的な線形系(非線形問題の接線系)の簡単な後処理によって規定されます。線形システムの対称性は、他のすべてのブリックが対称である場合に維持されます。このブリックは、単純なDirichlet条件(一致境界で宣言された自由度のみが指定されています)用に予約されています。このブリックの還元された自由度への適用は問題があるかもしれません。固有ベクトル有限要素法はサポートされていません。"
" `dataname` はディリクレ条件のオプションの右側です。これは、定数(この場合は、Lagrange femにのみ適用できます)または "
"`varname` と同じ有限要素法で記述された(重要な)にすることができます。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Fourier_Robin_brick:1
msgid ""
"Add a Fourier-Robin term to the model relatively to the variable `varname`. "
"This corresponds to a weak term of the form :math:`\\int (qu).v`. `dataexpr`"
" is the parameter :math:`q` of the Fourier-Robin condition.  It can be an "
"arbitrary valid expression of the high-level generic assembly language "
"(except for the complex version for which it should be a data of the model)."
" `region` is the mesh region on which the term is added. Return the brick "
"index in the model."
msgstr ""
"変数 `varname` に相対的にFourier-Robin項を加えてください。これは以下の形式の形式の弱項に対応します。 :math:`\\int "
"(qu).v` 。`dataexpr` はFourier-Robin条件のパラメータ :math:`q` "
"です。高水準汎用アセンブリ言語(ただし、モデルのデータである必要がある複雑なバージョンは除きます。)の任意の有効な式を指定できます。 `region` "
"は、項が追加されるメッシュ領域です。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_HHO_reconstructed_gradient:1
msgid ""
"Add to the model the elementary transformation corresponding to the "
"reconstruction of a gradient for HHO methods. The name is the name given to "
"the elementary transformation."
msgstr "このモデルにHHO法に対する勾配の再構成に対応する基本変換を加えました。名前は基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_HHO_reconstructed_symmetrized_gradient:1
msgid ""
"Add to the model the elementary transformation corresponding to the "
"reconstruction of a symmetrized gradient for HHO methods. The name is the "
"name given to the elementary transformation."
msgstr "このモデルにHHO法に対する勾配の再構成に対応する基本変換を加えました。名前は基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_HHO_reconstructed_symmetrized_value:1
msgid ""
"Add to the model the elementary transformation corresponding to the "
"reconstruction of the variable for HHO methods using a symmetrized gradient."
" The name is the name given to the elementary transformation."
msgstr "対称化勾配を用いたHHO法に対する変数の再構成に対応する素変換をモデルに加えます。名前は基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_HHO_reconstructed_value:1
msgid ""
"Add to the model the elementary transformation corresponding to the "
"reconstruction of the variable for HHO methods. The name is the name given "
"to the elementary transformation."
msgstr "このモデルにHHO法に対する変数の再構成に対応する基本変換を加えました。名前は基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_HHO_stabilization:1
msgid ""
"Add to the model the elementary transformation corresponding to the HHO "
"stabilization operator. The name is the name given to the elementary "
"transformation."
msgstr "このモデルにHHO安定化演算子に対応する素変換を加えます。名前は、基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_HHO_symmetrized_stabilization:1
msgid ""
"Add to the model the elementary transformation corresponding to the HHO "
"stabilization operator using a symmetrized gradient. The name is the name "
"given to the elementary transformation."
msgstr "対称化勾配を用いたHHO安定化演算子に対応する素変換をモデルに加えます。名前は、基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Helmholtz_brick:1
msgid ""
"Add a Helmholtz term to the model relatively to the variable `varname`. "
"`dataexpr` is the wave number. `region` is an optional mesh region on which "
"the term is added. If it is not specified, it is added on the whole mesh. "
"Return the brick index in the model."
msgstr ""
"変数 `varname` に対して相対的にHelmholtz項をモデルに追加します。 `dataexpr` は波数です。 `region` "
"はオプションの項が追加されるメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Houbolt_scheme:1
msgid ""
"Attach a Houbolt method for the time discretization of the variable "
"`varname`. Valid only if there is at most second order time derivative of "
"the variable"
msgstr "変数 `varname`の時間離散化にHoubolt法を適用します。変数の2次時間導関数が多くても存在する場合にのみ有効です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Kirchhoff_Love_Neumann_term_brick:1
msgid ""
"Add a Neumann term brick for Kirchhoff-Love model on the variable `varname` "
"and the mesh region `region`. `dataname_M` represents the bending moment "
"tensor and  `dataname_divM` its divergence. Return the brick index in the "
"model."
msgstr ""
"変数  `varname` とメッシュ領域 `region` にKirchhoff-LoveモデルのNeumann項ブリックを追加します。 "
"`dataname_M` は曲げモーメントテンソルを表し、 `dataname_divM` "
"はその発散を表します。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Kirchhoff_Love_plate_brick:1
msgid ""
"Add a bilaplacian brick on the variable `varname` and on the mesh region "
"`region`. This represent a term :math:`\\Delta(D \\Delta u)` where "
":math:`D(x)` is a the flexion modulus determined by `dataname_D`. The term "
"is integrated by part following a Kirchhoff-Love plate model with "
"`dataname_nu` the poisson ratio. Return the brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` にbilaplacianブリックを追加します。これは、項 :math:`\\Delta(D "
"\\Delta u)` を表し、ここで :math:`D(x)` は `dataname_D` によって決定される曲げ弾性率です。この項は、  "
"`dataname_nu` をポアソン比とする Kirchhoff-Love "
"プレートモデルに従って部分的に積分されています。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Laplacian_brick:1
msgid ""
"Add a Laplacian term to the model relatively to the variable `varname` (in "
"fact with a minus : :math:`-\\text{div}(\\nabla u)`). If this is a vector "
"valued variable, the Laplacian term is added componentwise. `region` is an "
"optional mesh region on which the term is added. If it is not specified, it "
"is added on the whole mesh. Return the brick index in the model."
msgstr ""
"変数 `varname` に相対的にLaplacian項をモデルに追加します(実際には負 :math:`-\\text{div}(\\nabla u)`"
" です)。これがベクトル値の変数である場合、Laplace項がコンポーネントごとに追加されます。 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Mindlin_Reissner_plate_brick:1
msgid ""
"Synopsis: ind = Model.add_Mindlin_Reissner_plate_brick(self, MeshIm mim, "
"MeshIm mim_reduced, string varname_u3, string varname_theta , string "
"param_E, string param_nu, string param_epsilon, string param_kappa [,int "
"variant [, int region]])"
msgstr ""
"概要: ind = Model.add_Mindlin_Reissner_plate_brick(self, MeshIm mim, MeshIm "
"mim_reduced, string varname_u3, string varname_theta , string param_E, "
"string param_nu, string param_epsilon, string param_kappa [,int variant [, "
"int region]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Mindlin_Reissner_plate_brick:3
msgid ""
"Add a term corresponding to the classical Reissner-Mindlin plate model for "
"which `varname_u3` is the transverse displacement, `varname_theta` the "
"rotation of fibers normal to the midplane, 'param_E' the Young Modulus, "
"`param_nu` the poisson ratio, `param_epsilon` the plate thickness, "
"`param_kappa` the shear correction factor. Note that since this brick uses "
"the high level generic assembly language, the parameter can be regular "
"expression of this language. There are three variants. `variant = 0` "
"corresponds to the an unreduced formulation and in that case only the "
"integration method `mim` is used. Practically this variant is not usable "
"since it is subject to a strong locking phenomenon. `variant = 1` "
"corresponds to a reduced integration where `mim` is used for the rotation "
"term and `mim_reduced` for the transverse shear term. `variant = 2` "
"(default) corresponds to the projection onto a rotated RT0 element of the "
"transverse shear term. For the moment, this is adapted to quadrilateral only"
" (because it is not sufficient to remove the locking phenomenon on triangle "
"elements). Note also that if you use high order elements, the projection on "
"RT0 will reduce the order of the approximation. Returns the brick index in "
"the model."
msgstr ""
"古典的なReissner-Mindlinプレートモデルに対応する項を追加します。ここで、 `varname_u3` は横方向の変位、 "
"`varname_theta` は中立面に垂直なファイバーの回転、 'param_E' はヤング率、 `param_nu` はポアソン比、 "
"`param_epsilon` はプレートの厚さ、 `param_kappa` "
"はせん断補正係数です。このブリックは高水準汎用アセンブリ言語を使用しているため、パラメータをこの言語の正規表現にすることができます。3つのバリエーションがあります。"
" `variant = 0` は非簡約化された定式化に対応し、その場合には積分法 `mim` "
"のみが使用されます。実際には、この変形は強いロック現象の影響を受けるため、使用できません。 `variant = 1` は、 `mim` "
"が回転項に使用され、 `mim_reduced` が横せん断項に使用される縮小積分に対応します。 `variant = 2` "
"(デフォルト)は、横せん断項の回転RT0要素への投影に対応します。現時点では、(三角形要素のロック現象を除去するだけでは不十分であるため)四角形のみに適用されます。また、高次要素を使用する場合、RT0への投影によって近似の次数が減少することにも注意してください。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Newmark_scheme:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_theta_method_for_second_order:1
msgid ""
"Attach a theta method for the time discretization of the variable `varname`."
" Valid only if there is at most second order time derivative of the "
"variable."
msgstr "変数 `varname`の時間離散化にtheta法を適用します。変数の2次時間導関数が多くても存在する場合にのみ有効です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_contact_with_rigid_obstacle_brick:1
msgid ""
"Synopsis: ind = Model.add_Nitsche_contact_with_rigid_obstacle_brick(self, "
"MeshIm mim, string varname, string Neumannterm, string dataname_obstacle, "
"string gamma0name,  int region[, scalar theta[, string "
"dataname_friction_coeff[, string dataname_alpha, string dataname_wt]]])"
msgstr ""
"概要: ind = Model.add_Nitsche_contact_with_rigid_obstacle_brick(self, MeshIm "
"mim, string varname, string Neumannterm, string dataname_obstacle, string "
"gamma0name, int region[, scalar theta[, string dataname_friction_coeff[, "
"string dataname_alpha, string dataname_wt]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_contact_with_rigid_obstacle_brick:3
msgid ""
"Adds a contact condition with or without Coulomb friction on the variable "
"`varname` and the mesh boundary `region`. The contact condition is "
"prescribed with Nitsche's method. The rigid obstacle should be described "
"with the data `dataname_obstacle` being a signed distance to the obstacle "
"(interpolated on a finite element method). `gamma0name` is the Nitsche's "
"method parameter. `theta` is a scalar value which can be positive or "
"negative. `theta = 1` corresponds to the standard symmetric method which is "
"conditionally coercive for  `gamma0` small. `theta = -1` corresponds to the "
"skew-symmetric method which is inconditionally coercive. `theta = 0` is the "
"simplest method for which the second derivative of the Neumann term is not "
"necessary. The optional parameter `dataname_friction_coeff` is the friction "
"coefficient which could be constant or defined on a finite element method. "
"CAUTION: This brick has to be added in the model after all the bricks "
"corresponding to partial differential terms having a Neumann term. Moreover,"
" This brick can only be applied to bricks declaring their Neumann terms. "
"Returns the brick index in the model."
msgstr ""
"Coulomb摩擦の有無にかかわらず、接触条件を変数 `varname` とメッシュ境界 `region` "
"に追加します。接触条件はNitsche法で規定されています。剛体障害物は、データ `dataname_obstacle` "
"が障害物までの符号付き距離(有限要素法による補間)で記述されるべきである。 `gamma0name` はNitsche法のパラメータです。 "
"`theta` は正または負のスカラー値です。 `theta = 1` は `gamma0` "
"が小さい場合に条件的に強制される標準的な対称法に相当する。`theta=-1`は無条件に強制的なスキュー対称法に対応する。 `theta = 0` "
"はNeumann項の2次導関数を必要としない最も単純な方法です。オプションのパラメータ `dataname_friction_coeff` "
"は摩擦係数で、一定にすることも、有限要素法で定義することもできます。注意: "
"このブリックはNeumann項を持つ偏微分項に対応するすべてのブリックの後にモデルに追加する必要があります。さらに、このブリックはNeumann項を宣言するブリックにのみ適用できます。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_fictitious_domain_contact_brick:1
msgid ""
"Synopsis: ind = Model.add_Nitsche_fictitious_domain_contact_brick(self, "
"MeshIm mim, string varname1, string varname2, string dataname_d1, string "
"dataname_d2, string gamma0name [, scalar theta[, string "
"dataname_friction_coeff[, string dataname_alpha, string dataname_wt1,string "
"dataname_wt2]]])"
msgstr ""
"概要: ind = Model.add_Nitsche_fictitious_domain_contact_brick(self, MeshIm "
"mim, string varname1, string varname2, string dataname_d1, string "
"dataname_d2, string gamma0name [, scalar theta[, string "
"dataname_friction_coeff[, string dataname_alpha, string dataname_wt1,string "
"dataname_wt2]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_fictitious_domain_contact_brick:3
msgid ""
"Adds a contact condition with or without Coulomb friction between two bodies"
" in a fictitious domain. The contact condition is applied on  the variable "
"`varname_u1` corresponds with the first and slave body  with Nitsche's "
"method and on the variable `varname_u2` corresponds  with the second and "
"master body with Nitsche's method.  The contact condition is evaluated on "
"the fictitious slave boundary. The first body should be described by the "
"level-set `dataname_d1`  and the second body should be described by the "
"level-set `dataname_d2`. `gamma0name` is the Nitsche's method parameter.  "
"`theta` is a scalar value which can be positive or negative.  `theta = 1` "
"corresponds to the standard symmetric method which is conditionally coercive"
" for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method "
"which is inconditionally coercive. `theta = 0` is the simplest method for "
"which the second derivative of the Neumann term is not necessary. The "
"optional parameter `dataname_friction_coeff` is the friction coefficient "
"which could be constant or defined on a finite element method.  CAUTION: "
"This brick has to be added in the model after all the bricks corresponding "
"to partial differential terms having a Neumann term. Moreover, This brick "
"can only be applied to bricks declaring their Neumann terms. Returns the "
"brick index in the model."
msgstr ""
"仮想ドメイン内の2つのボディ間にクーロン摩擦の有無による接触条件を追加します。接触条件は、Nitsche法では変数 `varname_u1` "
"が第1およびスレーブボディに対応し、Nitsche法では変数 `varname_u2` "
"が第2およびマスターボディに対応します。接触条件を仮想スレーブ境界上で評価しました。最初のボディはレベルセット `dataname_d1` "
"によって記述され、2番目のボディはレベルセット `dataname_d2` によって記述されます。 `gamma0name` "
"はNitsche法のパラメータです。 `theta` は正または負のスカラー値です。 `theta = 1` は  `gamma0` "
"が小さい場合に条件的に強制される標準的な対称法に相当する。 `theta = -1` は無条件に強制的なスキュー対称法に対応する。 `theta = "
"0` はNeumann項の2次導関数を必要としない最も単純な方法です。オプションのパラメータ `dataname_friction_coeff` "
"は摩擦係数で、一定にすることも、有限要素法で定義することもできます。注意: このブリックは Neumann "
"項を持つ偏微分項に対応するすべてのブリックの後にモデルに追加する必要があります。さらに、このブリックはNeumann項を宣言するブリックにのみ適用できます。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_large_sliding_contact_brick_raytracing:1
msgid ""
"Synopsis: ind = "
"Model.add_Nitsche_large_sliding_contact_brick_raytracing(self, bool "
"unbiased_version, string dataname_r, scalar release_distance[, string "
"dataname_fr[, string dataname_alpha[, int version]]])"
msgstr ""
"概要: ind = Model.add_Nitsche_large_sliding_contact_brick_raytracing(self, "
"bool unbiased_version, string dataname_r, scalar release_distance[, string "
"dataname_fr[, string dataname_alpha[, int version]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_large_sliding_contact_brick_raytracing:3
msgid ""
"Adds a large sliding contact with friction brick to the model based on the "
"Nitsche's method. This brick is able to deal with self-contact, contact "
"between several deformable bodies and contact with rigid obstacles. It uses "
"the high-level generic assembly. It adds to the model a "
"raytracing_interpolate_transformation object. \"unbiased_version\" refers to"
" the version of Nische's method to be used. (unbiased or biased one). For "
"each slave boundary a  material law should be defined as a function of the "
"dispacement variable on this boundary. The release distance should be "
"determined with care (generally a few times a mean element size, and less "
"than the thickness of the body). Initially, the brick is added with no "
"contact boundaries. The contact boundaries and rigid bodies are added with "
"special functions. `version` is 0 (the default value) for the non-symmetric "
"version and 1 for the more symmetric one (not fully symmetric even without "
"friction)."
msgstr ""
"Nitsche法に基づいて、摩擦ブリックと有限滑り接触をモデルに追加します。このブリックは自己接触、複数の変形可能体間の接触及び剛体障害物との接触に対処できます。上位レベルの汎用アセンブリを使用します。モデルに"
" raytracing_interpolate_transformation オブジェクトを追加します。 \"unbiased_version\" "
"とは、使用するNitsche法のバージョンのことです。(バイアスされていない、またはバイアスされているもの)。スレーブ境界ごとに、この境界上の表示変数の関数として材料法則を定義する必要があります。放出距離は慎重に決定すべきです(一般に平均要素サイズの数倍で、ボディの厚さよりも薄いです)。最初は、ブリックは接触境界なしで追加されます。接触境界と剛体には、特別な機能が追加されています。"
" `version` は非対称バージョンでは0(デフォルト値)、より対称なバージョンでは1(摩擦がなくても完全に対称的でない)です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_Nitsche_midpoint_contact_with_rigid_obstacle_brick:1
msgid ""
"EXPERIMENTAL BRICK: for midpoint scheme only !! Adds a contact condition "
"with or without Coulomb friction on the variable `varname` and the mesh "
"boundary `region`. The contact condition is prescribed with Nitsche's "
"method. The rigid obstacle should be described with the data "
"`dataname_obstacle` being a signed distance to the obstacle (interpolated on"
" a finite element method). `gamma0name` is the Nitsche's method parameter. "
"`theta` is a scalar value which can be positive or negative. `theta = 1` "
"corresponds to the standard symmetric method which is conditionally coercive"
" for  `gamma0` small. `theta = -1` corresponds to the skew-symmetric method "
"which is inconditionally coercive. `theta = 0` is the simplest method for "
"which the second derivative of the Neumann term is not necessary. The "
"optional parameter `dataname_friction_coeff` is the friction coefficient "
"which could be constant or defined on a finite element method. Returns the "
"brick index in the model."
msgstr ""
"実験的なBRICK: 中間点法専用!! Coulomb摩擦の有無にかかわらず、接触条件を変数 `varname` とメッシュ境界 `region` "
"に追加します。接触条件はNitsche法で規定されています。剛体障害物は、データ `dataname_obstacle` "
"が障害物までの符号付き距離(有限要素法による補間)で記述されるべきです。 `gamma0name` はNitsche法のメソッドパラメータです。 "
"`theta` は正または負のスカラー値です。 `theta = 1` は `gamma0` "
"が小さい場合に条件的に強制される標準的な対称法に相当します。 `theta = -1` は無条件に強制的なスキュー対称法に対応する。 `theta = "
"0` はNeumann項の2次導関数を必要としない最も単純な方法です。オプションのパラメータ `dataname_friction_coeff` "
"は摩擦係数で、一定にすることも、有限要素法で定義することもできます。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_assembly_assignment:1
msgid ""
"Synopsis: Model.add_assembly_assignment(self, string dataname, string "
"expression[, int region[, int order[, int before]]])"
msgstr ""
"概要: Model.add_assembly_assignment(self, string dataname, string expression[,"
" int region[, int order[, int before]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_assembly_assignment:3
msgid ""
"Adds expression `expr` to be evaluated at assembly time and being assigned "
"to the data `dataname` which has to be of im_data type. This allows for "
"instance to store a sub-expression of an assembly computation to be used on "
"an other assembly. It can be used for instance to store the plastic strain "
"in plasticity models. `order` represents the order of assembly where this "
"assignement has to be done (potential(0), weak form(1) or tangent system(2) "
"or at each order(-1)). The default value is 1. If before = 1, the the "
"assignement is perfromed before the computation of the other assembly terms,"
" such that the data can be used in the remaining of the assembly as an "
"intermediary result (be careful that it is still considered as a data, no "
"derivation of the expression is performed for the tangent system).      If "
"before = 0 (default), the assignement is done after the assembly terms."
msgstr ""
"アセンブリ時に評価され、im_data型であるデータ `dataname` に割り当てられる式 `expr` "
"を追加します。これにより、インスタンスは、他のアセンブリで使用するアセンブリ計算のサブ式を保存できます。たとえば、塑性モデルに塑性歪みを保存するために使用できます。orderは、この割り当てを行うアセンブリの次数(ポテンシャル"
" (0)、弱形式 (1)、接線システム "
"(2)、または各次数(-1))を表します。デフォルト値は1です。before=1の場合、他のアセンブリ項の計算の前に割り当てが実行され、データが残りのアセンブリで中間結果として使用できるようになります(接線システム式の微分が実行されず、データとみなされることに注意してください)。before=0(デフォルト)の場合、代入はアセンブリ項の後に行われます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_basic_contact_brick:1
msgid ""
"Synopsis: ind = Model.add_basic_contact_brick(self, string varname_u, string"
" multname_n[, string multname_t], string dataname_r, Spmat BN[, Spmat BT, "
"string dataname_friction_coeff][, string dataname_gap[, string "
"dataname_alpha[, int augmented_version[, string dataname_gamma, string "
"dataname_wt]]])"
msgstr ""
"概要: ind = Model.add_basic_contact_brick(self, string varname_u, string "
"multname_n[, string multname_t], string dataname_r, Spmat BN[, Spmat BT, "
"string dataname_friction_coeff][, string dataname_gap[, string "
"dataname_alpha[, int augmented_version[, string dataname_gamma, string "
"dataname_wt]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_basic_contact_brick:3
msgid ""
"Add a contact with or without friction brick to the model. If U is the "
"vector of degrees of freedom on which the unilateral constraint is applied, "
"the matrix `BN` have to be such that this constraint is defined by "
":math:`B_N U \\le 0`. A friction condition can be considered by adding the "
"three parameters `multname_t`, `BT` and `dataname_friction_coeff`. In this "
"case, the tangential displacement is :math:`B_T U` and the matrix `BT` "
"should have as many rows as `BN` multiplied by :math:`d-1` where :math:`d` "
"is the domain dimension. In this case also, `dataname_friction_coeff` is a "
"data which represents the coefficient of friction. It can be a scalar or a "
"vector representing a value on each contact condition.  The unilateral "
"constraint is prescribed thank to a multiplier `multname_n` whose dimension "
"should be equal to the number of rows of `BN`. If a friction condition is "
"added, it is prescribed with a multiplier `multname_t` whose dimension "
"should be equal to the number of rows of `BT`. The augmentation parameter "
"`r` should be chosen in a range of acceptabe values (see Getfem user "
"documentation). `dataname_gap` is an optional parameter representing the "
"initial gap. It can be a single value or a vector of value. `dataname_alpha`"
" is an optional homogenization parameter for the augmentation parameter (see"
" Getfem user documentation).  The parameter `augmented_version` indicates "
"the augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented "
"Lagrangian, 2 for the symmetric one (except for the coupling between contact"
" and Coulomb friction), 3 for the unsymmetric method with augmented "
"multipliers, 4 for the unsymmetric method with augmented multipliers and De "
"Saxce projection."
msgstr ""
"摩擦ブリック付きまたは摩擦ブリックなしの接触をモデルに追加します。Uが、片側拘束が適用される自由度のベクトルである場合、行列  `BN` はこの拘束が "
":math:`B_N U \\le 0` によって定義されるようでなければなりません。摩擦条件は、3つのパラメータ `multname_t` 、 "
"`BT`  、 `dataname_friction_coeff` を追加することで考慮できます。この場合、接線変位は :math:`B_T U` "
"であり、行列 `BT` は、 `BN` に :math:`d-1` を掛けた数だけの行を持たなければなります。ここで、 :math:`d` "
"はドメインの次元です。ここでも、 `dataname_friction_coeff` "
"は摩擦係数を表すデータです。各接触条件の値を表すスカラーまたはベクトルです。一方的制約は、その次元が `BN` の行数に等しくなければならない乗算器 "
"`multname_n` のおかげで規定される。摩擦条件が追加される場合には、その次元が `BT` の行数に等しくなければならない乗算器 "
"`multname_t` によって規定されます。拡張パラメータ `r` は許容値(Getfemユーザマニュアルを参照)の範囲内で選択するべきです。 "
"`dataname_gap` は初期ギャップを表すオプションのパラメータです。単一の値または値のベクトルを指定できます。 "
"`dataname_alpha` は増大パラメータ(Getfemユーザマニュアルを参照)のためのオプションの均質化パラメータである。パラメータ "
"`augmented_version` は拡大戦略を示します。1は非対称Alart-"
"Curnier拡大ラグランジアン、2は対称的なもの(接触とCoulomb摩擦の結合を除きます)、3は拡大乗算器を用いた非対称方法、4は拡大乗算器と De"
" Saxce 射影を用いた非対称方法です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_basic_contact_brick_two_deformable_bodies:1
msgid ""
"Synopsis: ind = Model.add_basic_contact_brick_two_deformable_bodies(self, "
"string varname_u1, string varname_u2, string multname_n, string dataname_r, "
"Spmat BN1, Spmat BN2[, string dataname_gap[, string dataname_alpha[, int "
"augmented_version]]])"
msgstr ""
"概要: ind = Model.add_basic_contact_brick_two_deformable_bodies(self, string "
"varname_u1, string varname_u2, string multname_n, string dataname_r, Spmat "
"BN1, Spmat BN2[, string dataname_gap[, string dataname_alpha[, int "
"augmented_version]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_basic_contact_brick_two_deformable_bodies:18
msgid ""
"Add a frictionless contact condition to the model between two deformable"
msgstr "2つの変形可能モデル間に摩擦なし接触条件を追加します"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_basic_contact_brick_two_deformable_bodies:4
msgid ""
"bodies. If U1, U2 are the vector of degrees of freedom on which the "
"unilateral constraint is applied, the matrices `BN1` and `BN2` have to be "
"such that this condition is defined by $B_{N1} U_1 B_{N2} U_2 + \\le gap$. "
"The constraint is prescribed thank to a multiplier `multname_n` whose "
"dimension should be equal to the number of lines of `BN`. The augmentation "
"parameter `r` should be chosen in a range of acceptabe values (see Getfem "
"user documentation). `dataname_gap` is an optional parameter representing "
"the initial gap. It can be a single value or a vector of value. "
"`dataname_alpha` is an optional homogenization parameter for the "
"augmentation parameter (see Getfem user documentation). The parameter "
"`aug_version` indicates the augmentation strategy : 1 for the non-symmetric "
"Alart-Curnier augmented Lagrangian, 2 for the symmetric one, 3 for the "
"unsymmetric method with augmented multiplier."
msgstr ""
"体。U1、U2が片側拘束が適用される自由度のベクトルである場合、行列 `BN1` および `BN2` は、この条件が $B_{N1} U_1 "
"B_{N2} U_2 + \\le gap$ によって定義されるようでなければならない。この制約は、次元が `BN` の行数に等しくなければならない乗数"
" `multname_n` によって規定されます。拡張パラメータ `r` は許容値(Getfemユーザマニュアルを参照)の範囲内で選択されるべきです。 "
"`dataname_gap` は初期ギャップを表すオプションのパラメータです。単一の値または値のベクトルを指定できます。 "
"`dataname_alpha` は、増大パラメータ(Getfemユーザマニュアルを参照)のためのオプションの均質化パラメータである。パラメータ "
"`aug_version` は拡大法を示します。1は非対称Alart-"
"Curnier拡大Lagrangian、2は対称Lagrangian、3は拡大乗数を伴う非対称法です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_bilaplacian_brick:1
msgid ""
"Add a bilaplacian brick on the variable `varname` and on the mesh region "
"`region`. This represent a term :math:`\\Delta(D \\Delta u)`. where "
":math:`D(x)` is a coefficient determined by `dataname` which could be "
"constant or described on a f.e.m. The corresponding weak form is "
":math:`\\int D(x)\\Delta u(x) \\Delta v(x) dx`. Return the brick index in "
"the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` にbilaplacianブリックを追加します。これは、 :math:`\\Delta(D "
"\\Delta u)` という項を表しています。ここで、 :math:`D(x)` は `dataname` "
"によって決定される係数であり、定数であるか、有限要素法で記述されます。対応する弱形式は :math:`\\int D(x)\\Delta u(x) "
"\\Delta v(x) dx` の通りです。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_constraint_with_multipliers:1
msgid ""
"Synopsis: ind = Model.add_constraint_with_multipliers(self, string varname, "
"string multname, Spmat B, {vec L | string dataname})"
msgstr ""
"概要: ind = Model.add_constraint_with_multipliers(self, string varname, string"
" multname, Spmat B, {vec L | string dataname})"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_constraint_with_multipliers:3
msgid ""
"Add an additional explicit constraint on the variable `varname` thank to a "
"multiplier `multname` peviously added to the model (should be a fixed size "
"variable). The constraint is :math:`BU=L` with `B` being a rectangular "
"sparse matrix. It is possible to change the constraint at any time with the "
"methods Model.set_private_matrix() and Model.set_private_rhs(). If "
"`dataname` is specified instead of `L`, the vector `L` is defined in the "
"model as data with the given name. Return the brick index in the model."
msgstr ""
"以前にモデルに追加した乗数 `multname` を使い、変数 `varname` "
"(は固定サイズ変数でなければなりません)に陽な制約を追加します。制約は :math:`BU=L` です。ただし、 `B` は矩形の疎行列です。 "
"Model.set_private_matrix() と Model.set_private_rhs() "
"メソッドを使用すると、いつでも拘束を変更できます。 `L` の代わりに `dataname` が指定された場合、ベクトル `L` "
"は指定された名前のデータとしてモデル内で定義されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_constraint_with_penalization:1
msgid ""
"Synopsis: ind = Model.add_constraint_with_penalization(self, string varname,"
" scalar coeff, Spmat B, {vec L | string dataname})"
msgstr ""
"概要: ind = Model.add_constraint_with_penalization(self, string varname, "
"scalar coeff, Spmat B, {vec L | string dataname})"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_constraint_with_penalization:3
msgid ""
"Add an additional explicit penalized constraint on the variable `varname`. "
"The constraint is :math`BU=L` with `B` being a rectangular sparse matrix. Be"
" aware that `B` should not contain a palin row, otherwise the whole tangent "
"matrix will be plain. It is possible to change the constraint at any time "
"with the methods Model.set_private_matrix() and Model.set_private_rhs(). The"
" method Model.change_penalization_coeff() can be used. If `dataname` is "
"specified instead of `L`, the vector `L` is defined in the model as data "
"with the given name. Return the brick index in the model."
msgstr ""
"変数 `varname` に追加の明示的ペナルティ制約を追加します。制約は以下の通りである。 :math`BU=L` と `B` は矩形の疎行列である。"
" `B` にはペイン行を含めないでください。そうしないと、接線行列全体が単純になります。 Model.set_private_matrix() と "
"Model.set_private_rhs() "
"メソッドを使用すると、いつでも拘束を変更できます。Model.change_penalization_coeff() を使用できます。 `L` "
"の代わりに  `dataname` が指定された場合、ベクトル `L` "
"は指定された名前のデータとしてモデル内で定義されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_contact_boundary_to_unbiased_Nitsche_large_sliding_contact_brick:1
msgid ""
"Adds a contact boundary to an existing unbiased Nitschelarge sliding contact"
" with friction brick which is both master and slave."
msgstr "接触境界をマスターとスレーブの両方である摩擦ブリックを持つ既存のバイアスされていないNitschelargeスライド接触に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_contact_with_rigid_obstacle_brick:1
msgid ""
"Synopsis: ind = Model.add_contact_with_rigid_obstacle_brick(self,  MeshIm "
"mim, string varname_u, string multname_n[, string multname_t], string "
"dataname_r[, string dataname_friction_coeff], int region, string obstacle[,"
"  int augmented_version])"
msgstr ""
"概要: ind = Model.add_contact_with_rigid_obstacle_brick(self, MeshIm mim, "
"string varname_u, string multname_n[, string multname_t], string "
"dataname_r[, string dataname_friction_coeff], int region, string obstacle[, "
"int augmented_version])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_contact_with_rigid_obstacle_brick:3
msgid ""
"DEPRECATED FUNCTION. Use 'add nodal contact with rigid obstacle brick' "
"instead."
msgstr "非推奨機能です。代わりに '硬質障害物ブリックに節点接触を追加するには' を使用してください。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_data:1
msgid ""
"Add a fixed size data to the model.  `sizes` is either a integer (for a "
"scalar or vector data) or a vector of dimensions for a tensor data. `name` "
"is the data name."
msgstr ""
"固定サイズのデータをモデルに追加します。 `sizes` は整数(スカラーまたはベクトルデータ用)かテンソルデータの次元のベクトルです。 `name` "
"はデータ名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_elastoplasticity_brick:1
msgid ""
"Old (obsolete) brick which do not use the high level generic assembly. Add a"
" nonlinear elastoplastic term to the model relatively to the variable "
"`varname`, in small deformations, for an isotropic material and for a "
"quasistatic model. `projname` is the type of projection that used: only the "
"Von Mises projection is available with 'VM' or 'Von Mises'. `datasigma` is "
"the variable representing the constraints on the material. "
"`previous_dep_name` represents the displacement at the previous time step. "
"Moreover, the finite element method on which `varname` is described is an K "
"ordered mesh_fem, the `datasigma` one have to be at least an K-1 ordered "
"mesh_fem. `datalambda` and `datamu` are the Lame coefficients of the studied"
" material. `datathreshold` is the plasticity threshold of the material. The "
"three last variables could be constants or described on the same finite "
"element method. `region` is an optional mesh region on which the term is "
"added. If it is not specified, it is added on the whole mesh. Return the "
"brick index in the model."
msgstr ""
"上位レベルの汎用アセンブリを使用しない古い(廃止予定の)ブリック。等方性材料および準静的モデルの場合、微小変形で変数 `varname` "
"に対して相対的に非線形弾塑性項をモデルに追加します。 `projname` は使用される投影のタイプです。 'VM' または 'Von Mises' "
"で使用できるのは Von Mises 投影だけです。 `datasigma` はマテリアルの制約を表す変数です。 `previous_dep_name`"
" は、前のタイムステップでのディスプレイスメントを表します。さらに、 `varname` が記述される有限要素法は、K次のmesh_femであり、 "
"`datasigma` は、少なくともK-1次のmesh_femでなければなりません。 `datalambda` および `datamu` "
"は検討した材料のLame係数である。 `datathreshold` "
"は材料の塑性閾値です。最後の3つの変数は、定数であったり、同じ有限要素法で記述されていたりします。 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_element_extrapolation_transformation:1
msgid ""
"Add a special interpolation transformation which represents the identity "
"transformation but allows to evaluate the expression on another element than"
" the current element by polynomial extrapolation. It is used for "
"stabilization term in fictitious domain applications. the array elt_cor "
"should be a two entry array whose first line contains the elements concerned"
" by the transformation and the second line the respective elements on which "
"the extrapolation has to be made. If an element is not listed in elt_cor the"
" evaluation is just made on the current element."
msgstr ""
"恒等変換を表すが、多項式外挿によって現在の要素以外の別の要素で式を評価できる特別な補間変換を追加します。仮想領域応用における安定化項に使用されます。配列elt_corは2つのエントリからなる配列で、最初の行は変換に関係する要素を含み、2番目の行は外挿が必要なそれぞれの要素を含みます。要素がelt_corにリストされていない場合、評価は現在の要素に対してのみ行われます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_elementary_P0_projection:1
msgid ""
"Add the elementary transformation corresponding to the projection P0 "
"element. The name is the name given to the elementary transformation."
msgstr "投影P0要素に対応する基本変換を追加します。名前は、基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_elementary_rotated_RT0_projection:1
msgid ""
"Add the elementary transformation corresponding to the projection on rotated"
" RT0 element for two-dimensional elements to the model. The name is the name"
" given to the elementary transformation."
msgstr "2次元エレメントの回転RT0エレメント上の投影に対応する基本変換をモデルに追加します。名前は、基本変換に付けられた名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_enriched_Mindlin_Reissner_plate_brick:1
msgid ""
"Synopsis: ind = Model.add_enriched_Mindlin_Reissner_plate_brick(self, MeshIm"
" mim, MeshIm mim_reduced1, MeshIm mim_reduced2, string varname_ua, string "
"varname_theta,string varname_u3, string varname_theta3 , string param_E, "
"string param_nu, string param_epsilon [,int variant [, int region]])"
msgstr ""
"概要: ind = Model.add_enriched_Mindlin_Reissner_plate_brick(self, MeshIm mim, "
"MeshIm mim_reduced1, MeshIm mim_reduced2, string varname_ua, string "
"varname_theta,string varname_u3, string varname_theta3 , string param_E, "
"string param_nu, string param_epsilon [,int variant [, int region]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_enriched_Mindlin_Reissner_plate_brick:3
msgid ""
"Add a term corresponding to the enriched Reissner-Mindlin plate model for "
"which `varname_ua` is the membrane displacements, `varname_u3` is the "
"transverse displacement, `varname_theta` the rotation of fibers normal to "
"the midplane,  `varname_theta3` the pinching,      'param_E' the Young "
"Modulus, `param_nu` the poisson ratio, `param_epsilon` the plate thickness. "
"Note that since this brick uses the high level generic assembly language, "
"the parameter can be regular expression of this language. There are four "
"variants. `variant = 0` corresponds to the an unreduced formulation and in "
"that case only the integration method `mim` is used. Practically this "
"variant is not usable since it is subject to a strong locking phenomenon. "
"`variant = 1` corresponds to a reduced integration where `mim` is used for "
"the rotation term and `mim_reduced1` for the transverse shear term and "
"`mim_reduced2` for the pinching term. `variant = 2` (default) corresponds to"
" the projection onto a rotated RT0 element of the transverse shear term and "
"a reduced integration for the pinching term. For the moment, this is adapted"
" to quadrilateral only (because it is not sufficient to remove the locking "
"phenomenon on triangle elements). Note also that if you use high order "
"elements, the projection on RT0 will reduce the order of the approximation. "
"`variant = 3` corresponds to the projection onto a rotated RT0 element of "
"the transverse shear term and the projection onto P0 element of the pinching"
" term. For the moment, this is adapted to quadrilateral only (because it is "
"not sufficient to remove the locking phenomenon on triangle elements). Note "
"also that if you use high order elements, the projection on RT0 will reduce "
"the order of the approximation.    Returns the brick index in the model."
msgstr ""
"enriched Reissner-Mindlinプレートモデルに対応する項を追加します。ここで、 `varname_ua` は膜変位、 "
"`varname_u3` は横変位、 `varname_theta` は中間平面に垂直なファイバーの回転、'param_E' "
"はYoung率、`param_nu` はPoisson比、 `param_epsilon` "
"は板厚です。このブリックは高水準汎用アセンブリ言語を使用しているため、パラメータをこの言語の正規表現にすることができます。4つのバリエーションがあります。"
" `variant = 0` は非簡約化された定式化に対応し、その場合には積分法 `mim` "
"のみが使用されます。実際には、この変形は強いロック現象の影響を受けるため、使用できません。 `variant = 1` は、`mim` "
"が回転項に使用され、 `mim_reduced1` が横せん断項に使用され、 `mim_reduced2` がピンチ項に使用される縮小積分に対応します。"
" `variant = 2` "
"(デフォルト)は、横せん断項の回転RT0要素上への投影と、ピンチ項の縮小積分に対応します。現時点では、(三角形要素のロック現象を除去するだけでは不十分であるため)四角形のみに適用されます。また、高次要素を使用する場合、RT0への投影によって近似の次数が減少することにも注意してください。"
" `variant = 3` "
"は、横せん断項の回転RT0要素への投影と、ピンチ項のP0要素への投影とに対応します。現時点では、(三角形要素のロック現象を除去するだけでは不十分であるため)四角形のみに適用されます。また、高次要素を使用する場合、RT0への投影によって近似の次数が減少することにも注意してください。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_explicit_matrix:1
msgid ""
"Synopsis: ind = Model.add_explicit_matrix(self, string varname1, string "
"varname2, Spmat B[, int issymmetric[, int iscoercive]])"
msgstr ""
"概要: ind = Model.add_explicit_matrix(self, string varname1, string varname2, "
"Spmat B[, int issymmetric[, int iscoercive]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_explicit_matrix:3
msgid ""
"Add a brick representing an explicit matrix to be added to the tangent "
"linear system relatively to the variables `varname1` and `varname2`. The "
"given matrix should have has many rows as the dimension of `varname1` and as"
" many columns as the dimension of `varname2`. If the two variables are "
"different and if `issymmetric` is set to 1 then the transpose of the matrix "
"is also added to the tangent system (default is 0). Set `iscoercive` to 1 if"
" the term does not affect the coercivity of the tangent system (default is "
"0). The matrix can be changed by the command Model.set_private_matrix(). "
"Return the brick index in the model."
msgstr ""
"変数 `varname1` と `varname2` に対して相対的に接線線形システムに追加される陽な行列を表すブリックを追加します。与えられた行列は "
"`varname1` の次元と同じ数の行と `varname2` の次元と同じ数の列を持つ必要があります。もし2つの変数が異なっていて、かつ "
"`issymmetric` "
"が1に設定されているならば、行列の転置もまた接線系に加えられます(デフォルトは0です)。項が接線系の保磁力に影響を与えない場合(デフォルトは0です)、 "
"`iscoercive` を1に設定します。マトリックスは、 Model.set_private_matrix() "
"コマンドで変更できます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_explicit_rhs:1
msgid ""
"Add a brick representing an explicit right hand side to be added to the "
"right hand side of the tangent linear system relatively to the variable "
"`varname`. The given rhs should have the same size than the dimension of "
"`varname`. The rhs can be changed by the command Model.set_private_rhs(). If"
" `dataname` is specified instead of `L`, the vector `L` is defined in the "
"model as data with the given name. Return the brick index in the model."
msgstr ""
"変数 `varname` に対して相対的に接線線形システムの右側に追加される明示的な右辺を表すブリックを追加します。与えられた右辺は `varname`"
" の次元と同じ大きさでなければなりません。右辺は Model.set_private_rhs() コマンドで変更できます。 `L` の代わりに "
"`dataname` が指定された場合、ベクトル `L` "
"は指定された名前のデータとしてモデル内で定義されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_fem_data:1
msgid ""
"Add a data to the model linked to a MeshFem. `name` is the data name, "
"`sizes` an optional parameter which is either an  integer  or a vector of "
"suplementary dimensions with respect to `mf`."
msgstr ""
"MeshFemにリンクされたモデルにデータを追加します。 `name` はデータ名であり、 `sizes` はオプションのパラメータであり、 `mf` "
"に関して補間的な次元の整数またはベクトルです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_fem_variable:1
msgid ""
"Add a variable to the model linked to a MeshFem. `name` is the variable "
"name."
msgstr "MeshFemにリンクされたモデルに変数を追加します。 `name` は変数名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_filtered_fem_variable:1
msgid ""
"Add a variable to the model linked to a MeshFem. The variable is filtered in"
" the sense that only the dof on the region are considered. `name` is the "
"variable name."
msgstr ""
"MeshFemにリンクされたモデルに変数を追加します。変数は、領域上の自由度のみが考慮されるという意味でフィルタリングされます。 `name` "
"は変数名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elasticity_brick:1
msgid ""
"Add a nonlinear elasticity term to the model relatively to the variable "
"`varname`. `lawname` is the constitutive law which could be 'SaintVenant "
"Kirchhoff', 'Mooney Rivlin', 'Neo Hookean', 'Ciarlet Geymonat' or "
"'Generalized Blatz Ko'. 'Mooney Rivlin' and 'Neo Hookean' law names have to "
"be preceeded with the word 'Compressible' or 'Incompressible' to force using"
" the corresponding version. The compressible version of these laws requires "
"one additional material coefficient."
msgstr ""
"変数 `varname` を基準にしてモデルに非線形弾性項を追加します。 `lawname` は 'SaintVenant Kirchhoff' 、 "
"'Mooney Rivlin' 、 'Neo Hookean' 、 'Ciarlet Geymonat' "
"、のいずれかです。対応するバージョンを使用するには、'Mooney Rivlin' および'Neo Hookean' 法の前に "
"'Compressible' または 'Incompressible' "
"という語を付ける必要があります。これらの法則の圧縮性バージョンには、追加の材料係数が1つ必要です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elasticity_brick:11
msgid ""
"IMPORTANT : if the variable is defined on a 2D mesh, the plane strain "
"approximation is automatically used. `params` is a vector of parameters for "
"the constitutive law. Its length depends on the law. It could be a short "
"vector of constant values or a vector field described on a finite element "
"method for variable coefficients. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole "
"mesh. This brick use the high-level generic assembly. Returns the brick "
"index in the model."
msgstr ""
"重要: 変数が2次元メッシュ上で定義されている場合、平面歪み近似が自動的に使用されます。 `params` "
"は構成則のパラメータのベクトルです。長さは法則によります。これは、定数値の短いベクトル、または可変係数の有限要素法で記述されたベクトルフィールドです。'region'"
" "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。このブリックは、高水準の汎用アセンブリを使用します。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:1
msgid ""
"Synopsis: ind = Model.add_finite_strain_elastoplasticity_brick(self, MeshIm "
"mim , string lawname, string unknowns_type [, string varnames, ...] [, "
"string params, ...] [, int region = -1])"
msgstr ""
"概要: ind = Model.add_finite_strain_elastoplasticity_brick(self, MeshIm mim , "
"string lawname, string unknowns_type [, string varnames, ...] [, string "
"params, ...] [, int region = -1])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:3
msgid ""
"Add a finite strain elastoplasticity brick to the model. For the moment "
"there is only one supported law defined through  `lawname` as "
"\"Simo_Miehe\". This law supports to possibilities of unknown variables to "
"solve for defined by means of `unknowns_type` set to either "
"'DISPLACEMENT_AND_PLASTIC_MULTIPLIER' (integer value 1) or "
"'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' (integer value 3). The  "
"\"Simo_Miehe\" law expects as `varnames` a set of the following names that "
"have to be defined as variables in the model:"
msgstr ""
"有限ひずみ弾塑性ブリックをモデルに追加します。現在のところ、サポートされている法則は、 `lawname` によって \"Simo_Miehe\" "
"と定義されたものだけです。この法則は、 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER' (整数値1)または "
"'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' (整数値3)のいずれかに設定された "
"`unknowns_type` によって定義される未知変数求解の可能性をサポートします。 \"Simo_Miehe\" "
"の法則では、モデル内で変数として定義する必要がある次の名前の集合を `varnames` と想定しています。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:13
msgid "the displacement variable which has to be defined as an unknown,"
msgstr "未知変数として定義されなければならない変位です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:14
msgid "the plastic multiplier which has also defined as an unknown,"
msgstr "可塑乗数も未知と定義されています。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:15
msgid ""
"optionally the pressure variable for a mixed displacement-pressure "
"formulation for 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' as "
"`unknowns_type`,"
msgstr ""
"オプションで、 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' の混合変位-圧力式の圧力変数を "
"`unknowns_type` で指定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:18
msgid ""
"the name of a (scalar) fem_data or im_data field that holds the plastic "
"strain at the previous time step, and"
msgstr "前の時間ステップでの塑性歪みを保持する(スカラー)fem_dataまたはim_dataフィールドの名前です。そして"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:20
msgid ""
"the name of a fem_data or im_data field that holds all non-repeated "
"components of the inverse of the plastic right Cauchy-Green tensor at the "
"previous time step (it has to be a 4 element vector for plane strain 2D "
"problems and a 6 element vector for 3D problems)."
msgstr ""
"直前の時間ステップでの右Cauchy-"
"Greenテンソルの逆数の非反復成分をすべて保持するfem_dataまたはim_dataフィールドの名前です(平面歪み2次元問題では4要素ベクトル、3次元問題では6要素ベクトルでなければなりません)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:26
msgid ""
"The  \"Simo_Miehe\" law also expects as `params` a set of the following "
"three parameters:"
msgstr "\"Simo_Miehe\" 法はまた、次の3つのパラメータの集合を `params` としています。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:29
msgid "an expression for the initial bulk modulus K,"
msgstr "初期体積弾性率Kの式です、"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:30
msgid "an expression for the initial shear modulus G,"
msgstr "初期せん断弾性率Gの式です、"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:31
msgid ""
"the name of a user predefined function that decribes the yield limit as a "
"function of the hardening variable (both the yield limit and the hardening "
"variable values are assumed to be Frobenius norms of appropriate stress and "
"strain tensors, respectively)."
msgstr ""
"硬化変数(降伏限界と硬化変数の値は、それぞれ適切な応力テンソルと歪テンソルのFrobeniusノルムと仮定します)の関数として降伏限界を表示するユーザ定義関数の名前です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_elastoplasticity_brick:37
msgid ""
"As usual, `region` is an optional mesh region on which the term is added. If"
" it is not specified, it is added on the whole mesh. Return the brick index "
"in the model."
msgstr ""
"通常、 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_finite_strain_incompressibility_brick:1
msgid ""
"Add a finite strain incompressibility condition on `variable` (for large "
"strain elasticity). `multname_pressure` is a variable which represent the "
"pressure. Be aware that an inf-sup condition between the finite element "
"method describing the pressure and the primal variable has to be satisfied. "
"`region` is an optional mesh region on which the term is added. If it is not"
" specified, it is added on the whole mesh. Return the brick index in the "
"model. This brick is equivalent to the ``nonlinear incompressibility brick``"
" but uses the high-level generic assembly adding the term "
"``p*(1-Det(Id(meshdim)+Grad_u))`` if ``p`` is the multiplier and ``u`` the "
"variable which represent the displacement."
msgstr ""
"有限ひずみ非圧縮性条件を(有限ひずみ弾性の場合) `variable` に追加します。`multname_pressure` "
"は圧力を表す変数である。圧力を記述する有限要素法と主変数との間の入力条件を満たす必要があることに注意してください。 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合はメッシュ全体に追加されます。モデル内のブリックインデックスを返します。``p`` "
"が乗数で、``u`` が変位の場合、\"非線形非圧縮性ブリック\" で、``p*(1-Det(Id(meshdim)+Grad_u))`` "
"の高水準汎用アセンブリを追加すると等しいです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_generalized_Dirichlet_condition_with_Nitsche_method:1
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This version is for vector field. It prescribes a condition @f$ Hu"
" = r @f$ where `H` is a matrix field. CAUTION : the matrix H should have all"
" eigenvalues equal to 1 or 0. The region should be a boundary.   "
"`Neumannterm` is the expression of the Neumann term (obtained by the Green "
"formula) described as an expression of the high-level generic assembly "
"language. This term can be obtained by  Model.Neumann_term(varname, region) "
"once all volumic bricks have been added to the model.  The Dirichlet "
"condition is prescribed with Nitsche's method. `dataname` is the optional "
"right hand side of the Dirichlet condition. It could be constant or "
"described on a fem. `gamma0name` is the Nitsche's method parameter. `theta` "
"is a scalar value which can be positive or negative. `theta = 1` corresponds"
" to the standard symmetric method which is conditionally coercive for  "
"`gamma0` small. `theta = -1` corresponds to the skew-symmetric method which "
"is inconditionally coercive. `theta = 0` is the simplest method for which "
"the second derivative of the Neumann term is not necessary even for "
"nonlinear problems. `Hname` is the data corresponding to the matrix field "
"`H`. It has to be a constant matrix or described on a scalar fem. Returns "
"the brick index in the model. (This brick is not fully tested)"
msgstr ""
"変数 `varname` とメッシュ領域 `region` にDirichlet条件を追加します。このバージョンはベクトルフィールド用です。これは "
"@f$ Hu = r @f$ という条件を規定しており、ここで `H` は行列フィールドです。注意: "
"行列Hの固有値はすべて1または0である必要があります。領域は境界である必要があります。 `Neumannterm` "
"は高水準汎用アセンブリ言語の表現として説明されるNeumann項(Green公式により得られる)の表現です。この項は "
"Model.Neumann_term(varname, region) "
"によってmodelに追加されます。すべてのボリュームブリックがモデルに追加されると。ディリクレ条件はNitsche法で処理されています。 "
"`dataname` はDirichlet条件のオプションの右辺です。これは一定であるか、または有限要素法で記述できます。 `gamma0name` "
"はNitsche法のパラメータです。 `theta` は正または負のスカラー値です。 `theta = 1` は `gamma0` "
"が小さい場合に条件的に強制される標準的な対称法に相当する。 `theta = -1` は無条件に強制的なskew対称法に対応します。 `theta = "
"0` は非線形問題に対してもNeumann項の2次導関数を必要としない最も単純な方法である。 `Hname` は行列フィールド `H` "
"に対応するデータである。定数行列であるか、スカラー関数で記述されている必要があります。モデル内のブリックのインデックスを返します。(このブリックは完全にはテストされていせん)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_generalized_Dirichlet_condition_with_multipliers:1
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`.  This version is for vector field. It prescribes a condition "
":math:`Hu = r` where `H` is a matrix field. The region should be a boundary."
" The Dirichlet condition is prescribed with a multiplier variable described "
"by `mult_description`. If `mult_description` is a string this is assumed to "
"be the variable name corresponding to the multiplier (which should be first "
"declared as a multiplier variable on the mesh region in the model). If it is"
" a finite element method (mesh_fem object) then a multiplier variable will "
"be added to the model and build on this finite element method (it will be "
"restricted to the mesh region `region` and eventually some conflicting dofs "
"with some other multiplier variables will be suppressed). If it is an "
"integer, then a  multiplier variable will be added to the model and build on"
" a classical finite element of degree that integer. `dataname` is the right "
"hand side of  the Dirichlet condition. It could be constant or described on "
"a fem; scalar or vector valued, depending on the variable on which the "
"Dirichlet condition is prescribed. `Hname` is the data corresponding to the "
"matrix field `H`. Returns the brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` にDirichlet条件を追加します。このバージョンはベクトルフィールド用です。それは "
"`H` が行列フィールドである条件 :math:`Hu = r` を規定します。領域は境界である必要があります。Dirichlet条件は "
"`mult_description` によって記述される乗数変数で規定される。 `mult_description` "
"が文字列の場合は、乗数(これは、最初にモデルのメッシュ領域で乗数変数として宣言する必要があります)に対応する変数名と見なされます。有限要素法(mesh_femオブジェクト)の場合は、乗数変数がモデルに追加され、この有限要素法(メッシュ領域"
" `region` "
"に制限され、最終的に他の乗数変数との自由度の競合が抑制されます)に基づいて構築されます。整数の場合は、乗数変数がモデルに追加され、その整数の次数の従来の有限要素に基づいて構築されます。"
" `dataname` "
"はDirichlet条件の右側です。定数の場合もあれば、有限要素法で記述される場合もあります。スカラー値またはベクトル値で、Dirichlet条件が指定されている変数によって異なります。"
" `Hname` は行列フィールド `H` に対応するデータです。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_generalized_Dirichlet_condition_with_penalization:1
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This version is for vector field. It prescribes a condition "
":math:`Hu = r` where `H` is a matrix field. The region should be a boundary."
" The Dirichlet condition is prescribed with penalization. The penalization "
"coefficient is intially `coeff` and will be added to the data of the model. "
"`dataname` is the right hand side of the Dirichlet condition. It could be "
"constant or described on a fem; scalar or vector valued, depending on the "
"variable on which the Dirichlet condition is prescribed. `Hname` is the data"
" corresponding to the matrix field `H`. It has to be a constant matrix or "
"described on a scalar fem. `mf_mult` is an optional parameter which allows "
"to weaken the Dirichlet condition specifying a multiplier space. Return the "
"brick index in the model."
msgstr ""
"変数 `varname` とメッシュ領域 `region` にDirichlet条件を追加します。このバージョンはベクトルフィールド用です。これは "
"`H` が行列フィールドである条件 :math:`Hu = r` "
"を規定します。領域は境界である必要があります。ディリクレ状態はペナリゼーションとともに処方される。ペナルティ係数は本来 `coeff` "
"であり、モデルのデータに追加されます。 `dataname` "
"はDirichlet条件の右辺です。定数の場合もあれば、有限要素法で記述される場合もあります。スカラー値またはベクトル値で、Dirichlet条件が指定されている変数によって異なります。"
" `Hname` は行列フィールド  `H` に対応するデータです。定数行列であるか、スカラー関数で記述されている必要があります。 `mf_mult` "
"はオプションのパラメータで、乗数空間を指定してDirichlet条件を弱めることができます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_generic_elliptic_brick:1
msgid ""
"Add a generic elliptic term to the model relatively to the variable "
"`varname`. The shape of the elliptic term depends both on the variable and "
"the data. This corresponds to a term :math:`-\\text{div}(a\\nabla u)` where "
":math:`a` is the data and :math:`u` the variable. The data can be a scalar, "
"a matrix or an order four tensor. The variable can be vector valued or not. "
"If the data is a scalar or a matrix and the variable is vector valued then "
"the term is added componentwise. An order four tensor data is allowed for "
"vector valued variable only. The data can be constant or describbed on a "
"fem. Of course, when the data is a tensor describe on a finite element "
"method (a tensor field) the data can be a huge vector. The components of the"
" matrix/tensor have to be stored with the fortran order (columnwise) in the "
"data vector (compatibility with blas). The symmetry of the given "
"matrix/tensor is not verified (but assumed). If this is a vector valued "
"variable, the elliptic term is added componentwise. `region` is an optional "
"mesh region on which the term is added. If it is not specified, it is added "
"on the whole mesh. Note that for the real version which uses the high-level "
"generic assembly language, `dataname` can be any regular expression of the "
"high-level generic assembly language (like \"1\", \"sin(X(1))\" or "
"\"Norm(u)\" for instance) even depending on model variables. Return the "
"brick index in the model."
msgstr ""
"変数 `varname` を基準にして、一般的な楕円項をモデルに追加します。楕円項の形状は変数とデータの両方に依存する。これは、以下の項に対応します。 "
":math:`-\\text{div}(a\\nabla u)` ここで、 :math:`a` はデータ、 :math:`u` "
"は変数です。データはスカラー、行列、または4次テンソルです。変数はベクトル値であってもなくてもかまいません。データがスカラーまたはマトリックスで、変数がベクトル値の場合、項はコンポーネント単位で追加されます。4次のテンソルデータは、ベクトル値変数にのみ使用できます。データは一定であってもよいし、数分で記述してもよいです。もちろん、データが有限要素法(テンソル場)で記述されるテンソルである場合、データは巨大なベクトルになる可能性があります。行列/テンソルの成分は(blasとの互換性から)データベクトルのFortran(列方向)次数で保存されなければなりません。与えられた行列/テンソルの(仮定されている)対称性は検証されません。これがベクトル値の変数である場合、楕円項はコンポーネントごとに追加されます。"
" `region` "
"は、項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。高水準汎用アセンブリ言語を使用する実数バージョンでは、モデル変数にも依存しますが、"
" `dataname` (例えば \"1\" 、 \"sin(X(1))\" 、\"Norm(u)\" "
"など)は高水準汎用アセンブリ言語の任意の正規表現にすることができます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_im_data:1
msgid ""
"Add a data set to the model linked to a MeshImd. `name` is the data name."
msgstr "MeshImdにリンクされたモデルにデータセットを追加します。 `name` はデータ名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_initialized_data:1
msgid ""
"Add an initialized fixed size data to the model. `sizes` an optional "
"parameter which is either an  integer  or a vector dimensions that describes"
" the format of the data. By default, the data is considered to b a vector "
"field. `name` is the data name and `V` is the value of the data."
msgstr ""
"初期化された固定サイズデータをモデルに追加します。 `sizes` "
"はオプションのパラメータで、データのフォーマットを記述する整数またはベクトルの次元です。デフォルトでは、データはベクトルフィールドbとみなされます。 "
"`name` はデータ名で、 `V` はデータの値です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_initialized_fem_data:1
msgid ""
"Add a data to the model linked to a MeshFem. `name` is the data name. The "
"data is initiakized with `V`. The data can be a scalar or vector field. "
"`sizes` an optional parameter which is either an  integer or a vector of "
"suplementary dimensions with respect to `mf`."
msgstr ""
"MeshFemにリンクされたモデルにデータを追加します。 `name` はデータ名です。データは `V` "
"で初期化されます。データはスカラーまたはベクトルフィールドです。 `sizes` はオプションのパラメータであり、 "
"`mf`に対する補完次元の整数またはベクトルです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_integral_contact_between_nonmatching_meshes_brick:1
msgid ""
"Synopsis: ind = "
"Model.add_integral_contact_between_nonmatching_meshes_brick(self,  MeshIm "
"mim, string varname_u1, string varname_u2, string multname, string "
"dataname_r [, string dataname_friction_coeff], int region1, int region2 [, "
"int option [, string dataname_alpha [, string dataname_wt1 , string "
"dataname_wt2]]])"
msgstr ""
"概要: ind = Model.add_integral_contact_between_nonmatching_meshes_brick(self, "
"MeshIm mim, string varname_u1, string varname_u2, string multname, string "
"dataname_r [, string dataname_friction_coeff], int region1, int region2 [, "
"int option [, string dataname_alpha [, string dataname_wt1 , string "
"dataname_wt2]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_integral_contact_between_nonmatching_meshes_brick:3
msgid ""
"Add a contact with or without friction condition between nonmatching meshes "
"to the model. This brick adds a contact which is defined in an integral way."
" It is the direct approximation of an augmented agrangian formulation (see "
"Getfem user documentation) defined at the continuous level. The advantage "
"should be a better scalability: the number of Newton iterations should be "
"more or less independent of the mesh size. The condition is applied on the "
"variables `varname_u1` and `varname_u2` on the boundaries corresponding to "
"`region1` and `region2`. `multname` should be a fem variable representing "
"the contact stress for the frictionless case and the contact and friction "
"stress for the case with friction. An inf-sup condition between `multname` "
"and `varname_u1` and `varname_u2` is required. The augmentation parameter "
"`dataname_r` should be chosen in a range of acceptable values. The optional "
"parameter `dataname_friction_coeff` is the friction coefficient which could "
"be constant or defined on a finite element method on the same mesh as "
"`varname_u1`. Possible values for `option` is 1 for the non-symmetric Alart-"
"Curnier augmented Lagrangian method, 2 for the symmetric one, 3 for the non-"
"symmetric Alart-Curnier method with an additional augmentation and 4 for a "
"new unsymmetric method. The default value is 1. In case of contact with "
"friction, `dataname_alpha`, `dataname_wt1` and `dataname_wt2` are optional "
"parameters to solve evolutionary friction problems."
msgstr ""
"摩擦条件の有無にかかわらず、一致しないメッシュ間に接触をモデルに追加します。このブリックは、完全な方法で定義された接触を追加します。これは,連続レベルで定義された拡張Lagrangian定式化(Getfemユーザマニュアルを参照)の直接近似です。この利点は、スケーラビリティの向上です。Newton法の反復回数は、メッシュサイズに多少依存しません。条件は、"
"  `region1` および `region2` に対応する境界上の変数 `varname_u1` および `varname_u2` に適用されます。"
" `multname` は、摩擦がない場合の接触応力と、摩擦がある場合の接触および摩擦応力を表す有限要素法の変数である必要があります。 "
"`multname` と`varname_u1` と `varname_u2` の間のinf-sup条件が必要です。拡張パラメータ "
"`dataname_r` は許容値の範囲内で選択する必要があります。オプションのパラメータ `dataname_friction_coeff` "
"は摩擦係数で、一定であるか、または `varname_u1` と同じメッシュ上の有限要素法で定義できます。 `option` の値は、非対称 "
"Alart-Curnier 拡張Lagrangian法では1、対称的なものでは2、追加の拡張を伴う非対称 Alart-Curnier "
"法では3、新しい非対称法では4となります。デフォルト値は1です。摩擦がある場合、 `dataname_alpha`  、 `dataname_wt1` "
"および `dataname_wt2` は、摩擦の進展を解くためのオプションパラメータです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_integral_contact_with_rigid_obstacle_brick:1
msgid ""
"Synopsis: ind = Model.add_integral_contact_with_rigid_obstacle_brick(self,  "
"MeshIm mim, string varname_u, string multname, string dataname_obstacle, "
"string dataname_r [, string dataname_friction_coeff], int region [, int "
"option [, string dataname_alpha [, string dataname_wt [, string "
"dataname_gamma [, string dataname_vt]]]]])"
msgstr ""
"概要: ind = Model.add_integral_contact_with_rigid_obstacle_brick(self, MeshIm "
"mim, string varname_u, string multname, string dataname_obstacle, string "
"dataname_r [, string dataname_friction_coeff], int region [, int option [, "
"string dataname_alpha [, string dataname_wt [, string dataname_gamma [, "
"string dataname_vt]]]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_integral_contact_with_rigid_obstacle_brick:3
msgid ""
"Add a contact with or without friction condition with a rigid obstacle to "
"the model. This brick adds a contact which is defined in an integral way. It"
" is the direct approximation of an augmented Lagrangian formulation (see "
"Getfem user documentation) defined at the continuous level. The advantage is"
" a better scalability: the number of Newton iterations should be more or "
"less independent of the mesh size. The contact condition is applied on the "
"variable `varname_u` on the boundary corresponding to `region`. The rigid "
"obstacle should be described with the data `dataname_obstacle` being a "
"signed distance to the obstacle (interpolated on a finite element method). "
"`multname` should be a fem variable representing the contact stress. An inf-"
"sup condition beetween `multname` and `varname_u` is required. The "
"augmentation parameter `dataname_r` should be chosen in a range of acceptabe"
" values. The optional parameter `dataname_friction_coeff` is the friction "
"coefficient which could be constant or defined on a finite element method. "
"Possible values for `option` is 1 for the non-symmetric Alart-Curnier "
"augmented Lagrangian method, 2 for the symmetric one, 3 for the non-"
"symmetric Alart-Curnier method with an additional augmentation and 4 for a "
"new unsymmetric method. The default value is 1. In case of contact with "
"friction, `dataname_alpha` and `dataname_wt` are optional parameters to "
"solve evolutionary friction problems. `dataname_gamma` and `dataname_vt` "
"represent optional data for adding a parameter-dependent sliding velocity to"
" the friction condition."
msgstr ""
"摩擦条件の有無にかかわらず、剛体障害物のある接触をモデルに追加します。このブリックは、完全な方法で定義された接触を追加します。これは連続レベルで定義された拡張ラグランジュ定式化(Getfemユーザマニュアルを参照)の直接近似である。利点は拡張性が高いことです。ニュートン法の反復回数は、メッシュサイズに多少依存しません。接触条件は"
" `region` に対応する境界上の変数 `varname_u` に適用されます。剛体障害物は、データ `dataname_obstacle` "
"が障害物までの符号付き距離(有限要素法による補間)で記述されるべきである。 `multname` は接触応力を表す有限要素法変数でなければなりません。 "
"`multname` と `varname_u` の間のinf-sup条件が必要です。拡張パラメータ `dataname_r` "
"は、許容値の範囲内で選択する必要があります。オプションのパラメータ `dataname_friction_coeff` "
"は摩擦係数で、一定にすることも、有限要素法で定義することもできます。 `option` の可能な値は、非対称Alart-"
"Curnier拡張Lagrangian法では1、対称的なものでは2、追加の拡張を伴う非対称Alart-"
"Curnier法では3、新しい非対称法では4です。デフォルト値は1です。摩擦がある場合、  `dataname_alpha` と "
"`dataname_wt` は摩擦の進化を解決するためのオプションパラメータです。`dataname_gamma` および `dataname_vt` "
"は、パラメータに依存するすべり速度を摩擦条件に追加するためのオプションデータを表します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_integral_large_sliding_contact_brick_raytracing:1
msgid ""
"Synopsis: ind = "
"Model.add_integral_large_sliding_contact_brick_raytracing(self, string "
"dataname_r, scalar release_distance, [, string dataname_fr[, string "
"dataname_alpha[, int version]]])"
msgstr ""
"概要: ind = Model.add_integral_large_sliding_contact_brick_raytracing(self, "
"string dataname_r, scalar release_distance, [, string dataname_fr[, string "
"dataname_alpha[, int version]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_integral_large_sliding_contact_brick_raytracing:3
msgid ""
"Adds a large sliding contact with friction brick to the model. This brick is"
" able to deal with self-contact, contact between several deformable bodies "
"and contact with rigid obstacles. It uses the high-level generic assembly. "
"It adds to the model a raytracing_interpolate_transformation object. For "
"each slave boundary a multiplier variable should be defined. The release "
"distance should be determined with care (generally a few times a mean "
"element size, and less than the thickness of the body). Initially, the brick"
" is added with no contact boundaries. The contact boundaries and rigid "
"bodies are added with special functions. `version` is 0 (the default value) "
"for the non-symmetric version and 1 for the more symmetric one (not fully "
"symmetric even without friction)."
msgstr ""
"摩擦ブリックとの有限すべり接触をモデルに追加します。このブリックは自己接触、複数の変形可能体間の接触及び剛体障害物との接触に対処できます。高水準汎用アセンブリを使用します。モデルに"
" raytracing_interpolate_transformation "
"オブジェクトを追加します。スレーブ境界ごとに乗数変数を定義する必要があります。リリース距離は慎重に決定すべきです(一般に平均要素サイズの数倍で、物体の厚さよりも薄いです)。最初は、ブリックは接触境界なしで追加されます。接触境界と剛体には、特別な機能が追加されています。"
" `version` は、非対称バージョンでは0(デフォルト値)、より対称なバージョンでは1(摩擦がなくても完全に対称的でない)です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_interpolate_transformation_from_expression:1
msgid ""
"Add a transformation to the model from mesh `source_mesh` to mesh "
"`target_mesh` given by the expression `expr` which corresponds to a high-"
"level generic assembly expression which may contains some variable of the "
"model. CAUTION: the derivative of the transformation with used variable is "
"taken into account in the computation of the tangen system. However, order "
"two derivative is not implemented, so such tranformation is not allowed in "
"the definition of a potential."
msgstr ""
"メッシュ `source_mesh` から式 `expr` で指定されるメッシュ `target_mesh` "
"への変換をモデルに追加します。この式は、モデルの変数を含む高水準汎用アセンブリ式に対応します。注意：接線システムの計算では、使用した変数による変換の導関数が考慮されます。ただし、2次微分は実装されていないため、ポテンシャルの定義ではこのような変換は許されていません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_isotropic_linearized_elasticity_brick:1
msgid ""
"Add an isotropic linearized elasticity term to the model relatively to the "
"variable `varname`. `dataname_lambda` and `dataname_mu` should contain the "
"Lame coefficients. `region` is an optional mesh region on which the term is "
"added. If it is not specified, it is added on the whole mesh. Return the "
"brick index in the model."
msgstr ""
"等方性線形化弾性項を、変数 `varname` に対して相対的にモデルに追加します。`dataname_lambda` と `dataname_mu` "
"には、Lame係数を含める必要があります。 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_isotropic_linearized_elasticity_brick_pstrain:1
msgid ""
"Add an isotropic linearized elasticity term to the model relatively to the "
"variable `varname`. `data_E` and `data_nu` should contain the Young modulus "
"and Poisson ratio, respectively. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole "
"mesh. On two-dimensional meshes, the term will correpsond to a plain strain "
"approximation. On three-dimensional meshes, it will correspond to the "
"standard model.  Return the brick index in the model."
msgstr ""
"等方性線形化弾性項を、変数 `varname` に対してモデルに追加します。 `data_E` と `data_nu` "
"には、それぞれYoung率とPoisson比を含める必要があります。 `region` "
"はオプションの項が追加されるメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。2次元メッシュでは、この項は単純な歪み近似と相関します。3次元メッシュでは、標準モデルに対応します。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_isotropic_linearized_elasticity_brick_pstress:1
msgid ""
"Add an isotropic linearized elasticity term to the model relatively to the "
"variable `varname`. `data_E` and `data_nu` should contain the Young modulus "
"and Poisson ratio, respectively. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole "
"mesh. On two-dimensional meshes, the term will correpsond to a plain stress "
"approximation. On three-dimensional meshes, it will correspond to the "
"standard model.  Return the brick index in the model."
msgstr ""
"等方性線形化弾性項を、変数  `varname`に対してモデルに追加します。`data_E` と `data_nu` "
"には、それぞれYoung率とPoisson比を含める必要があります。 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。2次元メッシュでは、この項は単純応力近似に対応します。3次元メッシュでは、標準モデルに対応します。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_generic_assembly_brick:1
msgid ""
"Synopsis: ind = Model.add_linear_generic_assembly_brick(self, MeshIm mim, "
"string expression[, int region[, int is_symmetric[, int is_coercive]]])"
msgstr ""
"概要: ind = Model.add_linear_generic_assembly_brick(self, MeshIm mim, string "
"expression[, int region[, int is_symmetric[, int is_coercive]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_generic_assembly_brick:3
msgid "Deprecated. Use Model.add_linear_term() instead."
msgstr "非推奨。代わりに Model.add_linear_term() を使用します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_incompressibility_brick:1
msgid ""
"Synopsis: ind = Model.add_linear_incompressibility_brick(self, MeshIm mim, "
"string varname, string multname_pressure[, int region[, string "
"dataexpr_coeff]])"
msgstr ""
"概要: ind = Model.add_linear_incompressibility_brick(self, MeshIm mim, string "
"varname, string multname_pressure[, int region[, string dataexpr_coeff]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_incompressibility_brick:3
msgid ""
"Add a linear incompressibility condition on `variable`. `multname_pressure` "
"is a variable which represent the pressure. Be aware that an inf-sup "
"condition between the finite element method describing the pressure and the "
"primal variable has to be satisfied. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole "
"mesh. `dataexpr_coeff` is an optional penalization coefficient for nearly "
"incompressible elasticity for instance. In this case, it is the inverse of "
"the Lame coefficient :math:`\\lambda`. Return the brick index in the model."
msgstr ""
"`variable` に線形非圧縮性条件を追加します。 `multname_pressure` "
"は圧力を表す変数です。圧力を記述する有限要素法と主変数との間の入力条件を満たす必要があることに注意してください。 `region` "
"は項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。 `dataexpr_coeff` "
"は、たとえば、非圧縮性に近い弾性に対するオプションのペナルティ係数です。この場合、それはLame係数の逆数である :math:`\\lambda` "
"です。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_term:1
msgid ""
"Synopsis: ind = Model.add_linear_term(self, MeshIm mim, string expression[, "
"int region[, int is_symmetric[, int is_coercive]]])"
msgstr ""
"概要: ind = Model.add_linear_term(self, MeshIm mim, string expression[, int "
"region[, int is_symmetric[, int is_coercive]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_term:3
msgid ""
"Adds a matrix term given by the assembly string `expr` which will be "
"assembled in region `region` and with the integration method `mim`. Only the"
" matrix term will be taken into account, assuming that it is linear. The "
"advantage of declaring a term linear instead of nonlinear is that it will be"
" assembled only once and no assembly is necessary for the residual. Take "
"care that if the expression contains some variables and if the expression is"
" a potential or of first order (i.e. describe the weak form, not the "
"derivative of the weak form), the expression will be derivated with respect "
"to all variables. You can specify if the term is symmetric, coercive or not."
" If you are not sure, the better is to declare the term not symmetric and "
"not coercive. But some solvers (conjugate gradient for instance) are not "
"allowed for non-coercive problems. `brickname` is an otpional name for the "
"brick."
msgstr ""
"アセンブリ文字列  `expr` で指定された行列項を追加します。この行列は、領域  `region` で積分法 `mim` "
"を使用して組み立てられます。線形であると仮定すると、行列項のみが考慮されます。項を非線形ではなく線形と宣言する利点は、項が1回だけ組み立てられ、残差にアセンブリが必要ないことです。式にいくつかの変数が含まれ、式がポテンシャルまたは一次(すなわち、弱形式の微分ではなく、弱形式を記述する)場合、式はすべての変数に関して微分することに注意してください。項が対称か、強制でないかどうかを指定できます。よくわからない場合は、対称ではなく、強制的ではないと宣言した方がよいでしょう。しかし、一部のソルバー(例えば共役勾配)は非強制問題には使用できません。"
" `brickname` はブリックのオプション名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_twodomain_term:1
msgid ""
"Synopsis: ind = Model.add_linear_twodomain_term(self, MeshIm mim, string "
"expression, int region, string secondary_domain[, int is_symmetric[, int "
"is_coercive]])"
msgstr ""
"概要: ind = Model.add_linear_twodomain_term(self, MeshIm mim, string "
"expression, int region, string secondary_domain[, int is_symmetric[, int "
"is_coercive]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_linear_twodomain_term:3
msgid ""
"Adds a linear term given by a weak form language expression like "
"Model.add_linear_term() but for an integration on a direct product of two "
"domains, a first specfied by ``mim`` and ``region`` and a second one by "
"``secondary_domain`` which has to be declared first into the model."
msgstr ""
"Modelのような弱形式言語式で与えられる線形項を追加します。add_linear_term()ではなく、二つのドメインの直接の積上での統合の場合には、最初に``mim''と``region''で指定されたものと``secondary_domain''で指定されたものを最初にモデルに宣言しなければなりません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_macro:1
msgid ""
"Define a new macro for the high generic assembly language. The name include "
"the parameters. For instance name='sp(a,b)', expr='a.b' is a valid "
"definition. Macro without parameter can also be defined. For instance "
"name='x1', expr='X[1]' is valid. Teh form name='grad(u)', expr='Grad_u' is "
"also allowed but in that case, the parameter 'u' will only be allowed to be "
"a variable name when using the macro. Note that macros can be directly "
"defined inside the assembly strings with the keyword 'Def'."
msgstr ""
"汎用アセンブリ言語の新しいマクロを定義します。名前にはパラメータが含まれます。例えば、 name='sp(a,b)' 、 expr='a.b' "
"は有効な定義です。パラメータのないマクロも定義できます。たとえば、 name='x1'、 expr='X[1]' は有効です。 "
"name='grad(u)'、 expr='Grad_u' という形式も使用できますが、この場合、パラメータ 'u' "
"はマクロの使用時にのみ変数名として許可されます。マクロは、キーワード 'Def' を使用してアセンブリ文字列内に直接定義できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_mass_brick:1
msgid ""
"Synopsis: ind = Model.add_mass_brick(self, MeshIm mim, string varname[, "
"string dataexpr_rho[, int region]])"
msgstr ""
"概要: ind = Model.add_mass_brick(self, MeshIm mim, string varname[, string "
"dataexpr_rho[, int region]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_mass_brick:3
msgid ""
"Add mass term to the model relatively to the variable `varname`. If "
"specified, the data `dataexpr_rho` is the density (1 if omitted). `region` "
"is an optional mesh region on which the term is added. If it is not "
"specified, it is added on the whole mesh. Return the brick index in the "
"model."
msgstr ""
"変数 `varname` に対して質量項をモデルに追加します。指定された場合、データ `dataexpr_rho` は密度(省略した場合は1)です。 "
"`region` "
"は、項が追加されるオプションのメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_master_contact_boundary_to_biased_Nitsche_large_sliding_contact_brick:1
msgid ""
"Adds a master contact boundary to an existing biased Nitsche's large sliding"
" contact with friction brick."
msgstr "摩擦ブリックと既存のバイアスされたNitscheの有限スライド接触にマスター接触境界を追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_master_contact_boundary_to_large_sliding_contact_brick:1
msgid ""
"Adds a master contact boundary to an existing large sliding contact with "
"friction brick."
msgstr "摩擦ブリックを持つ既存の大きなスライド接触にマスター接触境界を追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_master_contact_boundary_to_projection_transformation:1
msgid ""
"Add a master contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing projection "
"interpolate transformation called `transname`."
msgstr ""
"特定の境界 `region` 上に対応する変位変数 `dispname` "
"を持つマスター接触境界を、`transname`という既存の投影補間変換に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_master_contact_boundary_to_raytracing_transformation:1
msgid ""
"Add a master contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing raytracing "
"interpolate transformation called `transname`."
msgstr ""
"特定の境界 `region` 上の対応する変位変数 `dispname` を持つマスター接触境界を `transname` "
"という既存のレイトレーシング補間変換に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_master_slave_contact_boundary_to_large_sliding_contact_brick:1
msgid ""
"Adds a contact boundary to an existing large sliding contact with friction "
"brick which is both master and slave (allowing the self-contact)."
msgstr "接触境界を、マスターでもスレーブでもある摩擦レンガの既存の有限スライド接触に追加します(自己接触は許容します)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_multiplier:1
msgid ""
"Add a particular variable linked to a fem being a multiplier with respect to"
" a primal variable. The dof will be filtered with the ``gmm::range_basis`` "
"function applied on the terms of the model which link the multiplier and the"
" primal variable. This in order to retain only linearly independent "
"constraints on the primal variable. Optimized for boundary multipliers."
msgstr ""
"有限要素法にリンクされた特定の変数を、原始変数に対する乗数として追加します。自由度は ``gmm::range_basis`` "
"関数でフィルタリングされ、乗数と原始変数をリンクするモデルの項に適用されます。これは、主変数に対する線形独立制約のみを保持するためです。境界乗数用に最適化されています。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nodal_contact_between_nonmatching_meshes_brick:1
msgid ""
"Synopsis: ind = "
"Model.add_nodal_contact_between_nonmatching_meshes_brick(self,  MeshIm "
"mim1[, MeshIm mim2], string varname_u1[, string varname_u2], string "
"multname_n[, string multname_t], string dataname_r[, string dataname_fr], "
"int rg1, int rg2[, int slave1, int slave2,  int augmented_version])"
msgstr ""
"概要: ind = Model.add_nodal_contact_between_nonmatching_meshes_brick(self, "
"MeshIm mim1[, MeshIm mim2], string varname_u1[, string varname_u2], string "
"multname_n[, string multname_t], string dataname_r[, string dataname_fr], "
"int rg1, int rg2[, int slave1, int slave2, int augmented_version])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nodal_contact_between_nonmatching_meshes_brick:3
msgid ""
"Add a contact with or without friction condition between two faces of one or"
" two elastic bodies. The condition is applied on the variable `varname_u1` "
"or the variables `varname_u1` and `varname_u2` depending if a single or two "
"distinct displacement fields are given. Integers `rg1` and `rg2` represent "
"the regions expected to come in contact with each other. In the single "
"displacement variable case the regions defined in both `rg1` and `rg2` refer"
" to the variable `varname_u1`. In the case of two displacement variables, "
"`rg1` refers to `varname_u1` and `rg2` refers to `varname_u2`. `multname_n` "
"should be a fixed size variable whose size is the number of degrees of "
"freedom on those regions among the ones defined in `rg1` and `rg2` which are"
" characterized as \"slaves\". It represents the contact equivalent nodal "
"normal forces. `multname_t` should be a fixed size variable whose size "
"corresponds to the size of `multname_n` multiplied by qdim - 1 . It "
"represents the contact equivalent nodal tangent (frictional) forces. The "
"augmentation parameter `r` should be chosen in a range of acceptabe values "
"(close to the Young modulus of the elastic body, see Getfem user "
"documentation). The friction coefficient stored in the parameter `fr` is "
"either a single value or a vector of the same size as `multname_n`. The "
"optional parameters `slave1` and `slave2` declare if the regions defined in "
"`rg1` and `rg2` are correspondingly considered as \"slaves\". By default "
"`slave1` is true and `slave2` is false, i.e. `rg1` contains the slave "
"surfaces, while 'rg2' the master surfaces. Preferrably only one of `slave1` "
"and `slave2` is set to true.  The parameter `augmented_version` indicates "
"the augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented "
"Lagrangian, 2 for the symmetric one (except for the coupling between contact"
" and Coulomb friction), 3 for the new unsymmetric method. Basically, this "
"brick computes the matrices BN and BT and the vectors gap and alpha and "
"calls the basic contact brick."
msgstr ""
"1つまたは2つの弾性体の2つの面の間に、摩擦条件の有無にかかわらず接触を追加します。条件は、変数 `varname_u1` または変数  "
"`varname_u1` と `varname_u2` "
"に適用されます。これは、1つまたは2つの個別の変位フィールドが指定されているかどうかによって異なります。整数 `rg1` および `rg2` "
"は、互いに接触すると予想される領域を表す。単一変位変数の場合、 `rg1` と `rg2` の両方で定義された領域は、変数`varname_u1` "
"を参照します。2つの変位変数の場合、`rg1` は `varname_u1` を参照し、`rg2` は `varname_u2` を参照します。 "
"`multname_t` は、`rg1` と`rg2` で定義されている領域のうち、 \"slaves\" "
"とされている領域の自由度をサイズとする固定サイズ変数です。接触等価節点垂直力を表します。`multname_t` は、qdim-1で乗算された "
"`multname_n` のサイズに対応するサイズの固定サイズ変数でなければなりません。接触等価節点正接(摩擦の)力を表します。拡張パラメータ `r` "
"は、許容値(弾性体のYoung率に近い値。Getfemのユーザードキュメントを参照)の範囲内で選択されるべきです。パラメータ `fr` "
"に格納される摩擦係数は、単一の値または `multname_n` と同じサイズのベクトルのいずれかです。オプションのパラメータ `slave1` と "
"`slave2` は、 `rg1` と `rg2` で定義された領域が \"slaves\" とみなされるかどうかを宣言します。デフォルトでは、 "
"`slave1` はtrue、 `slave2` はfalseです。つまり、 'rg1' はスレーブ面を含み、マスタ面を 'rg2' とします。 "
"`slave1` と`slave2` のどちらか一方だけをtrueに設定するのが好ましいです。パラメータ `augmented_version` "
"は拡大戦略を示しｍす: 1は非対称のAlart-"
"Curnier拡張Lagrangian、2は対称のもの(接触とCoulomb摩擦の結合を除きます)、3は新しい非対称法です。基本的に、このブリックは行列BNとBTとベクトルgapとalphaを計算し、基本的な接触ブリックを呼び出します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nodal_contact_with_rigid_obstacle_brick:1
msgid ""
"Synopsis: ind = Model.add_nodal_contact_with_rigid_obstacle_brick(self,  "
"MeshIm mim, string varname_u, string multname_n[, string multname_t], string"
" dataname_r[, string dataname_friction_coeff], int region, string obstacle[,"
"  int augmented_version])"
msgstr ""
"概要: ind = Model.add_nodal_contact_with_rigid_obstacle_brick(self, MeshIm "
"mim, string varname_u, string multname_n[, string multname_t], string "
"dataname_r[, string dataname_friction_coeff], int region, string obstacle[, "
"int augmented_version])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nodal_contact_with_rigid_obstacle_brick:3
msgid ""
"Add a contact with or without friction condition with a rigid obstacle to "
"the model. The condition is applied on the variable `varname_u` on the "
"boundary corresponding to `region`. The rigid obstacle should be described "
"with the string `obstacle` being a signed distance to the obstacle. This "
"string should be an expression where the coordinates are 'x', 'y' in 2D and "
"'x', 'y', 'z' in 3D. For instance, if the rigid obstacle correspond to "
":math:`z \\le 0`, the corresponding signed distance will be simply \"z\". "
"`multname_n` should be a fixed size variable whose size is the number of "
"degrees of freedom on boundary `region`. It represents the contact "
"equivalent nodal forces. In order to add a friction condition one has to add"
" the `multname_t` and `dataname_friction_coeff` parameters. `multname_t` "
"should be a fixed size variable whose size is the number of degrees of "
"freedom on boundary `region` multiplied by :math:`d-1` where :math:`d` is "
"the domain dimension. It represents the friction equivalent nodal forces. "
"The augmentation parameter `r` should be chosen in a range of acceptabe "
"values (close to the Young modulus of the elastic body, see Getfem user "
"documentation).  `dataname_friction_coeff` is the friction coefficient. It "
"could be a scalar or a vector of values representing the friction "
"coefficient on each contact node.  The parameter `augmented_version` "
"indicates the augmentation strategy : 1 for the non-symmetric Alart-Curnier "
"augmented Lagrangian, 2 for the symmetric one (except for the coupling "
"between contact and Coulomb friction), 3 for the new unsymmetric method. "
"Basically, this brick compute the matrix BN and the vectors gap and alpha "
"and calls the basic contact brick."
msgstr ""
"摩擦条件の有無にかかわらず、剛体障害物のある接触をモデルに追加します。条件は、 `region` に対応する境界上の変数 `varname_u` "
"に適用されます。剛障害物は、障害物への符号付き距離である文字列 `obstacle` で記述します。この文字列は、座標が2次元では 'x'、 'y' "
"、3次元では'x'、 'y'、 'z' の式である必要があります。たとえば、障害物が :math:`z \\le 0` "
"に対応する場合、対応する符号付き距離は単に \"z\" になります。 `multname_n` はサイズが境界 `region` "
"の自由度数である固定サイズ変数でなければなりません。これは接触等価節点力を表します。摩擦条件を追加するには、  `multname_t` および "
"`dataname_friction_coeff` パラメータを追加する必要があります。`multname_t` "
"は固定サイズの変数でなければならず、そのサイズは境界`region` 上の自由度の数に :math:`d-1` を乗じたものである。ここで "
":math:`d` は領域の次元です。これは摩擦相当節点力を表します。拡張パラメータ `r` "
"は許容値(弾性体のYoung率に近い値。Getfemのユーザードキュメントを参照)の範囲内で選択される必要があります。`dataname_friction_coeff`"
" は摩擦係数です。各接触節点の摩擦係数を表すスカラー値または値のベクトルです。パラメータ `augmented_version` は拡大戦略を示します:"
" 1は非対称のAlart-"
"Curnier拡張Lagrangian、2は対称(接触とCoulomb摩擦の結合を除く)、3は新しい非対称方法です。基本的に、このブリックは行列BNおよびベクトルgapおよびalphaを計算し、基本接触ブリックを呼び出します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_elasticity_brick:1
msgid ""
"Add a nonlinear elasticity term to the model relatively to the variable "
"`varname` (deprecated brick, use add_finite_strain_elaticity instead). "
"`lawname` is the constitutive law which could be 'SaintVenant Kirchhoff', "
"'Mooney Rivlin', 'neo Hookean', 'Ciarlet Geymonat' or 'generalized Blatz "
"Ko'. 'Mooney Rivlin' and 'neo Hookean' law names can be preceded with the "
"word 'compressible' or 'incompressible' to force using the corresponding "
"version. The compressible version of these laws requires one additional "
"material coefficient. By default, the incompressible version of 'Mooney "
"Rivlin' law and the compressible one of the 'neo Hookean' law are "
"considered. In general, 'neo Hookean' is a special case of the 'Mooney "
"Rivlin' law that requires one coefficient less. IMPORTANT : if the variable "
"is defined on a 2D mesh, the plane strain approximation is automatically "
"used. `dataname` is a vector of parameters for the constitutive law. Its "
"length depends on the law. It could be a short vector of constant values or "
"a vector field described on a finite element method for variable "
"coefficients. `region` is an optional mesh region on which the term is "
"added. If it is not specified, it is added on the whole mesh. This brick use"
" the low-level generic assembly. Returns the brick index in the model."
msgstr ""
"変数 `varname` (deprecated "
"brick、代わりにadd_finite_strain_elasticityを使用してください)に関する非線形弾性項をモデルに追加します。`lawname`"
" は構成則であり 'SaintVenant Kirchhoff' 、 'Mooney Rivlin' 、 'neo Hookean' 、  "
"'Ciarlet Geymonat'  または  'generalized Blatz Ko' のいずれかになります。 'Mooney Rivlin' "
"および 'neo Hookean' 則の名前の前に 'compressible' または 'incompressible' "
"を付けると、対応するバージョンが使用されます。これらの法則の圧縮性バージョンには、追加の材料係数が1つ必要です。既定では、'Mooney Rivlin'"
" 則の非圧縮性バージョンと'neo Hookean' 則の圧縮性バージョンが考慮されます。一般に 'neo Hookean' は'Mooney "
"Rivlin' "
"則の特殊なケースであり、一つの係数を少なくする必要があります。重要:変数が2次元メッシュ上で定義されている場合、平面歪み近似が自動的に使用されます。 "
"`dataname` "
"は構成則のパラメータのベクトルです。長さは法則によります。これは、定数値の短いベクトル、または可変係数の有限要素法で記述されたベクトルフィールドです。 "
"`region` "
"はオプションの項が追加されるメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。このブリックは、低水準汎用アセンブリを使用します。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_generic_assembly_brick:1
msgid ""
"Synopsis: ind = Model.add_nonlinear_generic_assembly_brick(self, MeshIm mim,"
" string expression[, int region[, int is_symmetric[, int is_coercive]]])"
msgstr ""
"概要: ind = Model.add_nonlinear_generic_assembly_brick(self, MeshIm mim, "
"string expression[, int region[, int is_symmetric[, int is_coercive]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_generic_assembly_brick:3
msgid "Deprecated. Use Model.add_nonlinear_term() instead."
msgstr "非推奨。 Model.add_nonlinear_term() を使用します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_incompressibility_brick:1
msgid ""
"Add a nonlinear incompressibility condition on `variable` (for large strain "
"elasticity). `multname_pressure` is a variable which represent the pressure."
" Be aware that an inf-sup condition between the finite element method "
"describing the pressure and the primal variable has to be satisfied. "
"`region` is an optional mesh region on which the term is added. If it is not"
" specified, it is added on the whole mesh. Return the brick index in the "
"model."
msgstr ""
"非線形非圧縮性条件を(有限歪み弾性の場合) `variable` に追加します。 `multname_pressure` "
"は圧力を表す変数です。圧力を記述する有限要素法と主変数との間の入力条件を満たす必要があることに注意してください。 `region` "
"はオプションの項が追加されるメッシュ領域です。指定しない場合は、メッシュ全体に追加されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_term:1
msgid ""
"Synopsis: ind = Model.add_nonlinear_term(self, MeshIm mim, string "
"expression[, int region[, int is_symmetric[, int is_coercive]]])"
msgstr ""
"概要: ind = Model.add_nonlinear_term(self, MeshIm mim, string expression[, int"
" region[, int is_symmetric[, int is_coercive]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_term:3
msgid ""
"Adds a nonlinear term given by the assembly string `expr` which will be "
"assembled in region `region` and with the integration method `mim`. The "
"expression can describe a potential or a weak form. Second order terms (i.e."
" containing second order test functions, Test2) are not allowed. You can "
"specify if the term is symmetric, coercive or not. If you are not sure, the "
"better is to declare the term not symmetric and not coercive. But some "
"solvers (conjugate gradient for instance) are not allowed for non-coercive "
"problems. `brickname` is an otpional name for the brick."
msgstr ""
"アセンブリ文字列  `expr` で指定された非線形項を追加します。この非線形項は、領域 `region` と積分法 `mim` "
"で組み立てられます。この表現は、ポテンシャルまたは弱形式を表すことができます。2次項(すなわち、2次試験関数Test2を含みます)は使用できません。項が対称か、強制かどうかを指定できます。よくわからない場合は、対称ではなく、強制ではないと宣言した方がよいでしょう。しかし、一部のソルバー(例えば共役勾配)は非強制問題には使用できません。"
" `brickname` はブリックのオプション名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_twodomain_term:1
msgid ""
"Synopsis: ind = Model.add_nonlinear_twodomain_term(self, MeshIm mim, string "
"expression, int region, string secondary_domain[, int is_symmetric[, int "
"is_coercive]])"
msgstr ""
"概要: ind = Model.add_nonlinear_twodomain_term(self, MeshIm mim, string "
"expression, int region, string secondary_domain[, int is_symmetric[, int "
"is_coercive]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonlinear_twodomain_term:3
msgid ""
"Adds a nonlinear term given by a weak form language expression like "
"Model.add_nonlinear_term() but for an integration on a direct product of two"
" domains, a first specfied by ``mim`` and ``region`` and a second one by "
"``secondary_domain`` which has to be declared first into the model."
msgstr ""
"弱形式言語の式で与えられる非線形項を追加します。 Model.add_nonlinear_term() "
"のようではなく、二つのドメインの直積上での積分の場合には、最初に ``mim`` と ``region`` で指定されたものと "
"``secondary_domain`` で指定されたものを最初にモデルに宣言しなければなりません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonmatching_meshes_contact_brick:1
msgid ""
"Synopsis: ind = Model.add_nonmatching_meshes_contact_brick(self,  MeshIm "
"mim1[, MeshIm mim2], string varname_u1[, string varname_u2], string "
"multname_n[, string multname_t], string dataname_r[, string dataname_fr], "
"int rg1, int rg2[, int slave1, int slave2,  int augmented_version])"
msgstr ""
"概要: ind = Model.add_nonmatching_meshes_contact_brick(self, MeshIm mim1[, "
"MeshIm mim2], string varname_u1[, string varname_u2], string multname_n[, "
"string multname_t], string dataname_r[, string dataname_fr], int rg1, int "
"rg2[, int slave1, int slave2, int augmented_version])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_nonmatching_meshes_contact_brick:3
msgid ""
"DEPRECATED FUNCTION. Use 'add nodal contact between nonmatching meshes "
"brick' instead."
msgstr ""
"非推奨機能です。代わりに 'add nodal contact between nonmatching meshes brick' を使用してください。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_Dirichlet_condition_with_Nitsche_method:1
msgid ""
"Synopsis: ind = "
"Model.add_normal_Dirichlet_condition_with_Nitsche_method(self, MeshIm mim, "
"string varname, string Neumannterm, string gamma0name, int region[, scalar "
"theta][, string dataname])"
msgstr ""
"概要: ind = Model.add_normal_Dirichlet_condition_with_Nitsche_method(self, "
"MeshIm mim, string varname, string Neumannterm, string gamma0name, int "
"region[, scalar theta][, string dataname])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_Dirichlet_condition_with_Nitsche_method:3
msgid ""
"Add a Dirichlet condition to the normal component of the vector (or tensor) "
"valued variable `varname` and the mesh region `region`. This region should "
"be a boundary. `Neumannterm` is the expression of the Neumann term (obtained"
" by the Green formula) described as an expression of the high-level generic "
"assembly language. This term can be obtained by  Model.Neumann_term(varname,"
" region) once all volumic bricks have been added to the model. The Dirichlet"
" condition is prescribed with Nitsche's method. `dataname` is the optional "
"right hand side of the Dirichlet condition. It could be constant or "
"described on a fem. `gamma0name` is the Nitsche's method parameter. `theta` "
"is a scalar value which can be positive or negative. `theta = 1` corresponds"
" to the standard symmetric method which is conditionally coercive for  "
"`gamma0` small. `theta = -1` corresponds to the skew-symmetric method which "
"is inconditionally coercive. `theta = 0` is the simplest method for which "
"the second derivative of the Neumann term is not necessary even for "
"nonlinear problems.  Returns the brick index in the model. (This brick is "
"not fully tested)"
msgstr ""
"ベクトル(またはテンソル)値変数 `varname` の法線コンポーネントとメッシュ領域 `region` "
"にDirichlet条件を追加します。この領域は境界である必要があります。 `Neumannterm` "
"は、高水準汎用アセンブリ言語の表現として説明されるNeumann項(Green公式により得られる)の表現である。この項は "
"Model.Neumann_term(varname, region) "
"によって得られます。すべてのボリュームブリックがモデルに追加されると、ディリクレ条件はNitscheの方法で処方される。 `dataname` "
"はDirichlet条件のオプションの右辺です。これは一定であるか、または有限要素法で記述できます。 `gamma0name` "
"はNitsche法パラメータです。 `theta` は正または負のスカラー値です。 `theta = 1` は `gamma0` "
"が小さい場合に条件的に強制される標準的な対称法に相当する。 `theta = -1` は無条件に強制的なskew対称法に対応します。 `theta = "
"0` "
"は非線形問題に対してもNeumann項の2次導関数を必要としない最も単純な方法である。モデル内のブリックのインデックスを返します。(このブリックは完全にはテストされていません)"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_Dirichlet_condition_with_multipliers:1
msgid ""
"Add a Dirichlet condition to the normal component of the vector (or tensor) "
"valued variable `varname` and the mesh region `region`. This region should "
"be a boundary. The Dirichlet condition is prescribed with a multiplier "
"variable described by `mult_description`. If `mult_description` is a string "
"this is assumed to be the variable name corresponding to the multiplier "
"(which should be first declared as a multiplier variable on the mesh region "
"in the model). If it is a finite element method (mesh_fem object) then a "
"multiplier variable will be added to the model and build on this finite "
"element method (it will be restricted to the mesh region `region` and "
"eventually some conflicting dofs with some other multiplier variables will "
"be suppressed). If it is an integer, then a  multiplier variable will be "
"added to the model and build on a classical finite element of degree that "
"integer. `dataname` is the optional right hand side of  the Dirichlet "
"condition. It could be constant or described on a fem; scalar or vector "
"valued, depending on the variable on which the Dirichlet condition is "
"prescribed (scalar if the variable is vector valued, vector if the variable "
"is tensor valued). Returns the brick index in the model."
msgstr ""
"ベクトル(またはテンソル)値変数 `varname` の法線コンポーネントとメッシュ領域 `region` "
"にDirichlet条件を追加します。この領域は境界である必要があります。Dirichlet条件は `mult_description` "
"によって記述される乗数変数で規定される。 `mult_description` "
"が文字列の場合は、乗数(これは、最初にモデルのメッシュ領域で乗数変数として宣言する必要があります)に対応する変数名と見なされます。有限要素法(mesh_femオブジェクト)の場合は、乗数変数がモデルに追加され、この有限要素法(メッシュ領域"
" `region` "
"に制限され、最終的に他の乗数変数との自由度の競合が抑制されます)に基づいて構築されます。整数の場合は、乗数変数がモデルに追加され、その整数の次数の従来の有限要素に基づいて構築されます。"
" `dataname` "
"はDirichlet条件のオプションの右辺です。定数の場合もあれば、有限要素法で記述される場合もあります。スカラー値またはベクトル値で、Dirichlet条件が指定されている変数によって決まります(変数がベクトル値の場合はスカラー、テンソル値の場合はベクトルです)。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_Dirichlet_condition_with_penalization:1
msgid ""
"Add a Dirichlet condition to the normal component of the vector (or tensor) "
"valued variable `varname` and the mesh region `region`. This region should "
"be a boundary. The Dirichlet condition is prescribed with penalization. The "
"penalization coefficient is initially `coeff` and will be added to the data "
"of the model. `dataname` is the optional right hand side of the Dirichlet "
"condition. It could be constant or described on a fem; scalar or vector "
"valued, depending on the variable on which the Dirichlet condition is "
"prescribed (scalar if the variable is vector valued, vector if the variable "
"is tensor valued). `mf_mult` is an optional parameter which allows to weaken"
" the Dirichlet condition specifying a multiplier space. Returns the brick "
"index in the model."
msgstr ""
"ベクトル(またはテンソル)値変数 `varname` の法線コンポーネントとメッシュ領域 `region` "
"にDirichlet条件を追加します。この領域は境界である必要があります。Dirichlet条件はペナリゼーションとともに処理される。ペナルティ係数は最初は"
" `coeff` であり、モデルのデータに追加されます。 `dataname` "
"はDirichlet条件のオプションの右辺です。定数の場合もあれば、有限要素法で記述される場合もあります。スカラー値またはベクトル値で、Dirichlet条件が指定されている変数によって決まります(変数がベクトル値の場合はスカラー、テンソル値の場合はベクトル)。"
" `mf_mult` "
"はオプションのパラメータで、乗数空間を指定してDirichlet条件を弱めることができます。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_normal_derivative_Dirichlet_condition_with_multipliers:1
msgid ""
"Add a Dirichlet condition on the normal derivative of the variable `varname`"
" and on the mesh region `region` (which should be a boundary. The general "
"form is :math:`\\int \\partial_n u(x)v(x) = \\int r(x)v(x) \\forall v` where"
" :math:`r(x)` is the right hand side for the Dirichlet condition (0 for "
"homogeneous conditions) and :math:`v` is in a space of multipliers defined "
"by `mult_description`. If `mult_description` is a string this is assumed to "
"be the variable name corresponding to the multiplier (which should be first "
"declared as a multiplier variable on the mesh region in the model). If it is"
" a finite element method (mesh_fem object) then a multiplier variable will "
"be added to the model and build on this finite element method (it will be "
"restricted to the mesh region `region` and eventually some conflicting dofs "
"with some other multiplier variables will be suppressed). If it is an "
"integer, then a  multiplier variable will be added to the model and build on"
" a classical finite element of degree that integer. `dataname` is an "
"optional parameter which represents the right hand side of the Dirichlet "
"condition. If `R_must_be_derivated` is set to `true` then the normal "
"derivative of `dataname` is considered. Return the brick index in the model."
msgstr ""
"変数 `varname` の法線導関数とメッシュ領域 `region` "
"(境界である必要がありますにDirichlet条件を追加します。一般的な形式は以下の通りである:math:`\\int \\partial_n "
"u(x)v(x) = \\int r(x)v(x) \\forall v` ここで、 :math:`r(x)` "
"はDirichlet条件(均一条件の場合は0)の右辺であり、 :math:`v` は `mult_description` "
"で定義される乗数の空間にある。 `mult_description` "
"が文字列の場合は、乗数(これは、最初にモデルのメッシュ領域で乗数変数として宣言する必要があります)に対応する変数名と見なされます。有限要素法(mesh_femオブジェクト)の場合は、乗数変数がモデルに追加され、この有限要素法(メッシュ領域"
"  `region` "
"に制限され、最終的に他の乗数変数との自由度の競合が抑制されます)に基づいて構築されます。整数の場合は、乗数変数がモデルに追加され、その整数の次数の従来の有限要素に基づいて構築されます。"
" `dataname` はDirichlet条件の右辺を表すオプションのパラメータです。もし `R_must_be_derivated` が "
"`true` に設定されていれば、 `dataname` の正規導関数が考慮されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_normal_derivative_Dirichlet_condition_with_penalization:1
msgid ""
"Add a Dirichlet condition on the normal derivative of the variable `varname`"
" and on the mesh region `region` (which should be a boundary. The general "
"form is :math:`\\int \\partial_n u(x)v(x) = \\int r(x)v(x) \\forall v` where"
" :math:`r(x)` is the right hand side for the Dirichlet condition (0 for "
"homogeneous conditions). The penalization coefficient is initially `coeff` "
"and will be added to the data of the model. It can be changed with the "
"command Model.change_penalization_coeff(). `dataname` is an optional "
"parameter which represents the right hand side of the Dirichlet condition. "
"If `R_must_be_derivated` is set to `true` then the normal derivative of "
"`dataname` is considered. Return the brick index in the model."
msgstr ""
"変数 `varname` の法線導関数とメッシュ領域 `region`  "
"(境界である必要がありますにDirichlet条件を追加します。一般的な形式は以下の通りである :math:`\\int \\partial_n "
"u(x)v(x) = \\int r(x)v(x) \\forall v` ここで :math:`r(x)` "
"はDirichlet条件(均一条件の場合は0)の右辺です。ペナルティ係数は最初は `coeff` であり、モデルのデータに追加されます。これは、 "
"Model.change_penalization_coeff() コマンドで変更できます。 `dataname` "
"はDirichlet条件の右辺を表すオプションのパラメータです。もし `R_must_be_derivated` が `true` に設定されていれば、"
"  `dataname` の正規導関数が考慮されます。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_derivative_source_term_brick:1
msgid ""
"Add a normal derivative source term brick :math:`F = \\int b.\\partial_n v` "
"on the variable `varname` and the mesh region `region`."
msgstr ""
"変数 `varname` とメッシュ領域 `region` に通常の微分ソース項ブリック :math:`F = \\int b.\\partial_n "
"v` を追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_derivative_source_term_brick:5
msgid ""
"Update the right hand side of the linear system. `dataname` represents `b` "
"and `varname` represents `v`. Return the brick index in the model."
msgstr ""
"線形システムの右辺を更新します。 `dataname` は `b` を表し、  `varname` は `v` "
"を表します。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_normal_source_term_brick:1
msgid ""
"Add a source term on the variable `varname` on a boundary `region`. This "
"region should be a boundary. The source term is represented by the data "
"`dataepxpr` which could be any regular expression of the high-level generic "
"assembly language (except for the complex version where it has to be a "
"declared data of the model). A scalar product with the outward normal unit "
"vector to the boundary is performed. The main aim of this brick is to "
"represent a Neumann condition with a vector data without performing the "
"scalar product with the normal as a pre-processing. Return the brick index "
"in the model."
msgstr ""
"境界 `region` 上の変数  `varname` にソース項を追加します。この領域は境界である必要があります。ソースタームは、データ "
"`dataepxpr` "
"によって表され、これは、高水準汎用アセンブリ言語(ただし、モデルの宣言されたデータでなければならない複素数バージョンは除きます)の任意の正規表現であり得る。境界への外向き法線単位ベクトルを持つスカラー積が実行されます。このブリックの主な目的は事前処理として法線を持つスカラー積を実行せずにベクトルデータでNeumann条件を表現することです。モデル内のブリックインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_penalized_contact_between_nonmatching_meshes_brick:1
msgid ""
"Synopsis: ind = "
"Model.add_penalized_contact_between_nonmatching_meshes_brick(self,  MeshIm "
"mim, string varname_u1, string varname_u2, string dataname_r [, string "
"dataname_coeff], int region1, int region2 [, int option [, string "
"dataname_lambda, [, string dataname_alpha [, string dataname_wt1, string "
"dataname_wt2]]]])"
msgstr ""
"概要: ind = Model.add_penalized_contact_between_nonmatching_meshes_brick(self,"
" MeshIm mim, string varname_u1, string varname_u2, string dataname_r [, "
"string dataname_coeff], int region1, int region2 [, int option [, string "
"dataname_lambda, [, string dataname_alpha [, string dataname_wt1, string "
"dataname_wt2]]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_penalized_contact_between_nonmatching_meshes_brick:3
msgid ""
"Add a penalized contact condition with or without friction between "
"nonmatching meshes to the model. The condition is applied on the variables "
"`varname_u1` and  `varname_u2` on the boundaries corresponding to `region1` "
"and `region2`. The penalization parameter `dataname_r` should be chosen "
"large enough to prescribe approximate non-penetration and friction "
"conditions but not too large not to deteriorate too much the conditionning "
"of the tangent system. The optional parameter `dataname_friction_coeff` is "
"the friction coefficient which could be constant or defined on a finite "
"element method on the same mesh as `varname_u1`. `dataname_lambda` is an "
"optional parameter used if option is 2. In that case, the penalization term "
"is shifted by lambda (this allows the use of an Uzawa algorithm on the "
"corresponding augmented Lagrangian formulation) In case of contact with "
"friction, `dataname_alpha`, `dataname_wt1` and `dataname_wt2` are optional "
"parameters to solve evolutionary friction problems."
msgstr ""
"モデルに、一致しないメッシュ間の摩擦の有無にかかわらずペナルティ接触条件を追加します。条件は、  `region1` および `region2` "
"に対応する境界上の変数 `varname_u1` および `varname_u2` に適用されます。ペナルティパラメータ `dataname_r` "
"は、近似の非貫通条件および摩擦条件を規定するのに十分な大きさに選択する必要がありますが、接線システムの条件を過度に悪化させないようにするには大きすぎません。オプションのパラメータ"
" `dataname_friction_coeff` は摩擦係数で、一定であるか、または `varname_u1` "
"と同じメッシュ上の有限要素法で定義できます。 `dataname_lambda` "
"は、optionが2の場合に使用されるオプションのパラメータです。その場合、ペナルティ項はlambda単位でシフトされます(これは、対応する拡張Lagrangian定式化上でのUzawaアルゴリズムの使用を可能にします)。接触摩擦の場合、"
" `dataname_alpha` 、 `dataname_wt1`  および `dataname_wt2` "
"は進展摩擦の問題を解決するためのオプションのパラメータです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_penalized_contact_with_rigid_obstacle_brick:1
msgid ""
"Synopsis: ind = Model.add_penalized_contact_with_rigid_obstacle_brick(self,"
"  MeshIm mim, string varname_u, string dataname_obstacle, string dataname_r "
"[, string dataname_coeff], int region [, int option, string dataname_lambda,"
" [, string dataname_alpha [, string dataname_wt]]])"
msgstr ""
"概要: ind = Model.add_penalized_contact_with_rigid_obstacle_brick(self, MeshIm"
" mim, string varname_u, string dataname_obstacle, string dataname_r [, "
"string dataname_coeff], int region [, int option, string dataname_lambda, [,"
" string dataname_alpha [, string dataname_wt]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_penalized_contact_with_rigid_obstacle_brick:3
msgid ""
"Add a penalized contact with or without friction condition with a rigid "
"obstacle to the model. The condition is applied on the variable `varname_u` "
"on the boundary corresponding to `region`. The rigid obstacle should be "
"described with the data `dataname_obstacle` being a signed distance to the "
"obstacle (interpolated on a finite element method). The penalization "
"parameter `dataname_r` should be chosen large enough to prescribe "
"approximate non-penetration and friction conditions but not too large not to"
" deteriorate too much the conditionning of the tangent system. "
"`dataname_lambda` is an optional parameter used if option is 2. In that "
"case, the penalization term is shifted by lambda (this allows the use of an "
"Uzawa algorithm on the corresponding augmented Lagrangian formulation)"
msgstr ""
"摩擦条件の有無にかかわらず、剛体障害物のペナルティ接触をモデルに追加します。条件は `region` に対応する境界上の変数 `varname_u` "
"に適用されます。剛体障害物はデータ `dataname_obstacle` "
"が障害物までの符号付き距離(有限要素法による補間)で記述されるべきである。ペナルティパラメータ `dataname_r` "
"は、近似の非貫通条件および摩擦条件を規定するのに十分な大きさに選択する必要がありますが、接線システムの条件を過度に悪化させないようにするには大きすぎません。"
" `dataname_lambda` "
"はオプションが2の場合に使用されるオプションのパラメータです。その場合、ペナルティ項はlambda単位でシフトされます(これは、対応する拡張Lagrangian定式化上でのUzawaアルゴリズムの使用を可能にします)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_pointwise_constraints_with_given_multipliers:1
msgid ""
"Synopsis: ind = Model.add_pointwise_constraints_with_given_multipliers(self,"
" string varname, string multname, string dataname_pt[, string "
"dataname_unitv] [, string dataname_val])"
msgstr ""
"概要: ind = Model.add_pointwise_constraints_with_given_multipliers(self, "
"string varname, string multname, string dataname_pt[, string dataname_unitv]"
" [, string dataname_val])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_pointwise_constraints_with_given_multipliers:3
msgid ""
"Add some pointwise constraints on the variable `varname` using a given "
"multiplier `multname`. The conditions are prescribed on a set of points "
"given in the data `dataname_pt` whose dimension is the number of points "
"times the dimension of the mesh. The multiplier variable should be a fixed "
"size variable of size the number of points. If the variable represents a "
"vector field, one has to give the data `dataname_unitv` which represents a "
"vector of dimension the number of points times the dimension of the vector "
"field which should store some unit vectors. In that case the prescribed "
"constraint is the scalar product of the variable at the corresponding point "
"with the corresponding unit vector. The optional data `dataname_val` is the "
"vector of values to be prescribed at the different points. This brick is "
"specifically designed to kill rigid displacement in a Neumann problem. "
"Returns the brick index in the model."
msgstr ""
"与えられた乗数 `multname` を使用して、変数 `varname` の各点に制約を追加します。条件は、データ `dataname_pt` "
"に指定された点の集合で規定され、その寸法は点の数とメッシュの寸法の積です。乗数変数は、ポイント数のサイズを固定サイズ変数にする必要があります。変数がベクトルフィールドを表す場合には、データ"
" `dataname_unitv` "
"を与えなければなりません。これは、次元のベクトルを表すものであり、点の数と単位ベクトルを格納すべきベクトルフィールドの次元を乗算したものです。この場合、指定拘束は、対応する点における変数と対応する単位ベクトルとのスカラー積である。オプションのデータ"
" `dataname_val` "
"は異なる点で規定される値のベクトルです。このブリックはNeumann問題における剛体変位を消滅させるために特別に設計されています。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_pointwise_constraints_with_multipliers:1
msgid ""
"Synopsis: ind = Model.add_pointwise_constraints_with_multipliers(self, "
"string varname, string dataname_pt[, string dataname_unitv] [, string "
"dataname_val])"
msgstr ""
"概要: ind = Model.add_pointwise_constraints_with_multipliers(self, string "
"varname, string dataname_pt[, string dataname_unitv] [, string "
"dataname_val])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_pointwise_constraints_with_multipliers:3
msgid ""
"Add some pointwise constraints on the variable `varname` using multiplier. "
"The multiplier variable is automatically added to the model. The conditions "
"are prescribed on a set of points given in the data `dataname_pt` whose "
"dimension is the number of points times the dimension of the mesh. If the "
"variable represents a vector field, one has to give the data "
"`dataname_unitv` which represents a vector of dimension the number of points"
" times the dimension of the vector field which should store some unit "
"vectors. In that case the prescribed constraint is the scalar product of the"
" variable at the corresponding point with the corresponding unit vector. The"
" optional data `dataname_val` is the vector of values to be prescribed at "
"the different points. This brick is specifically designed to kill rigid "
"displacement in a Neumann problem. Returns the brick index in the model."
msgstr ""
"multiplierを使用して、変数 `varname` にポイントワイズ制約を追加します。乗数変数が自動的にモデルに追加されます。条件は、データ "
"`dataname_pt` に指定された点のセットで規定され、その寸法は点の数とメッシュ次元の積である。変数がベクトルフィールドを表す場合には、データ "
"`dataname_unitv` "
"を与えなければならない。これは、次元のベクトルを表すものであり、点の数と単位ベクトルを格納すべきベクトルフィールドの次元を乗算したものである。この場合、指定拘束は、対応する点における変数と対応する単位ベクトルとのスカラー積である。オプションのデータ"
" `dataname_val` "
"は、異なる点で規定される値のベクトルです。このブリックは、Neumann問題における剛体変位を消滅させるために特別に設計されている。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_pointwise_constraints_with_penalization:1
msgid ""
"Synopsis: ind = Model.add_pointwise_constraints_with_penalization(self, "
"string varname, scalar coeff, string dataname_pt[, string dataname_unitv] [,"
" string dataname_val])"
msgstr ""
"概要: ind = Model.add_pointwise_constraints_with_penalization(self, string "
"varname, scalar coeff, string dataname_pt[, string dataname_unitv] [, string"
" dataname_val])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_pointwise_constraints_with_penalization:3
msgid ""
"Add some pointwise constraints on the variable `varname` thanks to a "
"penalization. The penalization coefficient is initially `penalization_coeff`"
" and will be added to the data of the model. The conditions are prescribed "
"on a set of points given in the data `dataname_pt` whose dimension is the "
"number of points times the dimension of the mesh. If the variable represents"
" a vector field, one has to give the data `dataname_unitv` which represents "
"a vector of dimension the number of points times the dimension of the vector"
" field which should store some unit vectors. In that case the prescribed "
"constraint is the scalar product of the variable at the corresponding point "
"with the corresponding unit vector. The optional data `dataname_val` is the "
"vector of values to be prescribed at the different points. This brick is "
"specifically designed to kill rigid displacement in a Neumann problem. "
"Returns the brick index in the model."
msgstr ""
"ペナルティにより、変数 `varname` に点ごとの制約を追加します。ペナルティ係数は最初は `penalization_coeff` "
"で、モデルのデータに追加されます。条件は、データ `dataname_pt`  "
"に指定された点の集合で規定され、その次元は点の数とメッシュの次元の積です。変数がベクトルフィールドを表す場合には、データ "
"`dataname_unitv` "
"を与えなければなりません。これは、次元のベクトルを表すものであり、点の数と単位ベクトルを格納すべきベクトルフィールドの次元を乗算したものです。この場合、指定拘束は、対応する点における変数と対応する単位ベクトルとのスカラー積です。オプションのデータ"
" `dataname_val` "
"は異なる点で規定される値のベクトルです。このブリックはNeumann問題における剛体変位を消滅させるために特別に設計されています。モデル内のブリックのインデックスを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_projection_transformation:1
msgid ""
"Add a projection interpolate transformation called `transname` to a model to"
" be used by the generic assembly bricks. CAUTION: For the moment, the "
"derivative of the transformation is not taken into account in the model "
"solve."
msgstr ""
"`transname` という名前の投影補間変換を、汎用アセンブリブリックで使用するモデルに追加します。注意: "
"現時点では、モデルの計算で変換の導関数は考慮されません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_raytracing_transformation:1
msgid ""
"Add a raytracing interpolate transformation called `transname` to a model to"
" be used by the generic assembly bricks. CAUTION: For the moment, the "
"derivative of the transformation is not taken into account in the model "
"solve."
msgstr ""
"汎用アセンブリブリックで使用されるモデルに  `transname` というレイトレーシング補間変換を追加します。注意: "
"現時点ではモデルの計算で変換の導関数は考慮されません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_rigid_obstacle_to_Nitsche_large_sliding_contact_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_rigid_obstacle_to_large_sliding_contact_brick:1
msgid ""
"Adds a rigid obstacle to an existing large sliding contact with friction "
"brick. `expr` is an expression using the high-level generic assembly "
"language (where `x` is the current point n the mesh) which should be a "
"signed distance to the obstacle. `N` is the mesh dimension."
msgstr ""
"摩擦ブリックとの既存の有限すべり接触に、硬質の障害物を追加します。 `expr` は高水準汎用アセンブリ言語(ここで、 `x` "
"はメッシュの現在の点です)を使用した式であり、障害物までの符号付き距離である必要があります。 `N` はメッシュの次元です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_rigid_obstacle_to_projection_transformation:1
msgid ""
"Add a rigid obstacle whose geometry corresponds to the zero level-set of the"
" high-level generic assembly expression `expr` to an existing projection "
"interpolate transformation called `transname`."
msgstr ""
"ジオメトリが高水準汎用アセンブリ式 `expr` の0レベルセットに対応する剛体障害を `transname` という既存の投影補間変換に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_rigid_obstacle_to_raytracing_transformation:1
msgid ""
"Add a rigid obstacle whose geometry corresponds to the zero level-set of the"
" high-level generic assembly expression `expr` to an existing raytracing "
"interpolate transformation called `transname`."
msgstr ""
"ジオメトリが上位レベルの汎用アセンブリ式 `expr` の0レベルセットに対応する剛体な障害物を "
"`transname`という既存のレイトレーシング補間変換に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.add_slave_contact_boundary_to_biased_Nitsche_large_sliding_contact_brick:1
msgid ""
"Adds a slave contact boundary to an existing biased Nitsche's large sliding "
"contact with friction brick."
msgstr "摩擦ブリックとの既存のバイアスされたNitscheの有限滑り接触にスレーブ接触境界を追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_slave_contact_boundary_to_large_sliding_contact_brick:1
msgid ""
"Adds a slave contact boundary to an existing large sliding contact with "
"friction brick."
msgstr "摩擦ブリックを持つ既存の有限滑り接触にスレーブ接触境界を追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_slave_contact_boundary_to_projection_transformation:1
msgid ""
"Add a slave contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing projection "
"interpolate transformation called `transname`."
msgstr ""
"特定の境界 `region` 上の対応する変位変数 `dispname` を持つスレーブ接触境界を "
"`transname`という既存の投影補間変換に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_slave_contact_boundary_to_raytracing_transformation:1
msgid ""
"Add a slave contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing raytracing "
"interpolate transformation called `transname`."
msgstr ""
"特定の境界 `region` 上の対応するディスプレイスメント変数 `dispname` を持つスレーブコンタクト境界を、 `transname` "
"という既存のレイトレーシング補間変換に追加します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:1
msgid ""
"Synopsis: ind = Model.add_small_strain_elastoplasticity_brick(self, MeshIm "
"mim,  string lawname, string unknowns_type [, string varnames, ...] [, "
"string params, ...] [, string theta = '1' [, string dt = 'timestep']] [, int"
" region = -1])"
msgstr ""
"概要: ind = Model.add_small_strain_elastoplasticity_brick(self, MeshIm mim, "
"string lawname, string unknowns_type [, string varnames, ...] [, string "
"params, ...] [, string theta = '1' [, string dt = 'timestep']] [, int region"
" = -1])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:3
msgid ""
"Adds a small strain plasticity term to the model `M`. This is the main "
"GetFEM++ brick for small strain plasticity. `lawname` is the name of an "
"implemented plastic law, `unknowns_type` indicates the choice between a "
"discretization where the plastic multiplier is an unknown of the problem or "
"(return mapping approach) just a data of the model stored for the next "
"iteration. Remember that in both cases, a multiplier is stored anyway. "
"`varnames` is a set of variable and data names with length which may depend "
"on the plastic law (at least the displacement, the plastic multiplier and "
"the plastic strain). `params` is a list of expressions for the parameters "
"(at least elastic coefficients and the yield stress). These expressions can "
"be some data names (or even variable names) of the model but can also be any"
" scalar valid expression of the high level assembly language (such as '1/2',"
" '2+sin(X[0])', '1+Norm(v)' ...). The last two parameters optionally "
"provided in `params` are the `theta` parameter of the `theta`-scheme "
"(generalized trapezoidal rule) used for the plastic strain integration and "
"the time-step`dt`. The default value for `theta` if omitted is 1, which "
"corresponds to the classical Backward Euler scheme which is first order "
"consistent. `theta=1/2` corresponds to the Crank-Nicolson scheme "
"(trapezoidal rule) which is second order consistent. Any value between 1/2 "
"and 1 should be a valid value. The default value of `dt` is 'timestep' which"
" simply indicates the time step defined in the model (by "
"md.set_time_step(dt)). Alternatively it can be any expression (data name, "
"constant value ...). The time step can be altered from one iteration to the "
"next one. `region` is a mesh region."
msgstr ""
"モデル `M` に微小歪み塑性項を追加します。これは、微小ひずみ塑性の主要なGetFEM++ブリックです。 `lawname` "
"は実行された塑性法則の名前であり、 `unknowns_type` "
"は、塑性乗数が問題の未知である場合の離散化、または(リターンマッピング法)が次の反復のために格納されるモデルのデータのみの選択を示します。どちらの場合も、乗数は格納されます。`varnames`は、プラスチック則に依存する長さの変数名とデータ名の集合である(少なくとも変位、塑性乗数、塑性歪み)。paramsはパラメータの式のリストです(少なくとも弾性係数と降伏応力)。これらの式には、モデルのデータ名(または変数名)を使用できますが、高水準アセンブリ言語(例えば"
" '1/2'、 '2+sin(X[0])'、 '1+Norm(v)' "
"...)の有効なスカラー式を使用することもできます。パラメータにオプションとして与えられる最後の二つのパラメータは、塑性歪み積分に使用されるスキーム(一般化台形則)のパラメータである"
" `theta` と時間ステップ `dt` です。省略された場合の `theta` "
"のデフォルト値は1であり、これは1次一貫性のある古典的な後方Euler法に対応します。 `theta=1/2` は二次一貫性のあるCrank-"
"Nicolson法(台形則)に対応します。1/2から1の間の値は有効な値である必要があります。 `dt` のデフォルト値は 'timestep' "
"であり、これは単に(md.set_time_step(dt) "
"により)モデルで定義された時間ステップです。または、任意の式(データ名、定数値...)を使用できます。時間ステップは、1つの反復から次の反復に変更できます。"
" `region` はメッシュ領域です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:29
msgid "The available plasticity laws are:"
msgstr "使用可能な塑性則は次のとおりです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:31
msgid ""
"'Prandtl Reuss' (or 'isotropic perfect plasticity'). Isotropic elasto-"
"plasticity with no hardening. The variables are the displacement, the "
"plastic multiplier and the plastic strain. The displacement should be a "
"variable and have a corresponding data having the same name preceded by "
"'Previous\\_' corresponding to the displacement at the previous time step "
"(typically 'u' and 'Previous_u'). The plastic multiplier should also have "
"two versions (typically 'xi' and 'Previous_xi') the first one being defined "
"as data if `unknowns_type ` is 'DISPLACEMENT_ONLY' or the integer value 0, "
"or as a variable if `unknowns_type` is DISPLACEMENT_AND_PLASTIC_MULTIPLIER "
"or the integer value 1. The plastic strain should represent a n x n data "
"tensor field stored on mesh_fem or (preferably) on an im_data (corresponding"
" to `mim`). The data are the first Lame coefficient, the second one (shear "
"modulus) and the uniaxial yield stress. A typical call is "
"Model.add_small_strain_elastoplasticity_brick(mim, 'Prandtl Reuss', 0, 'u', "
"'xi', 'Previous_Ep', 'lambda', 'mu', 'sigma_y', '1', 'timestep'); IMPORTANT:"
" Note that this law implements the 3D expressions. If it is used in 2D, the "
"expressions are just transposed to the 2D. For the plane strain "
"approximation, see below."
msgstr ""
"'Prandtl Reuss' (または 'isotropic perfect plasticity' "
")。硬化のない等方性弾塑性。変数は変位、塑性乗数、塑性歪みです。変位は変数であり、前の時間ステップでの変位(通常は 'u' と 'Previous_u'"
" )に対応する 'Previous\\_' が先頭に付いた同じ名前の対応するデータを持つ必要があります。塑性乗数には、2つのバージョン(通常は 'xi'"
" と 'Previous_xi' )が必要です。最初のバージョンは、 `unknowns_type ` が 'DISPLACEMENT_ONLY' "
"または整数値0の場合はデータとして、 `unknowns_type` "
"がDISPLACEMENT_AND_PLASTIC_MULTIPLIERまたは整数値1の場合は変数として定義されます。塑性歪みは、mesh_femまたは(好ましくは)("
" `mim` に対応する)im_dataに保存されている n x n "
"データテンソルフィールドの形である必要があります。データは、最初のLame係数、次の係数(せん断弾性率)、および一軸降伏応力です。典型的な呼び出し方法は"
" Model.add_small_strain_elastoplasticity_brick(mim, 'Prandtl Reuss', 0, 'u',"
" 'xi', 'Previous_Ep', 'lambda', 'mu', 'sigma_y', '1', 'timestep'); "
"です。重要:この法則は3次元表現を実装することに注意してください。2次元で使用する場合、式は2次元に単純に転置されます。平面歪み近似については、以下を参照してください。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:50
msgid ""
"\"plane strain Prandtl Reuss\" (or \"plane strain isotropic perfect "
"plasticity\") The same law as the previous one but adapted to the plane "
"strain approximation. Can only be used in 2D."
msgstr ""
"\"平面ひずみPrandtl Reuss\" (または "
"\"平面ひずみ等方性完全塑性\")前述の法則と同じですが、平面ひずみ近似に適用されます。2次元でのみ使用できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:54
msgid ""
"\"Prandtl Reuss linear hardening\" (or \"isotropic plasticity linear "
"hardening\"). Isotropic elasto-plasticity with linear isotropic and "
"kinematic hardening. An additional variable compared to \"Prandtl Reuss\" "
"law: the accumulated plastic strain. Similarly to the plastic strain, it is "
"only stored at the end of the time step, so a simple data is required "
"(preferably on an im_data). Two additional parameters: the kinematic "
"hardening modulus and the isotropic one. 3D expressions only. A typical call"
" is Model.add_small_strain_elastoplasticity_brick(mim, 'Prandtl Reuss linear"
" hardening', 0, 'u', 'xi', 'Previous_Ep', 'Previous_alpha', 'lambda', 'mu', "
"'sigma_y', 'H_k', H_i', '1', 'timestep');"
msgstr ""
"\"Prandtl Reuss 線形硬化\" (または \"等方性塑性線硬化\")。線形等方性および運動硬化を伴う等方性弾塑性。 \"Prandtl "
"Reuss\" 法と比較される追加の変数、累積塑性歪み。塑性歪みと同様に、時間ステップの終了時にのみ保存されるため、単純なデータが必要です(好ましくは、"
" im_data)。2つの追加パラメータ: 運動学的硬化係数および等方性。3次元表現のみ。典型的な呼び出しは "
"Model.add_small_strain_elastoplasticity_brick(mim, 'Prandtl Reuss linear "
"hardening', 0, 'u', 'xi', 'Previous_Ep', 'Previous_alpha', 'lambda', 'mu', "
"'sigma_y', 'H_k', H_i', '1', 'timestep'); です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:64
msgid ""
"\"plane strain Prandtl Reuss linear hardening\" (or \"plane strain isotropic"
" plasticity linear hardening\"). The same law as the previous one but "
"adapted to the plane strain approximation. Can only be used in 2D."
msgstr ""
"\"平面ひずみPrandtl Reuss線形硬化\" (または "
"\"平面ひずみ等方性塑性線形硬化\")。前の法則と同じですが、平面ひずみ近似に適合しています。2次元でのみ使用できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:69
msgid ""
"See GetFEM++ user documentation for further explanations on the "
"discretization of the plastic flow and on the implemented plastic laws. See "
"also GetFEM++ user documentation on time integration strategy (integration "
"of transient problems)."
msgstr ""
"塑性流動の離散化および実装された塑性則の詳細についてはGetFEM++ユーザーマニュアルを参照してください。時間の積分法に関するGetFEM++ユーザーマニュアル(過渡問題の積分)も参照してください。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_small_strain_elastoplasticity_brick:74
msgid ""
"IMPORTANT : remember that `small_strain_elastoplasticity_next_iter` has to "
"be called at the end of each time step, before the next one (and before any "
"post-treatment : this sets the value of the plastic strain and plastic "
"multiplier)."
msgstr ""
"重要: `small_strain_elastoplasticity_next_iter` "
"は各時間ステップの終了時、次の時間ステップの前(と後処理の前: 塑性歪みおよび塑性乗数の値を設定します)に呼び出す必要があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_source_term:1
msgid ""
"Adds a source term given by the assembly string `expr` which will be "
"assembled in region `region` and with the integration method `mim`. Only the"
" residual term will be taken into account. Take care that if the expression "
"contains some variables and if the expression is a potential, the expression"
" will be derivated with respect to all variables. `brickname` is an optional"
" name for the brick."
msgstr ""
"アセンブリ文字列 `expr` で指定されたソースタームを追加します。これは、領域  `region` で積分法 `mim` "
"を使用してアセンブルされます。残差項のみが考慮されます。式にいくつかの変数が含まれていて、式がポテンシャルである場合、式はすべての変数に関して微分されることに注意してください。"
" `brickname` はブリックのオプション名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_source_term_brick:1
msgid ""
"Synopsis: ind = Model.add_source_term_brick(self, MeshIm mim, string "
"varname, string dataexpr[, int region[, string directdataname]])"
msgstr ""
"概要: ind = Model.add_source_term_brick(self, MeshIm mim, string varname, "
"string dataexpr[, int region[, string directdataname]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_source_term_brick:3
msgid ""
"Add a source term to the model relatively to the variable `varname`. The "
"source term is represented by `dataexpr` which could be any regular "
"expression of the high-level generic assembly language (except for the "
"complex version where it has to be a declared data of the model). `region` "
"is an optional mesh region on which the term is added. An additional "
"optional data `directdataname` can be provided. The corresponding data "
"vector will be directly added to the right hand side without assembly. Note "
"that when region is a boundary, this brick allows to prescribe a nonzero "
"Neumann boundary condition. Return the brick index in the model."
msgstr ""
"モデルに変数 `varname` に比例したソース項を追加します。ソース項は `dataexpr` "
"で表現します。これは高水準汎用アセンブリ言語の任意の正規表現です（ただし複素数モデルの場合は、宣言されたデータでなければりません）。`region`はオプションで項を追加するメッシュ領域です。追加のオプションデータ"
" `directdataname` "
"を設定することもできます。対応するデータベクトルは、アセンブリなしで右側に直接追加されます。regionが境界である場合、このブリックでNeumann境界条件を設定することができます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_source_term_generic_assembly_brick:1
msgid "Deprecated. Use Model.add_source_term() instead."
msgstr "廃止予定です。 Model.add_source_term() を代わりに使用してください。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_standard_secondary_domain:1
msgid ""
"Add a secondary domain to the model which can be used in a weak-form "
"language expression for integration on the product of two domains. `name` is"
" the name of the secondary domain, `mim` is an integration method on this "
"domain and `region` the region on which the integration is to be performed."
msgstr ""
"2つのドメインの積を統合するために、弱形式言語の表現で使用できるセカンダリドメインをモデルに追加します。 `name` "
"はセカンダリドメインの名前であり、 `mim` はこのドメイン上の積分法であり、 `region` は積分が実行される領域です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_theta_method_for_first_order:1
msgid ""
"Attach a theta method for the time discretization of the variable `varname`."
" Valid only if there is at most first order time derivative of the variable."
msgstr "変数 `varname` の時間離散化にtheta法を適用します。変数の最大でも1次の時間導関数が存在する場合にのみ有効です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_twodomain_source_term:1
msgid ""
"Adds a source term given by a weak form language expression like "
"Model.add_source_term() but for an integration on a direct product of two "
"domains, a first specfied by ``mim`` and ``region`` and a second one by "
"``secondary_domain`` which has to be declared first into the model."
msgstr ""
" Model.add_source_term() "
"などのように弱形式言語表現で指定されたソース項を追加する場合があります。一方、2つのドメインの直積での積分の場合には、最初に ``mim`` "
"と``region`` によって指定されたものと ``secondary_domain`` "
"によって指定されたものがあり、後者は最初にモデルに宣言されなければなりません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.add_variable:1
msgid ""
"Add a variable to the model of constant sizes. `sizes` is either a integer "
"(for a scalar or vector variable) or a vector of dimensions for a tensor "
"variable. `name` is the variable name."
msgstr ""
"一定サイズのモデルに変数を追加します。 `sizes` は整数(スカラー変数またはベクトル変数の場合)かテンソル変数の次元のベクトルです。 `name`"
" は変数名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.assembly:1
msgid ""
"Assembly of the tangent system taking into account the terms from all "
"bricks. `option`, if specified, should be 'build_all', 'build_rhs', "
"'build_matrix'. The default is to build the whole tangent linear system "
"(matrix and rhs). This function is useful to solve your problem with you own"
" solver."
msgstr ""
"すべてのブリックの項を考慮した接線システムのアセンブリです。 `option` を指定する場合、 'build_all' 、 'build_rhs' 、"
" 'build_matrix' "
"とする必要があります。デフォルトでは、接線線形システム全体(行列とrhs)が構築されます。この関数は、独自のソルバを使用して求解する場合に便利です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.brick_list:1
msgid "print to the output the list of bricks of the model."
msgstr "モデルのレンガのリストを出力に出力します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.brick_term_rhs:1
msgid ""
"Gives the access to the part of the right hand side of a term of a "
"particular nonlinear brick. Does not account of the eventual time "
"dispatcher. An assembly of the rhs has to be done first. `ind_brick` is the "
"brick index. `ind_term` is the index of the term inside the brick (default "
"value : 0). `sym` is to access to the second right hand side of for "
"symmetric terms acting on two different variables (default is 0). `ind_iter`"
" is the iteration number when time dispatchers are used (default is 0)."
msgstr ""
"特定の非線形ブリックの項の右側部分にアクセスします。最終的な時間ディスパッチャを考慮しません。まず、右辺のアセンブリを行う必要があります。 "
"`ind_brick` はブリックインデックスです。 `ind_term` はブリック内部の項のインデックスです(デフォルト値は0)。 `sym` "
"は2つの異なる変数に作用する対称項のためにの右辺の2番目にアクセスすることです(デフォルトは0です)。 `ind_iter` "
"は時間ディスパッチャを使用した場合の反復番号です(デフォルトは0です)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.change_penalization_coeff:1
msgid ""
"Change the penalization coefficient of a Dirichlet condition with "
"penalization brick. If the brick is not of this kind, this function has an "
"undefined behavior."
msgstr ""
"penalizationブリックを使用してDirichlet条件のpenalization係数を変更します。ブリックがこの種類でない場合、この関数の動作は定義されていません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.char:1
msgid "Output a (unique) string representation of the Model."
msgstr "Modelの(ユニークな)文字列表現を出力します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.char:3
msgid ""
"This can be used to perform comparisons between two different Model objects."
" This function is to be completed."
msgstr "これを使用して、2つの異なるModelオブジェクト間の比較を実行できます。この機能は完成予定です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.clear:1
msgid "Clear the model."
msgstr "モデルをクリアします。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.clear_assembly_assignment:1
msgid "Delete all added assembly assignments"
msgstr "追加されたアセンブリの割り当てをすべて削除します"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_Von_Mises_or_Tresca:1
msgid ""
"Compute on `mf_vm` the Von-Mises stress or the Tresca stress of a field for "
"nonlinear elasticity in 3D. `lawname` is the constitutive law which could be"
" 'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean' or 'Ciarlet "
"Geymonat'. `dataname` is a vector of parameters for the constitutive law. "
"Its length depends on the law. It could be a short vector of constant values"
" or a vector field described on a finite element method for variable "
"coefficients. `version` should be  'Von_Mises' or 'Tresca' ('Von_Mises' is "
"the default)."
msgstr ""
"3次元の非線形弾性のフィールドのVon-Mises応力またはTresca応力を `mf_vm` で計算します。 `lawname` は構成則で、 "
"'SaintVenant Kirchhoff' 、 'Mooney Rivlin' 、 'neo Hookean' 、 'Ciarlet "
"Geymonat' だ。 `dataname` "
"は構成則のパラメータのベクトルです。長さは法則によります。これは、定数値の短いベクトル、または可変係数の有限要素法で記述されたベクトルフィールドです。 "
"`version` は 'Von_Mises' または 'Tresca' のいずれかです( 'Von_Mises' がデフォルトです)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_elastoplasticity_Von_Mises_or_Tresca:1
msgid ""
"Compute on `mf_vm` the Von-Mises or the Tresca stress of a field for "
"plasticity and return it into the vector V. `datasigma` is a vector which "
"contains the stress constraints values supported by the mesh. `version` "
"should be  'Von_Mises' or 'Tresca' ('Von_Mises' is the default)."
msgstr ""
"塑性の場のVon-Mises応力またはTresca応力を `mf_vm` で計算し、ベクトルVに戻します。 `datasigma` "
"はメッシュによってサポートされる応力制約値を含むベクトルです。 `version` は 'Von_Mises' または 'Tresca' "
"('Von_Mises' がデフォルト)でなければなりません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_finite_strain_elasticity_Von_Mises:1
msgid ""
"Compute on `mf_vm` the Von-Mises stress of a field `varname` for nonlinear "
"elasticity in 3D. `lawname` is the constitutive law which should be a valid "
"name. `params` are the parameters law. It could be a short vector of "
"constant values or may depend on data or variables of the model. Uses the "
"high-level generic assembly."
msgstr ""
"3次元の非線形弾性のフィールド `varname` のVon-Mises応力を `mf_vm` で計算します。`lawname` "
"は構成則であり、有効な名前である必要があります。 `params` "
"はパラメータ則です。定数値の短いベクトルにすることも、モデルのデータや変数に依存することもできます。高水準汎用アセンブリを使用します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_finite_strain_elastoplasticity_Von_Mises:1
msgid ""
"Synopsis: V = Model.compute_finite_strain_elastoplasticity_Von_Mises(self, "
"MeshIm mim, MeshFem mf_vm, string lawname, string unknowns_type, [, string "
"varnames, ...] [, string params, ...] [, int region = -1])"
msgstr ""
"概要: V = Model.compute_finite_strain_elastoplasticity_Von_Mises(self, MeshIm "
"mim, MeshFem mf_vm, string lawname, string unknowns_type, [, string "
"varnames, ...] [, string params, ...] [, int region = -1])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_finite_strain_elastoplasticity_Von_Mises:3
msgid ""
"Compute on `mf_vm` the Von-Mises or the Tresca stress of a field for "
"plasticity and return it into the vector V. The first input parameters ar as"
" in the function 'finite strain elastoplasticity next iter'."
msgstr ""
"塑性場のVon-MisesまたはTresca応力を `mf_vm` で計算し、ベクトルVに返します。最初の入力パラメータは関数 'finite "
"strain elastoplasticity next iter' と同様です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_isotropic_linearized_Von_Mises_or_Tresca:1
msgid ""
"Compute the Von-Mises stress or the Tresca stress of a field (only valid for"
" isotropic linearized elasticity in 3D). `version` should be  'Von_Mises' or"
" 'Tresca' ('Von_Mises' is the default). Parametrized by Lame coefficients."
msgstr ""
"Von-Mises 応力またはフィールドのTresca応力(3次元の等方性線形化弾性にのみ有効)を計算します。 `version` は "
"'Von_Mises' または 'Tresca' ( 'Von_Mises' "
"がデフォルト)でなければなりません。Lame係数によってパラメータ化されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_isotropic_linearized_Von_Mises_pstrain:1
msgid ""
"Compute the Von-Mises stress  of a displacement field for isotropic "
"linearized elasticity in 3D or in 2D with plane strain assumption. "
"Parametrized by Young modulus and Poisson ratio."
msgstr ""
"平面ひずみを仮定した3次元または2次元における等方性線形化弾性の変位場のVon-"
"Mises応力を計算します。Young率とPoisson比によってパラメータ化されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_isotropic_linearized_Von_Mises_pstress:1
msgid ""
"Compute the Von-Mises stress  of a displacement field for isotropic "
"linearized elasticity in 3D or in 2D with plane stress assumption. "
"Parametrized by Young modulus and Poisson ratio."
msgstr ""
"平面応力を仮定した3次元または2次元における等方性線形化弾性の変位場のVon-"
"Mises応力を計算します。Young率とPoisson比によってパラメータ化されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_plastic_part:1
msgid ""
"Compute on `mf_pl` the plastic part and return it into the vector V. "
"`datasigma` is a vector which contains the stress constraints values "
"supported by the mesh."
msgstr ""
"プラスチック成形品を `mf_pl` で計算し、ベクトルVに返します。 `datasigma` はメッシュでサポートされる応力拘束値を含むベクトルです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.compute_second_Piola_Kirchhoff_tensor:1
msgid ""
"Compute on `mf_sigma` the second Piola Kirchhoff stress tensor of a field "
"for nonlinear elasticity in 3D. `lawname` is the constitutive law which "
"could be 'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean' or 'Ciarlet"
" Geymonat'. `dataname` is a vector of parameters for the constitutive law. "
"Its length depends on the law. It could be a short vector of constant values"
" or a vector field described on a finite element method for variable "
"coefficients."
msgstr ""
"3次元非線形弾性の場の第2Piola Kirchhoff応力テンソルのmf_sigmaを計算します。 `lawname` は構成則で "
"'SaintVenant Kirchhoff' 、 'Mooney Rivlin' 、 'neo Hookean' 、あるいは 'Ciarlet "
"Geymonat'となります。 `dataname` "
"は構成則のパラメータのベクトルです。長さは法則によります。これは、定数値の短いベクトル、または可変係数の有限要素法で記述されたベクトルフィールドです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.contact_brick_set_BN:1
msgid "Can be used to set the BN matrix of a basic contact/friction brick."
msgstr "基本的な接触/摩擦ブリックのBNマトリックスの設定に使用できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.contact_brick_set_BT:1
msgid ""
"Can be used to set the BT matrix of a basic contact with friction brick."
msgstr "摩擦ブリックとの基本接触のBTマトリックスの設定に使用できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.define_variable_group:1
msgid ""
"Synopsis: Model.define_variable_group(self, string name[, string varname, "
"...])"
msgstr ""
"概要: Model.define_variable_group(self, string name[, string varname, ...])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.define_variable_group:3
msgid ""
"Defines a group of variables for the interpolation (mainly for the "
"raytracing interpolation transformation."
msgstr "補間 (主にレイトレーシング補間変換の変数のグループを定義します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.del_macro:1
msgid ""
"Delete a previously defined macro for the high generic assembly language."
msgstr "汎用アセンブリ言語用に定義済みのマクロを削除します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.delete_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.delete_variable:1
msgid "Delete a variable or a data from the model."
msgstr "モデルから変数またはデータを削除します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.disable_bricks:1
msgid ""
"Disable a brick (the brick will no longer participate to the building of the"
" tangent linear system)."
msgstr "ブリックを無効にします(ブリックは接線線形システムの構築に関与しなくなります)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.disable_variable:1
msgid ""
"Disable a variable for a solve (and its attached multipliers). The next "
"solve will operate only on the remaining variables. This allows to solve "
"separately different parts of a model. If there is a strong coupling of the "
"variables, a fixed point strategy can the be used."
msgstr ""
"求解のため変数(とその添付乗数)を使用不可にします。次の求解は、残りの変数に対してのみ実行されます。これにより、モデルの異なる部分を別々に求解できます。変数の強連成がある場合は、固定小数点方式を使用できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.displacement_group_name_of_Nitsche_large_sliding_contact_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.displacement_group_name_of_large_sliding_contact_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.sliding_data_group_name_of_Nitsche_large_sliding_contact_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.sliding_data_group_name_of_large_sliding_contact_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of
#: getfem.Model.transformation_name_of_Nitsche_large_sliding_contact_brick:1
#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.transformation_name_of_large_sliding_contact_brick:1
msgid ""
"Gives the name of the group of variables corresponding to the sliding data "
"for an existing large sliding contact brick."
msgstr "既存の大きな滑り接触ブリックの滑りデータに対応する変数のグループの名前を指定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.display:1
msgid "displays a short summary for a Model object."
msgstr "Modelオブジェクトの概要が表示されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.elastoplasticity_next_iter:1
msgid ""
"Used with the old (obsolete) elastoplasticity brick to pass from an "
"iteration to the next one. Compute and save the stress constraints sigma for"
" the next iterations. 'mim' is the integration method to use for the "
"computation. 'varname' is the main variable of the problem. "
"'previous_dep_name' represents the displacement at the previous time step. "
"'projname' is the type of projection to use. For the moment it could only be"
" 'Von Mises' or 'VM'. 'datalambda' and 'datamu' are the Lame coefficients of"
" the material. 'datasigma' is a vector which will contain the new stress "
"constraints values."
msgstr ""
"古い(廃止された)弾塑性ブリックとともに使用して、イテレーションから次のイテレーションに渡します。次のイテレーションの応力拘束sigmaを計算して保存します。"
" 'mim' は、計算に使用する積分法です。 'varname' がこの問題の主要な変数です。 'previous_dep_name' "
"は前の時間ステップでの変位を表します。 'projname' は使用する投影のタイプです。現時点では 'Von Mises' または 'VM' "
"でなければなりません。 'datalambda' および 'datamu' は、材料のLame係数です。 'datasigma' "
"は新しい応力拘束値を格納するベクトルです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.enable_bricks:1
msgid "Enable a disabled brick."
msgstr "無効なブリックを有効にします。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.enable_variable:1
msgid "Enable a disabled variable (and its attached multipliers)."
msgstr "使用不可の変数を使用可能にします(付属の乗数)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.finite_strain_elastoplasticity_next_iter:1
msgid ""
"Synopsis: Model.finite_strain_elastoplasticity_next_iter(self, MeshIm mim, "
"string lawname, string unknowns_type, [, string varnames, ...] [, string "
"params, ...] [, int region = -1])"
msgstr ""
"概要: Model.finite_strain_elastoplasticity_next_iter(self, MeshIm mim, string "
"lawname, string unknowns_type, [, string varnames, ...] [, string params, "
"...] [, int region = -1])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.finite_strain_elastoplasticity_next_iter:3
msgid ""
"Function that allows to pass from a time step to another for the finite "
"strain plastic brick. The parameters have to be exactly the same than the "
"one of `add_finite_strain_elastoplasticity_brick`, so see the documentation "
"of this function for the explanations. Basically, this brick computes the "
"plastic strain and the plastic multiplier and stores them for the next step."
" For the Simo-Miehe law which is currently the only one implemented, this "
"function updates the state variables defined in the last two entries of "
"`varnames`, and resets the plastic multiplier field given as the second "
"entry of `varnames`."
msgstr ""
"有限ひずみ塑性ブリックの時間ステップから別のステップへの移行を可能にする関数です。パラメータは、 "
"`add_finite_strain_elastoplasticity_brick` "
"とまったく同じでなければなりません。説明については、この関数のドキュメントを参照してください。基本的に、このブリックは塑性歪みと塑性乗数を計算し、次のステップのために保存します"
"。現在実装されている唯一のSimo-Mieheの法則に対して、この関数は `varnames` の最後の2つのエントリで定義されている状態変数を更新し、"
"  `varnames` の2番目のエントリとして与えられる塑性乗数フィールドをリセットします。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.first_iter:1
msgid ""
"To be executed before the first iteration of a time integration scheme."
msgstr "時間積分スキームの最初の反復の前に実行します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.from_variables:1
msgid ""
"Return the vector of all the degrees of freedom of the model consisting of "
"the concatenation of the variables of the model (useful to solve your "
"problem with you own solver)."
msgstr "モデルの変数を連結したモデルのすべての自由度(独自のソルバを使用して求解するのに便利)のベクトルを返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.get_time:1
msgid "Give the value of the data `t` corresponding to the current time."
msgstr "現在時刻に対応するデータ `t` の値を指定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.get_time_step:1
msgid "Gives the value of the time step."
msgstr "タイムステップの値を指定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.interpolation:1
msgid ""
"Synopsis: V = Model.interpolation(self, string expr, {MeshFem mf | MeshImd "
"mimd | vec pts,  Mesh m}[, int region[, int extrapolation[, int "
"rg_source]]])"
msgstr ""
"概要: V = Model.interpolation(self, string expr, {MeshFem mf | MeshImd mimd | "
"vec pts, Mesh m}[, int region[, int extrapolation[, int rg_source]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.interpolation:3
msgid ""
"Interpolate a certain expression with respect to the mesh_fem `mf` or the "
"mesh_im_data `mimd` or the set of points `pts` on mesh `m`. The expression "
"has to be valid according to the high-level generic assembly language "
"possibly including references to the variables and data of the model."
msgstr ""
"mesh_fem `mf` または mesh_im_data `mimd` またはメッシュ `m` 上の点の集合 `pts` "
"を基準にして特定の式を補間します。式は、モデルの変数とデータへの参照を含む可能性があります、高水準汎用アセンブリ言語に従って有効である必要があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.interpolation:9
msgid ""
"The options `extrapolation` and `rg_source` are specific to interpolations "
"with respect to a set of points `pts`."
msgstr "オプション `外挿` と `rg_source` は、点 `pts` の集合に関する補間のためのものです。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.interval_of_variable:1
msgid ""
"Gives the interval of the variable `varname` in the linear system of the "
"model."
msgstr "モデルの線形システムの変数 `varname` の間隔を指定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.is_complex:1
msgid "Return 0 is the model is real, 1 if it is complex."
msgstr "モデルが実数の場合は0を返し、複素数の場合は1を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.list_residuals:1
msgid ""
"print to the output the residuals corresponding to all terms included in the"
" model."
msgstr "モデルに含まれるすべての項に対応する残差を出力します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.local_projection:1
msgid ""
"Make an elementwise L2 projection of an expression with respect to the "
"mesh_fem `mf`. This mesh_fem has to be a discontinuous one. The expression "
"has to be valid according to the high-level generic assembly language "
"possibly including references to the variables and data of the model."
msgstr ""
"mesh_fem `mf` "
"を基準にして、式の要素ごとのL2投影を作成します。このmesh_femは不連続である必要があります。式は、モデルの変数とデータへの参照を含む可能性があります、上位レベルの汎用アセンブリ言語に従い有効である必要があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.matrix_term:1
msgid "Gives the matrix term ind_term of the brick ind_brick if it exists"
msgstr "存在する場合、ブリック ind_brick のマトリックス項 ind_term を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.memsize:1
msgid ""
"Return a rough approximation of the amount of memory (in bytes) used by the "
"model."
msgstr "モデルが使用するメモリ量(バイト単位)の概算値を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.mesh_fem_of_variable:1
msgid "Gives access to the `mesh_fem` of a variable or data."
msgstr "変数またはデータの `mesh_fem` へのアクセスを許可します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.mult_varname_Dirichlet:1
msgid ""
"Gives the name of the multiplier variable for a Dirichlet brick. If the "
"brick is not a Dirichlet condition with multiplier brick, this function has "
"an undefined behavior"
msgstr ""
"Dirichletブリックの乗数変数の名前を指定します。ブリックが乗数ブリックを持つDirichlet条件ではない場合、この関数の動作は未定義です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.nbdof:1
msgid "Return the total number of degrees of freedom of the model."
msgstr "モデルの自由度の総数を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.next_iter:1
msgid ""
"To be executed at the end of each iteration of a time integration scheme."
msgstr "時間積分スキームの各反復の終了時に実行されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.perform_init_time_derivative:1
msgid ""
"By calling this function, indicates that the next solve will compute the "
"solution for a (very) small time step `ddt` in order to initalize the data "
"corresponding to the derivatives needed by time integration schemes (mainly "
"the initial time derivative for order one in time problems  and the second "
"order time derivative for second order in time problems). The next solve "
"will not change the value of the variables."
msgstr ""
"この関数を呼び出すことにより、時間積分スキームによって必要とされる導関数に対応するデータを初期化するためには、次の求解が(非常に)小さな時間ステップ "
"`ddt` (主に時間問題では1次の初期時間微分、時間問題では2次の2次時間微分)の解を計算することを示します。次の求解では、変数の値は変更されません。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.resize_variable:1
msgid ""
"Resize a  constant size variable of the model.  `sizes` is either a integer "
"(for a scalar or vector variable) or a vector of dimensions for a tensor "
"variable. `name` is the variable name."
msgstr ""
"モデルの一定サイズ変数のサイズを変更します。 `sizes` は(スカラー変数またはベクトル変数の場合)整数かテンソル変数の次元のベクトルです。 "
"`name` は変数名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.rhs:1
msgid "Return the right hand side of the tangent problem."
msgstr "接線問題の右辺を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.set_element_extrapolation_correspondence:1
msgid ""
"Change the correspondence map of an element extrapolation interpolate "
"transformation."
msgstr "要素外挿補間変換の対応マップを変更します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.set_private_matrix:1
msgid ""
"For some specific bricks having an internal sparse matrix (explicit bricks: "
"'constraint brick' and 'explicit matrix brick'), set this matrix."
msgstr "内部に疎行列がある特定のブリック(陽なレンガ: '拘束ブリック' と '陽な行列ブリック' )では、この行列を設定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.set_private_rhs:1
msgid ""
"For some specific bricks having an internal right hand side vector (explicit"
" bricks: 'constraint brick' and 'explicit rhs brick'), set this rhs."
msgstr "内部右辺ベクトル(陽なブリック: '拘束ブリック' と '陽なブリック')を持つ特定のレンガでは、このrhsを設定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.set_time:1
msgid ""
"Set the value of the data `t` corresponding to the current time to `t`."
msgstr "現在時刻 `t` に対応するデータの値を `t` に設定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.set_time_step:1
msgid ""
"Set the value of the time step to `dt`. This value can be change from a step"
" to another for all one-step schemes (i.e for the moment to all proposed "
"time integration schemes)."
msgstr ""
"時間ステップの値を `dt` "
"に設定します。この値は、すべてのワンステップスキームでステップから別のステップに変更できます(すなわち現時点では、提案されているすべての時間積分法)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.set_variable:1
msgid "Set the value of a variable or data. `name` is the data name."
msgstr "変数またはデータの値を設定します。 `name` はデータ名です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.shift_variables_for_time_integration:1
msgid ""
"Function used to shift the variables of a model to the data corresponding of"
" ther value on the previous time step for time integration schemes. For each"
" variable for which a time integration scheme has been declared, the scheme "
"is called to perform the shift. This function has to be called between two "
"time steps."
msgstr ""
"モデルの変数を、時間積分スキームの前の時間ステップの他の値に対応するデータにシフトするために使用される関数です。時間積分スキームが宣言されている変数ごとに、スキームが呼び出されてシフトが実行されます。この関数は、2つのタイムステップの間に呼び出す必要があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.small_strain_elastoplasticity_Von_Mises:1
msgid ""
"Synopsis: V = Model.small_strain_elastoplasticity_Von_Mises(self, MeshIm "
"mim, MeshFem mf_vm, string lawname, string unknowns_type [, string varnames,"
" ...] [, string params, ...] [, string theta = '1' [, string dt = "
"'timestep']] [, int region])"
msgstr ""
"概要: V = Model.small_strain_elastoplasticity_Von_Mises(self, MeshIm mim, "
"MeshFem mf_vm, string lawname, string unknowns_type [, string varnames, ...]"
" [, string params, ...] [, string theta = '1' [, string dt = 'timestep']] [,"
" int region])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.small_strain_elastoplasticity_Von_Mises:3
msgid ""
"This function computes the Von Mises stress field with respect to a small "
"strain elastoplasticity term, approximated on `mf_vm`, and stores the result"
" into `VM`.  All other parameters have to be exactly the same as for "
"`add_small_strain_elastoplasticity_brick`. Remember that "
"`small_strain_elastoplasticity_next_iter` has to be called before any call "
"of this function."
msgstr ""
"この関数は、 `mf_vm` で近似された小さな歪みの弾塑性項に関するフォンミーゼス応力場を計算し、その結果を `VM` "
"に格納します。その他のパラメータはすべて、 `add_small_strain_elastoplasticity_brick` "
"とまったく同じでなければなりません。この関数を呼び出す前に、 `small_strain_elastoplasticity_next_iter` "
"を呼び出す必要があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.small_strain_elastoplasticity_next_iter:1
msgid ""
"Synopsis: Model.small_strain_elastoplasticity_next_iter(self, MeshIm mim,  "
"string lawname, string unknowns_type [, string varnames, ...] [, string "
"params, ...] [, string theta = '1' [, string dt = 'timestep']] [, int region"
" = -1])"
msgstr ""
"概要: Model.small_strain_elastoplasticity_next_iter(self, MeshIm mim, string "
"lawname, string unknowns_type [, string varnames, ...] [, string params, "
"...] [, string theta = '1' [, string dt = 'timestep']] [, int region = -1])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.small_strain_elastoplasticity_next_iter:3
msgid ""
"Function that allows to pass from a time step to another for the small "
"strain plastic brick. The parameters have to be exactly the same than the "
"one of `add_small_strain_elastoplasticity_brick`, so see the documentation "
"of this function for the explanations. Basically, this brick computes the "
"plastic strain and the plastic multiplier and stores them for the next step."
" Additionaly, it copies the computed displacement to the data that stores "
"the displacement of the previous time step (typically 'u' to 'Previous_u'). "
"It has to be called before any use of "
"`compute_small_strain_elastoplasticity_Von_Mises`."
msgstr ""
"微小ひずみ塑性ブリックの時間ステップ間を通過できる関数。パラメータは、`add_small_strain_elastoplasticity_brick`"
" "
"とまったく同じでなければなりません。説明については、この関数のドキュメントを参照してください。基本的に、このブリックは塑性歪みと塑性乗数を計算し、次のステップのために保存します。さらに、計算されたディスプレイスメントが、前のタイムステップのディスプレイスメントを格納するデータにコピーされます(通常は"
" 'u' から 'Previous_u' )。これは、 "
"`compute_small_strain_elastoplasticity_Von_Mises` を使用する前に呼び出す必要があります。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:1
msgid "Synopsis: (nbit, converged) = Model.solve(self[, ...])"
msgstr "概要: (nbit, converged) = Model.solve(self[, ...])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:3
msgid "Run the standard getfem solver."
msgstr "標準のgetfemソルバーを実行します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:5
msgid ""
"Note that you should be able to use your own solver if you want (it is "
"possible to obtain the tangent matrix and its right hand side with the "
"Model.tangent_matrix() etc.)."
msgstr ""
"必要に応じて、独自のソルバを使用できるようにする必要があります( Model.tangent_matrix() "
"などで接線行列とその右辺を得ることができます)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:9
msgid "Various options can be specified:"
msgstr "さまざまなオプションを指定できます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:12
msgid "'noisy' or 'very_noisy'"
msgstr "'noisy' または 'very_noisy'"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:12
msgid ""
"the solver will display some information showing the progress (residual "
"values etc.)."
msgstr "ソルバが進行状況を示す情報が表示します(残差値など)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:14
msgid "'max_iter', int NIT"
msgstr "'max_iter', int NIT"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:15
msgid "set the maximum iterations numbers."
msgstr "最大反復回数を設定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:16
msgid "'max_res', @float RES"
msgstr "'max_res', @float RES"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:17
msgid "set the target residual value."
msgstr "目標残差値を設定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:19
msgid "'diverged_res', @float RES"
msgstr "'diverged_res', @float RES"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:19
msgid ""
"set the threshold value of the residual beyond which the iterative method is"
" considered to diverge (default is 1e200)."
msgstr "反復法が発散したと見なされる残差のしきい値を設定します(デフォルトは1e200です)。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:24
msgid "'lsolver', string SOLVER_NAME"
msgstr "'lsolver', string SOLVER_NAME"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:22
msgid ""
"select explicitely the solver used for the linear systems (the default value"
" is 'auto', which lets getfem choose itself). Possible values are 'superlu',"
" 'mumps' (if supported), 'cg/ildlt', 'gmres/ilu' and 'gmres/ilut'."
msgstr ""
"線形システム(デフォルト値は 'auto' で、getfemが自分で選択できるようになっています)に使用するソルバーを明示的に選択します。指定できる値は"
" 'superlu' 、(サポートされている場合) 'mumps' 、 'cg/ildlt' 、 'gmres/ilut' 、および "
"'gmres/ilut' です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:29
msgid "'lsearch', string LINE_SEARCH_NAME"
msgstr "'lsearch', string LINE_SEARCH_NAME"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:27
msgid ""
"select explicitely the line search method used for the linear systems (the "
"default value is 'default'). Possible values are 'simplest', 'systematic', "
"'quadratic' or 'basic'."
msgstr ""
"線形システムで使用される線検索方法を明示的に選択します(デフォルト値は 'default' です)。指定できる値は、 'simplest' 、 "
"'systematic' 、 'quadratic' 、または 'basic' です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:31
msgid "Return the number of iterations, if an iterative method is used."
msgstr "反復法が使用される場合、反復回数を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.solve:33
msgid ""
"Note that it is possible to disable some variables (see "
"Model.disable_variable() ) in order to solve the problem only with respect "
"to a subset of variables (the disabled variables are then considered as "
"data) for instance to replace the global Newton strategy with a fixed point "
"one."
msgstr ""
"変数のサブセット(無効にされた変数はデータとみなされます)に関してのみ問題を求解するために、いくつかの変数( "
"Model.disable_variable() "
"を参照してください)を無効にすることが可能であることに注意してください。例えば、全体Newton法を固定小数点法で置き換えることができます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.tangent_matrix:1
msgid "Return the tangent matrix stored in the model ."
msgstr "モデルに格納されている接線行列を返します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.test_tangent_matrix:1
msgid ""
"Synopsis: Model.test_tangent_matrix(self[, scalar EPS[, int NB[, scalar "
"scale]]])"
msgstr ""
"概要: Model.test_tangent_matrix(self[, scalar EPS[, int NB[, scalar scale]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.test_tangent_matrix:3
msgid ""
"Test the consistency of the tangent matrix in some random positions and "
"random directions (useful to test newly created bricks). `EPS` is the value "
"of the small parameter for the finite difference computation of the "
"derivative is the random direction (default is 1E-6). `NN` is the number of "
"tests (default is 100). `scale` is a parameter for the random position "
"(default is 1, 0 is an acceptable value) around the current position. Each "
"dof of the random position is chosen in the range [current-scale, "
"current+scale]."
msgstr ""
"ランダムな位置と方向(新しく作成されたブリックをテストするのに便利)で、接線行列の整合性をテストします。EPSは微分の差分計算のための小パラメータの値であり、ランダム方向(デフォルトは1E-6)です。"
" `NN` はテストの数です(デフォルトは100です)。 `scale` "
"は現在位置の周囲のランダムな位置(デフォルトは1で、0が許容値です)のパラメータです。ランダム位置の各自由度は [current-scale, "
"current+scale] の範囲内で選択されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.test_tangent_matrix_term:1
msgid ""
"Synopsis: Model.test_tangent_matrix_term(self, string varname1, string "
"varname2[, scalar EPS[, int NB[, scalar scale]]])"
msgstr ""
"概要: Model.test_tangent_matrix_term(self, string varname1, string varname2[, "
"scalar EPS[, int NB[, scalar scale]]])"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.test_tangent_matrix_term:3
msgid ""
"Test the consistency of a part of the tangent matrix in some random "
"positions and random directions (useful to test newly created bricks). The "
"increment is only made on variable `varname2` and tested on the part of the "
"residual corresponding to `varname1`. This means that only the term "
"(`varname1`, `varname2`) of the tangent matrix is tested. `EPS` is the value"
" of the small parameter for the finite difference computation of the "
"derivative is the random direction (default is 1E-6). `NN` is the number of "
"tests (default is 100). `scale` is a parameter for the random position "
"(default is 1, 0 is an acceptable value) around the current position. Each "
"dof of the random position is chosen in the range [current-scale, "
"current+scale]."
msgstr ""
"ランダムな位置と方向(新しく作成されたレンガをテストするのに便利)で、接線行列の一部の整合性をテストします。インクリメントは、変数 `varname2`"
" に対してのみ行われ、 `varname1`に対応する残差の部分でテストされます。これは、接線マトリックスの項 (`varname1`, "
"`varname2`) "
"のみがテストされることを意味します。EPSは微分の差分計算のための微小パラメータの値(デフォルトは1E-6)であり、ランダム方向です。 `NN` "
"はテストの数です(デフォルトは100です)。 `scale` "
"は現在位置の周囲のランダムな位置(デフォルトは1で、0が許容値です)のパラメータである。ランダム位置の各自由度は [current-scale, "
"current+scale] の範囲内で選択されます。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.to_variables:1
msgid ""
"Set the value of the variables of the model with the vector `V`. Typically, "
"the vector `V` results of the solve of the tangent linear system (useful to "
"solve your problem with you own solver)."
msgstr ""
"ベクトル `V` でモデルの変数の値を設定します。通常、ベクトル `V` "
"は接線線形システム(独自のソルバを使用して問題を解決するのに便利)のソルバの結果です。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.variable:1
msgid "Gives the value of a variable or data."
msgstr "変数またはデータの値を指定します。"

#: ../../../../../../../virtualenv/python3.6.10/lib/python3.6/site-packages/getfem/__init__.pydocstring
#: of getfem.Model.variable_list:1
msgid "print to the output the list of variables and constants of the model."
msgstr "モデルの変数と定数のリストを出力に出力します。"
