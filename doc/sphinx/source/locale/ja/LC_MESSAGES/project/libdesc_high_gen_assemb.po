# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-23 01:13+0000\n"
"PO-Revision-Date: 2018-07-16 07:03+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/project/libdesc_high_gen_assemb.rst:12
msgid "The high-level generic assembly module in |gf|"
msgstr "|gf| の高水準汎用構築モジュール"

#: ../source/project/libdesc_high_gen_assemb.rst:16
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Description"
msgstr "説明"

#: ../source/project/libdesc_high_gen_assemb.rst:18
msgid ""
"The high level generic assembly module of |gf| and its generic weak form "
"language (GWFL) is a key module which allows to describe weak formulation of"
" partial differential equation problems. See the description of the language"
" in the user documentation section :ref:`ud-gasm-high`."
msgstr ""
"|gf| の高水準の汎用構築モジュールと汎用弱形式言語 (GWFL) "
"は，偏微分方程式の問題の弱定式化を記述することができるキーモジュールです．ユーザードキュメント :ref:`ud-gasm-high` "
"の説明を参照してください．"

#: ../source/project/libdesc_high_gen_assemb.rst:21
msgid "Files"
msgstr "ファイル"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "File(s)"
msgstr "ファイル"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":file:`getfem_generic_assembly.h`"
msgstr ":file:`getfem_generic_assembly.h`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Main header for exported definitions. Only this header has to be included to"
" use the generic assembly. Other headers of the module are for internal use "
"only."
msgstr ""
"エクスポートされた定義のメインヘッダー．汎用構築を使用するには，このヘッダーをインクルードするだけで十分です．モジュールの他のヘッダーは内部で使用されます．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_tree.h` and "
":file:`getfem_generic_assembly_tree.cc`"
msgstr ""
":file:`getfem_generic_assembly_tree.h` と "
":file:`getfem_generic_assembly_tree.cc`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Definition of the tree structure and basic operations on it, including "
"reading an assembly string and transform it in a syntax tree and make the "
"invert transformation of a tree into a string."
msgstr "ツリー構造とその基本操作を定義します．アセンブリ文字列を読み取って構文ツリーに変換し，ツリーを文字列にする逆変換を作成します．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_function_and_operators.h` and "
":file:`getfem_generic_assembly_function_and_operators.cc`"
msgstr ""
":file:`getfem_generic_assembly_function_and_operators.h` と "
":file:`getfem_generic_assembly_function_and_operators.cc`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Definition of redefined function and nonlinear operator of GWFL."
msgstr "再定義関数の定義とGWFLの非線形演算子．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_semantic.h` and "
":file:`getfem_generic_assembly_semantic.cc`"
msgstr ""
":file:`getfem_generic_assembly_semantic.h` と "
":file:`getfem_generic_assembly_semantic.cc`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Semantic analysis and enrichment of the syntax tree. Include some operations"
" such as making the derivation of a tree with respect to a variable or "
"computing the tree corresponding to the gradient of an expression."
msgstr "構文ツリーの意味解析と強化．変数に対するツリーの導出や，式の勾配に対応するツリーの計算など，いくつかの操作を含みます．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":file:`getfem_generic_assembly_workspace.cc`"
msgstr ":file:`getfem_generic_assembly_workspace.cc`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Methodes of the workspace object (defined in "
":file:`getfem_generic_assembly.h`)."
msgstr "( :file:`getfem_generic_assembly.h` で定義されている)workspaceオブジェクトのメソッド ．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_compile_and_exec.h` and "
":file:`getfem_generic_assembly_compile_and_exec.cc`"
msgstr ""
":file:`getfem_generic_assembly_compile_and_exec.h` と "
":file:`getfem_generic_assembly_compile_and_exec.cc`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Definition of the optimized instructions, compilation into a sequel of "
"optimize instructions and execution of the instructions on Gauss "
"point/interpolation points."
msgstr "最適化された命令の定義，コンパイルによる最適化された命令の作成とGauss点/補間点での命令の実行を行います．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":file:`getfem_generic_assembly_interpolation.cc`"
msgstr ":file:`getfem_generic_assembly_interpolation.cc`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Interpolation operations and interpolate transformations."
msgstr "補間演算と補間変換．"

#: ../source/project/libdesc_high_gen_assemb.rst:37
msgid "A few implementation details"
msgstr "いくつかの実装の詳細"

#: ../source/project/libdesc_high_gen_assemb.rst:39
msgid ""
"The assembly string is transformed in an assembly tree by a set of function "
"in :file:`src/getfem\\_generic\\_assembly.cc`. The process has 6 steps:"
msgstr ""
"アセンブリ文字列は :file:`src/getfem\\_generic\\_assembly.cc` "
"の一連の関数によってアセンブリツリーに変換されます．プロセスには6つのステップがあります．"

#: ../source/project/libdesc_high_gen_assemb.rst:41
msgid "Lexical analysis with the procedure ``ga_get_token(...)``."
msgstr "``ga_get_token(...)`` を使用した字句解析．"

#: ../source/project/libdesc_high_gen_assemb.rst:43
msgid ""
"Syntax analysis and transformation into a syntax tree by "
"``ga_read_string(...)``."
msgstr "``ga_read_string(...)`` による構文解析と構文木への変換．"

#: ../source/project/libdesc_high_gen_assemb.rst:45
msgid ""
"Semantic analysis, simplification (pre-computation) of constant expressions "
"and enrichment of the tree by ``ga_semantic_analysis(...)``."
msgstr "``ga_semantic_analysis(...)`` による定数式の意味解析, 単純化 (事前計算) とツリーの強化．"

#: ../source/project/libdesc_high_gen_assemb.rst:47
msgid ""
"Symbolic (automatic) differentiation of an assembly tree by "
"``ga_derivative(...)``"
msgstr "``ga_derivative(...)`` によるアセンブリツリーの(自動) 微分の表現"

#: ../source/project/libdesc_high_gen_assemb.rst:49
msgid ""
"Symbolic (automatic) gradient computation of an assembly tree by "
"``ga_gradient(...)``"
msgstr "``ga_gradient(...)`` によるアセンブリツリーの(自動)勾配計算の表現"

#: ../source/project/libdesc_high_gen_assemb.rst:51
msgid ""
"Compilation in a sequence of instructions with optimizations by "
"``ga_compile(...)``."
msgstr "``ga_compile(...)`` による最適化された一連の命令のコンパイル．"

#: ../source/project/libdesc_high_gen_assemb.rst:53
msgid ""
"Execution of the sequence of instructions and assembly by ``ga_exec(...)``."
msgstr "``ga_exec(...)`` による命令とアセンブリの直列実行．"

#: ../source/project/libdesc_high_gen_assemb.rst:55
msgid ""
"These steps are performed only once at the beginning of the assembly. The "
"final tree is compiled in a sequence of optimized instructions which are "
"executed on each Gauss point of each element. The compilation performed some"
" optimizations : repeated terms are automatically detected and evaluated "
"only once, simplifications if the mesh has uniform type of elements, "
"simplifications for vectorized fnite element methods."
msgstr ""
"これらの手順は，アセンブリのはじめに1回だけ実行されます．最終的なツリーは，各要素の各Gauss点で実行される最適化された命令でコンパイルします．コンパイルではいくつかの最適化が実行されます．繰り返しの項は自動的に検出され，1回だけ実行されます．メッシュの簡略化はベクトル有限要素法の要素が均一な型を持っている場合に行われます．"

#: ../source/project/libdesc_high_gen_assemb.rst:57
msgid ""
"Moreover, there is specifics function for interpolation operations "
"(ga_interpolation(...), ga_interpolation_exec(...), "
"ga_interpolation_Lagrange_fem, ga_interpolation_mti, "
"ga_interpolation_im_data, ...)"
msgstr ""
"さらに，補間操作 (ga_interpolation(...), ga_interpolation_exec(...), "
"ga_interpolation_Lagrange_fem, ga_interpolation_mti, "
"ga_interpolation_im_data, ...) の具体的な関数を実行します．"

#: ../source/project/libdesc_high_gen_assemb.rst:60
msgid "Assembly tree"
msgstr "アセンブリツリー"

#: ../source/project/libdesc_high_gen_assemb.rst:62
msgid ""
"Assembly strings are transformed into assembly trees by "
"``ga_read_string(...)``. Assembly trees are syntax trees that are "
"progressively enriched in information in the differents steps (semantic "
"analysis, derivation, compilation)."
msgstr ""
"アセンブリ文字列は ``ga_read_string(...)`` "
"でアセンブリツリーに変換されます．アセンブリツリーは，各ステップ(意味分析，導出，コンパイル) で徐々に強化される構文ツリーです．"

#: ../source/project/libdesc_high_gen_assemb.rst:64
msgid ""
"The object ``ga_tree`` represents an assembly tree. It is a copyable object "
"that only contains a pointer to the root of the tree. Each tree node is an "
"object ``ga_tree_node`` that contains the main following information:"
msgstr ""
"オブジェクト ``ga_tree`` "
"はアセンブリツリーを表します．これはツリーのルートへのポインターのみを含むコピー可能オブジェクトです．各ツリーのノードは，主に次の情報を含むオブジェクト"
" ``ga_tree_node`` です．"

#: ../source/project/libdesc_high_gen_assemb.rst:66
msgid "node_type (function, variable value, variable gradient, operation ...)"
msgstr "node_type (関数, 変数値, 勾配値, 操作 ...)"

#: ../source/project/libdesc_high_gen_assemb.rst:67
msgid "operation type for operation nodes."
msgstr "節点操作の操作の種類．"

#: ../source/project/libdesc_high_gen_assemb.rst:68
msgid ""
"assembly tensor: used at execution time by optimized instructions to compute"
" the intermediary results. The final result is in the assembly string of the"
" root node at the end of the execution (for each Gauss point)."
msgstr ""
"アセンブリテンソル: "
"中間結果を計算するために最適化された命令によって実行時に使用されます．最終的な結果は，実行の終了時にルートノードの(各Gauss点での)アセンブリ文字列で使用されます．"

#: ../source/project/libdesc_high_gen_assemb.rst:69
msgid ""
"term type: value, order one term (ith order one test functions), order two "
"term (with order two test functions) or with both order one and order two "
"test functions (tangent term)."
msgstr "項の種類: 値，1次の項 (i 番目の1次の試験関数)，2次の項 (2次の試験関数) または1次と2次の試験関数 (接線項)．"

#: ../source/project/libdesc_high_gen_assemb.rst:72
msgid "variable name of tests functions for order 1 or 2 terms."
msgstr "1次または2次の項の試験関数の変数名．"

#: ../source/project/libdesc_high_gen_assemb.rst:73
msgid "pointer to the parent node."
msgstr "親ノードへのポインター．"

#: ../source/project/libdesc_high_gen_assemb.rst:74
msgid "pointers to the children nodes."
msgstr "子ノードへのポインター．"

#: ../source/project/libdesc_high_gen_assemb.rst:76
msgid ""
"For example, the assembly tree for the assembly string "
"\"a*Grad_Test2_u.Grad_Test_u\" for the stiffness matrix of a Laplacian "
"problem can be represented as follows with its assembly tensors at each "
"node:"
msgstr ""
"たとえば，Laplacian問題の剛性マトリックスのアセンブリ文字列 \"a*Grad_Test2_u.Grad_Test_u\" "
"のアセンブリツリーは，各ノードのアセンブリテンソルをもとに次のように表現できます．"

#: ../source/project/libdesc_high_gen_assemb.rst:85
msgid "Assembly tensors"
msgstr "アセンブリテンソル"

#: ../source/project/libdesc_high_gen_assemb.rst:87
msgid ""
"Assembly tensors are represented on each node by a ``bgeot::tensor<double>``"
" object. However, there is a specific structure in "
":file:`src/getfem\\_generic\\_assembly.cc` for assembly tensors because "
"there is several format of assembly tensors :"
msgstr ""
"アセンブリテンソルは，各ノードで ``bgeot::tensor<double>`` "
"オブジェクトによって表されています．ただし，アセンブリテンソルには複数の形式があり， "
":file:`src/getfem\\_generic\\_assembly.cc` にはアセンブリテンソルのための詳細構造を実装しています．"

#: ../source/project/libdesc_high_gen_assemb.rst:89
msgid ""
"Normal tensor. The first and second indices may represent the test function "
"local indices if the node represent a first or second order term. Remember "
"that in |gf| all tensors are stored with a Fortran order. This means that "
"for instance t for a :math:`N\\times P\\times Q` tensor one has ``t(i, j, k)"
" = t[i + j*N + k*N*P]``."
msgstr ""
"通常のテンソル．1番目と2番目のインデックスは，ノードが1次または2次の項を表す場合，試験関数のローカルインデックスを表します． |gf| "
"ではすべてのテンソルは Fortran の次数で保存されます．これは例えば :math:`N\\times P\\times Q` であるテンソルは "
"``t(i, j, k) = t[i + j*N + k*N*P]`` となるということです．"

#: ../source/project/libdesc_high_gen_assemb.rst:91
msgid ""
"Copied tensor. When a node is detected to have exactly the same expression "
"compared to an already compiled one, the assembly tensor will contain a "
"pointer to the assembly tensor of the already compiled node. The consequence"
" is that no unnecessary copy is made."
msgstr ""
"コピーされたテンソル．ノードが，既にコンパイルされたものと比較してまったく同じ式を持つ場合，アセンブリテンソルには，既にコンパイル済みのノードのアセンブリテンソルへのポインタが設定されます．結果として，不要なコピーは作成されません．"

#: ../source/project/libdesc_high_gen_assemb.rst:93
msgid ""
"Sparse tensor with a listed sparsity. When working with a vector field, the "
"finite element method is applied on each component. This results on vector "
"base functions having only one nonzero component and some components are "
"duplicated. The tensor are fully represented because it would be difficul to"
" gain in efficiency with that kind of small sparse tensor format. However, "
"some operation can be optimized with the knoledge of a certain sparsity (and"
" duplication). This can change the order of complexity of a reduction. In "
"order to allows this gain in efficiency, the tensor are labellised with some"
" known sparsity format (vectorisation and format coming from operation "
"applied on vectorized tensors). This results in a certain number of sparsity"
" formats that are listed below:"
msgstr ""
"スパースにリストされた疎テンソル．ベクトルフィールドを使用する場合，有限要素法は各成分に適用されます．その結果，ベクトの基底関数が0以外の成分を1つだけ持ち，一部の成分が複製されます．テンソルは，その種の小さな疎テンソル形式で効率化のために複製されるので，完全に表現されます．ただし，一部の操作は，特定のスパース"
" (および複製) "
"の知見を使用して最適化できます．これにより，縮約の複雑さの度合いを変更することができます．効率的な使用を可能にするためにテンソルはいくつかのスパースフォーマットでラベル付けがされています"
" (ベクトルテンソルで適用される操作から来るベクトル化とフォーマット) ．これにより，以下に示すようなスパース形式が得られます．"

#: ../source/project/libdesc_high_gen_assemb.rst:95
msgid ""
"1: Vectorized base sparsity format: The tensor represent a vectorized value."
" Each value of the condensed tensor is repeated on :math:`Q` components of "
"the vectorized tensor. The mesh dimensions is denoted :math:`N`. For "
"instance if :math:`\\varphi_i` are the :math:`M` local base functions on an "
"element and the evaluation is on a Gauss point :math:`x`, then the non "
"vectorized tensor is :math:`\\bar{t}(i) = \\varphi_i(x)` and the vectorized "
"one is :math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k, j \\mbox{ mod } Q}` "
"where :math:`j/M` is the integer division. For :math:`M=2`, :math:`Q=2` and "
":math:`N=3` the components of the two tensors are represented in the "
"following table"
msgstr ""
"1：ベクトル化ベースのスパース形式：テンソルはベクトル化値を表します． 縮約テンソルの各値は，ベクトル化テンソルの `Q` "
"成分に対して繰り返されます．メッシュ寸法は `N` で示されます．たとえば， :math:`\\varphi_i` が要素 :math:`M` "
"上のローカル基底関数で評価がGauss点 :math:`x` の場合，ベクトル化されていないテンソルは :math:`\\bar{t}(i) = "
"\\varphi_i(x)` であり，ベクトル化されたものは :math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k,"
" j \\mbox{ mod } Q}` となります．ここで :math:`j/M` は整数の除算です． :math:`M=2` ， "
":math:`Q=2` ，:math:`N=3` の場合，2つのテンソルの成分は次の表のように表されます．"

#: ../source/project/libdesc_high_gen_assemb.rst:1
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Scalar tensor"
msgstr "スカラテンソル"

#: ../source/project/libdesc_high_gen_assemb.rst:1
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Vectorized tensor"
msgstr "ベクトルテンソル"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`\\bar{t}(i) = \\varphi_i(x)`"
msgstr ":math:`\\bar{t}(i) = \\varphi_i(x)`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k, (j \\mbox{ mod } Q)}`"
msgstr ":math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k, (j \\mbox{ mod } Q)}`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`[\\varphi_0(x), \\varphi_1(x)]`"
msgstr ":math:`[\\varphi_0(x), \\varphi_1(x)]`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":math:`[\\varphi_0(x), 0, \\varphi_1(x), 0, 0, \\varphi_0(x), 0, "
"\\varphi_1(x)]`"
msgstr ""
":math:`[\\varphi_0(x), 0, \\varphi_1(x), 0, 0, \\varphi_0(x), 0, "
"\\varphi_1(x)]`"

#: ../source/project/libdesc_high_gen_assemb.rst:114
msgid "2: Grad condensed format"
msgstr "2: Grad の縮約形式"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`\\bar{t}(i,j) = \\partial_j\\varphi_i(x)`"
msgstr ":math:`\\bar{t}(i,j) = \\partial_j\\varphi_i(x)`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":math:`t(k,l,m) = \\partial_m\\varphi_{k/Q}(x) \\delta_{l, (m \\mbox{ mod } "
"Q)}`"
msgstr ""
":math:`t(k,l,m) = \\partial_m\\varphi_{k/Q}(x) \\delta_{l, (m \\mbox{ mod } "
"Q)}`"

#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":math:`[\\partial_0\\varphi_0(x), \\partial_0\\varphi_1(x),` "
":math:`\\partial_1\\varphi_0(x), \\partial_1\\varphi_1(x),` "
":math:`\\partial_2\\varphi_0(x), \\partial_2\\varphi_1(x)]`"
msgstr ""
":math:`[\\partial_0\\varphi_0(x), \\partial_0\\varphi_1(x),` "
":math:`\\partial_1\\varphi_0(x), \\partial_1\\varphi_1(x),` "
":math:`\\partial_2\\varphi_0(x), \\partial_2\\varphi_1(x)]`"

#: ../source/project/libdesc_high_gen_assemb.rst:123
msgid "3: Hessian condensed format"
msgstr "3: Hessian 縮約形式"

#: ../source/project/libdesc_high_gen_assemb.rst:126
msgid ""
"10: Vectorized mass: the tensor represent a scalar product of two vectorised"
" base functions. This means a tensor :math:`t(\\cdot,\\cdot)` where "
":math:`t(i*Q+k, j*Q+l) = 0` for :math:`k \\ne l` and :math:`t(i*Q+k, j*Q+k)`"
" are equals for :math:`0 \\le k < Q`."
msgstr ""
"10: ベクトル化された質量: テンソルは2つのベクトル化された基底関数のスカラー積を表します．つまり， :math:`k \\ne l` と "
":math:`t(i*Q+k, j*Q+k)` に対して :math:`t(i*Q+k, j*Q+l) = 0` であるテンソル "
":math:`t(\\cdot,\\cdot)` は :math:`0 \\le k < Q` と等価です．"

#: ../source/project/libdesc_high_gen_assemb.rst:135
msgid "Optimized instructions"
msgstr "最適化された命令"

#: ../source/project/libdesc_high_gen_assemb.rst:137
msgid ""
"Optimized instructions for variable evaluation, operations, vector and "
"matrix assembly ... to be described."
msgstr "変数の評価，操作，ベクトルと行列のアセンブリのための最適化された命令など．説明を準備中．"

#: ../source/project/libdesc_high_gen_assemb.rst:140
msgid "Predefined functions"
msgstr "定義済み関数"

#: ../source/project/libdesc_high_gen_assemb.rst:147
msgid ""
"Some predefined scalar functions are available in GWFL in order to describe "
"a weak formulation (or also to make basic algebraic computations). This is "
"limited to scalar functions of one or two arguments. Due to the automatic "
"differentiation used to obtain the tangent system of described problems, the"
" derivative each function have to be available. The principle retained is "
"the following: For each predefined function is available:"
msgstr ""
"GWFLは弱定式化を記述するために(または基本的な代数計算もするため)いくつかの定義済みスカラー関数を使用可能です．これは，1つまたは2つの引数のスカラー関数に限定されます．記述された問題の接線系を計算する際に自動微分が行われるために，各関数は微分可能である必要があります．原理原則は次のとおりです．定義済みの関数でも共通です．"

#: ../source/project/libdesc_high_gen_assemb.rst:143
msgid "A C++ function which computes the value given the argument(s)."
msgstr "(複数の)引数に指定された値を計算する C++ の関数．"

#: ../source/project/libdesc_high_gen_assemb.rst:144
msgid ""
"The support of the function in the first each argument in term of a "
"(possibly infinite) interval (this is for simplification of expressions)."
msgstr "(可能な限り無限の) 範囲で各第1引数の関数をサポートします (これは表現の簡素化のためです)．"

#: ../source/project/libdesc_high_gen_assemb.rst:146
msgid ""
"The string corresponding of the derivative in terms of already known "
"functions"
msgstr "既知の関数の導関数に対応する文字列"

#: ../source/project/libdesc_high_gen_assemb.rst:149
msgid ""
"A new predefined function is easy to add. See init_predefined_functions() in"
" file :file:`src/getfem_generic_assembly.cc`. + describe how to give the "
"derivative ..."
msgstr ""
"新しい定義済み関数は簡単に追加できます．ファイル :file:`src/getfem_generic_assembly.cc` の "
"init_predefined_functions() を参照してください．微分を与える方法についての説明を準備中．"

#: ../source/project/libdesc_high_gen_assemb.rst:152
msgid "Predefined nonlinear operators"
msgstr "定義済み非線形演算子"

#: ../source/project/libdesc_high_gen_assemb.rst:154
msgid "to be described ..."
msgstr "説明を準備中．"

#: ../source/project/libdesc_high_gen_assemb.rst:157
msgid "State"
msgstr "状態"

#: ../source/project/libdesc_high_gen_assemb.rst:158
msgid "Stable."
msgstr "安定しています．"

#: ../source/project/libdesc_high_gen_assemb.rst:161
msgid "Perspectives"
msgstr "展望"

#: ../source/project/libdesc_high_gen_assemb.rst:163
msgid "Is a certain extension to complex data possible ?"
msgstr "複雑なデータへの拡張は可能でしょうか?"

#: ../source/project/libdesc_high_gen_assemb.rst:165
msgid ""
"More simplifications : study the possibility to automatically factorize some"
" terms (for instance scalar ones) to reduce the number of operations."
msgstr "さらなる簡素化: 処理数を減らすために，いくつかの項 (例えばスカラー項) を自動的に因数分解するとよいかもしれません．"
