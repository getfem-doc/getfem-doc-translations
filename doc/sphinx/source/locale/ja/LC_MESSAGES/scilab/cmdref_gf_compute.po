# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-19 02:28+0000\n"
"PO-Revision-Date: 2018-07-16 06:59+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/tkoyama010/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/scilab/cmdref_gf_compute.rst:8
msgid "gf_compute"
msgstr "gf_compute"

#: ../source/scilab/cmdref_gf_compute.rst:10
msgid "**Synopsis**"
msgstr "**概要**"

#: ../source/scilab/cmdref_gf_compute.rst:30
msgid "**Description :**"
msgstr "**説明 :**"

#: ../source/scilab/cmdref_gf_compute.rst:34
msgid ""
"Various computations involving the solution U to a finite element problem."
msgstr "有限要素問題に対する解Uを含む種々の計算．"

#: ../source/scilab/cmdref_gf_compute.rst:37
msgid "**Command list :**"
msgstr "**コマンドリスト**"

#: ../source/scilab/cmdref_gf_compute.rst:41
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'L2 norm', mesh_im mim[, mat CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'L2 norm', mesh_im mim[, mat CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:43
msgid ""
"Compute the L2 norm of the (real or complex) field <literal>U</literal>."
msgstr "(実数または複素数の)フィールド <literal>U</literal> のL2ノルムを計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:45
#: ../source/scilab/cmdref_gf_compute.rst:53
#: ../source/scilab/cmdref_gf_compute.rst:61
#: ../source/scilab/cmdref_gf_compute.rst:69
#: ../source/scilab/cmdref_gf_compute.rst:77
#: ../source/scilab/cmdref_gf_compute.rst:85
#: ../source/scilab/cmdref_gf_compute.rst:93
msgid ""
"If <literal>CVids</literal> is given, the norm will be computed only on the "
"listed elements."
msgstr "<literal>CVids</literal> が指定されている場合，ノルムはリストされた要素でのみ計算されます．"

#: ../source/scilab/cmdref_gf_compute.rst:49
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'L2 dist', mesh_im mim, mesh_fem mf2, "
"vec U2[, mat CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'L2 dist', mesh_im mim, mesh_fem mf2, "
"vec U2[, mat CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:51
msgid ""
"Compute the L2 distance between <literal>U</literal> and "
"<literal>U2</literal>."
msgstr "<literal>U</literal> と <literal>U2</literal> の間のL2距離を計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:57
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 semi norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 semi norm', mesh_im mim[, mat "
"CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:59
msgid "Compute the L2 norm of grad(<literal>U</literal>)."
msgstr "grad(<literal>U</literal>) のL2ノルムを計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:65
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 semi dist', mesh_im mim, mesh_fem "
"mf2, vec U2[, mat CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 semi dist', mesh_im mim, mesh_fem "
"mf2, vec U2[, mat CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:67
msgid ""
"Compute the semi H1 distance between <literal>U</literal> and "
"<literal>U2</literal>."
msgstr "<literal>U</literal> と <literal>U2</literal> の間の準H1距離を計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:73
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 norm', mesh_im mim[, mat CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'H1 norm', mesh_im mim[, mat CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:75
msgid "Compute the H1 norm of <literal>U</literal>."
msgstr "<literal>U</literal> のH1ノルムを計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:81
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H2 semi norm', mesh_im mim[, mat "
"CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'H2 semi norm', mesh_im mim[, mat "
"CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:83
msgid "Compute the L2 norm of D^2(<literal>U</literal>)."
msgstr "D^2(<literal>U</literal>) のL2ノルムを計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:89
msgid ""
"``n = gf_compute(mesh_fem MF, vec U, 'H2 norm', mesh_im mim[, mat CVids])``"
msgstr ""
"``n = gf_compute(mesh_fem MF, vec U, 'H2 norm', mesh_im mim[, mat CVids])``"

#: ../source/scilab/cmdref_gf_compute.rst:91
msgid "Compute the H2 norm of <literal>U</literal>."
msgstr "<literal>U</literal> のH2ノルムを計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:97
msgid "``DU = gf_compute(mesh_fem MF, vec U, 'gradient', mesh_fem mf_du)``"
msgstr "``DU = gf_compute(mesh_fem MF, vec U, 'gradient', mesh_fem mf_du)``"

#: ../source/scilab/cmdref_gf_compute.rst:99
msgid ""
"Compute the gradient of the field <literal>U</literal> defined on mesh_fem "
"<literal>mf_du</literal>."
msgstr ""
"mesh_fem <literal>mf_du</literal> 上で定義されたフィールド <literal>U</literal> "
"の勾配を計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:101
msgid ""
"The gradient is interpolated on the mesh_fem <literal>mf_du</literal>, and "
"returned in <literal>DU</literal>. For example, if <literal>U</literal> is "
"defined on a P2 mesh_fem, <literal>DU</literal> should be evaluated on a "
"P1-discontinuous mesh_fem. <literal>mf</literal> and "
"<literal>mf_du</literal> should share the same mesh."
msgstr ""
"勾配はmesh_femの <literal>mf_du</literal> で補間され <literal>DU</literal> "
"に返されます．例えば， <literal>U</literal> がP2 mesh_femで定義されている場合， "
"<literal>DU</literal> はP1不連続mesh_femで評価されます． <literal>mf</literal> と "
"<literal>mf_du</literal> は同じメッシュを共有する必要があります．"

#: ../source/scilab/cmdref_gf_compute.rst:106
msgid ""
"<literal>U</literal> may have any number of dimensions (i.e. this function "
"is not restricted to the gradient of scalar fields, but may also be used for"
" tensor fields). However the last dimension of <literal>U</literal> has to "
"be equal to the number of dof of <literal>mf</literal>. For example, if "
"<literal>U</literal> is a [3x3xNmf] array (where Nmf is the number of dof of"
" <literal>mf</literal>), <literal>DU</literal> will be a [Nx3x3[xQ]xNmf_du] "
"array, where N is the dimension of the mesh, Nmf_du is the number of dof of "
"<literal>mf_du</literal>, and the optional Q dimension is inserted if "
"<literal>Qdim_mf != Qdim_mf_du</literal>, where Qdim_mf is the Qdim of "
"<literal>mf</literal> and Qdim_mf_du is the Qdim of "
"<literal>mf_du</literal>."
msgstr ""
"<literal>U</literal> "
"は任意の数の次元を持つことができます(すなわち，この関数はスカラー場の勾配に限定されず，テンソル場にも使用できます)．ただし， "
"<literal>U</literal> の最後の次元は <literal>mf</literal> の自由度の数に等しくなければなりません．たとえば，"
" <literal>U</literal> が [3x3xNmf] 配列(ここで，Nmfは <literal>mf</literal> "
"の自由度の数です)の場合， <literal>DU</literal> は [Nx3x3[xQ]xNmf_du] 配列となり， N はメッシュの次元， "
"Nmf_du は <literal>mf_du</literal> の自由度の数であり， <literal>Qdim_mf != "
"Qdim_mf_du</literal> の場合，オプションのQ次が挿入されます，ここで， Qdim_mf は "
"<literal>mf</literal> のQdimであり，Qdim_mf_duは <literal>mf_du</literal> のQdimです．"

#: ../source/scilab/cmdref_gf_compute.rst:117
msgid "``HU = gf_compute(mesh_fem MF, vec U, 'hessian', mesh_fem mf_h)``"
msgstr "``HU = gf_compute(mesh_fem MF, vec U, 'hessian', mesh_fem mf_h)``"

#: ../source/scilab/cmdref_gf_compute.rst:119
msgid ""
"Compute the hessian of the field <literal>U</literal> defined on mesh_fem "
"<literal>mf_h</literal>."
msgstr ""
"mesh_fem <literal>mf_h</literal> に定義されているフィールド <literal>U</literal> "
"のHessianを計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:121
msgid "See also gf_compute('gradient', mesh_fem mf_du)."
msgstr "gf_compute('gradient', mesh_fem mf_du) も参照してください．"

#: ../source/scilab/cmdref_gf_compute.rst:124
msgid ""
"``UP = gf_compute(mesh_fem MF, vec U, 'eval on triangulated surface', int "
"Nrefine, [vec CVLIST])``"
msgstr ""
"``UP = gf_compute(mesh_fem MF, vec U, 'eval on triangulated surface', int "
"Nrefine, [vec CVLIST])``"

#: ../source/scilab/cmdref_gf_compute.rst:126
msgid ""
"[OBSOLETE FUNCTION! will be removed in a future release] Utility function "
"designed for 2D triangular meshes : returns a list of triangles coordinates "
"with interpolated U values. This can be used for the accurate visualization "
"of data defined on a discontinous high order element. On output, the six "
"first rows of UP contains the triangle coordinates, and the others rows "
"contain the interpolated values of U (one for each triangle vertex) CVLIST "
"may indicate the list of convex number that should be consider, if not used "
"then all the mesh convexes will be used. U should be a row vector."
msgstr ""
"[廃止された機能! 将来のリリースで削除される予定です] "
"2次元三角形メッシュ用に設計されたユーティリティ関数は補間されたU値を持つ三角形座標のリストを返します．これは，不連続な高次要素上で定義されたデータを正確に視覚化するために使用できます．出力では，UPの6つの最初の行は三角形座標を含み，他の行はU(三角形の頂点ごとに1つ)のCVLISTの補間された値を含み，考慮されるべき凸数のリストを示すことができ，もし使用されなければ，全てのメッシュ凸が使用されます．Uは行ベクトルでなければなりません．"

#: ../source/scilab/cmdref_gf_compute.rst:139
msgid ""
"``Ui = gf_compute(mesh_fem MF, vec U, 'interpolate on', {mesh_fem mfi | "
"slice sli | vec pts})``"
msgstr ""
"``Ui = gf_compute(mesh_fem MF, vec U, 'interpolate on', {mesh_fem mfi | "
"slice sli | vec pts})``"

#: ../source/scilab/cmdref_gf_compute.rst:141
msgid ""
"Interpolate a field on another mesh_fem or a slice or a list of points."
msgstr "別のmesh_fem，slice，または点のリストのフィールドを補間します．"

#: ../source/scilab/cmdref_gf_compute.rst:144
msgid "Interpolation on another mesh_fem <literal>mfi</literal>:"
msgstr "別のmesh_fem <literal>mfi</literal> 上の補間"

#: ../source/scilab/cmdref_gf_compute.rst:144
msgid ""
"<literal>mfi</literal> has to be Lagrangian. If <literal>mf</literal> and "
"<literal>mfi</literal> share the same mesh object, the interpolation will be"
" much faster."
msgstr ""
"<literal>mfi</literal> はLagrangianでなければなりません． <literal>mf</literal> と "
"<literal>mfi</literal> が同じメッシュオブジェクトを共有する場合，補間は非常に高速になります．"

#: ../source/scilab/cmdref_gf_compute.rst:149
msgid "Interpolation on a slice <literal>sli</literal>:"
msgstr "slice  <literal>sli</literal> の補間．"

#: ../source/scilab/cmdref_gf_compute.rst:147
msgid ""
"this is similar to interpolation on a refined P1-discontinuous mesh, but it "
"is much faster. This can also be used with gf_slice('points') to obtain "
"field values at a given set of points."
msgstr ""
"これは，洗練されたP1-不連続メッシュの補間に似ていますが，はるかに高速です．また， gf_slice('points') "
"と組み合わせて使用し，特定の点集合におけるフィールド値を取得することもできます．"

#: ../source/scilab/cmdref_gf_compute.rst:151
msgid "Interpolation on a set of points <literal>pts</literal>"
msgstr "点 <literal>pts</literal> の集合の補間"

#: ../source/scilab/cmdref_gf_compute.rst:153
msgid "See also gf_asm('interpolation matrix')"
msgstr "gf_asm('interpolation matrix') も参照"

#: ../source/scilab/cmdref_gf_compute.rst:157
msgid ""
"``Ue = gf_compute(mesh_fem MF, vec U, 'extrapolate on', mesh_fem mfe)``"
msgstr ""
"``Ue = gf_compute(mesh_fem MF, vec U, 'extrapolate on', mesh_fem mfe)``"

#: ../source/scilab/cmdref_gf_compute.rst:159
msgid "Extrapolate a field on another mesh_fem."
msgstr "フィールドを別のmesh_femに外挿します．"

#: ../source/scilab/cmdref_gf_compute.rst:161
msgid ""
"If the mesh of <literal>mfe</literal> is stricly included in the mesh of "
"<literal>mf</literal>, this function does stricly the same job as "
"gf_compute('interpolate_on'). However, if the mesh of <literal>mfe</literal>"
" is not exactly included in <literal>mf</literal> (imagine interpolation "
"between a curved refined mesh and a coarse mesh), then values which are "
"outside <literal>mf</literal> will be extrapolated."
msgstr ""
"<literal>mfe</literal> のメッシュが <literal>mf</literal> "
"のメッシュに厳密に含まれている場合，この関数はgf_compute('interpolate_on')と厳密に同じ処理を行います．しかし， "
"<literal>mfe</literal> のメッシュが <literal>mf</literal> "
"に正確に含まれていない場合(曲線状のリファインされたメッシュと粗いメッシュの間の補間を想像してください)， <literal>mf</literal> "
"外の値が外挿されます．"

#: ../source/scilab/cmdref_gf_compute.rst:168
msgid "See also gf_asm('extrapolation matrix')"
msgstr "gf_asm('extrapolation matrix') も参照"

#: ../source/scilab/cmdref_gf_compute.rst:171
msgid "``E = gf_compute(mesh_fem MF, vec U, 'error estimate', mesh_im mim)``"
msgstr "``E = gf_compute(mesh_fem MF, vec U, 'error estimate', mesh_im mim)``"

#: ../source/scilab/cmdref_gf_compute.rst:173
msgid "Compute an a posteriori error estimate."
msgstr "事後誤差推定値を計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:175
#: ../source/scilab/cmdref_gf_compute.rst:183
msgid ""
"Currently there is only one which is available: for each convex, the jump of"
" the normal derivative is integrated on its faces."
msgstr "現在，使用できるのは1つだけです．各凸に対して，法線導関数のジャンプが面に対して積分されます．"

#: ../source/scilab/cmdref_gf_compute.rst:179
msgid ""
"``E = gf_compute(mesh_fem MF, vec U, 'error estimate nitsche', mesh_im mim, "
"int GAMMAC, int GAMMAN, scalar lambda_, scalar mu_, scalar gamma0, scalar "
"f_coeff, scalar vertical_force)``"
msgstr ""
"``E = gf_compute(mesh_fem MF, vec U, 'error estimate nitsche', mesh_im mim, "
"int GAMMAC, int GAMMAN, scalar lambda_, scalar mu_, scalar gamma0, scalar "
"f_coeff, scalar vertical_force)``"

#: ../source/scilab/cmdref_gf_compute.rst:181
msgid "Compute an a posteriori error estimate in the case of Nitsche method."
msgstr "Nitsche法の場合，事後誤差推定値を計算します．"

#: ../source/scilab/cmdref_gf_compute.rst:187
msgid ""
"``gf_compute(mesh_fem MF, vec U, 'convect', mesh_fem mf_v, vec V, scalar dt,"
" int nt[, string option[, vec per_min, vec per_max]])``"
msgstr ""
"``gf_compute(mesh_fem MF, vec U, 'convect', mesh_fem mf_v, vec V, scalar dt,"
" int nt[, string option[, vec per_min, vec per_max]])``"

#: ../source/scilab/cmdref_gf_compute.rst:189
msgid ""
"Compute a convection of <literal>U</literal> with regards to a steady state "
"velocity field <literal>V</literal> with a Characteristic-Galerkin method. "
"The result is returned in-place in <literal>U</literal>. This method is "
"restricted to pure Lagrange fems for U. <literal>mf_v</literal> should "
"represent a continuous finite element method. <literal>dt</literal> is the "
"integration time and <literal>nt</literal> is the number of integration step"
" on the caracteristics. <literal>option</literal> is an option for the part "
"of the boundary where there is a re-entrant convection. <literal>option = "
"'extrapolation'</literal> for an extrapolation on the nearest element, "
"<literal>option = 'unchanged'</literal> for a constant value on that "
"boundary or <literal>option = 'periodicity'</literal> for a peridiodic "
"boundary. For this latter option the two vectors per_min, per_max has to be "
"given and represent the limits of the periodic domain (on components where "
"per_max[k] < per_min[k] no operation is done). This method is rather "
"dissipative, but stable."
msgstr ""
"Characteristic-"
"Galerkin法を用いて定常状態の速度場<literal>V</literal>に関する<literal>U</literal>の対流を計算します．結果は，そのまま"
" <literal>U</literal> で返されます．この方法は， Uの純粋なLagrange関数に限定されます． "
"<literal>mf_v</literal> は連続有限要素法を表現します． <literal>dt</literal> は積分時間，  "
"<literal>nt</literal> は特性上の積分ステップ数です． <literal>option</literal>  は，re-"
"entrant対流がある境界部分のオプションです．最も近い要素への外挿の場合は <literal>option = "
"'extrapolation'</literal> で，その境界上の定数値の場合は <literal>option = "
"'unchanged'</literal> です，周期境界の場合は <literal>option = 'periodicity'</literal> "
"となります．後者のオプションでは，per_min，per_maxの二つのベクトルが与えられ，周期領域(per_max[k] < "
"per_min[k]が設定されているコンポーネントに対しては，何も実行されません)の限界を表現しなければなりません．この方法はかなり散逸的ですが，安定しています．"
