# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 16:58+0000\n"
"PO-Revision-Date: 2018-07-16 07:03+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/userdoc/gasm_high.rst:12
msgid ""
"Compute arbitrary terms - high-level generic assembly procedures - Weak-form"
" language"
msgstr "任意の項を計算する - 高水準の汎用的な構築手順 - 弱形式言語"

#: ../source/userdoc/gasm_high.rst:14
msgid ""
"This section presents what is now the main generic assembly of |gf|. It is a"
" high-level generic assembly in the sense that it is based on a weak form "
"language to describe the weak formulation of boundary value problems of "
"partial differential equations. It mainly has been developed to circumvent "
"the difficulties with the previous low-level generic assembly (see  :ref"
":`ud-gasm-low`) for which nonlinear terms were quite difficult to describe. "
"Conversely, a symbolic differentiation algorithm is used with this version. "
"It simplifies a lot the approximation of nonlinear coupled problems since "
"only the weak form is necessary to be described, the tangent system being "
"automatically computed. Moreover, the weak form language is compiled into "
"optimized instructions before the evaluation on each integration point in "
"order to obtain a an optimal computational cost."
msgstr ""
"このセクションでは、現在の |gf| "
"の主要な汎用構築を紹介します。これは、弱微分方程式の境界値問題の弱定式化を記述するために、弱形式言語に基づいているという意味で、高水準の汎用構築とされています。これは主に、非線形項を記述することが非常に難しい従来の低水準汎用構築（"
" :ref:`ud-gasm-low` "
"参照）の問題を回避するために開発されました。逆に、このバージョンでは記号的な微分アルゴリズムが使用されています。これは、非線形結合問題の近似を多く簡略化します。弱形式のみを記述する必要があるため、接線系は自動的に計算されるためです。さらに、弱形式言語は、最適な計算コストを得るために各積分点の評価の前に最適化された命令にコンパイルされます。"

#: ../source/userdoc/gasm_high.rst:16
msgid ""
"The header file to be included to use the high-level generic assembly "
"procedures in C++ is :file:`getfem/generic\\_assembly.h`."
msgstr ""
"C++で高水準の汎用構築手順を使用するためにインクルードするヘッダーファイルは、 :file:`getfem/generic_assembly.h` "
"です。"

#: ../source/userdoc/gasm_high.rst:19
msgid ""
"Differences in execution time between high and low level generic assembly"
msgstr "高水準と低水準の汎用構築間の実行時間の差"

#: ../source/userdoc/gasm_high.rst:20
msgid ""
"For basic linear assembly terms, the high level generic assembly is most of "
"the time faster than the low-level one. This is due to the fact that the "
"high-level generic assembly incorporates a compilation in basic optimized "
"instructions and operates simplifications. On complexe terms it can be "
"really faster due to the simplifications on repeated terms. On the other "
"hand, the fact that the low-level generic assembly incorporates a mechanism "
"to pre-compute on the reference element the linear term for elements with a "
"linear transformation makes that it can be faster on a few simple linear "
"terms. Of course, a possibility would be to incorporate the ability to pre-"
"compute on the reference element the linear term for linear transformations "
"in the high level generic assembly. However, it would be rather complicated "
"due to the high genericity of the language. A consequence also is that exact"
" integration is not allowed in the high level generic assembly."
msgstr ""
"基本的な線形構築の項については、高水準の汎用構築は、低水準の構築よりも高速になります。これは、高水準汎用構築が基本的な最適化された命令にコンパイルを組み込み、単純化を実行するためです。複数の単語を使う場合は、繰り返される項を単純化することにより高速になることがあります。一方、低水準汎用構築が、参照要素に線形変換を伴う要素の線形項を事前計算するメカニズムを組み込んでいるため、いくつかの単純な線形項でより速くなります。もちろん、高水準汎用構築における線形変換のための線形項を基準要素にあらかじめ計算する能力を組み込むこも可能です。しかし、言語の汎用性が高いために複雑になると思われます。結果として、高水準汎用構築では完全積分が許可されないことになります。"

#: ../source/userdoc/gasm_high.rst:25
msgid "Overview of the weak form language syntax"
msgstr "弱形式言語構文の概要"

#: ../source/userdoc/gasm_high.rst:27
msgid ""
"A specific weak form language has been developed to describe the weak "
"formulation of boundary value problems. It is intended to be close to the "
"structure of a standard weak formulation and it incorporates the following "
"components:"
msgstr ""
"境界値問題の弱定式化を記述するために、特定の弱形式言語が開発されています。これは、標準的な弱定式化の構造に近いことを意図しており、以下の成分を含みます。"

#: ../source/userdoc/gasm_high.rst:29
msgid ""
"Variable names: A list of variables should be given. The variables are "
"described on a finite element method or can be a simple vector of unknowns. "
"For instance ``u``, ``v``, ``p``, ``pressure``, ``electric_field`` are valid"
" variable names."
msgstr ""
"変数名: 変数のリストを与える必要があります。変数は有限要素法で記述されるか、未知変数の単純なベクトルになります。例えば、 ``u`` 、 ``v`` "
"、 ``p`` 、 ``pressure`` 、 ``electric_field`` は有効な変数名です。"

#: ../source/userdoc/gasm_high.rst:31
msgid ""
"Constant names: A list of constants could be given. The rules are the same "
"as for the variables but no test functions can be associated to constants."
msgstr "定数名: 定数のリストを与ることができます。ルールは変数と同じですが、試行関数を定数に関連付けることはできません。"

#: ../source/userdoc/gasm_high.rst:33
msgid ""
"Test functions: Can be used with respect to any of the variables. They are "
"identified by the prefix ``Test_`` followed by the corresponding variable "
"name. For instance  ``Test_u``, ``Test_v``, ``Test_p``, ``Test_pressure``, "
"``Test_electric_field``. For the tangent system, second order test functions"
" are denoted ``Test2_`` followed by the variable name."
msgstr ""
"試行関数: 任意の変数に対して使用できます。試行関数は接頭辞 ``Test_`` とそれに続く対応する変数名によって識別されます。例えば "
"``Test_u`` 、 ``Test_v`` 、 ``Test_p`` 、 ``Test_pressure`` 、 "
"``Test_electric_field`` のようなものです。接触モデルの場合、2次の試行関数は ``Test2_`` "
"と表記されその後ろに変数名が続きます。"

#: ../source/userdoc/gasm_high.rst:35
msgid ""
"Gradients: Spatial gradients of variables or test functions are identified "
"by the prefix ``Grad_`` followed by the variable name or by ``Test_`` or "
"``Test2_`` followed itself by the variable name. This is available for FEM "
"variables only. For instance ``Grad_u``, ``Grad_pressure``, "
"``Grad_electric_field`` and ``Grad_Test_u``, ``Grad_Test2_v``. For vector "
"fields, ``Div_u`` and ``Div_Test_u`` are some shortcuts for "
"``Trace(Grad_u)`` and ``Trace(Grad_Test_u)``, respectively."
msgstr ""
"勾配: 変数または試行関数の空間的な勾配は、 ``Grad_`` を変数名か ``Test_`` 、 ``Test2_`` "
"の接頭辞にすることで表現できます。FEM変数でのみ使用可能です。たとえば、 ``Grad_u`` 、 ``Grad_pressure`` 、 "
"``Grad_electric_field`` 、および ``Grad_Test_u`` 、 ``Grad_Test2_v`` です。ベクトルの場合、 "
"``Div_u`` と ``Div_Test_u`` は、それぞれ ``Trace(Grad_u)`` と ``Trace(Grad_Test_u)``"
" と等価です。"

#: ../source/userdoc/gasm_high.rst:37
msgid ""
"Hessians: The Hessian of a variable or test function is identified by the "
"prefix ``Hess_`` followed by the variable name or by ``Test_`` or ``Test2_``"
" followed itself by the variable name. This is available for FEM variables "
"only. For instance ``Hess_u``, ``Hess_v``, ``Hess_p``, ``Hess_Test2_v``, "
"``Hess_Test_p``, ``Hess_Test_pressure``."
msgstr ""
"Hessian: 変数または試行関数のHessian行列は、``Hess_`` を変数名または ``Test_`` または ``Test2_`` "
"の接頭辞にすることで表現できます。FEM変数でのみ使用可能です。たとえば、 ``Hess_u``、 ``Hess_v``、 ``Hess_p``、 "
"``Hess_Test2_v``、 ``Hess_Test_p``、 ``Hess_Test_pressure`` などです。"

#: ../source/userdoc/gasm_high.rst:39
msgid ""
"A certain number of predefined scalar functions (``sin(t)``, ``cos(t)``, "
"``pow(t,u)``, ``sqrt(t)``, ``sqr(t)``, ``Heaviside(t)``, ...). A scalar "
"function can be applied to scalar or vector/matrix/tensor expressions. It "
"applies componentwise. For functions having two arguments (``pow(t,u)``, "
"``min(t,u)`` ...) if two non-scalar arguments are passed, the dimension have"
" to be the same. For instance \"max([1;2],[0;3])\" will return \"[1;3]\"."
msgstr ""
"いくつかの定義済みのスカラ関数( ``sin(t)`` 、 ``cos(t)`` 、 ``pow(t,u)`` 、 ``sqrt(t)`` 、 "
"``sqr(t)`` 、 ``Heaviside(t)`` "
"、...)。スカラー関数は、スカラーまたはベクトル/行列/テンソル式に適用することができます。成分ごとに適用されます。 2つの引数( "
"``pow(t,u)`` 、 ``min(t,u)`` ...)を持つ関数の場合、 "
"2つの非スカラー引数が渡された場合、次元は同じでなければなりません。たとえば、 \"max([1; 2]、[0; 3])\" は \"[1;3]\" "
"を返します。"

#: ../source/userdoc/gasm_high.rst:41
msgid ""
"A certain number of operations: ``+``, ``-``, ``*``, ``/``, ``:``, ``.``, "
"``.*``, ``./``, ``@``, ``'``, ``Cross_product(v1,v2)``."
msgstr ""
"``+``, ``-``, ``*``, ``/``, ``:``, ``.``, ``.*``, ``./``, ``@``, ``'``, "
"``Cross_product(v1,v2)`` となります。"

#: ../source/userdoc/gasm_high.rst:43
msgid ""
"A certain number of linear operator: ``Trace(M)``, ``Sym(M)``, ``Skew(M)``, "
"..."
msgstr "ある数の線形演算子、 ``Trace(M)``, ``Sym(M)``, ``Skew(M)``, ..."

#: ../source/userdoc/gasm_high.rst:45
msgid ""
"A certain number of nonlinear operator: ``Norm(V)``, ``Det(M)``, ``Sym(M)``,"
" ``Skew(M)``, ..."
msgstr "ある数の非線形演算子、 ``Norm(V)``, ``Det(M)``, ``Sym(M)``, ``Skew(M)``, ..."

#: ../source/userdoc/gasm_high.rst:47
msgid ""
"Some constants: ``pi``, ``meshdim`` (the dimension of the current mesh), "
"``qdim(u)`` and ``qdims(u)`` the dimensions of the variable ``u`` (the size "
"for fixed size variables and the dimension of the vector field for FEM "
"variables), ``Id(n)`` the identity :math:`n\\times n` matrix."
msgstr ""
"いくつかの定数: ``pi`` 、 ``meshdim`` （現在のメッシュの次元）、変数 ``u`` の大きさ ``qdim(u)`` と "
"``qdims(u)`` （固定サイズの変数のサイズとFEM変数のベクトルフィールドの次元）、 ``Id(n)`` は :math:`n\\times "
"n` 次の単位行列です。"

#: ../source/userdoc/gasm_high.rst:49
msgid ""
"Parentheses can be used to change the operations order in a standard way. "
"For instance ``(1+2)*4`` or ``(u+v)*Test_u`` are valid expressions."
msgstr ""
"括弧は標準的な方法で操作の順序を変更するために使用できます。例えば ``(1+2)*4`` や ``(u+v)*Test_u`` は有効な式です。"

#: ../source/userdoc/gasm_high.rst:51
msgid ""
"The access to a component of a vector/matrix/tensor can be done by following"
" a term by a left parenthesis, the list of components and a right "
"parenthesis. For instance ``[1,1,2](3)`` is correct and will return ``2``. "
"Note that indices are assumed to begin by 1 (even in C++ and with the python"
" interface). A colon can replace the value of an index in a Matlab like "
"syntax."
msgstr ""
"ベクトル/行列/テンソルの成分へのアクセスは、左括弧、成分のリスト、右括弧の項をたどることによって行うことができます。たとえば、 "
"``[1,1,2](3)`` は正しく ``2`` "
"を返します。インデックスは1で始まることに注意してください（C++やPythonインタフェースでも）。コロンを使うことでMatlabのような構文でインデックス先の値を置き換えることができます。"

#: ../source/userdoc/gasm_high.rst:53
msgid ""
"Explicit vectors: For instance ``[1;2;3;4]`` is an explicit vector of size "
"four. Each component can be an expression."
msgstr "陽なベクトル: 例えば ``[1;2;3;4]`` はサイズが4の陽なベクトルです。各成分は式になります。"

#: ../source/userdoc/gasm_high.rst:55
msgid ""
"Explicit matrices: For instance ``[1,3;2,4]`` and ``[[1,2],[3,4]]`` denote "
"the same 2x2 matrix. Each component can be an expression."
msgstr "陽行列: たとえば ``[1,3;2,4]`` と ``[[1,2],[3,4]]`` は同じ2x2行列を表します。各成分は式になります。"

#: ../source/userdoc/gasm_high.rst:57
msgid ""
"Explicit fourth order tensors: example of explicit 3x2x2x2 fourth order "
"tensor in the nested format: "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``."
msgstr ""
"陽な4次テンソル: 例えば入れ子形式の陽な3x2x2x2の4次テンソルは: "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``"
" です。"

#: ../source/userdoc/gasm_high.rst:59
msgid ""
"``X`` is the current coordinate on the real element, ``X(i)`` is its i-th "
"component."
msgstr "``X`` は実要素上の現在の座標です。 ``X(i)`` はi番目の要素です。"

#: ../source/userdoc/gasm_high.rst:61
msgid ""
"``Normal`` is the outward unit normal vector to a boundary, when integrating"
" on a domain boundary, or the unit normal vector to a level-set when "
"integrating on a level-set with a ``mesh_im_level_set`` method. In the "
"latter case, the normal vector is in the direction of the level-set function"
" gradient."
msgstr ""
"``Normal`` は領域境界に積分するときの境界に対する外向きの単位法線ベクトル、または ``mesh_im_level_set`` "
"メソッドでレベル集合に積分するときのレベル集合への単位法線ベクトルです。後者の場合、法線ベクトルはレベル集合関数勾配の方向にあります。"

#: ../source/userdoc/gasm_high.rst:63
msgid ""
"``Reshape(t, i, j, ...)``: Reshape a vector/matrix/tensor. Note that all "
"tensors in |gf| are stored in the Fortran order."
msgstr ""
"``Reshape(t, i, j, ...)``: ベクトル/行列/テンソルを変形します。 |gf| "
"のすべてのテンソルはFortranの次数で格納されることに留意してください。"

#: ../source/userdoc/gasm_high.rst:65
msgid ""
"A certain number of linear and nonlinear operators (``Trace``, ``Norm``, "
"``Det``, ``Deviator``, ``Contract``, ...). The nonlinear operators cannot be"
" applied to test functions."
msgstr ""
"ある数の線形と非線形の演算子（ ``Trace``、 ``Norm``、 ``Det``、 ``Deviator``、 ``Contract`` "
"など）。非線形演算子は試行関数には適用できません。"

#: ../source/userdoc/gasm_high.rst:67
msgid ""
"``Diff(expression, variable)``: The possibility to explicit differentiate an"
" expression with respect to a variable (symbolic differentiation)."
msgstr "``Diff(expression、variable)``: 変数に対する陽な微分可能性（記号による微分）。"

#: ../source/userdoc/gasm_high.rst:69
msgid ""
"``Diff(expression, variable, direction)``: computes the derivative of "
"``expression`` with respect to ``variable`` in the direction ``direction``."
msgstr ""
"``Diff(expression, variable, direction)``: ``direction`` 方向の ``variable`` "
"に対して ``expression`` の導関数を計算します。"

#: ../source/userdoc/gasm_high.rst:71
msgid ""
"``Grad(expression)``: When possible, symbolically derive the gradient of the"
" given expression."
msgstr "``Grad(expression)``: 可能であれば、与えられた式の勾配を記号的に微分します。"

#: ../source/userdoc/gasm_high.rst:73
msgid ""
"Possiblility of macro definition (in the model, the ga_workspace object or "
"directly in the assembly string). The macros should be some valid "
"expressions that are expanded inline at the lexical analysis phase (if they "
"are used several times, the computation is automatically factorized at the "
"compilation stage)."
msgstr ""
"マクロ定義の可能性（model内では、ga_workspaceオブジェクトまたは構築文字列内で直接）。マクロは、字句解析フェーズでインライン展開された有効な式でなければなりません（数回使用すると、計算はコンパイル段階で自動的に因数分解されます）。"

#: ../source/userdoc/gasm_high.rst:75
msgid ""
"``Interpolate(variable, transformation)``: Powerful operation which allows "
"to interpolate the variables, or test functions either on the same mesh on "
"other elements or on another mesh. ``transformation`` is an object stored by"
" the workspace or model object which describes the map from the current "
"point to the point where to perform the interpolation. This functionality "
"can be used for instance to prescribe periodic conditions or to compute "
"mortar matrices for two finite element spaces defined on different meshes or"
" more generally for fictitious domain methods such as fluid-structure "
"interaction."
msgstr ""
"``Interpolate(variable, transformation)``: "
"他の要素や別のメッシュ上の同じメッシュ上で変数を補間したり試行関数を補うことができる強力な演算。 ``transformation`` "
"は、現在の点から補間を実行する点までのマップを記述するworkspaceまたはmodelオブジェクトによって格納されるオブジェクトです。この機能は、例えば、周期的な条件を規定するため、または異なるメッシュ上に定義された2つの有限要素空間のモルタル行列を計算するため、またはより一般的には流体構造相互作用のような架空の領域法のために使用できます。"

#: ../source/userdoc/gasm_high.rst:77
msgid ""
"``Elementary_transformation(variable, transformation, dest)``: Allow a "
"linear transformation defined at the element level (i.e. not possible to "
"define at the gauss point level). This feature has been added mostly for "
"defining a reduction for plate elements (projection onto low-level vector "
"element such as rotated RT0). ``transformation`` is an object stored by the "
"workspace or model object which describes the trasformation for a particular"
" element. ``dest`` is an optional argument refering to a model variable or "
"data whose fem will be the target fem of the transformation. If omitted, the"
" target fem of the transformation is the one of the first variable."
msgstr ""
"``Elementary_transformation(variable, transformation, dest)``: "
"要素水準で定義された線形変換を許可します（つまり、Gauss積分点基準では定義できません）。この機能は、主にプレート要素の縮小（回転RT0などの低水準のベクトル要素への投影）を定義するために追加されました。"
" ``transformation`` は、特定の要素の変換を記述するworkspaceやmodelオブジェクトによって格納されるオブジェクトです。 "
"``dest`` "
"は、変換のターゲットとなるfemを持つモデル変数またはデータを参照するオプションの引数です。省略された場合、変換のターゲットのfemは最初の変数のものとなります。"

#: ../source/userdoc/gasm_high.rst:79
msgid ""
"Possibility of integration on the direct product of two-domains for double "
"integral computation or coupling of two variables with a Kernel / "
"convolution / exchange integral. This allows terms like "
":math:`\\displaystyle\\int_{\\Omega_1}\\int_{\\Omega_2}k(x,y)u(x)v(y)dydx` "
"with :math:`\\Omega_1` and :math:`\\Omega_2` two domains, different or not, "
"having their own meshes, integration methods and with :math:`u` a variable "
"defined on :math:`\\Omega_1` and :math:`v` a variable defined on "
":math:`\\Omega_2`. The keyword ``Secondary_domain(variable)`` allows to "
"access to the variables on the second domain of integration."
msgstr ""
"二重積分計算またはカーネル/畳み込み/積分積分による2つの変数の結合のための2つの領域の直接積に対する積分の可能です。これにより、次のような表現が可能になります。:math:`\\Omega_1`"
" 上と :math:`\\Omega_2` 上の2つの領域で "
":math:`\\displaystyle\\int_{\\Omega_1}\\int_{\\Omega_2}k(x,y)u(x)v(y)dydx` "
"同じにしろ違うにしろ固有のメッシュと積分手法を持つことができます。ここで、 :math:`u` は :math:`\\Omega_1` "
"上で定義された変数で :math:`v` は :math:`\\Omega_2` 上で定義された変数です。キーワード "
"``Secondary_domain(変数)`` を使用すると、積分の第2領域上の変数にアクセスできます。"

#: ../source/userdoc/gasm_high.rst:82
msgid "Some basic examples"
msgstr "いくつかの基本的な例"

#: ../source/userdoc/gasm_high.rst:84
msgid "The weak formulation for the Poisson problem on a domain :math:`\\Omega`"
msgstr "領域 :math:`\\Omega` 上のPoisson問題の弱定式化。"

#: ../source/userdoc/gasm_high.rst:86 ../source/userdoc/gasm_high.rst:232
msgid "-\\mbox{div } \\nabla u = f, \\mbox{ in } \\Omega,"
msgstr "-\\mbox{div } \\nabla u = f, \\mbox{ in } \\Omega,"

#: ../source/userdoc/gasm_high.rst:90
msgid ""
"with Dirichlet boundary conditions :math:`u = 0` on :math:`\\partial\\Omega`"
" is classically"
msgstr ":math:`\\partial\\Omega` 上のDirichletの境界条件 :math:`u = 0` は古典的な表現です"

#: ../source/userdoc/gasm_high.rst:93
msgid "\\int_{\\Omega} \\nabla u\\cdot \\nabla v dx = \\int_{\\Omega} f v dx,"
msgstr "\\int_{\\Omega} \\nabla u\\cdot \\nabla v dx = \\int_{\\Omega} f v dx,"

#: ../source/userdoc/gasm_high.rst:97
msgid ""
"for all test functions :math:`v` vanishing on  :math:`\\partial\\Omega`. The"
" corresponding expression on the assembly string is::"
msgstr ""
"すべての試行関数について :math:`v` が :math:`\\partial\\Omega` から消えます。構築文字列の対応する式は次の通りです。"

#: ../source/userdoc/gasm_high.rst:102
msgid ""
"where ``my_f`` is the expression of the source term. If now the equation is"
msgstr "ここで、 ``my_f`` はソース項の式です。式が次の通りです。"

#: ../source/userdoc/gasm_high.rst:104
msgid "-\\mbox{div } a\\nabla u = f, \\mbox{ in } \\Omega,"
msgstr "-\\mbox{div } a\\nabla u = f, \\mbox{ in } \\Omega,"

#: ../source/userdoc/gasm_high.rst:108
msgid "for ``a`` a scalar coefficient, the corresponding assembly string is::"
msgstr "``a`` がスカラー係数の場合、対応する構築文字列は"

#: ../source/userdoc/gasm_high.rst:112
msgid ""
"where ``a`` has to be declared as a scalar constant or a scalar field. Not "
"that is is also possible to describe it explicitly. For instance the problem"
msgstr "で ``a`` がスカラー定数またはスカラー項として宣言されなければなりません。それを陽に記述することも可能です。例えば、問題"

#: ../source/userdoc/gasm_high.rst:114
msgid "-\\mbox{div } \\sin(x_1+x_2)\\nabla u = f, \\mbox{ in } \\Omega,"
msgstr "-\\mbox{div } \\sin(x_1+x_2)\\nabla u = f, \\mbox{ in } \\Omega,"

#: ../source/userdoc/gasm_high.rst:118
msgid ""
"where :math:`x_1, x_2` are the coordinates on the mesh, can be expressed::"
msgstr "では :math:`x_1, x_2` はメッシュ上の座標で次のように表現することができます。"

#: ../source/userdoc/gasm_high.rst:122
msgid "Another classical equation is linear elasticity:"
msgstr "別の古典的な方程式は線形弾性です。"

#: ../source/userdoc/gasm_high.rst:124
msgid "-\\mbox{div } \\sigma(u) = f, \\mbox{ in } \\Omega,"
msgstr "-\\mbox{div } \\sigma(u) = f, \\mbox{ in } \\Omega,"

#: ../source/userdoc/gasm_high.rst:128
msgid ""
"for :math:`u` a vector field and :math:`\\sigma(u) = \\lambda \\mbox{div } u"
" + \\mu (\\nabla u + (\\nabla u)^T)` when isotropic linear elasticity is "
"considered. The corresponding assembly string to describe the weak "
"formulation can be written::"
msgstr ""
"等価線形弾性の場合には、ベクトル場 :math:`u` と :math:`\\sigma(u) = \\lambda \\mbox{div } u + "
"\\mu (\\nabla u + (\\nabla u)^T)` "
"が考えられています。弱定式化の記述に対応する構築文字列は以下のように書くことができます。"

#: ../source/userdoc/gasm_high.rst:132 ../source/userdoc/gasm_high.rst:624
#: ../source/userdoc/gasm_high.rst:728
msgid "or::"
msgstr "または次の通りです。"

#: ../source/userdoc/gasm_high.rst:136
msgid ""
"Here again, the coefficients ``lambda`` and ``mu`` can be given constants, "
"or scalar field or explicit expression or even expression coming from some "
"other variables in order to couples some problems. For instance, if the "
"coefficients depends on a temperature field one can write::"
msgstr ""
"ここでもまた、いくつかの問題を結合するために、係数 ``lambda`` と ``mu`` "
"に定数、あるいはスカラーフィールドや陽表現、あるいは他の変数からの式を与えますことができます。たとえば、係数が温度場に依存する場合、次のように書くことができます。"

#: ../source/userdoc/gasm_high.rst:140
msgid ""
"where ``theta`` is the temperature which can be the solution to a Poisson "
"equation::"
msgstr "ここで、 ``theta`` は、Poisson方程式の解である温度です。"

#: ../source/userdoc/gasm_high.rst:144
msgid ""
"and ``my_f1`` and ``my_f2`` are some given functions. Note that in that "
"case, the problem is nonlinear due to the coupling, even if the two "
"functions  ``my_f1`` and ``my_f2`` are linear."
msgstr ""
"``my_f1`` と ``my_f2`` はいくつかの与えられた関数です。その場合、2つの関数 ``my_f1`` と ``my_f2`` "
"が線形であっても、結合されているために問題は非線形であることに注意してください。"

#: ../source/userdoc/gasm_high.rst:148
msgid "Derivation order and symbolic differentiation"
msgstr "微分次数と記号による微分"

#: ../source/userdoc/gasm_high.rst:150
msgid ""
"The derivation order of the assembly string is automatically detected. This "
"means that if no test functions are found, the order will be considered to "
"be 0 (potential energy), if first order test functions are found, the order "
"will be considered to be 1 (weak formulation) and if both first and second "
"order test functions are found, the order will be considered to be 2 "
"(tangent system)."
msgstr ""
"構築文字列の微分次数は自動的に検出されます。試行関数が見つからない場合、次数は0（ポテンシャルエネルギー）とみなされ、1次試行関数が見つかった場合、その次数は1（弱定式化）とみなされ、1次と2次の両方の試行関数が見つかると、次数は2（接線系）とみなされます。"

#: ../source/userdoc/gasm_high.rst:152
msgid ""
"In order to perform an assembly (see next section), one should specify the "
"order (0, 1 or 2). If an order 1 string is furnished and an order 2 assembly"
" is required, a symbolic differentiation of the expression is performed. The"
" same if an order 0 string is furnished and if an order 1 or 2 assembly is "
"required. Of course, the converse is not true. If an order 1 expression is "
"given and an order 0 assembly is expected, no integration is performed. This"
" should not be generally not possible since an arbitrary weak formulation do"
" not necessary derive from a potential energy."
msgstr ""
"構築（次のセクションを参照）を実行するには、次数（0,1または2）を指定する必要があります。次数1の文字列が提供され、次数2の構築が必要な場合は、式の記号微分が行われます。次数0の文字列が提供され、次数1または2の構築が必要な場合も同じです。もちろん、その逆は真ではありません。次数1の式が指定され、次数0の構築が予想される場合、積分は行われません。任意の弱定式化はポテンシャルエネルギーから微分する必要はないので、これは一般に必要ではありません。"

#: ../source/userdoc/gasm_high.rst:154
msgid ""
"The standard way to use the generic assembly is to furnish order 1 "
"expressions (i.e. a weak formulation). If a potential energy exists, one may"
" furnish it. However, it will be derived twice to obtain the tangent system "
"which could result in complicated expressions. For nonlinear problems, it is"
" not allowed to furnish order 2 expressions directly. The reason is that the"
" weak formulation is necessary to obtain the residual. So nothing could be "
"done with a tangent term without having the corresponding order 1 term."
msgstr ""
"汎用構築を使用する標準的な方法は、次数1の式（すなわち、弱定式化）を与えることです。ポテンシャルエネルギーが存在する場合、それを供給することが可能です。しかし、複雑な表現をもたらす接線系を得るためには2回導かれます。非線形問題では、2次式を直接指定することはできません。その理由は、残差を得るために弱定式化が必要であるからです。したがって、対応する次数1の項を持たないで接線項を使用することはできません。"

#: ../source/userdoc/gasm_high.rst:156
msgid ""
"IMPORTANT REMARK: Note that for coupled problems, a global potential "
"frequently do not exists. So that the part of problems directly defined with"
" a potential may be difficult to couple. To illustrate this, if you defined "
"a potential with some parameters (elasticity coefficients for instance), and"
" the couplingconsists in a variation of these coefficients with respect to "
"another variable, then the weak formulation do not consist of course in the "
"derivative of the potential with respect to the coefficients which has "
"generally no sense. This is the reason why the definition through a "
"potential should be the exception."
msgstr ""
"重要な注意事項: "
"結合した問題については、グローバルポテンシャルはしばしば存在しないことに注意してください。ポテンシャルが直接定義された問題の部分を結合するのは難しい場合があります。これを説明するために、いくつかのパラメータ（たとえば弾性係数）を持つポテンシャルを定義し、その係数が別の変数との変動の変化で構成されている場合、弱定式化はもちろんポテンシャルの導関数ではありません、一般的に意味を持たない係数に関するものです。ポテンシャルの定義が例外でなければならないのはこれが理由です。"

#: ../source/userdoc/gasm_high.rst:160
msgid "C++ Call of the assembly"
msgstr "構築のためのC ++呼び出し"

#: ../source/userdoc/gasm_high.rst:162
msgid ""
"Note that the most natural way to use the generic assembly is by the use of "
"the generic assembly bricks of the model object, see Section :ref:`ud-model-"
"generic-assembly`. It is however also possible to use the high level generic"
" assembly on its own."
msgstr ""
"汎用構築を使用する最も自然な方法はmodelオブジェクトの汎用構築要素を使用することです（ :ref:`ud-model-generic-"
"assembly` 節を参照してください）。しかし、高水準汎用構築を単独で使用することも可能です。"

#: ../source/userdoc/gasm_high.rst:164
msgid ""
"The generic assembly is driven by the object ``getfem::ga_workspace`` "
"defined in :file:`getfem/getfem\\_generic_assembly.h`."
msgstr ""
"汎用構築は :file:`getfem/getfem\\_generic_assembly.h` で定義されたオブジェクト "
"``getfem::ga_workspace`` によって駆動されます。"

#: ../source/userdoc/gasm_high.rst:166
msgid ""
"There is two ways to define a ``getfem::ga_workspace`` object. It can depend"
" on a model (see :ref:`ud-model`) and should be declared as::"
msgstr ""
"``getfem::ga_workspace`` オブジェクトを定義する方法は2つあります。それはmodelに依存し（ :ref:`ud-model` "
"を参照）次のように定義する必要があります。"

#: ../source/userdoc/gasm_high.rst:170
msgid ""
"with ``model`` a previously define ``getfem::model`` object. In that case "
"the variable and constant considered are the one of the model. The second "
"way it to define an independent ``getfem::ga_workspace`` object by::"
msgstr ""
"``model`` はあらかじめ ``getfem::model`` "
"でオブジェクトとしてを定義されています。その場合、考慮する変数と定数はmodelの一部です。第2の方法は次に示す方法によって独立した "
"``getfem::ga_workspace`` オブジェクトを定義する方法です。"

#: ../source/userdoc/gasm_high.rst:174
msgid ""
"In that case, the variable and constant have to be added to the workspace. "
"This can be done thanks to the following methods::"
msgstr "その場合、変数と定数をworkspaceに追加する必要があります。これは以下の方法により実行できます::"

#: ../source/userdoc/gasm_high.rst:186
msgid ""
"where ``name`` is the variable/constant name (see in the next sections the "
"restriction on possible names), ``mf`` is the ``getfem::mesh_fem`` object "
"describing the finite element method, ``I`` is an object of class "
"``gmm::sub_interval`` indicating the interval of the variable on the "
"assembled vector/matrix and ``V`` is a ``getfem::base_vector`` being the "
"value of the variable/constant. The last method add a constant defined on an"
" ``im_data`` object ``imd`` which allows to store scalar/vector/tensor field"
" informations on the integration points of an ``mesh_im`` object."
msgstr ""
"ここで、 ``name`` は変数/定数名です（次の節の名前の制限を参照）。 ``mf`` は有限要素法を記述する "
"``getfem::mesh_fem`` オブジェクトです。 ``I`` は構築られたベクトル/行列上の変数の間隔を示す "
"``gmm::sub_interval`` クラスのオブジェクトであり、 ``V`` は変数/変数の値である "
"``getfem::base_vector`` です。最後のメソッドは、 ``im_data`` オブジェクト ``imd`` "
"に定義された定数を追加します。これは、 ``mesh_im`` "
"オブジェクトの積分点にスカラー/ベクトル/テンソルフィールド情報を格納することを可能にします。"

#: ../source/userdoc/gasm_high.rst:189
msgid ""
"Once it is declared and once the variables and constant are declared, it is "
"possible to add assembly string to the workspace with::"
msgstr "一度宣言され、一度変数と定数が宣言されると、構築文字列を次のようにしてworkspaceに追加することができます。"

#: ../source/userdoc/gasm_high.rst:193
msgid ""
"where ``\"my expression\"`` is the assembly string, ``mim`` is a "
"``getfem::mesh_im`` object and ``rg`` if an optional valid region of the "
"mesh corresponding to ``mim``."
msgstr ""
"``mim`` に対応するメッシュのオプションの有効な領域が ``mf`` にある場合、 ``mf`` は ``getfem::mesh_im`` "
"オブジェクトと ``rg`` です。"

#: ../source/userdoc/gasm_high.rst:195
msgid ""
"As it is explained in the previous section, the order of the string will be "
"automatically detected and a symbolic differentiation will be performed to "
"obtain the corresponding tangent term."
msgstr "前のセクションで説明したように、文字列の順序が自動的に検出され、対応する接線項を得るために記号的な微分が実行されます。"

#: ../source/userdoc/gasm_high.rst:197
msgid ""
"Once assembly strings are added to the workspace, is is possible to call::"
msgstr "構築文字列がworkspaceに追加されると、以下を呼び出すことができます。"

#: ../source/userdoc/gasm_high.rst:201
msgid ""
"where ``order`` should be equal to 0 (potential energy), 1 (residual vector)"
" or 2 (tangent term, or stiffness matrix for linear problems). The result of"
" the assembly is available as follows::"
msgstr ""
"``order`` "
"は0（ポテンシャルエネルギー）、1（残差ベクトル）または2（線形問題の接線項または剛性行列）のいずれかでなければなりません。構築の結果は次のように利用できます。"

#: ../source/userdoc/gasm_high.rst:209
msgid ""
"By default, the assembled potential, vector and matrix is initialized to "
"zero at the beginning of the assembly. It is however possible (and "
"recommended) to set the assembly vector and matrix to external ones to "
"perform an incremental assembly. The two methods::"
msgstr ""
"デフォルトでは、アセンブルされたポテンシャル、ベクトル、およびマトリックスは、構築の開始時にゼロに初期化されます。ただし、増分構築を実行するために、構築ベクトルと行列を外部ベクトルと行列に設定することが可能です（お勧めします）。"
" 2つの方法により構築が可能です。"

#: ../source/userdoc/gasm_high.rst:215
msgid ""
"allows to do so. Be aware to give a vector and a matrix of the right "
"dimension."
msgstr "そうすることができます。正しい次元のベクトルと行列を与えるように注意してください。"

#: ../source/userdoc/gasm_high.rst:218
msgid "Note also that the method::"
msgstr "また、次のメソッドにより"

#: ../source/userdoc/gasm_high.rst:222
msgid ""
"allows to cancel all furnished expressions and allows to re-use the same "
"workspace for another assembly."
msgstr "付属のすべての式を取り消すことができ、別の構築で同じworkspaceを再利用することができます。"

#: ../source/userdoc/gasm_high.rst:225
msgid ""
"It is also possible to call the generic assembly from the "
"Python/Scilab/Matlab interface. See ``gf_asm`` command of the interface for "
"more details."
msgstr ""
"汎用構築を Python/Scilab/Matlab インタフェースから呼び出すこともできます。詳細はインタフェースの ``gf_asm`` "
"コマンドを参照してください。"

#: ../source/userdoc/gasm_high.rst:228
msgid "C++ assembly examples"
msgstr "C ++構築の例"

#: ../source/userdoc/gasm_high.rst:230
msgid ""
"As a first example, if one needs to perform the assembly of a Poisson "
"problem"
msgstr "第1の例として、Poisson問題の構築を紹介します。"

#: ../source/userdoc/gasm_high.rst:236
msgid "the stiffness matrix is given"
msgstr "剛性行列は次式で与えられ"

#: ../source/userdoc/gasm_high.rst:238
msgid "K_{i,j} = \\int_{\\Omega} \\nabla \\varphi_i \\cdot \\nabla \\varphi_j dx,"
msgstr "K_{i,j} = \\int_{\\Omega} \\nabla \\varphi_i \\cdot \\nabla \\varphi_j dx,"

#: ../source/userdoc/gasm_high.rst:242
msgid "and will be assembled by the following code::"
msgstr "次のコードでアセンブルされます。"

#: ../source/userdoc/gasm_high.rst:253
msgid ""
"where of course, ``mf`` is supposed to be an already declared "
"``getfem::mesh_fem`` object and ``mim`` a already declared "
"``getfem::mesh_im`` object on the same mesh. Note that the value of the "
"variable do not really intervene because of the linearity of the problem. "
"This allows to pass ``getfem::base_vector(nbdof)`` as the value of the "
"variable which will not be used. Note also that two other possible "
"expressions for exactly the same result for the assembly string are "
"``\"Grad_Test2_u.Grad_Test_u\"`` (i.e. an order 2 expression) or "
"``\"Norm_sqr(Grad_u)/2\"`` (i.e. a potential). In fact other possible "
"assembly string will give the same result such as ``\"Grad_u.Grad_u/2\"`` or"
" ``\"[Grad_u(1), Grad_u(2)].[Grad_Test_u(1), Grad_Test_u(2)]\"`` for two-"
"dimensional problems. However, the recommendation is preferably to give an "
"order 1 expression (weak formulation) if there is no particular reason to "
"prefer an order 0 or an order 2 expression."
msgstr ""
"もちろん、 ``mf`` はすでに宣言された ``getfem::mesh_fem`` オブジェクトであり、 ``mim`` はすでに同じメッシュ上に "
"``getfem::mesh_im`` "
"オブジェクトとして宣言されています。変数の値は、問題の線形性のために実際に使用するわけではないことに注意してください。使用されない変数の値として "
"``getfem::base_vector(nbdof)`` を渡すことができます。また、構築-文字列の結果とまったく同じ結果が得られる2つの式は、 "
"``\"Grad_Test2_u.Grad_Test_u\"`` すなわち、2次式）または ``\"Norm_sqr(Grad_u)/2\"`` "
"（すなわち、ポテンシャル）。 ``\"Grad_u.Grad_u/2\"`` か2次元問題のための  ``\"[Grad_u(1), "
"Grad_u(2)].[Grad_Test_u(1), Grad_Test_u(2)]\"`` "
"などでも同じ結果が得られます。しかしながら、0次または2次の表現を使用する特別な理由がなければ、1次の表現（弱定式化）を与えることが推奨されます。"

#: ../source/userdoc/gasm_high.rst:255
msgid ""
"As a second example, let us consider a coupled problem, for instance the "
"mixed problem of incompressible elasticity given by the equations"
msgstr "第2の例として、連成問題である非圧縮性弾性の混合問題を考えます"

#: ../source/userdoc/gasm_high.rst:257
msgid ""
"-\\mbox{div}(\\mu(\\nabla u + (\\nabla u)^T - p I_d)  = f, \\mbox{ in } "
"\\Omega,  \\mbox{div } u = 0."
msgstr ""
"-\\mbox{div}(\\mu(\\nabla u + (\\nabla u)^T - p I_d)  = f, \\mbox{ in } "
"\\Omega,  \\mbox{div } u = 0."

#: ../source/userdoc/gasm_high.rst:263
msgid ""
"where ``u`` is the vector valued displacement and ``p`` the pressure. The "
"assembly of the matrix for the whole coupled system can be performed as "
"follows::"
msgstr "ここで ``u`` はベクトル値の変位であり、 ``p`` は圧力です。結合されたシステム全体のマトリックスは以下のように構築します。"

#: ../source/userdoc/gasm_high.rst:280
msgid ""
"where, here, ``mf_u`` and ``mf_p`` are supposed to be some already declared "
"``getfem::mesh_fem`` objects defined on the same mesh, ``mim`` a already "
"declared ``getfem::mesh_im`` object and ``mu`` is the Lame coefficient. It "
"is also possible to perform the assembly of the sub-matrix of this system "
"separately."
msgstr ""
"ここで ``mf_u`` と ``mf_p`` はすでに同じメッシュに定義されている ``getfem::mesh_fem`` オブジェクトの一部で、 "
"``mim`` は定義済みの ``getfem::mesh_im`` オブジェクト、  ``mu`` "
"はLameの弾性定数です。このシステムの部分行列の構築を別々に行うことも可能です。"

#: ../source/userdoc/gasm_high.rst:283
msgid ""
"Let us see now how to perform the assembly of a source term. The weak "
"formulation of a volumic source term is"
msgstr "ソース項の構築方法を見てみましょう。ボリュームソース項の弱定式化は次のとおりです。"

#: ../source/userdoc/gasm_high.rst:285
msgid "\\int_{\\Omega} fv dx"
msgstr "\\int_{\\Omega} fv dx"

#: ../source/userdoc/gasm_high.rst:288
msgid ""
"where :math:`f` is the source term and :math:`v` the test function. The "
"corresponding assembly can be written::"
msgstr "ここで、 :math:`f` はソース項であり、 :math:`v` は試行関数です。この構築は次のように記述します。"

#: ../source/userdoc/gasm_high.rst:300
msgid ""
"if the source term is describe on a finite element ``mf_data`` and the "
"corresponding vector of degrees of freedom ``F``. Explicit source terms are "
"also possible. For instance::"
msgstr ""
"ソース項が有限要素 ``mf_data`` とそれに対応する自由度のベクトル ``F`` "
"で記述されている場合。陽なソース項を定義することも可能です。例えば ::"

#: ../source/userdoc/gasm_high.rst:311
msgid ""
"is also valid. If the source term is a boundary term (in case of a Neumann "
"condition) the only difference is that the mesh region corresponding to the "
"boundary have to be given as follows::"
msgstr ""
"も有効です。ソース項が境界項（Neumann条件の場合）である場合、唯一の違いは、境界に対応するメッシュ領域を次のように与えられなければならないことです。"

#: ../source/userdoc/gasm_high.rst:315
msgid "where ``region`` is the mesh region number."
msgstr "ここで ``region`` はメッシュ領域番号です。"

#: ../source/userdoc/gasm_high.rst:317
msgid ""
"As another example, let us describe a simple nonlinear elasticity problem. "
"Assume that we consider a Saint-Venant Kirchhoff constitutive law which "
"means that we consider the following elastic energy on a body of reference "
"configuration :math:`\\Omega`:"
msgstr ""
"別の例として、単純な非線形弾性問題を説明します。Saint-Venant Kirchhoff構成則を考えると、次のような基準構成体 "
":math:`\\Omega` 上の弾性エネルギーとみなす必要があります"

#: ../source/userdoc/gasm_high.rst:319
msgid "\\int_{\\Omega} \\Frac{\\lambda}{2} (\\mbox{tr}(E))^2 + \\mu \\mbox{tr}(E^2) dx"
msgstr "\\int_{\\Omega} \\Frac{\\lambda}{2} (\\mbox{tr}(E))^2 + \\mu \\mbox{tr}(E^2) dx"

#: ../source/userdoc/gasm_high.rst:322
msgid ""
"where :math:`\\lambda, \\mu` are the |Lame| coefficients and  :math:`E` is "
"the strain tensor given by :math:`E = (\\nabla u + (\\nabla u)^T + (\\nabla "
"u)^T\\nabla u)/2`."
msgstr ""
"ここで :math:`\\lambda, \\mu` は |Lame| 定数で :math:`E` は、式 :math:`E = (\\nabla u "
"+ (\\nabla u)^T + (\\nabla u)^T\\nabla u)/2` で与えられる歪みテンソルです。"

#: ../source/userdoc/gasm_high.rst:324
msgid ""
"This is possible to perform the assembly of the corresponding tangent "
"problem as follows::"
msgstr "この問題では、対応する接線問題を以下のように構築することが可能です。"

#: ../source/userdoc/gasm_high.rst:343
msgid ""
"and to adapt a Newton-Raphson algorithm to solve that nonlinear problem. Of "
"course the expression is rather repetitive and it would be preferable to "
"define some intermediate nonlinear operators. However, note that repeated "
"expressions are automatically detected and computed only once in the "
"assembly."
msgstr ""
"この非線形問題を解くためにNewton-"
"Raphsonアルゴリズムを適応します。もちろん、表現はより反復的であり、いくつかの中間非線形演算子を定義することが望ましいです。ただし、繰り返し式は自動的に検出され、構築内で1回だけ計算されます。"

#: ../source/userdoc/gasm_high.rst:345
msgid ""
"The last example is the assembly of the stiffness matrix of an order four "
"problem, the Kirchhoff-Love plate problem::"
msgstr "最後の例は、4次問題の剛性行列を構築するKirchhoff-Love板の問題です。"

#: ../source/userdoc/gasm_high.rst:360
msgid "with ``D`` the flexion modulus and ``nu`` the Poisson ratio."
msgstr "``D`` は屈曲率であり、 ``nu`` はPoisson比です。"

#: ../source/userdoc/gasm_high.rst:363
msgid "Script languages call of the assembly"
msgstr "構築言語のスクリプト言語からの呼び出し"

#: ../source/userdoc/gasm_high.rst:365
msgid ""
"For the use with Python, Scilab or Matlab interfaces, see the respective "
"documentation, in particular the ``gf_asm`` command and the ``model`` "
"object."
msgstr ""
"Python、Scilab、Matlabのインタフェースで使用する場合は、それぞれのドキュメント、特に ``gf_asm`` コマンドと "
"``model`` オブジェクトを参照してください。"

#: ../source/userdoc/gasm_high.rst:369
msgid "The tensors"
msgstr "テンソル"

#: ../source/userdoc/gasm_high.rst:371
msgid ""
"Basically, what is manipulated in the weak form language are tensors. This "
"can be order 0 tensors in scalar expressions (for instance in "
"``3+sin(pi/2)``), order 1 tensors in vector expressions (such as ``X.X`` or "
"``Grad_u`` if u is a scalar variable), order 2 tensors for matrix "
"expressions and so on. For efficiency reasons, the language manipulates "
"tensors up to order six. The language could be easily extended to support "
"tensors of order greater than six but it may lead to inefficient "
"computations. When an expression contains test functions (as in "
"``Trace(Grad_Test_u)`` for a vector field ``u``), the computation is done "
"for each test functions, which means that the tensor implicitly have a "
"supplementary component. This means that, implicitly, the maximal order of "
"manipulated tensors are in fact six (in ``Grad_Test_u:Grad_Test2_u`` there "
"are two components implicitly added for first and second order test "
"functions)."
msgstr ""
"基本的に、弱形式言語で操作されるのはテンソルです。例えば、スカラー式の0次テンソル（例えば、 ``3 + sin(pi / 2)`` "
"）、ベクトル式の1テンソル（ ``XX`` や ``u`` がスカラー変数の場合の ``Grad_u`` "
"など）、行列表現の2テンソルなどです。効率性の理由から、言語はテンソルを最大6まで操作します。この言語は、6以上の次数のテンソルもサポートするように容易に拡張することができますが、非効率的な計算につながる可能性があります。式に試行関数が含まれている場合（ベクトルフィールド"
" ``u`` の場合は ``Trace(Grad_Test_u)`` "
"のように）、テンソルは暗黙的に補足成分を持つ各試行関数に対して計算が行われます。これは暗黙のうちに、操作されるテンソルの最大次数は実際には6であることを意味します（"
" ``Grad_Test_u.Grad_Test2_u`` には1次および2次試行関数のために2つの成分が暗黙に追加されています）。"

#: ../source/userdoc/gasm_high.rst:373
msgid ""
"Order four tensors are necessary for instance to express elasticity tensors "
"or in general to obtain the tangent term for vector valued unknowns."
msgstr "弾性テンソルを表現するために、または汎用的なベクトル値の未知数の接線項を得るために、4次のテンソルが必要です。"

#: ../source/userdoc/gasm_high.rst:377
msgid "The variables"
msgstr "変数"

#: ../source/userdoc/gasm_high.rst:379
msgid ""
"A list of variables should be given to the ``ga_worspace`` object (directly "
"or through a model object). The variables are described on a finite element "
"method or can be a simple vector of unknowns. This means that it is possible"
" also to couple algebraic equations to pde ones on a model. A variable name "
"should begin by a letter (case sensitive) or an underscore followed by a "
"letter, a number or an underscore. Some name are reserved, this is the case "
"of operators names (``Det``, ``Norm``, ``Trace``, ``Deviator``, ...) and "
"thus cannot be used as variable names. The name should not begin by "
"``Test_``, ``Test2_``, ``Grad_``, ``Div_`` or ``Hess_``. The variable name "
"should not correspond to a predefined function (``sin``, ``cos``, ``acos`` "
"...) and to constants (``pi``, ``Normal``, ``X``, ``Id`` ...)."
msgstr ""
"変数のリストは ``ga_worspace`` "
"オブジェクトに（直接またはmodelオブジェクトを通して）与えなければなりません。変数は有限要素法で記述されるか、未知数の単純なベクトルになります。これは、代数方程式をmodel上の部分方程式に結合することも可能であることを意味します。変数名は、文字（大文字小文字を区別する）またはアンダースコアの後に文字、数字、またはアンダースコアを続けて指定する必要があります。いくつかの名前は予約されていますが、これは演算子の名前（``Det``、"
" ``Norm``、 ``Trace``、 ``Deviator`` など）で、変数名として使用できません。名前は ``Test_`` 、 "
"``Test2_`` 、 ``Grad_`` 、 ``Div_`` または ``Hess_`` "
"で始めることはできません。変数名はあらかじめ定義された関数（ ``sin``、 ``cos``、 ``acos`` ...）と定数（``pi`` 、 "
"``Normal`` 、 ``X`` 、 ``Id`` ...）を使用することはできません。"

#: ../source/userdoc/gasm_high.rst:382
msgid "The constants or data"
msgstr "定数またはデータ"

#: ../source/userdoc/gasm_high.rst:384
msgid ""
"A list of constants could also be given to the ``ga_worspace`` object. The "
"rule are the same as for the variables but no test function can be "
"associated to constants and there is no symbolic differentiation with "
"respect to constants. Scalar constants are often defined to represent the "
"coefficients which intervene in constitutive laws. Additionally, constants "
"can be some scalar/vector/tensor fields defined on integration points via a "
"``im_data`` object (for instance for some implementation of the "
"approximation of constitutive laws such as plasticity)."
msgstr ""
"定数のリストを ``ga_worspace`` "
"オブジェクトに与えることもできます。ルールは変数と同じですが、試行関数を定数に関連付けることはできず、定数に関して記号的な微分もありません。スカラー定数は、構成則に介入する係数を表すために定義されることが多いです。さらに、定数は、「im_data」オブジェクトを介して積分点上に定義されたいくつかのスカラー/ベクトル/テンソルフィールド（例えば、可塑性のような構成法の近似のいくつかの実装のために）です。"

#: ../source/userdoc/gasm_high.rst:388
msgid "Test functions"
msgstr "試行関数"

#: ../source/userdoc/gasm_high.rst:390
msgid ""
"Each variable is associated with first order and second order test "
"functions. The first order test function are used in the weak formulation "
"(which derive form the potential equation if it exists) and the second order"
" test functions are used in the tangent system. For a variable ``u`` the "
"associated test functions are ``Test_u`` and ``Test2_u``. The assembly "
"string have to be linear with respect to test functions. As a result of the "
"presence of the term ``Test_u`` on a assembly string, the expression will be"
" evaluated for each shape function of the finite element corresponding to "
"the variable ``u``. On a given element, if the finite element have ``N`` "
"shape functions ans if ``u`` is a scalar field, the value of ``Test_u`` will"
" be the value of each shape function on the current point. So ``Test_u`` "
"return if face a vector of ``N`` values. But of course, this is implicit in "
"the language. So one do not have to care about this."
msgstr ""
"各変数は、1次および2次の試行関数に関連付けられています。第1次試行関数は、弱定式化（それが存在すれば潜在的な式を微分する）で使用され、第2次試行関数は接触モデルで使用されます。変数"
" ``u`` に関連する試行関数は ``Test_u`` と ``Test2_u`` "
"です。構築文字列は、試行関数に対して線形でなければなりません。構築文字列に ``Test_u`` という項が存在する結果として、式は変数 ``u`` "
"に対応する有限要素の各試行関数について評価されます。与えられた要素において、有限要素が試行関数 ``N`` を持つ場合、 ``u`` "
"がスカラ場である場合、 ``Test_u`` の値は現在の点上の各試行関数の値になります。ゆえに ``Test_u`` は ``N`` "
"値のベクトルの直交面を返します。もちろん、これは言語に暗黙のうちに書かれています。ゆえに、これについて気にする必要はありません。"

#: ../source/userdoc/gasm_high.rst:395
msgid "Gradient"
msgstr "勾配"

#: ../source/userdoc/gasm_high.rst:397
msgid ""
"The gradient of a variable or of test functions are identified by ``Grad_`` "
"followed by the variable name or by ``Test_`` followed itself by the "
"variable name. This is available for FEM variables (or constants) only. For "
"instance ``Grad_u``, ``Grad_v``, ``Grad_p``, ``Grad_pressure``, "
"``Grad_electric_field`` and ``Grad_Test_u``, ``Grad_Test_v``, "
"``Grad_Test_p``, ``Grad_Test_pressure``, ``Grad_Test_electric_field``. The "
"gradient is either a vector for scalar variables or a matrix for vector "
"field variables. In the latter case, the first index corresponds to the "
"vector field dimension and the second one to the index of the partial "
"derivative.  ``Div_u`` and ``Div_Test_u`` are some optimized shortcuts for "
"``Trace(Grad_u)`` and ``Trace(Grad_Test_u)``, respectively."
msgstr ""
"変数または試行関数の勾配は、 ``Grad_`` と変数名または ``Test_`` "
"とそれに続く変数名によって識別されます。これは、FEM変数（または定数）でのみ使用できます。例えば、 ``Grad_u`` 、 ``Grad_v`` 、"
" ``Grad_p`` 、 ``Grad_pressure`` 、 ``Grad_electric_field`` 、 ``Grad_Test_u`` "
"、 ``Grad_Test_v`` 、``Grad_Test_p``、 ``Grad_Test_pressure``、 "
"``Grad_Test_electric_field`` "
"です。勾配は、スカラ変数のベクトルかベクトル場変数の行列のいずれかです。後者の場合、第1のインデックスはベクトルフィールド次元に対応し、第2のインデックスは部分導関数のインデックスに対応します。"
" ``Div_u`` と ``Div_Test_u`` は、それぞれ ``Trace(Grad_u)`` と "
"``Trace(Grad_Test_u)`` を最適化したショートカットです。"

#: ../source/userdoc/gasm_high.rst:400
msgid "Hessian"
msgstr "Hessian"

#: ../source/userdoc/gasm_high.rst:402
msgid ""
"Similarly, the Hessian of a variable or of test functions are identified by "
"``Hess_`` followed by the variable name or by ``Test_`` followed itself by "
"the variable name. This is available for FEM variables only. For instance "
"``Hess_u``, ``Hess_v``, ``Hess_p``, ``Hess_pressure``, "
"``Hess_electric_field`` and ``Hess_Test_u``, ``Hess_Test_v``, "
"``Hess_Test_p``, ``Hess_Test_pressure``, ``Hess_Test_electric_field``. The "
"Hessian is either a matrix for scalar variables or a third order tensor for "
"vector field variables. In the latter case, the first index corresponds to "
"the vector field dimension and the two remaining to the indices of partial "
"derivatives."
msgstr ""
"同様に、変数または試行関数のヘッセ行列は、 ``Hess_`` と変数名または ``Test_`` "
"とそれに続く変数名によって識別されます。これは、FEM変数でのみ使用できます。例えば、 ``Hess_u`` 、 ``Hess_v`` 、 "
"``Hess_p`` 、 ``Hess_pressure`` 、 ``Hess_electric_field`` 、 ``Hess_Test_u`` 、"
" ``Hess_Test_v`` 、 ``Hess_Test_p`` 、 ``Hess_Test_pressure`` 、 "
"``Hess_Test_electric_field`` "
"です。ヘッセ行列は、スカラ変数の行列またはベクトル場変数の3次テンソルのいずれかです。後者の場合、第1のインデックスはベクトル場次元に対応し、第2のインデックスは部分導関数に対応します。"

#: ../source/userdoc/gasm_high.rst:406
msgid "Predefined scalar functions"
msgstr "定義済みのスカラー関数"

#: ../source/userdoc/gasm_high.rst:408
msgid ""
"A certain number of predefined scalar functions can be used. The exhaustive "
"list is the following and for most of them are equivalent to the "
"corresponding C function:"
msgstr "特定の数の事前定義されたスカラー関数を使用することができます。網羅的なリストは以下の通りであり、そのほとんどは対応するC関数と同等です。"

#: ../source/userdoc/gasm_high.rst:410
msgid ""
"``sqr(t)`` (the square of t, equivalent to t*t), ``pow(t, u)`` (t to the "
"power u), ``sqrt(t)`` (square root of t), ``exp(t)``, ``log(t)``, "
"``log10(t)``"
msgstr ""
"``sqr(t)`` （tの平方根、t*t に相当）、 ``pow(t,u)`` （tのu乗）、 ``sqrt(t)`` （tの平方根）、 "
"``exp(t)`` 、 ``log(t)`` 、 ``log10(t)``"

#: ../source/userdoc/gasm_high.rst:413
msgid ""
"``sin(t)``, ``cos(t)``, ``tan(t)``, ``asin(t)``, ``acos(t)``, ``atan(t)``, "
"``atan2(t, u)``"
msgstr ""
"``sin(t)``, ``cos(t)``, ``tan(t)``, ``asin(t)``, ``acos(t)``, ``atan(t)``, "
"``atan2(t, u)``"

#: ../source/userdoc/gasm_high.rst:415
msgid ""
"``sinh(t)``, ``cosh(t)``, ``tanh(t)``, ``asinh(t)``, ``acosh(t)``, "
"``atanh(t)``"
msgstr ""
"``sinh(t)``, ``cosh(t)``, ``tanh(t)``, ``asinh(t)``, ``acosh(t)``, "
"``atanh(t)``"

#: ../source/userdoc/gasm_high.rst:417
msgid "``erf(t)``, ``erfc(t)``"
msgstr "``erf(t)``, ``erfc(t)``"

#: ../source/userdoc/gasm_high.rst:418
msgid "``sinc(t)`` (the cardinal sine function sin(t)/t)"
msgstr "``sinc(t)`` （基本的な正弦関数sin(t)/t）"

#: ../source/userdoc/gasm_high.rst:420
msgid "``Heaviside(t)`` (:math:`0 \\mbox{ for } t < 0, 1 \\mbox{ for } t \\ge 0`)"
msgstr "``Heaviside(t)`` (:math:`0 \\mbox{ for } t < 0, 1 \\mbox{ for } t \\ge 0`)"

#: ../source/userdoc/gasm_high.rst:421
msgid "``sign(t)``"
msgstr "``sign(t)``"

#: ../source/userdoc/gasm_high.rst:422
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../source/userdoc/gasm_high.rst:423
msgid "``pos_part(t)`` (:math:`tH(t)`)"
msgstr "``pos_part(t)`` (:math:`tH(t)`)"

#: ../source/userdoc/gasm_high.rst:424
msgid ""
"``reg_pos_part(t, eps)`` (:math:`(t-eps/2-t^2/(2eps))H(t-eps) + "
"t^2H(t)/(2eps)`)"
msgstr ""
"``reg_pos_part(t, eps)`` (:math:`(t-eps/2-t^2/(2eps))H(t-eps) + "
"t^2H(t)/(2eps)`)"

#: ../source/userdoc/gasm_high.rst:425
msgid "``neg_part(t)`` (:math:`-tH(-t)`), ``max(t, u)``, ``min(t, u)``"
msgstr "``neg_part(t)`` (:math:`-tH(-t)`), ``max(t, u)``, ``min(t, u)``"

#: ../source/userdoc/gasm_high.rst:427
msgid ""
"A scalar function can be applied to a scalar expression, but also to a "
"tensor one. If is is applied to a tensor expression, is is applied "
"componentwise and the result is a tensor with the same dimensions. For "
"functions having two arguments (pow(t,u), min(t,u) ...) if two non-scalar "
"arguments are passed, the dimension have to be the same. For instance "
"\"max([1;2],[0;3])\" will return \"[0;3]\"."
msgstr ""
"スカラ関数は、スカラー式に適用することもできますが、テンソル式に適用することもできます。 "
"テンソル式に適用される場合、これは成分単位で適用され、結果は同じ次元のテンソルになります。 2つの引数 (pow(t,u), min(t,u) ...)"
" を持つ関数の場合、2つの非スカラー引数が渡された場合、次元は同じでなければなりません。たとえば、 \"max([1;2],[0;3])\" は "
"\"[0;3]\" を返します。"

#: ../source/userdoc/gasm_high.rst:432
msgid "User defined scalar functions"
msgstr "ユーザー定義のスカラー関数"

#: ../source/userdoc/gasm_high.rst:434
msgid ""
"It is possible to add a scalar function to the already predefined ones. Note"
" that the generic assembly consider only scalar function with one or two "
"parameters. In order to add a scalar function to the generic assembly, one "
"has to call::"
msgstr ""
"すでに定義されているスカラー関数にスカラー関数を追加することは可能です。汎用構築は、1つまたは2つのパラメータを持つスカラー関数のみを考慮します。汎用構築にスカラー関数を追加するには、次のように呼び出します。"

#: ../source/userdoc/gasm_high.rst:442
msgid ""
"where ``name`` is the name of the function to be defined, ``nb_args`` is "
"equal to 1 or 2. In the first call, ``expr`` is a string describing the "
"function in the generic weak form language and using ``t`` as the first "
"variable and ``u`` as the second one (if ``nb_args`` is equal to 2). For "
"instance, ``sin(2*t)+sqr(t)`` is a valid expression. Note that it is not "
"possible to refer to constant or data defined in a ``ga_workspace`` object. "
"``der1`` and ``der2`` are the expression of the derivatives with respect to "
"``t`` and ``u``. They are optional. If they are not furnished, a symbolic "
"differentiation is used if the derivative is needed. If ``der1`` and "
"``der2`` are defined to be only a function name, it will be understand that "
"the derivative is the corresponding function. In the second call, ``f1`` "
"should be a C pointer on a scalar C function having one scalar parameter and"
" in the third call, ``f2``  should be a C pointer on a scalar C function "
"having two scalar parameters."
msgstr ""
"``name`` は定義される関数の名前で、 ``nb_args`` は1または2です。最初の呼び出しでは、``expr`` "
"は汎用的な弱形式言語で関数を記述する文字列です。最初の変数に ``t`` を、2番目の変数に ``u`` （ ``nb_args`` "
"が2に等しい場合）を使います。たとえば、 ``sin(2*t)+sqr(t)`` は有効な式です。 ``ga_workspace`` "
"オブジェクトで定義された定数やデータを参照することはできません。``der1`` と ``der2`` は ``t`` と ``u`` "
"に対する導関数の式です。これらはオプションです。それらが提供されていない場合、導関数が必要な場合には記号的な微分が用いられます。 ``der1`` と "
"``der2`` が関数名だけであると定義されている場合、その導関数が対応する関数です。第2の呼び出しでは、 ``f1`` "
"は1つのスカラーパラメーターを持つスカラーC関数上のCポインターでなければならず、 ``f2`` "
"は2つのスカラーパラメーターを持つスカラーC関数上のCポインターでなければなりません。"

#: ../source/userdoc/gasm_high.rst:445
msgid "Additionally,::"
msgstr "さらに、"

#: ../source/userdoc/gasm_high.rst:449
msgid "return true is a function ``name`` is already defined and::"
msgstr "trueは ``name`` が既に定義されている関数である場合に返されます。"

#: ../source/userdoc/gasm_high.rst:453
msgid ""
"cancel the definition of an already define function (it has no action if the"
" function does not exist) which allow to redefine a function."
msgstr "この関数は関数を再定義することができるように、既に定義済みの関数の定義を取り消します（関数が存在しない場合はアクションはありません）。"

#: ../source/userdoc/gasm_high.rst:457
msgid "Derivatives of defined scalar functions"
msgstr "定義されたスカラー関数の導関数"

#: ../source/userdoc/gasm_high.rst:459
msgid ""
"It is possible to refer directly to the derivative of defined functions by "
"adding the prefix ``Derivative_`` to the function name. For instance, "
"``Derivative_sin(t)`` will be equivalent to ``cos(t)``. For two arguments "
"functions like ``pow(t,u)`` one can refer to the derivative with respect to "
"the second argument with the prefix  ``Derivative_2_`` before the function "
"name."
msgstr ""
"関数名に接頭辞 ``Derivative_`` を加えることで、定義された関数の導関数を直接参照することができます。たとえば、 "
"``Derivative_sin(t)`` は ``cos(t)`` に相当します。 ``pow(t,u)`` "
"のような2つの引数の関数の場合、関数名の前に接頭辞 ``Derivative_2_`` を付けた2番目の引数に関して導関数を参照できます。"

#: ../source/userdoc/gasm_high.rst:463
msgid "Binary operations"
msgstr "バイナリ演算"

#: ../source/userdoc/gasm_high.rst:465
msgid "A certain number of binary operations between tensors are available:"
msgstr "テンソル間の特定の数のバイナリ演算が利用できます。"

#: ../source/userdoc/gasm_high.rst:468
msgid ""
"``+`` and ``-`` are the standard addition and subtraction of scalar, vector,"
" matrix or tensors."
msgstr "``+`` と ``-`` は、スカラ、ベクトル、行列、またはテンソルの標準的な加減算です。"

#: ../source/userdoc/gasm_high.rst:470
msgid ""
"``*`` stands for the scalar, matrix-vector, matrix-matrix or (fourth order "
"tensor)-matrix multiplication."
msgstr "``*`` はスカラ、行列-ベクトル、行列-行列または（4次テンソル）-行列の乗法を表します。"

#: ../source/userdoc/gasm_high.rst:472
msgid "``/`` stands for the division by a scalar."
msgstr "``/`` はスカラーによる除算を表します。"

#: ../source/userdoc/gasm_high.rst:474
msgid ""
"``.`` stands for the scalar product of vectors, or more generally to the "
"contraction of a tensor with respect to its last index with a vector or with"
" the first index of another tensor. Note that ``*`` and ``.`` are equivalent"
" for matrix-vector or matrix-matrix multiplication."
msgstr ""
"``.`` "
"は、ベクトルのスカラー積を表します。より一般的には、ベクトルを持つ最後のインデックスまたは別のテンソルの最初のインデックスを持つテンソルの収縮を表します。"
" ``*`` と ``.`` は、行列ベクトルまたは行列と行列の乗算と等価であることに注意してください。"

#: ../source/userdoc/gasm_high.rst:476
msgid ""
"``:`` stands for the |Frobenius| product of matrices or more generally to "
"the contraction of a tensor with respect to the two last indices with a "
"matrix or the two first indices of a higher order tensor. Note that ``*`` "
"and ``:`` are equivalent for (fourth order tensor)-matrix multiplication."
msgstr ""
"``:`` は |Frobenius| 行列の積、またはより一般的には、マトリックスを有する2つの最後のインデックスに関するテンソルの収縮を表します。 "
"``*`` と ``:`` は（4次テンソル）行列の乗算と等価であることに注意してください。"

#: ../source/userdoc/gasm_high.rst:478
msgid ""
"``.*`` stands for the multiplication of two vectors/matrix/tensor "
"componentwise."
msgstr "``.*`` は、2つのベクトル/行列/テンソルの成分ごとの乗算を表します。"

#: ../source/userdoc/gasm_high.rst:480
msgid ""
"``./`` stands for the division of two vectors/matrix/tensor componentwise."
msgstr "``./`` は、2つのベクトル/行列/テンソルの成分ごとの除算を表します。"

#: ../source/userdoc/gasm_high.rst:482
msgid "``@`` stands for the tensor product."
msgstr "``@`` はテンソル積を表します。"

#: ../source/userdoc/gasm_high.rst:484
msgid ""
"``Cross_product(V, W)`` stands for the cross product (vector product) of "
"``V`` and ``W``. Defined only for three-dimensional vectors."
msgstr ""
"``Cross_product(V, W)`` は ``V`` と ``W`` の直積(ベクトル積)を表し、三次元ベクトルに対してのみ定義されます。"

#: ../source/userdoc/gasm_high.rst:486
msgid ""
"``Contract(A, i, B, j)`` stands for the contraction of tensors A and B with "
"respect to the ith index of A and jth index of B. The first index is "
"numbered 1. For instance ``Contract(V,1,W,1)`` is equivalent to ``V.W`` for "
"two vectors ``V`` and ``W``."
msgstr ""
"``Contract(A, i, B, j)`` "
"は、Aのi番目のインデックスとBのj番目のインデックスに関するテンソルAとBの縮小を表します。最初のインデックスは1です。例えば "
"``Contract(V,1,W,1)`` は ``V`` と ``W`` の2つのベクトルの ``VW`` に相当します。"

#: ../source/userdoc/gasm_high.rst:488
msgid ""
"``Contract(A, i, j, B, k, l)`` stands for the double contraction of tensors "
"A and B with respect to indices i,j of A and indices k,l of B. The first "
"index is numbered 1. For instance ``Contract(A,1,2,B,1,2)`` is equivalent to"
" ``A:B`` for two matrices ``A`` and ``B``."
msgstr ""
"``Contract(A, i, j, B, k, l)`` "
"はAのインデックスi、jとBのインデックスk、lに関してテンソルAとBの二重収縮を表します。例えば、 ``Contract(A,1,2,B,1,2)``"
" は ``A`` と ``B`` の2つの行列の ``A:B`` に相当します。"

#: ../source/userdoc/gasm_high.rst:492
msgid "Unary operators"
msgstr "単項演算子"

#: ../source/userdoc/gasm_high.rst:494
msgid "``-`` the unary minus operator: change the sign of an expression."
msgstr "``-`` シンプレックスマイナス演算子: 式の符号を変更します。"

#: ../source/userdoc/gasm_high.rst:496
msgid ""
"``'`` stands for the transpose of a matrix or line view of a vector. It a "
"tensor ``A`` is of order greater than two,``A'`` denotes the inversion of "
"the two first indices."
msgstr ""
"``'`` はベクトルの行列またはラインビューの転置を表します。テンソル ``A`` は2より大きい次数であり、 ``A'`` "
"は2つの第1指標の逆数を表示します。"

#: ../source/userdoc/gasm_high.rst:498
msgid ""
"``Contract(A, i, j)`` stands for the contraction of tensor A with respect to"
" its ith and jth indices. The first index is numbered 1. For instance, "
"``Contract(A, 1, 2)`` is equivalent to ``Trace(A)`` for a matrix ``A``."
msgstr ""
"``Contract(A, i, j)`` は、i番目とj番目のインデックスに対するテンソルAの収縮を表します。例えば、 ``Contract(A, "
"1, 2)`` は、 ``A`` の ``Trace(A)`` に相当します。"

#: ../source/userdoc/gasm_high.rst:500
msgid ""
"``Swap_indices(A, i, j)`` exchange indices number i and j. The first index "
"is numbered 1. For instance ``Swap_indices(A, 1, 2)`` is equivalent to "
"``A'`` for a matrix ``A``."
msgstr ""
"``Swap_indices(A, i, j)`` はインデックス番号iとjを交換します。たとえば、 ``Swap_indices(A, 1, 2)``"
" は行列 ``A`` の ``A'`` に相当します。"

#: ../source/userdoc/gasm_high.rst:502
msgid ""
"``Index_move_last(A, i)`` move the index number i in order to be the last "
"one. For instance, if ``A`` is a fourth order tensor "
":math:`A_{i_1i_2i_3i_4}`, then the result of ``Index_move_last(A, 2)`` will "
"be the tensor :math:`B_{i_1i_3i_4i_2} = A_{i_1i_2i_3i_4}`. For a matrix, "
"``Index_move_last(A, 1)`` is equivalent to ``A'``."
msgstr ""
"``Index_move_last(A, i)`` は、インデックス番号iを最後に移動させます。例えば、 ``A`` が4次テンソルであるとすれば、 "
"``Index_move_last(A, 2)`` の結果はテンソル :math:`B_ {i_1i_3i_4i_2} = A_ "
"{i_1i_2i_3i_4}` になります。行列の場合、 ``Index_move_last(A, 1)`` は ``A'`` に相当します。"

#: ../source/userdoc/gasm_high.rst:506
msgid "Parentheses"
msgstr "括弧"

#: ../source/userdoc/gasm_high.rst:508
msgid ""
"Parentheses can be used in a standard way to change the operation order. If "
"no parentheses are indicated, the usually priority order are used. The "
"operations ``+``  and ``-`` have the lower priority (with no distinction), "
"then ``*``, ``/``, ``:``, ``.``, ``.*``, ``./``, ``@`` with no distinction "
"and the higher priority is reserved for the unary operators ``-`` and ``'``."
msgstr ""
"括弧は、標準的な方法で操作の順序を変更するために使用できます。括弧が表示されていない場合、``*``, ``/``, ``:``, ``.``, "
"``.*``, ``./``, ``@``  の通常優先順位が使用されます。 微分なしで、優先度が高いものは単項演算子 ``-`` と ``'`` "
"に予約されています。"

#: ../source/userdoc/gasm_high.rst:512
msgid "Explicit vectors"
msgstr "陽なベクトル"

#: ../source/userdoc/gasm_high.rst:514
msgid ""
"The weak form language allows to define explicit vectors (i.e. order 1 "
"tensors) with the notation ``[a,b,c,d,e]``, i.e. an arbitrary number of "
"components separated by a comma (note the separation with a semicolon "
"``[a;b;c;d;e]`` is also permitted), the whole vector beginning with a right "
"bracket and ended by a left bracket. The components can be some numeric "
"constants, some valid expressions and may also contain test functions. In "
"the latter case, the vector has to be homogeneous with respect to the test "
"functions. This means that a construction of the type ``[Test_u; Test_v]`` "
"is not allowed. A valid example, with ``u`` as a scalar field variable is "
"``[5*Grad_Test_u(2), 2*Grad_Test_u(1)]``. Note also that using the quite "
"opertor (transpose), an expression ``[a,b,c,d,e]'`` stands for 'row vector`,"
" i.e. a 1x5 matrix."
msgstr ""
"弱形式言語は、表記 ``[a,b,c,d,e]`` "
"、すなわちコンマで区切られた任意の数の成分を持つ陽なベクトル（すなわち、1テンソル）を定義することが可能なセミコロン ``[a;b;c;d;e]`` "
"も許されます）、ベクトル全体は右括弧で始まり左括弧で終わります。成分は、いくつかの数値定数、いくつかの有効な式、試行関数を含むことができます。後者の場合、ベクトルは試行関数に関して均質でなければなりません。これは、型"
" ``[Test_u; Test_v]`` は許されません。有効な例として、 ``u`` をスカラーフィールド変数とすると "
"``[5*Grad_Test_u(2), 2*Grad_Test_u(1)]`` があります。また、オペレータ（転置）を使うと、式 "
"``[a,b,c,d,e]'`` は ``行ベクトル`` 、つまり1x5行列を表します。"

#: ../source/userdoc/gasm_high.rst:518
msgid "Explicit matrices"
msgstr "陽な行列"

#: ../source/userdoc/gasm_high.rst:520
msgid ""
"Similarly to explicit vectors, it is possible to define explicit matrices "
"(i.e. order 2 tensors) with the notation ``[[a,b],[c,d]]``, i.e. an "
"arbitrary number of columns vectors separated by a comma (the syntax "
"``[a,c;b,d]`` of lines separated by a semicolon is also permitted). For "
"instance ``[[11,21],[12,22],[13,23]]`` and ``[11,12,13;21,22,23]`` both "
"represent the same 2x3 matrix. The components can be some numeric constants,"
" some valid expressions and may also contain test functions."
msgstr ""
"陽なベクトルと同様に、 ``[[a,b],[c,d]]`` "
"という表記で陽な行列（すなわち、2次テンソル）を定義することができます。つまり、カンマで区切られた任意の数の列ベクトル（セミコロンで区切られた行の構文 "
"``[a、c; b、d]`` も許可されます）。例えば、 ``[[11,21]、[12,22]、[13,23]]`` と "
"``[[11,12,13;21,22,23]`` "
"はどちらも同じ2x3行列を表します。成分は、いくつかの数値定数、いくつかの有効な式、試行関数を含むことができます。"

#: ../source/userdoc/gasm_high.rst:524
msgid "Explicit tensors"
msgstr "陽なテンソル"

#: ../source/userdoc/gasm_high.rst:526
msgid ""
"Explicit tensors of any order are permitted with the nested format. A tensor"
" of order ``n`` is written as a succession of tensor of order ``n-1`` of "
"equal dimensions and separated by a comma. For instance "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``"
" is a fourth order tensor. Another possibility is to use the syntax "
"``Reshape([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], 3, 2, 2, 2)`` "
"where the components have to be given in Fortran order."
msgstr ""
"入れ子の形式では、任意の次数の陽なテンソルが許可されます。 ``n`` 次のテンソルは、等次元の ``n-1`` "
"次テンソルを継承して書かれ、コンマで区切られています。たとえば、 "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``"
" は4次のテンソルです。もう一つの形式は、構文 "
"``Reshape([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], 3, 2, 2, 2)`` "
"であり、成分はFortranの次数で指定する必要があります。"

#: ../source/userdoc/gasm_high.rst:530
msgid "Access to tensor components"
msgstr "テンソル成分へのアクセス"

#: ../source/userdoc/gasm_high.rst:531
msgid ""
"The access to a component of a vector/matrix/tensor can be done by following"
" a term by a left parenthesis, the list of components and a right "
"parenthesis. For instance ``[1,1,2](3)`` is correct and is returning ``2`` "
"as expected. Note that indices are assumed to begin by 1 (even in C++ and "
"with the python interface). The expressions ``[1,1;2,3](2,2)`` and "
"``Grad_u(2,2)`` are also correct provided that ``u`` is a vector valued "
"declared variable. Note that the components can be the result of a constant "
"computation. For instance ``[1,1;2,3](1+1,a)`` is correct provided that "
"``a`` is a declared constant but not if it is declared as a variable. A "
"colon can replace the value of an index in a Matlab like syntax for instance"
" to access to a line or a column of a matrix. ``[1,1;2,3](1,:)`` denotes the"
" first line of the matrix ``[1,1;2,3]``. It can also be used for a fourth "
"order tensor."
msgstr ""
"ベクトル/行列/テンソルの成分へのアクセスは、左括弧、成分のリスト、右括弧の項をたどることによって行うことができます。たとえば、 "
"``[1,1,2](3)`` は正しく、期待通りに ``2`` "
"を返します。インデックスは1で始まると仮定されていることに注意してください（C++やPythonインタフェースでも）。 ``[1,1; "
"2,3](2,2)`` と ``Grad_u(2,2)`` という表現は、 ``u`` "
"がベクトル値の宣言された変数であれば正しいです。構成要素は、一定の計算の結果であり得ることに留意してください。例えば、 "
"``[1,1;2,3](1+1,a)`` は ``a`` "
"が宣言された定数ですが、変数として宣言されていない場合は正しいです。コロンはMatlabのようなシンタックスのインデックスの値を置き換えて、例えば行列の行や列にアクセスすることができます。``[1,1;"
" 2,3](1,:)`` は行列 ``[1,1;2,3]`` の最初の行を示します。また、4次のテンソルで使用することもできます。"

#: ../source/userdoc/gasm_high.rst:534
msgid "Constant expressions"
msgstr "定数式"

#: ../source/userdoc/gasm_high.rst:536
msgid ""
"Floating points with standards notations (for instance ``3``, ``1.456``, "
"``1E-6``)"
msgstr "標準表記の浮動小数点数（例えば、 ``3`` 、 ``1.456`` 、 ``1E-6`` ）"

#: ../source/userdoc/gasm_high.rst:537
msgid "``pi``: the constant Pi."
msgstr "``pi``: 定数 Pi 。"

#: ../source/userdoc/gasm_high.rst:538
msgid ""
"``meshdim``: the dimension of the current mesh (i.e. size of geometrical "
"nodes)"
msgstr "``meshdim``: 現在のメッシュの次元（すなわち、幾何学的節点のサイズ）"

#: ../source/userdoc/gasm_high.rst:539
msgid ""
"``timestep``: the main time step of the model on which this assembly string "
"is evaluated (defined by ``model.set_time_step(dt)``). Do not work on pure "
"workspaces."
msgstr ""
"``timestep``: この構築文字列が評価されるmodelのメイン時間ステップ（``model.set_time_step(dt)`` "
"で定義されます）。純粋な作業領域では実行しないでください。"

#: ../source/userdoc/gasm_high.rst:540
msgid ""
"``Id(n)``: the identity matrix of size :math:`n\\times n`. `n` should be an "
"integer expression. For instance ``Id(meshdim)`` is allowed."
msgstr ""
"``Id(n)``: :math:`n\\times n` サイズの単位行列。 `n` は整数式でなければなりません。例えば、 "
"``Id(meshdim)`` が許可されます。"

#: ../source/userdoc/gasm_high.rst:541
msgid ""
"``qdim(u)``: the total dimension of the variable ``u`` (i.e. the  size for "
"fixed size variables and the total dimension of the vector/tensor field for "
"FEM variables)"
msgstr ""
"``qdim(u)``: 変数 ``u`` の全次元（すなわち、固定サイズ変数のサイズとFEM変数のベクトル/テンソルフィールドの合計サイズ）"

#: ../source/userdoc/gasm_high.rst:542
msgid ""
"``qdims(u)``: the dimensions of the variable ``u`` (i.e. the size for fixed "
"size variables and the vector of dimensions of the vector/tensor field for "
"FEM variables)"
msgstr ""
"``qdims(u)``: 変数 ``u`` のサイズ（すなわち、固定サイズ変数のサイズとFEM変数のベクトル/テンソルフィールドの次元のベクトル）"

#: ../source/userdoc/gasm_high.rst:545
msgid "Special expressions linked to the current position"
msgstr "現在の位置にリンクされた特殊な表現"

#: ../source/userdoc/gasm_high.rst:547
msgid ""
"``X`` is the current coordinate on the real element (i.e. the position on "
"the mesh of the current Gauss point on which the expression is evaluated), "
"``X(i)`` is its i-th component. For instance ``sin(X(1)+X(2))`` is a valid "
"expression on a mesh of dimension greater or equal to two."
msgstr ""
"``X(i)`` はi番目の成分であり、 ``X`` "
"は実要素上の現在の座標（すなわち、式が評価される現在のGauss点のメッシュ上の位置）です。例えば、 ``sin(X(1)+X(2))`` "
"は2次元以上のメッシュ上で有効な式です。"

#: ../source/userdoc/gasm_high.rst:549
msgid ""
"``Normal`` the outward unit normal vector to a boundary when integration on "
"a boundary is performed."
msgstr "``Normal`` は、境界の積分を行う際の境界の外向きの単位法線ベクトルです。"

#: ../source/userdoc/gasm_high.rst:551
msgid ""
"``element_size`` gives an estimate of the current element diameter (using "
"getfem::convex_radius_estimate)."
msgstr ""
"``element_size`` は、（ getfem::convex_radius_estimate を使って）現在の要素の直径の推定値を返します。"

#: ../source/userdoc/gasm_high.rst:553
msgid ""
"``element_K`` gives the gradient of the geometric transformation (see :ref"
":`dp-transgeo`) from the reference (parent) element. Could be used only if "
"the mesh do not contain elements of mixed dimensions."
msgstr ""
"``element_K`` は、参照（親）要素からの幾何学変換の勾配（ :ref:`dp-transgeo` "
"を参照）を与えます。メッシュに混合次元の要素が含まれていない場合にのみ使用できます。"

#: ../source/userdoc/gasm_high.rst:555
msgid ""
"``element_B`` gives the transpose of the pseudo-inverse of the gradient of "
"the geometric transformation (see :ref:`dp-transgeo`) from the reference "
"(parent) element. Could be used only if the mesh do not contain elements of "
"mixed dimensions."
msgstr ""
"``element_B`` は、参照（親）要素からの幾何学変換の勾配の擬似逆行列の転置を与えます（ :ref:`dp-transgeo` "
"を参照）。メッシュに混合次元の要素が含まれていない場合にのみ使用できます。"

#: ../source/userdoc/gasm_high.rst:560
msgid "Print command"
msgstr "プリントコマンド"

#: ../source/userdoc/gasm_high.rst:562
msgid ""
"For debugging purpose, the command ``Print(a)`` is printing the tensor ``a``"
" and pass it unchanged. For instance  ``Grad_u.Print(Grad_Test_u)`` will "
"have the same effect as ``Grad_u.Grad_Test_u`` but printing the tensor "
"``Grad_Test_u`` for each Gauss point of each element. Note that constant "
"terms are printed only once at the beginning of the assembly. Note also that"
" the expression could be derived so that the derivative of the term may be "
"printed instead of the term itself."
msgstr ""
"``Print(a)`` コマンドはデバッグ目的のためにテンソル ``a`` を出力し、それをそのまま渡します。たとえば、 "
"``Grad_u.Print(Grad_Test_u)`` は ``Grad_u.Grad_Test_u`` "
"と同じ効果を持ちますが、各要素の各Gauss積分点に対してテンソル ``Grad_Test_u`` "
"を出力します。定数項は、構築の最初に1回だけプリントされることに注意してください。項自体の代わりに項の導関数をプリントするように表現できることにも留意してください。"

#: ../source/userdoc/gasm_high.rst:565
msgid "Reshape a tensor"
msgstr "テンソルを変形する"

#: ../source/userdoc/gasm_high.rst:567
msgid ""
"The command ``Reshape(t, i, j, ...)`` reshapes the tensor ``t`` (which could"
" be an expression). The only constraint is that the number of components "
"should be compatible. For instance  ``Reshape(Grad_u, 1, meshdim)`` is "
"equivalent to ``Grad_u'`` for u a scalar variable. Note that the order of "
"the components remain unchanged and are classically stored in Fortran order "
"for compatibility with Blas/Lapack."
msgstr ""
"コマンド ``Reshape(t, i, j, ...)`` はテンソル ``t`` "
"（式でもよい）を再形成します。唯一の制約は、成分の数に互換性が必要なことです。例えば、  ``Reshape(Grad_u, 1, meshdim)``"
" はスカラー変数の ``Grad_u'`` に相当します。成分次数は変更されず、 Blas/Lapack "
"との互換性のためにFortranの次数で古典的に格納されることに注意してください。"

#: ../source/userdoc/gasm_high.rst:570
msgid "Trace, Deviator, Sym and Skew operators"
msgstr "Trace, Deviator, Sym と Skew 演算子"

#: ../source/userdoc/gasm_high.rst:572
msgid ""
"Trace, Deviator, Sym and Skew operators are linear operators acting on "
"square matrices:"
msgstr "Trace, Deviator, Sym および Skew 演算子は、正方行列に作用する線形演算子です。"

#: ../source/userdoc/gasm_high.rst:574
msgid ""
"``Trace(m)`` gives the trace (sum of diagonal components) of a square matrix"
" ``m``."
msgstr "``Trace(m)`` は正方行列 ``m`` のTrace（対角成分の合計）を返します。"

#: ../source/userdoc/gasm_high.rst:576
msgid ""
"``Deviator(m)`` gives the deviator of a square matrix ``m``. It is "
"equivalent to ``m - Trace(m)*Id(m_dim)/m_dim``, where ``m_dim`` is the "
"dimension of ``m``."
msgstr ""
"``Deviator(m)`` は正方行列 ``m`` の偏差を与えます。 これは ``m-Trace(m)*Id(m_dim)/m_dim`` "
"に相当します。ここで ``m_dim`` は ``m`` の次元です。"

#: ../source/userdoc/gasm_high.rst:578
msgid ""
"``Sym(m)`` gives the symmetric part of a square matrix ``m``, i.e. ``(m + "
"m')/2``."
msgstr "``Sym(m)`` は正方行列 ``m`` の対称部分、すなわち ``(m + m')/2`` を与えます。"

#: ../source/userdoc/gasm_high.rst:580
msgid ""
"``Skew(m)`` gives the skew-symmetric part of a square matrix ``m``, i.e. "
"``(m - m')/2``."
msgstr "``Skew(m)`` は、正方行列のSkew-対称部分、 ``(m - m')/2`` を返します。"

#: ../source/userdoc/gasm_high.rst:582
msgid ""
"The four operators can be applied on test functions. Which means that for "
"instance both ``Trace(Grad_u)`` and  ``Trace(Grad_Test_u)`` are valid when "
"``Grad_u`` is a square matrix (i.e. ``u`` a vector field of the same "
"dimension as the mesh)."
msgstr ""
"4つの演算子を試行関数に適用することができます。これは、例えば ``Grad_u`` が正方行列（ ``u`` "
"と同じ次元のベクトルフィールド）であるとき、 ``Trace(Grad_u)`` と ``Trace(Grad_Test_u)`` "
"は有効であることを意味します。(すなわち、 ``u`` と次元として同じ次元のベクトルフィールドです。）。"

#: ../source/userdoc/gasm_high.rst:587
msgid "Nonlinear operators"
msgstr "非線形演算子"

#: ../source/userdoc/gasm_high.rst:589
msgid ""
"The weak form language provide some predefined nonlinear operator. Each "
"nonlinear operator is available together with its first and second "
"derivatives. Nonlinear operator can be applied to an expression as long as "
"this expression do not contain some test functions."
msgstr ""
"弱形式言語は、あらかじめ定義された非線形演算子を提供します。各非線形演算子は、その第1および第2導関数と共に利用可能です。非線形演算子は、式にいくつかの試行関数が含まれていない限り、適用できます。"

#: ../source/userdoc/gasm_high.rst:591
msgid ""
"``Norm(v)`` for ``v`` a vector or a matrix gives the euclidean norm of a "
"vector or a |Frobenius| norm of a matrix."
msgstr ""
"ベクトルまたは行列である ``v`` に対して ``Norm(v)`` を実行すると、ベクトルのユークリッドのノルムまたは |Frobenius| "
"行列のノルムが与えられます。"

#: ../source/userdoc/gasm_high.rst:593
msgid ""
"``Norm_sqr(v)`` for ``v`` a vector or a matrix gives the square of the "
"euclidean norm of a vector or of the |Frobenius| norm of a matrix. For a "
"vector this is equivalent to ``v.v`` and for a matrix to ``m:m``."
msgstr ""
"ベクトルまたは行列のユークリッドのノルムの二乗は、 |Frobenius| 行列のノルムベクトルの場合、これは ``v.v`` に相当し、行列は "
"``m:m`` に相当します。"

#: ../source/userdoc/gasm_high.rst:595
msgid ""
"``Normalized(v)`` for ``v`` a vector or a matrix gives ``v`` divided by its "
"euclidean (for vectors) or |Frobenius| (for matrices) norm. In order to "
"avoid problems when ``v`` is close to 0, it is implemented as "
"``Normalized_reg(v, 1E-25)``. Use with care. Think that the derivative at "
"the origin of ``Normalized(v)*Norm(v)`` is wrong (it vanishes) and very "
"different from the derivative of ``v``."
msgstr ""
"``v`` に対して ``Normalized(v)`` は ``v`` をユークリッド（ベクトルの場合）または |Frobenius|  "
"（行列の場合）ノルムで割られます。 ``v`` が0に近いときの問題を避けるため、 ``Normalized_reg(v, 1E-25)`` "
"として実装されています。注意して使用してください。 ``Normalized(v)*Norm(v)`` "
"起源の導関数は間違っています（今後削除されます）、 ``v`` の導関数とは非常に異なると考えてください。"

#: ../source/userdoc/gasm_high.rst:597
msgid ""
"``Normalized_reg(v, eps)`` for ``v`` a vector or a matrix gives a "
"regularized version of ``Normalized(v)`` : ``v/sqrt(|v|*|v|+eps*eps)``."
msgstr ""
"``v`` の ``Normalized_reg(v, eps)`` ベクトルまたは行列は``Normalized(v)`` : "
"``v/sqrt(|v|*|v|+eps*eps)`` の正規化されたバージョンを与えます。"

#: ../source/userdoc/gasm_high.rst:599
msgid ""
"``Ball_projection(v, r)`` for ``v`` a vector or a matrix and ``r`` a scalar,"
" gives the projection of ``v`` on the ball of radius ``r`` and center the "
"origin."
msgstr ""
"ベクトルまたは行列 ``v`` とスカラーの ``r`` の ``Ball_projection(v, r)`` は、原点を中心にした半径 ``r`` "
"のボールに ``v`` の投影を与えます。"

#: ../source/userdoc/gasm_high.rst:601
msgid "``Det(m)`` gives the determinant of a square matrix ``m``."
msgstr "``Det(m)`` は正方行列 ``m`` の行列式を与えます。"

#: ../source/userdoc/gasm_high.rst:603
msgid ""
"``Inv(m)`` gives the inverse of a square matrix ``m``. The second derivative"
" is not available since it is an order 6 tensor. This means that ``Inv(m)`` "
"cannot be used in the description of a potential energy."
msgstr ""
"``Inv(m)`` は正方行列 ``m`` "
"の逆行列を返します。2次導関数は、6次テンソルであるため利用できません。つまり、ポテンシャルエネルギーの記述には ``Inv(m)`` "
"は使用できません。"

#: ../source/userdoc/gasm_high.rst:605
msgid "``Expm(m)`` gives the exponential of a square matrix ``m``."
msgstr "``Expm(m)`` は正方行列 ``m`` の指数を与えます。"

#: ../source/userdoc/gasm_high.rst:607
msgid "``Logm(m)`` gives the logarithm of a square matrix ``m``."
msgstr "``Logm(m)`` は正方行列 ``m``の対数を返します。"

#: ../source/userdoc/gasm_high.rst:609
msgid ""
"``Matrix_I2(m)`` gives the second invariants of a square matrix ``m`` which "
"is defined by ``(sqr(Trace(m)) - Trace(m*m))/2``."
msgstr ""
"``Matrix_I2(m)`` は ``(sqr(Trace(m)) - Trace(m*m))/2`` で定義される正方行列 ``m`` "
"の第2の不変量を返します。"

#: ../source/userdoc/gasm_high.rst:611
msgid ""
"``Matrix_J1(m)`` gives the modified first invariant of a square matrix "
"defined by ``Trace(m)pow(Det(m),-1/3)``."
msgstr ""
"``Matrix_J1(m)`` は、  ``Trace(m)pow(Det(m),-1/3)`` "
"で定義された正方行列の最初の不変量を修正したものです。"

#: ../source/userdoc/gasm_high.rst:613
msgid ""
"``Matrix_J2(m)`` gives the modified first invariant of a square matrix "
"defined by ``Matrix_I2(m)*pow(Det(m),-2/3)``."
msgstr ""
"``Matrix_J2(m)`` は  ``Matrix_I2(m)*pow(Det(m),-2/3)`` "
"で定義された正方行列の修正された最初の不変量を返します。"

#: ../source/userdoc/gasm_high.rst:618
msgid "Macro definition"
msgstr "マクロ定義"

#: ../source/userdoc/gasm_high.rst:620
msgid ""
"The weak form language allows the use of macros that are either predefined "
"in the model or ga_workspace object or directly defined at the begining of "
"an assembly string. The definition into a ga_workspace or model object is "
"done as follows::"
msgstr ""
"弱形式言語を使用すると、modelまたは ga_workspace "
"オブジェクトであらかじめ定義されているか、構築文字列の先頭に直接定義されているマクロを使用できます。ga_workspace "
"またはmodelオブジェクトへの定義は次のように行われます。"

#: ../source/userdoc/gasm_high.rst:628
msgid ""
"The definition of a macro into an assembly string is inserted before any "
"regular expression, separated by a semicolon with the following syntax::"
msgstr "マクロの構築文字列への定義は、正規表現の前に次の構文でセミコロンで区切られて挿入されます。"

#: ../source/userdoc/gasm_high.rst:632
msgid ""
"where ``name`` is he macro name which then can be used in the weak form "
"language and contains also the macro parameters, ``expr`` is a valid "
"expression of the weak form language (which may itself contain some macro "
"definitions). For instance, a valid macro with no parameter is::"
msgstr ""
"``name`` はマクロ名であり、弱形式言語で使用され、マクロのパラメータも含みます。 ``expr`` "
"は弱形式言語の有効な式です（それ自体がいくつかのマクロ定義を含むかもしれません）。たとえば、パラメータを持たない有効なマクロは次の通りです。"

#: ../source/userdoc/gasm_high.rst:636
msgid ""
"where ``alpha`` should be a valid declared variable or data. A valid macro "
"with two parameters is for instance::"
msgstr "``alpha`` は有効な宣言された変数またはデータでなければなりません。 2つのパラメータを持つ有効なマクロは、例えば次の通りです。"

#: ../source/userdoc/gasm_high.rst:640
msgid ""
"The following assembly string is then valid (if ``u`` is a valid variable)::"
msgstr "次の構築文字列は有効です（ ``u`` が有効な変数である場合）。"

#: ../source/userdoc/gasm_high.rst:644
msgid ""
"Parameter are allowed to be post-fixed to ``Grad_``, ``Hess_``, ``Test_`` "
"and ``Test2_`` prefixes, so that the following assembly string is valid::"
msgstr ""
"パラメータは ``Grad_`` 、 ``Hess_`` 、 ``Test_`` 、 ``Test2_`` "
"の接頭辞の後に固定することができ、次の構築文字列が有効です。"

#: ../source/userdoc/gasm_high.rst:648
msgid "or with an imbrication of two macros::"
msgstr "または2つのマクロの組み込みも可能です。"

#: ../source/userdoc/gasm_high.rst:652
msgid ""
"A macro can be deleted from a ga_workspace or model object as follows::"
msgstr "マクロは、次のようにga_workspaceオブジェクトまたはmodelオブジェクトから削除できます。"

#: ../source/userdoc/gasm_high.rst:657
msgid ""
"Note that a macro defined at the begining of an assembly string is only "
"defined in the assembly string and cannot be used later without being added "
"in a model or ga_workspace object."
msgstr ""
"構築文字列の先頭に定義されたマクロはその構築文字列でのみ定義され、後で model または ga_workspace "
"オブジェクトに追加することなく使用することはできないことに注意してください。"

#: ../source/userdoc/gasm_high.rst:659
msgid ""
"The macros are expanded inline at the lexical analysis phase. Note that a "
"the compilation phase, the repeated expressions are automatically factorized"
" and computed only once."
msgstr "このマクロは字句解析フェーズでインライン展開されます。コンパイル段階では、繰り返し式は自動的に分解され、1回だけ計算されます。"

#: ../source/userdoc/gasm_high.rst:662
msgid "Explicit Differentiation"
msgstr "陽な微分"

#: ../source/userdoc/gasm_high.rst:663
msgid ""
"The workspace object automatically differentiate terms that are of lower "
"deriation order. However, it is also allowed to explicitly differentiate an "
"expression with respect to a variable. One interest is that the automatic "
"differentiation performs a derivative with respect to all the declared "
"variables of model/workspace but this is not necessarily the expected "
"behavior when using a potential energy, for instance. The syntax is::"
msgstr ""
"workspaceオブジェクトは、より低い次数の微分を自動的に微分します。しかしながら、変数に対して式を陽に微分することもできます。 "
"注目すべきは、自動微分はmodel/workspaceの宣言されたすべての変数に関して微分を実行しますが、これは例えばポテンシャルエネルギーを使用する場合に必ずしも期待される挙動ではありません。構文は次の通りです。"

#: ../source/userdoc/gasm_high.rst:667
msgid "For instance, the following expression::"
msgstr "例えば、次の式の場合"

#: ../source/userdoc/gasm_high.rst:671 ../source/userdoc/gasm_high.rst:688
msgid "will result in::"
msgstr "結果は次の通りです。"

#: ../source/userdoc/gasm_high.rst:675
msgid "So that::"
msgstr "そのため次のようにします。"

#: ../source/userdoc/gasm_high.rst:679
msgid ""
"is a valid expression. A third argument can be added to the ``Diff`` command"
" to specify the direction::"
msgstr "これは有効な式です。方向を指定するために ``Diff`` コマンドに3番目の引数を追加することができます。"

#: ../source/userdoc/gasm_high.rst:683
msgid ""
"in that case, it replaces the ``Test_variable`` by the expression "
"``direction`` which has to be of the same dimension as ``variable``. It "
"computes the derivative of ``expression`` with respect to ``variable`` in "
"the direction ``direction``. For instance::"
msgstr ""
"その場合、 ``Test_variable`` を ``variable`` と同じ次元である式 ``direction`` で置き換えます。 "
"``direction`` 方向の ``variable`` に対して ``expression`` の導関数を計算します。例えば。"

#: ../source/userdoc/gasm_high.rst:692
msgid "if ``v`` is any valid expression of the same dimension than ``u``."
msgstr "``v`` は ``u`` と同じ次元の有効な式です。"

#: ../source/userdoc/gasm_high.rst:695
msgid "Explicit Gradient"
msgstr "陽な勾配"

#: ../source/userdoc/gasm_high.rst:696
msgid ""
"It is possible to ask for symbolic computation of the gradient of an "
"expression with::"
msgstr "次の関数を使って式の勾配の記号計算をすることができます。"

#: ../source/userdoc/gasm_high.rst:700
msgid ""
"It will be computed as far as it is possible. The limitations come from the "
"fact that |gf| is limited to second order derivative of shape function and "
"nonlinear operators are supposed to provide only first and second order "
"derivatives."
msgstr ""
"これは可能な限り計算されます。制限として、 |gf| は形状関数の2階微分に限定され、非線形演算子は1次微分と2次微分のみを与えると考えられています。"

#: ../source/userdoc/gasm_high.rst:702
msgid "Of course::"
msgstr "もちろん、"

#: ../source/userdoc/gasm_high.rst:706
msgid "is equivalent to::"
msgstr "は次と等価です。"

#: ../source/userdoc/gasm_high.rst:710
msgid "for a varible ``u``."
msgstr "``u`` は変数です。"

#: ../source/userdoc/gasm_high.rst:715
msgid "Interpolate transformations"
msgstr "補間変換"

#: ../source/userdoc/gasm_high.rst:717
msgid ""
"The ``Interpolate`` operation allows to compute integrals between quantities"
" which are either defined on different part of a mesh or even on different "
"meshes. It is a powerful operation which allows to compute mortar matrices "
"or take into account periodic conditions. However, one have to remember that"
" it is based on interpolation which may have a non-negligible computational "
"cost."
msgstr ""
"``Interpolate`` "
"演算は、メッシュの異なる部分に定義された量または異なるメッシュに定義された量の間の積分を計算することを可能にします。それはMortar行列を計算するか、または周期的な条件を考慮に入れることができる強力な演算です。しかしながら、これは無視できない計算コストを有するかもしれない補間に基づいていることを覚えておいてください。"

#: ../source/userdoc/gasm_high.rst:719
msgid ""
"In order to use this functionality, the user have first to declare to the "
"workspace or to the model object an interpolate transformation which "
"described the map between the current integration point and the point lying "
"on the same mesh or on another mesh."
msgstr ""
"この機能を使用するために、ユーザはまず、現在の積分ポイントと同じメッシュまたは別のメッシュ上にあるポイントとの間のマップを記述する補間変換を "
"workspace または model オブジェクトに宣言する必要があります。"

#: ../source/userdoc/gasm_high.rst:721
msgid ""
"Different kind of transformations can be described. Several kinds of "
"transformations has been implemented. The first one, described hereafter is "
"a transformation described by an expression. A second one corresponds to the"
" raytracing contact detection (see :ref:`ud-model-contact-"
"friction_raytrace_inter_trans`). Some other transformations (neighbour "
"element and element extrapolation) are describe in the next sections."
msgstr ""
"異なる種類の変換を記述するためにいくつかの種類の変換が実装されています。以下で説明する最初のものは、式によって記述される変換です。2番目はレイトレーシング接触検出に相当します（"
" :ref:`ud-model-contact-friction_raytrace_inter_trans` "
"を参照）。次のセクションでは、他の変換（隣接要素と要素の外挿）について説明します。"

#: ../source/userdoc/gasm_high.rst:723
msgid ""
"The transformation defined by an expression can be added to the workspace or"
" the model thanks to the command::"
msgstr "式で定義された変換は、次のコマンドにより workspace またはmodelに追加できます。"

#: ../source/userdoc/gasm_high.rst:733
msgid ""
"where ``workspace`` is a workspace object, ``model`` a model object, "
"``transname`` is the name given to the transformation, ``source_mesh`` the "
"mesh on which the integration occurs, ``target_mesh`` the mesh on which the "
"interpolation is performed and ``expr`` is a regular expression of the high-"
"level generic weak form language which may contains reference to the "
"variables of the workspace/model."
msgstr ""
"``workspace`` はworkspaceオブジェクト、 ``model`` はmodelオブジェクト、 ``transname`` "
"は変換に与えられた名前、 ``source_mesh`` は積分が行われるメッシュ、 ``target_mesh`` 補間が実行されるメッシュで "
"``expr`` は、workspace/modelの変数への参照を含む高水準の汎用的な弱形式言語の正規表現です。"

#: ../source/userdoc/gasm_high.rst:735
msgid "For instance, an expression::"
msgstr "例えば、次の式は、"

#: ../source/userdoc/gasm_high.rst:740
msgid ""
"will allow to integrate some expressions at the current position with a "
"shift of -1 with respect to the first coordinate. This simple kind of "
"transformation can be used to prescribe a periodic condition."
msgstr ""
"現在の位置にある式を最初の座標に対して-1のシフトで積分することができます。この単純な種類の変換を使用して、周期的な条件を規定することができます。"

#: ../source/userdoc/gasm_high.rst:742
msgid "Of course, one may used more complex expressions such as::"
msgstr "もちろん、もっと複雑な表現も可能です。"

#: ../source/userdoc/gasm_high.rst:750
msgid "where ``u`` is a vector variable of the workspace/model."
msgstr "ここで ``u`` はworkspace/modelのベクトル変数です。"

#: ../source/userdoc/gasm_high.rst:752
msgid ""
"Once a transformation is defined in the workspace/model, one can interpolate"
" a variable or test functions, the position or the unit normal vector to a "
"boundary thanks to one of these expressions::"
msgstr ""
"workspace/modelで変換が定義されると、変数または試行関数、これらの式の1つのために境界への位置または単位法線ベクトルを補間できます。"

#: ../source/userdoc/gasm_high.rst:765
msgid "where ``u`` is the name of the variable to be interpolated."
msgstr "ここで ``u`` は補間される変数の名前です。"

#: ../source/userdoc/gasm_high.rst:767
msgid ""
"For instance, the assembly expression to prescribe the equality of a "
"variable ``u`` with its interpolation (for instance for prescribing a "
"periodic boundary condition) thanks to a multiplier ``lambda`` could be "
"written::"
msgstr ""
"例えば、乗算器 ``lambda`` によって、変数 ``u`` "
"とその補間（例えば、周期的境界条件を規定するため）との等価を規定する構築式は、次のように書くことができます。"

#: ../source/userdoc/gasm_high.rst:771
msgid ""
"(see :file:`demo\\_periodic\\_laplacian.m` in :file:`interface/tests/matlab`"
" directory)."
msgstr ""
"( :file:`interface/tests/matlab` 内の :file:`demo\\_periodic\\_laplacian.m` "
"を参照してください。)"

#: ../source/userdoc/gasm_high.rst:773
msgid ""
"In some situations, the interpolation of a point may fail if the transformed"
" point is outside the target mesh. Both in order to treat this case and to "
"allow the transformation to differentiate some other cases (see :ref:`ud-"
"model-contact-friction_raytrace_inter_trans` for the differentiation between"
" rigid bodies and deformable ones in the "
"Raytracing_interpolate_transformation) the transformation returns an integer"
" identifier to the weak form language. A value 0 of this identifier means "
"that no corresponding location on the target mesh has been found. A value of"
" 1 means that a corresponding point has been found. This identifier can be "
"used thanks to the following special command of the weak form language::"
msgstr ""
"場合によっては、変換された点がターゲットメッシュの外側にある場合、点の補間が失敗することがあります。両方とも、このケースを処理し、変換が他のいくつかの場合を微分できるようにするために（両方とも、剛体とRaytracing_interpolate_transformationの変形可能なものとの間の差異については。"
" :ref:`ud-model-contact-friction_raytrace_inter_trans` "
"を参照）、変換は整数識別子が弱形式言語に返されます。この識別子の値0は、ターゲットメッシュ上の対応する位置が見つからなかったことを意味します。 "
"1の値は、対応する点が見つかったことを意味します。この識別子は、弱形式言語の次の特別なコマンドにより使用できます。"

#: ../source/userdoc/gasm_high.rst:777
msgid ""
"where ``transname`` is the name of the transformation, ``expr`` is the "
"expression to be evaluated and ``i`` value of the returned integer "
"identifier for which the expression have to be computed. Note that ``i`` can"
" be ommited, in that case, the expression is evaluated for a nonzero "
"identifier (i.e. when a corresponding point has been found). For instance, "
"the previous assembly expression to prescribe the equality of a variable "
"``u`` with its interpolation could be writtne::"
msgstr ""
"``transname`` は変換の名前、 ``expr`` は評価される式、``i`` は式が計算されるべきかを返す整数識別子です。 ``i`` "
"は省略することができ、この場合、式は非ゼロの識別情報（すなわち、対応する点が見つかったとき）について評価されることに留意してください。例えば、変数``u``"
" とその補間との等価を規定する以前の構築式は、次のように書くことができます。"

#: ../source/userdoc/gasm_high.rst:782
msgid ""
"In that case, the equality will only be prescribed in the part of the domain"
" where the transformation succeed and in the other part, the mulitplier is "
"enforced to vanish."
msgstr "その場合、等式は、変換が成功する領域の部分でのみ規定され、他の部分では、乗数は消滅するように強制されます。"

#: ../source/userdoc/gasm_high.rst:785
msgid ""
"**CAUTION**: You have to think that when some variables are used in the "
"transformation, the computation of the tangent system takes into account "
"these dependence. However, the second derivative of a transformation with "
"respect to a variable used has not been implemented. Thus, such a "
"transformation is not allowed in the definition of a potential since it "
"cannot be derived twice."
msgstr ""
"**注意** : "
"変換でいくつかの変数が使用される場合、接触モデルの計算でこれらの依存性が考慮されていると考える必要があります。しかし、使用される変数に関する変換の2次導関数は実装されていません。従って、このような変換は、2回微分することができないので、電位の定義には使用できません。"

#: ../source/userdoc/gasm_high.rst:788
msgid "Element extrapolation transformation"
msgstr "要素外挿変換"

#: ../source/userdoc/gasm_high.rst:790
msgid ""
"A specific transformation (see previous section) is defined in order to "
"allows the evaluation of certain quantities by extrapolation with respect to"
" another element (in general a neighbour element). This is not strictly "
"speaking a transformation since the point location remain unchanged, but the"
" evaluation is made on another element extrapolating the shape functions "
"outside it. This transformation is used for stabilization term in fictitious"
" domain applications (with cut elements) where it is more robust to "
"extrapolate some quantities on a neighbour element having a sufficiently "
"large intersection with the real domain than evaluating them on the current "
"element if it has a small intersection with the real domain. The functions "
"allowing to add such a transformation to a model or a workspace are::"
msgstr ""
"別の要素（一般的に隣接要素）に関してある量の外挿による評価を可能にするために、特定の変換（前の節を参照）が定義されます。点の位置は変わらないので、厳密には変換ではありませんが、評価は試行関数を外挿する別の要素に対して行われます。この変換は、現実の領域との十分に大きな交差を有する隣接要素のいくつかの量を、現在の要素が小さい場合にそれらを評価するよりも外挿することがより確実である仮想領域法（切断要素を有する）において、このような実領域との交差変換をmodelまたはworkspaceに追加するには次の関数を使用します。"

#: ../source/userdoc/gasm_high.rst:798
msgid ""
"The map elt_corr should contain the correspondences between the elements "
"where the transformation is to be applied and the respective elements where "
"the extrapolation has to be made. On the element not listed in the map, no "
"transformation is applied and the evaluation is performed normally on the "
"current element."
msgstr ""
"マップelt_corrには、変換が適用される要素と、補外が行われる必要があります。それぞれの要素との間の対応関係が含まれている必要があります。マップにリストされていない要素では、変換は適用されず、評価は現在の要素に対して正常に実行されます。"

#: ../source/userdoc/gasm_high.rst:800
msgid ""
"The following functions allow to change the element correspondence of a "
"previously added element extrapolation transformation::"
msgstr "以下の関数は、以前に追加された要素補間変換の要素対応を変更することを可能にします。"

#: ../source/userdoc/gasm_high.rst:812
msgid "Evaluating discontinuities across inter-element edges/faces"
msgstr "要素間エッジ/面間の不連続性の評価します。"

#: ../source/userdoc/gasm_high.rst:814
msgid ""
"A specific interpolate transformation (see previous sections), called "
"``neighbour_elt`` is defined by default in all models. This transformation "
"can only be used when a computation is made on an internal edge/face of a "
"mesh, i.e. an element face shared at least by two elements. It aims to "
"compute discontinuity jumps of a variable across inter-element faces. It is "
"particularly suitable to implement Discontinuous Galerkin and interior "
"penalty methods, Ghost penalty terms or a posteriori estimators. The "
"expressions::"
msgstr ""
"``neighbour_elt`` "
"と呼ばれる特定の補間変換（前のセクションを参照）は、デフォルトですべてのmodelで定義されています。この変換は、メッシュの内部エッジ/面、すなわち少なくとも2つの要素によって共有される要素面で計算が行われる場合にのみ使用できます。これは、要素間の面で変数の不連続ジャンプを計算することを目的としています。不連続Galerkinと内部ペナルティ法、ゴーストペナルティ項または事後推定を実装するのに特に適しています。表現は、"

#: ../source/userdoc/gasm_high.rst:827
msgid ""
"are available (as with any other interpolate transformation) and compute a "
"field on the current point but on the neighbour element. Of course, "
"``Interpolate(X, neighbour_elt)`` as no specific interest since it returns "
"the same result as ``X``. Similarly, in most cases, ``Interpolate(Normal, "
"neighbour_elt)`` will return the opposite of ``Normal`` except for instance "
"for 2D shell element in a 3D mesh where it has an interest."
msgstr ""
"（他の補間変換の場合と同様に）現在の点ではなく隣接要素上のフィールドを計算することができます。もちろん、 ``Interpolate(X, "
"neighbour_elt)`` は ``X`` と同じ結果を返すのでそれほど特別なものではありません。同様に、ほとんどの場合、 "
"``Interpolate(X, neighbour_elt)`` は、関心のある3Dメッシュの2Dシェル要素を除いて、 ``Normal`` "
"の反対側を返します。"

#: ../source/userdoc/gasm_high.rst:829
msgid "The jump on a variable ``u`` can be computed with::"
msgstr "変数 ``u`` のジャンプは、"

#: ../source/userdoc/gasm_high.rst:833
msgid "and a penalisation term of the jump can be written::"
msgstr "ジャンプのペナルティ・タームを書くことができます。"

#: ../source/userdoc/gasm_high.rst:837
msgid ""
"Note that the region representing the set of all internal faces of a mesh "
"can be obtained thanks to the function::"
msgstr "メッシュのすべての内部面の集合を表す領域は、次の関数により与えられます。"

#: ../source/userdoc/gasm_high.rst:841
msgid ""
"where ``mr`` is an optional mesh region. If ``mr`` is specified only the "
"face internal with respect to this region are returned. An important aspect "
"is that  each face is represented only once and is arbitrarily chosen "
"between the two neighbour elements."
msgstr ""
"ここで ``mr`` はオプションのメッシュ領域です。``mr`` "
"が指定されていれば、この領域に関して内部の面だけが返されます。重要な点は、各面が1回だけ表され、2つの隣接要素の間で任意に選択されることです。"

#: ../source/userdoc/gasm_high.rst:843
msgid ""
"See for instance :file:`interface/tests/python/demo_laplacian_DG.py` or "
":file:`interface/tests/matlab/demo_laplacian_DG.m` for an example of use."
msgstr ""
"使用例は :file:`interface/tests/python/demo_laplacian_DG.py` や "
":file:`interface/tests/matlab/demo_laplacian_DG.m` を参照してください。"

#: ../source/userdoc/gasm_high.rst:845
msgid ""
"Compared to other interpolate transformations, this transformation is more "
"optimized and benefits from finite element and geometric transformation pre-"
"computations."
msgstr "他の補間変換と比較すると、この変換はより最適化され、有限要素変換および幾何変換前処理で恩恵があります。"

#: ../source/userdoc/gasm_high.rst:850
msgid ""
"Double domain integrals or terms (convolution - Kernel - Exchange integrals)"
msgstr "2重領域の積分または項（畳み込み - カーネル - 交換積分）"

#: ../source/userdoc/gasm_high.rst:852
msgid ""
"In some very special cases, it can be interesting to compute an integral on "
"the direct product of two domains, i.e. a double integral such as for "
"instance"
msgstr "いくつかの非常に特殊な場合には、2つの領域の直積、すなわち例えば2重積分の積分を計算することに着目する必要があります。"

#: ../source/userdoc/gasm_high.rst:854
msgid "\\int_{\\Omega_1}\\int_{\\Omega_2}k(x,y)u(x)v(y)dydx,"
msgstr "\\int_{\\Omega_1}\\int_{\\Omega_2}k(x,y)u(x)v(y)dydx,"

#: ../source/userdoc/gasm_high.rst:858
msgid ""
"where :math:`k(x,y)` is a given kernel, :math:`u` a quantity defined on "
":math:`\\Omega_1` and  :math:`v` a quantity defined on :math:`\\Omega_2`, "
"eventually with  :math:`\\Omega_1` and :math:`\\Omega_2` the same domain. "
"This can be interesting either to compute such an integral or to define an "
"interaction term between two variables defined on two different domains."
msgstr ""
"ここで :math:`k(x,y)` は与えられたカーネルです、 :math:`u` は :math:`\\Omega_1` 上で定義された量で "
":math:`v` は :math:`\\Omega_2` 上で定義された量です、 :math:`\\Omega_1` と "
":math:`\\Omega_2` "
"は同じ領域にあります。これは、そのような積分を計算するか、または2つの異なる領域上に定義された2つの変数間の相互作用項を定義する際に着目する必要があります。"

#: ../source/userdoc/gasm_high.rst:860
msgid ""
"CAUTION: Of course, this kind of term have to be used with great care, since"
" it naturally leads to fully populated stiffness or tangent matrices."
msgstr "注意: 当然のことながら、この種の項は、通常完全に計算された剛性または接線行列に関連するため、細心の注意を払って使用する必要があります。"

#: ../source/userdoc/gasm_high.rst:863
msgid ""
"The weak form language of |gf| furnishes a mechanism to compute such a term."
" First, the secondary domain has to be declared in the workspace/model with "
"its integration methods. The addition of a standard secondary domain can be "
"done with one of the two following functions::"
msgstr ""
"|gf| "
"の弱形式言語はそのような項を計算するためのメカニズムを与えます。まず、第2領域は、その積分法を使用してworkspace/model内で宣言されなければなりません。標準的な第2領域の追加は、次の2つの関数のうちの1つを使用して行うことができます。"

#: ../source/userdoc/gasm_high.rst:869
msgid ""
"where ``model`` or ``workspace`` is the model or workspace where the "
"secondary domain has to be declared, ``domain_name`` is a string for the "
"identification of this domain together with the mesh region and integration "
"method, ``mim`` the integration method and ``region`` a mesh region. Note "
"that with these standard secondary domains, the integration is done on the "
"whole region for each element of the primary domain. It can be interesting "
"to implement specific secondary domains restricting the integration to the "
"necessary elements with respect to the element of the primary domain. A "
"structure is dedicated to this in |gf|."
msgstr ""
"``model`` または ``workspace`` は第2領域を宣言しなければならないmodelまたはworkspaceで、 "
"``domain_name`` はメッシュ領域と積分法とともにこの領域を識別する文字列です。積分法を ``mim`` 、メッシュ領域を "
"``region`` "
"と呼びます。これらの標準的な第2領域では、第1領域の各要素について領域全体で積分が行われることに着目してください。第1領域の要素に関して必要な要素への積分を制限する特定の第2領域を実装することに着目してください。|gf|"
" の中の構造体はこれ専用です。"

#: ../source/userdoc/gasm_high.rst:871
msgid ""
"Once a secondary domain has been declared, it can be specified that a weak "
"form language expression has to be assembled on the direct product of a "
"current domain and a secondary domain, adding the name of the secondary "
"domain to the ``add_expression`` method of the workspace object or using "
"``add_linear_twodomain_term``, ``add_nonlinear_twodomain_term`` or "
"``add_twodomain_source_term`` functions::"
msgstr ""
"第2領域が宣言されると、現在の領域と第2領域の直接的な生成物に弱形式言語をアセンブルし、 ``add_expression`` "
"メソッドに次の関数を使用して、第2領域の名前を追加する必要があると指定できます。 ``add_linear_twodomain_term`` 、 "
"``add_nonlinear_twodomain_term`` または ``add_twodomain_source_term`` の関数となります。"

#: ../source/userdoc/gasm_high.rst:878
msgid ""
"For the utilisation with the Python/Scilab/Matlab interface, see the "
"documentation on ``gf_asm`` command and the ``model`` object."
msgstr ""
"Python / Scilab / Matlabインタフェースを利用するには、 ``gf_asm`` コマンドと ``model`` "
"オブジェクトに関するドキュメントを参照してください。"

#: ../source/userdoc/gasm_high.rst:881
msgid ""
"Inside an expression of the weak form language, one can refer to the unit "
"normal vector to a boundary, to the current position or to the value of a "
"variable thanks to the expressions::"
msgstr "弱形式言語の表現中で、式により、境界への単位法線ベクトル、変数の現在の位置または値を参照することができます。"

#: ../source/userdoc/gasm_high.rst:894
msgid "For instance, a term like"
msgstr "たとえば、"

#: ../source/userdoc/gasm_high.rst:896
msgid "\\int_{\\Omega_1}\\int_{\\Omega_1}e^{-\\|x-y\\|}u(x)u(y)dydx,"
msgstr "\\int_{\\Omega_1}\\int_{\\Omega_1}e^{-\\|x-y\\|}u(x)u(y)dydx,"

#: ../source/userdoc/gasm_high.rst:900
msgid "would correspond to the following weak for language expression::"
msgstr "は次の弱形式言語に対応します。"

#: ../source/userdoc/gasm_high.rst:908
msgid "Elementary transformations"
msgstr "初等変換"

#: ../source/userdoc/gasm_high.rst:910
msgid ""
"An elementary transformation is a linear transformation of the shape "
"functions given by a matrix which may depend on the element which is applied"
" to the local degrees of freedom at the element level. an example of "
"definition of elementary transformation can be found in the file "
":file:`src/getfem_linearized_plates.cc`. It aims for instance to define a "
"local projection of a finite element on a lower level element to perform a "
"reduction such as the one used in MITC elements."
msgstr ""
"基本変換は、要素水準で局所自由度に適用される要素に依存する可能性のある行列によって与えられる形状関数の線形変換です。基本変換の定義の例はファイル "
":file:`src/getfem_linearized_plates.cc` "
"にあります。これは、例えば、MITC要素で使用されるような縮小を実行するために、より低い水準の要素上の有限要素の局所射影を定義することを目的とします。"

#: ../source/userdoc/gasm_high.rst:918
msgid ""
"Once a transformation is defined, it can be added to the model/workspace "
"with the method::"
msgstr "変換が定義されると、model/workspaceに次のメソッドを追加することができます。"

#: ../source/userdoc/gasm_high.rst:923
msgid ""
"where ``pelementary_transformation`` is a pointer to an object deriving from"
" ``virtual_elementary_transformation``. Once it is added to the "
"model/workspace, it is possible to use the following expressions in the weak"
" form language::"
msgstr ""
"ここで ``pelementary_transformation`` は ``virtual_elementary_transformation`` "
"から派生したオブジェクトへのポインタです。model/workspaceに追加されると、弱形式言語で次の式を使用することができます。"

#: ../source/userdoc/gasm_high.rst:934
msgid ""
"where ``u`` is one of the FEM variables of the model/workspace, and ``dest``"
" is an optional parameter which should be a variable or data name of the "
"model and will correspond to the target fem of the transformation. If "
"omitted, by default, the transformation is from the fem of the first "
"variable to itself."
msgstr ""
"ここで、 ``u`` はmodel/workspaceのFEM変数の1つであり、 ``dest`` "
"はオプションのパラメータであり、モデルの変数またはデータ名であり、変換のターゲットfemに対応します。省略した場合、デフォルトでは、最初の変数のfemからそれ自体への変換が行われます。"

#: ../source/userdoc/gasm_high.rst:936
msgid ""
"A typical transformation is the the one for the projection on rotated RT0 "
"element for two-dimensional elements which is an ingredient of the MITC "
"plate element. It can be added thanks to the function (defined in "
":file:`src/getfem/getfem_linearized_plates.h`)::"
msgstr ""
"典型的な変換はMITCプレート要素の成分である二次元要素に対する回転RT0要素上への投影のための変換です。これは関数( "
":file:`src/getfem/getfem_linearized_plates.h` に定義されています)のおかげで追加できます。"

#: ../source/userdoc/gasm_high.rst:940
msgid ""
"Some other transformations are available for the use into Hybrid High-Order "
"methods (HHO methods, see :ref:`ud-hho` for more information). These "
"transformations correspond to the reconstruction of the gradient of a "
"variable or the variable itself, the HHO methods having separated "
"discretizations on the interior of the element and on its faces. The "
"different transformations can be added with the functions (defined in "
":file:`src/getfem/getfem_HHO.h`)::"
msgstr ""
"Hybrid High-Order法(HHO法の詳細については、 :ref:`ud-hho` "
"を参照してください。)に使用できる変換は他にもいくつかあります。これらの変換は、変数または変数自体の勾配の再構成に対応し、HHO法は、要素の内部およびその面上で分離した離散化を有します。次の関数を使用して、さまざまな変換を追加できます("
" :file:`src/getfem/getfem_HHO.h` で定義されています)。"

#: ../source/userdoc/gasm_high.rst:955
msgid "Xfem discontinuity evaluation (with mesh_fem_level_set)"
msgstr "Xfem不連続性評価（mesh_fem_level_setを使用）"

#: ../source/userdoc/gasm_high.rst:957
msgid ""
"When using a fem cut by a level-set (using fem_level_set or "
"mesh_fem_level_set objects), it is often interesting to integrate the "
"discontinuity jump of a variable, or the jump in gradient or the average "
"value. For this purpose, the weak form language furnishes the following "
"expressions for ``u`` a FEM variable::"
msgstr ""
"レベル集合（ fem_level_set または mesh_fem_level_set "
"オブジェクトを使用）によって有限要素法を切断する場合、変数の不連続ジャンプ、または勾配または平均値のジャンプを組み込むのが面白いことがよくあります。そのために、弱形式言語は、"
" ``u`` のFEM変数を定義しています。"

#: ../source/userdoc/gasm_high.rst:977
msgid ""
"which are only available when the evaluation (integration) is made on the "
"curve/surface separating two zones of continuity, i.e. on the zero level-set"
" of a considered level-set function (using a ``mesh_im_level_set`` object). "
"For instance, a jump in the variable ``u`` will be given by::"
msgstr ""
"これは、連続性の2つのゾーンを分離する曲線/表面、すなわち、考慮されるレベル集合関数のゼロレベル集合（ ``mesh_im_level_set`` "
"オブジェクトを使用する）で評価（積分）が行われる場合にのみ利用可能です。例えば、 ``u`` 変数のジャンプは次のようになります。"

#: ../source/userdoc/gasm_high.rst:981
msgid "and the average by::"
msgstr "平均値は次のようになります。"

#: ../source/userdoc/gasm_high.rst:985
msgid ""
"The value ``Xfem_plus(u)`` is the value of ``u`` on the side where the "
"corresponding level-set function is positive and ``Xfem_minus(u)`` the value"
" of ``u`` on the side where the level-set function is negative."
msgstr ""
"値 ``Xfem_plus(u)`` は、対応するlevel-set関数が正である側の ``u`` の値であり、level-set関数が負である側の "
"``Xfem_minus(u)`` の値です。"

#: ../source/userdoc/gasm_high.rst:987
msgid ""
"Additionally, note that, when integrating on a level-set with a "
"``mesh_im_level_set`` object, ``Normal`` stands for the normal unit vector "
"to the level-set in the direction of the gradient of the level-set function."
msgstr ""
"また、 ``mesh_im_level_set`` オブジェクトを持つ level-set上で積分する場合、  ``Normal`` は level-"
"set 関数の勾配方向に設定されるレベルに対する法線単位ベクトルを表します。"

#: ../source/userdoc/gasm_high.rst:990
msgid "Storage of sub-expressions in a getfem::im_data object during assembly"
msgstr "構築中の getfem::im_data オブジェクトへのサブ式の格納"

#: ../source/userdoc/gasm_high.rst:992
msgid ""
"It is possible to store in a vector depending on a getfem::im_data object a "
"part of an assembly computation, for instance in order to use this "
"computation in another assembly. This is an alternative to the interpolation"
" functions which allows not to compute twice the same expression."
msgstr ""
"getfem::im_data "
"オブジェクトに応じてベクトルに格納することができます。たとえば、この計算を別の構築で使用するために、構築計算の一部にすることができます。これは、同じ式を2回計算しないようにするための補間関数の代替方法です。"

#: ../source/userdoc/gasm_high.rst:994
msgid ""
"The method to add such an assignment in the assembly is the following for a "
"model or a ga_workspace::"
msgstr "このような割り当てを構築に追加する方法は、 model または ga_workspace です。"

#: ../source/userdoc/gasm_high.rst:1002
msgid ""
"It adds expression `expr` to be evaluated at assembly time and being "
"assigned to the data `dataname` which has to be of im_data type. `order` "
"represents the order of assembly where this assignement has to be done "
"(potential(0), weak form(1) or tangent system(2) or at each order(-1)). The "
"default value is 1. If before = 1, the the assignement is performed before "
"the computation of the other assembly terms, such that the data can be used "
"in the remaining of the assembly as an intermediary result (be careful that "
"it is still considered as a data, no derivation of the expression is "
"performed for the tangent system). If before = 0 (default), the assignement "
"is done after the assembly terms."
msgstr ""
"構築時に評価される式 `expr` を追加し、im_data型でなければならないデータ `dataname` に代入します。 `order` "
"は、この割り当てが行われなければならない構築の次数を表します（ポテンシャル（0）、弱形式（1）または接線のシステム（2）または次数ごと（-1））。 "
"before = 1 "
"の場合、代入は他の構築項の計算の前に実行されるため、データを構築の残りの部分で中間結果として使用することができます（データとしてはまだ考慮していることに注意してください、接線系の式の微分は行われません）。before"
" = 0（デフォルト）の場合、構築の項の後に割り当てが行われます。"

#: ../source/userdoc/gasm_high.rst:1014
msgid "Additionally, In a model, the method::"
msgstr "さらに、modelでは、次のメソッドがあります。"

#: ../source/userdoc/gasm_high.rst:1018
msgid "allows to cancel all the assembly assignments previously added."
msgstr "これにより、以前に追加された構築割り当てをすべてキャンセルすることができます。"
