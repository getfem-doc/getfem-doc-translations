# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-28 21:37+0000\n"
"PO-Revision-Date: 2018-07-16 07:05+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:12
msgid "Compute arbitrary terms - low-level generic assembly procedures"
msgstr "任意の項を計算する - 低水準の汎用的な構築手順"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:14
msgid ""
"This section present the first version of generic assembly procedure which "
"has been implemented in |gf|. It allows to easily make the assembly of "
"arbitrary matrices in the linear case. In the nonlinear case, some special "
"\"non_linear_term\" object have to be implemented, which could be a bit "
"tricky and obliges to use very low-level internal tools of |gf|. The high-"
"level generic assembly has been developed to circumvent these difficulties "
"(see :ref:`ud-gasm-high`)."
msgstr ""
"このセクションでは、 |gf| "
"で実装された汎用構築手順の最初のバージョンを説明します。これにより、線形の場合に任意の行列の集合を容易に作成可能になります。非線形の場合、特殊な "
"\"non_linear_term\" オブジェクトを実装する必要があります。これは複雑で、 |gf| "
"という非常に低水準の内部ツールを使用する必要があります。高水準汎用構築は、この困難を回避するために開発されました（ :ref:`ud-gasm-"
"high` 参照）。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:16
msgid ""
"As it can be seen in the file :file:`getfem/getfem_assembling.h`, all the "
"previous assembly procedures use a |gf_gasm| object and provide it an "
"adequate description of what must be done. For example, the assembly of a "
"volumic source term for a scalar FEM is done with the following excerpt of "
"code::"
msgstr ""
"ファイル :file:`getfem/getfem_assembling.h` で見ることができるように、以前の構築手順はすべて |gf_gasm| "
"オブジェクトを使用しています。例えば、スカラーFEMのためのボリュームソース項の構築は、コードの以下の抜粋を用いて行われます。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:31
msgid ""
"The first instructions declare the object, and set the data that it will "
"use: a |mim| object which holds the integration methods, two |mf| objects, "
"the input data ``F``, and the destination vector ``B``."
msgstr ""
"最初の命令はオブジェクトを宣言し、使用するデータを設定します。積分法を保持する |mim| オブジェクト、2つの |mf| オブジェクト、入力データ "
"``F`` 、および宛先ベクトル ``B`` を含みます。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:35
msgid ""
"The input data is the vector :math:`F`, defined on ``mfdata``. One wants to "
"evaluate :math:`\\sum_{j} f_j (\\int_\\Omega \\phi^i \\psi^j)`. The "
"instruction must be seen as something that will be executed for each convex "
"``cv`` of the mesh. The terms ``#1`` and ``#2`` refer to the first |mf| and "
"the second one (i.e. ``mf`` and ``mfdata``).  The instruction "
"``Z=data(#2);`` means that for each convex, the \"tensor\" ``Z`` will "
"receive the values of the first data argument provided with ``push_data``, "
"at indexes corresponding to the degrees of freedom attached to the convex of"
" the second (``#2``) |mf| (here, ``Z = F[mfdata.ind_dof_of_element(cv)]``)."
msgstr ""
"入力データは ``mfdata`` で定義されているベクトル :math:`F` です。1つは :math:`\\sum_{j} f_j "
"(\\int_\\Omega \\phi^i \\psi^j)` を評価することです。命令はメッシュの凸包の ``cv`` ごとに実行されます。(項 "
"``#1`` と項 ``#2`` は最初の |mf| 2つ目は ``mf`` と ``mfdata`` です)。 ``Z=data(#2);`` "
"はそれぞれの凸包について、 ``push_data`` で与えられた最初のデータ引数の値を ``push_data`` "
"に対応するインデックスで受け取ることを示します。 2番目の（ ``#2`` ）の凸包に付けられた自由度 |mf| （ここでは ``Z = "
"F[mfdata.ind_dof_of_element(cv)]`` となります)。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:45
msgid ""
"The part ``V(#1)+=...`` means that the result of the next expression will be"
" accumulated into the output vector (provided with ``push_vec``). Here "
"again, ``#1`` means that we will write the result at indexes corresponding "
"to the degrees of freedom of the current convex with respect to the first "
"(``#1``) |mf|."
msgstr ""
"``V(#1)+=...`` の部分は、次の式の結果が出力ベクトルに蓄積されることを意味します（ ``push_vec`` "
"で提供されます）。ここでもまた、 ``#1`` は、最初の（ ``#1`` ） |mf| "
"に関して、現在の凸の自由度に対応するインデックスに結果を書き込むことを意味します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:50
msgid ""
"The right hand side ``comp(Base(#1).Base(#2))(:,j).Z(j)`` contains two "
"operations. The first one is a computation of a tensor on the convex: "
"``comp(Base(#1).Base(#2))`` is evaluated as a 2-dimensions tensor, "
":math:`\\int\\phi^i \\psi^j`, for all degrees of freedom :math:`i` of ``mf``"
" and :math:`j` of ``mfdata`` attached to the current convex. The next part "
"is a reduction operation, ``C(:,j).Z(j)``: each named index (here :math:`j`)"
" is summed, i.e. the result is :math:`\\sum_j c_{i,j} z_j`."
msgstr ""
"右側の ``comp(Base(#1).Base(#2))(:,j).Z(j)`` "
"には2つの操作が含まれています。最初のものは、凸包のテンソルの計算です： ``comp(Base(#1).Base(#2))`` "
"は2次元のテンソルとして評価されます :math:`\\int\\phi^i \\psi^j` をすべての自由度について計算します ``mf`` "
"と現在の凸面に付けられた ``mfdata`` の :math:`j` 。次の部分はリダクション演算で、 ``C(:,j).Z(j)`` "
"：それぞれの指数（ここでは :math:`j` ）を合計します。結果は  :math:`\\sum_j c_{i,j} z_j` となります。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:58
msgid ""
"The integration method used inside ``comp(Base(#1).Base(#2))`` is taken from"
" ``mim``. If you need to use integration methods from another |mim| object, "
"you can specify it as the first argument of ``comp``, for example "
"``comp(\\%2, Base(#1).Grad(#2))`` will use the second |mim| object (New in "
"getfem++-2.0)."
msgstr ""
"``comp(Base(#1).Base(#2))`` の内部で使用される積分法は ``mim`` から取得されます。別の |mim| "
"オブジェクトから積分法を使用する必要がある場合は、``comp`` の最初の引数として指定することができます、例えば、 ``comp(\\%2, "
"Base(#1).Grad(#2))`` は2番目の |mim| オブジェクトを使用します（getfem++-2.0の新機能）。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:63
msgid ""
"An other example is the assembly of the stiffness matrix for a vector "
"Laplacian::"
msgstr "他の例として、ベクトルLaplacianの剛性行列を構築します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:75
msgid ""
"Now the output is written in a sparse matrix, inserted with "
"``assem.push_mat(SM)``. The ``$1`` in ``M$1(#1,#1)`` just indicates that we "
"refer to the first matrix \"pushed\" (it is optional, but if the assembly "
"builds two matrices, the second one must be referred this way). The ``sym`` "
"function ensure that the result is symmetric (if this is not done, some "
"round-off errors may cancel the symmetricity, and the assembly will be a "
"little bit slower). Next, the ``comp`` part evaluates a 7D tensor,"
msgstr ""
"出力は、 ``assem.push_mat(SM)`` で挿入された疎行列に書き出されます。 ``M$1(#1,#1)`` の ``$1`` "
"は最初の行列を \"push\" していることを示しています（オプションですが、2つの行列を構築するならば、2つ目はこのように参照する必要があります）。"
" ``sym`` "
"関数は、結果が対称であることを保証します（これが行われないと、いくつかの丸め誤差が対称性を取り消し、構築が少し遅くなることに留意してください）。次に、 "
"``comp`` 部分は7次テンソルを評価し、"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:83
msgid "\\int\\partial_k\\varphi^{i}_{j}\\partial_n\\varphi^l_m\\psi^p,"
msgstr "\\int\\partial_k\\varphi^{i}_{j}\\partial_n\\varphi^l_m\\psi^p,"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:87
msgid ""
"where :math:`\\varphi^i_j` is a :math:`jth` component of the :math:`ith` "
"base function of ``mf`` and :math:`\\psi^p` is a (scalar) base function of "
"the second |mf|. Since we want to assemble"
msgstr ""
"ここで、 :math:`\\varphi^i_j` は ``mf`` の :math:`i` 次の基底関数の :math:`j` 次成分で、 "
":math:`\\psi^p` は（スカラー） 2番目の |mf| の基底関数を構築したいので"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:91
msgid ""
"\\int a(x).\\nabla\\phi^i.\\nabla\\phi^j, \\quad\\text{with}\\quad "
"a(x)=\\sum_p a^p \\psi^p(x),"
msgstr ""
"\\int a(x).\\nabla\\phi^i.\\nabla\\phi^j, \\quad\\text{with}\\quad "
"a(x)=\\sum_p a^p \\psi^p(x),"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:97
msgid "the reduction is:"
msgstr "換算は次のとおりです。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:99
msgid ""
"\\sum_{j,k,p}\\left( \\int \\partial_k\\varphi^{i}_{j} "
"\\partial_k\\varphi^m_j \\psi^p \\right)a^p"
msgstr ""
"\\sum_{j,k,p}\\left( \\int \\partial_k\\varphi^{i}_{j} "
"\\partial_k\\varphi^m_j \\psi^p \\right)a^p"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:105
msgid ""
"In the ``comp`` function, ``vGrad`` was used instead of ``Grad`` since we "
"said that we were assembling a *vector* Laplacian: that is why each "
"``vGrad`` part has three dimensions (dof number, component number, and "
"derivative number). For a scalar Laplacian, we could have used "
"``comp(Grad(#1).Grad(#1).Base(#2))(:,k,:,k,p).a(p)``. But the vector form "
"has the advantage to work in both vector and scalar case."
msgstr ""
"``comp`` 関数で ``Grad`` の代わりに ``vGrad`` が使われました。なぜなら、 Laplacian *ベクトル* "
"をアセンブルしているためです。そのため、それぞれの ``vGrad`` "
"部分に3次元の（自由度番号、成分番号、および派生番号）があります。スカラLaplacianの場合、 "
"``comp(Grad(#1).Grad(#1).Base(#2))(:,k,:,k,p).a(p)`` "
"を使うことができます。しかし、ベクトル形式はベクトルとスカラーの両方の場合に機能する利点があります。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:112
msgid ""
"The last instruction, ``assem.assembly()``, does evaluate the expression on "
"each convex. For an assembly over a boundary just call "
"``assem.assembly(rg)``, where ``rg`` is a |gf_mr| object.  ``rg`` might also"
" be a number, in that case the mesh region taken into account is "
"``mim.linked_mesh().region(rg)``."
msgstr ""
"最後の命令である ``assem.assembly()`` は各凸包の式を評価します。境界を越えて構築を呼び出すには、 "
"``assem.assembly(rg)`` を呼び出します。ここで ``rg`` は |gf_mr| オブジェクト。 ``rg`` "
"も数値であるかもしれません。その場合メッシュ領域は ``mim.linked_mesh().region(rg)`` です。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:117
msgid ""
"The third example shows how to compute the :math:`L^2` norm of a scalar or "
"vector field on a mesh boundary::"
msgstr "3番目の例は、メッシュ境界上のスカラーまたはベクトルフィールドの :math:`L^2` ノルムを計算する方法を示します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:129
msgid ""
"This one is easy to read. When ``assembly`` returns, ``v[0]`` will contain"
msgstr "これは読みやすいです。 ``assembly`` が返ってくるとき、 ``v[0]`` は次の通りです。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:131
msgid ""
"\\sum_{i,j,k}\\left(\\int_{boundary} u_i \\varphi^{i}_{k} u_j \\varphi^j_k "
"\\right)"
msgstr ""
"\\sum_{i,j,k}\\left(\\int_{boundary} u_i \\varphi^{i}_{k} u_j \\varphi^j_k "
"\\right)"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:135
msgid ""
"The fourth and last example shows an (sub-optimal) assembly of the linear "
"elasticity problem with a complete Hooke tensor::"
msgstr "4番目と最後の例は、完全なHookeテンソルによる線形弾性問題の（準最適な）構築を示しています。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:143
msgid "The original equations are:"
msgstr "元の方程式は次のとおりです。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:145
msgid ""
"\\int\\varepsilon(\\varphi^i):\\sigma(\\phi^j), \\quad\\text{with}\\quad "
"\\sigma(u)_{ij}=\\sum_{kl} h_{ijkl}(x) \\varepsilon_{kl}(u)"
msgstr ""
"\\int\\varepsilon(\\varphi^i):\\sigma(\\phi^j), \\quad\\text{with}\\quad "
"\\sigma(u)_{ij}=\\sum_{kl} h_{ijkl}(x) \\varepsilon_{kl}(u)"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:151
msgid ""
"where :math:`h` is the Hooke tensor, and :math:`:` means the scalar product "
"between matrices. Since we assume it is not constant, :math:`h` is given on "
"the second |mf|: :math:`h_{ijkl}(x)=\\sum_p h_{ijkl}^p \\psi^p`. Hence the "
"first line declares that the first data \"pushed\" is indeed a five-"
"dimensions tensor, the first fourth ones being all equal to the target "
"dimension of the first |mf|, and the last one being equal to the number of "
"degrees of freedom of the second |mf|. The ``comp`` part still computes the "
"same 7D tensor than for the vector Laplacian case. From this tensor, one "
"evaluates "
":math:`\\varepsilon(\\varphi^i)_{jk}\\varepsilon(\\phi^l)_{mn}\\psi^p` via "
"permutations, and finally the expression is reduced against the hook tensor."
msgstr ""
":math:`h` はHookeテンソル、そして :math:`:` は行列間のスカラ積を意味します。定数ではないと仮定しているので、第2の |mf|:"
" :math:`h_{ijkl}(x)=\\sum_p h_{ijkl}^p \\psi^p` に :math:`h` "
"が与えられます。したがって、最初の行は、最初のデータが実際に5次元のテンソルであることを宣言します。最初の4番目のものはすべて最初の |mf| "
"のターゲット次元に等しく、最後のものは次の第2の |mf| の自由度数に等しくなり、 ``comp`` "
"部分はベクトルLaplacianの場合と同じ7次テンソルを計算します。このテンソルから、順列を使って "
":math:`\\varepsilon(\\varphi^i)_{jk}\\varepsilon(\\phi^l)_{mn}\\psi^p` "
"を評価し最後に表現はHookeテンソルに換算されます。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:164
msgid "available operations inside the ``comp`` command"
msgstr "``comp`` コマンドの中で利用可能な操作"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:166
msgid ""
"``Base(#i)``: evaluate the value of the base functions of the *ith* |mf|"
msgstr "``Base(#i)``: *i* 次 |mf| の基底関数の値を評価します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:168
msgid ""
"``Grad(#i)``: evaluate the value of the gradient of the base functions of "
"the *ith* |mf|"
msgstr "``Grad(#i)``:  *i* 次 |mf| の基底関数の勾配の値を評価します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:171
msgid ""
"``Hess(#i)``: evaluate the value of the Hessian of the base functions of the"
" *ith* |mf|"
msgstr "``Hess(#i)``: *i* 次 |mf| の基底関数のHessianの値を評価します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:174
msgid ""
"``Normal()``: evaluate the unit normal (should not be used for volumic "
"integrations !)"
msgstr "``Normal()``: 単位法線を評価します（体積積分には使用しないでください）。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:177
msgid ""
"``NonLin$x(#mf1,... #mfn)``: evaluate the *xth* non-linear term (inserted "
"with ``push_nonlinear_term(pnonlinear_elem_term)``) using the listed |mf| "
"objects."
msgstr ""
"``NonLin$x(#mf1,... #mfn)``： ``push_nonlinear_term(pnonlinear_elem_term)`` "
"で挿入された、リストされた |mf| オブジェクトを使用した *x* 次非線形項の計算。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:181
msgid ""
"``GradGT()``, ``GradGTInv()``: evaluate the gradient (and its inverse) of "
"the geometric transformation of the current convex."
msgstr "``GradGT()``、 ``GradGTInv()``：現在の凸包の幾何学的変換の勾配（およびその逆数）を評価します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:186
msgid ""
"you may reference any data object inside the ``comp`` command, and perform "
"reductions inside the ``comp()``. This feature is mostly interesting for "
"speeding up assembly of nonlinear terms (see the file "
":file:`getfem/getfem_nonlinear_elasticity.h` for an example of use)."
msgstr ""
"``comp`` コマンドの中の任意のデータオブジェクトを参照し、 ``comp()`` "
"の中で縮小を実行することができます。この機能は非線形項の構築を高速化するために有用です（ファイル "
":file:`getfem/getfem_nonlinear_elasticity.h` の使用例を参照）。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:193
msgid "others operations"
msgstr "他の操作"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:195
msgid ""
"Slices may be mixed with reduction operations ``t(:,4,i,i)`` takes a slice "
"at index 4 of the second dimension, and reduces the diagonal of dimension 3 "
"and 4. *Please note that index numbers for slices start at 1 and not 0 !!*"
msgstr ""
"スライスは縮小演算と混在することがあります。 ``t(:,4,i,i)`` は第2次元のインデックス4でスライスをとり、次元3と4の対角を縮小します。 "
"*スライスのインデックス番号は1ではなく0で始まることに留意してください!!* "

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:199
msgid ""
"``mdim(#2)`` is evaluated as the mesh dimension associated to the second "
"|mf|, while ``qdim(#2)`` is the target dimension of the |mf|."
msgstr ""
"``mdim(#2)`` は第2の |mf| に関連するメッシュ次元として評価され、 ``qdim(#2)`` は |mf| の対象次元です。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:202
msgid ""
"The diagonal of a tensor can be obtained with ``t{:,:,3,3}`` (which is "
"strictly equivalent to ``t{1,2,3,3}``: the colon is just here to improve the"
" readability). This is the same operator than for permutation operations. "
"Note that ``t{:,:,1,1}`` or ``t{:,:,4,4}`` are not valid operations."
msgstr ""
"テンソルの対角は ``t{:,:,3,3}`` で得ることができます。(厳密には ``t{1,2,3,3}`` と同等です: "
"コロンは読みやすさを向上させるためだけです）。これは、並べ替え操作と同じ演算子です。 ``t{:,:,1,1}`` や ``t{:,:,4,4}`` "
"は有効な操作ではないことに注意してください。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:207
msgid ""
"The ``print`` command can be used to see the tensor: ``\"print "
"comp(Base(#1));\"`` will print the integrals of the base functions for each "
"convex."
msgstr ""
"``print`` コマンドは、テンソルを見るために使うことができます： ``\"print comp(Base(#1));\"`` "
"は各凸包の基底関数の積分を出力します。"

#: /home/travis/build/getfem-doc/getfem-doc-translations/getfem/doc/sphinx/source/userdoc/gasm_low.rst:210
msgid ""
"If there is more than one data array, output array or output sparse matrix, "
"one can use ``data$2``, ``data$3``, ``V$2``, ``M$2``,..."
msgstr ""
"If there is more than one data array, output array or output sparse matrix, "
"one can use ``data$2``, ``data$3``, ``V$2``, ``M$2``,..."
