# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-27 01:17+0000\n"
"PO-Revision-Date: 2018-07-16 07:04+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/userdoc/model_Nitsche.rst:13
msgid "Nitsche's method for dirichlet and contact boundary conditions"
msgstr "Dirichletおよび接触境界条件に対するNitsche法"

#: ../source/userdoc/model_Nitsche.rst:15
msgid ""
"|gf| provides a generic implementation of Nitche's method which allows to "
"account for Dirichlet type or contact with friction boundary conditions in a"
" weak sense without the use of Lagrange multipliers. The method is very "
"attractive because it transforms a Dirichlet boundary condition into a weak "
"term similar to a Neumann boundary condition. However, this advantage is at "
"the cost that the implementation of Nitche's method is model dependent, "
"since it requires an approximation of the corresponding Neumann term. In "
"order to add a boundary condition with Nitsche's method on a variable of a "
"model, the corresponding brick needs to have access to an approximation of "
"the Neumann term of all partial differential terms applied to this variable."
" In the following, considering a variable :math:`u`, we will denote by"
msgstr ""
"|gf| "
"はDirichletタイプまたは摩擦境界条件との接触を，Lagrange乗数を使用せずに弱形式で考慮に入れることができるNitche法の汎用的な実装を与えます．この方法は，Dirichlet境界条件をNeumann境界条件と同様に弱定式項に変換するため，非常に魅力的です．しかしながら，この利点は，対応するNeumann項の近似を必要とするため，Nitsche法の実施がモデル依存であることがコストです．Nitsche法で境界条件をモデルの変数に追加するには，対応するブリック要素が，この変数に適用されるすべての偏微分項のNeumann項の近似にアクセスする必要があります．以下では，変数"
" :math:`u` を考慮して，"

#: ../source/userdoc/model_Nitsche.rst:21
msgid ""
"G\n"
"\n"
msgstr ""
"G\n"
"\n"

#: ../source/userdoc/model_Nitsche.rst:24
msgid ""
"the sum of all Neumann terms on this variable. Note that the Neumann term "
":math:`G` will often depend on the variable :math:`u` but it may also depend"
" on other variables of the model. This is the case for instance for mixed "
"formulations of incompressible elasticity. The Neumann terms depend also "
"frequently on some parameters of the model (elasticity coefficients ...) but"
" this is assumed to be contained in its expression."
msgstr ""
"この変数上のすべてのNeumann項の和．Neumann項 :math:`G` は変数 :math:`u` "
"に依存することが多いことに注意してください．しかしモデルの他の変数にも依存します．これは，例えば，非圧縮弾性の混合式の場合です．Neumann項は，モデルのいくつかのパラメータ（弾力係数...）にも頻繁に依存しますが，これはその式に含まれると仮定されます．"

#: ../source/userdoc/model_Nitsche.rst:29
msgid ""
"For instance, if there is a Laplace term (:math:`\\Delta u`), applied on the"
" variable :math:`u`, the Neumann term will be :math:`G = \\dfrac{\\partial "
"u}{\\partial n}` where :math:`n` is the outward unit normal on the "
"considered boundary. If :math:`u` represents the displacements of a "
"deformable body, the Neumann term will be :math:`G = \\sigma(u)n`, where "
":math:`\\sigma(u)` is the stress tensor depending on the constitutive law. "
"Of course, in that case :math:`G` also depends on some material parameters. "
"If additionally a mixed incompressibility brick is added with a variable "
":math:`p` denoting the pressure, the Neumann term on :math:`u` will depend "
"on :math:`p` in the following way: :math:`G = \\sigma(u)n - pn`"
msgstr ""
"例えば，Laplace項 ( :math:`\\Delta u` )が変数 :math:`u` に適用される場合，Neumann項は :math:`G "
"= \\dfrac{\\partial u}{\\partial n}` のようになります．ここで， :math:`n` "
"は考慮されている境界上の外側の単位法線です．もし :math:`u` が変形可能な物体の変位を表すなら， Neumann項は :math:`G = "
"\\sigma(u)n` のようになります．ここで， :math:`\\sigma(u)` は構成則に依存する応力テンソルです．もちろん，その場合 "
":math:`G` はいくつかの物性値に依存します．さらに，圧力を表す変数 :math:`p` を混合した非圧縮ブリック要素に加えると， "
":math:`u` 上のNeumann項は次のように :math:`p` に依存します． :math:`G = \\sigma(u)n - pn` "

#: ../source/userdoc/model_Nitsche.rst:35
msgid ""
"In order to allow a generic implementation in which the brick imposing "
"Nitsche's method will work for every partial differential term applied to "
"the concerned variables, each brick adding a partial differential term to a "
"model is required to give its expression via a GWFL (generic weak form "
"language) expression."
msgstr ""
"Nitsche法を課しているブリック要素が，関連する変数に適用されるすべての偏微分項に対して機能する汎用的な実装を可能にするために，モデルに部分微分項を追加する各ブリック要素は，GWFL（汎用弱形式言語）表現が必要です．"

#: ../source/userdoc/model_Nitsche.rst:37
msgid ""
"These expressions are utilized in a special method of the model object::"
msgstr "これらの式は，modelオブジェクトの特別なメソッド::"

#: ../source/userdoc/model_Nitsche.rst:41
msgid ""
"which allows to automatically derive an expression for the sum of all "
"Neumann terms, by scanning the expressions provided by all partial "
"differential term bricks and performing appropriate manipulations. Of course"
" it is required that all volumic bricks were added to the model prior to the"
" call of this method. The derivation of the Neumann term works only for "
"second order partial differential equations. A generic implementation for "
"higher order pde would be more complicated."
msgstr ""
"すべての部分微分項要素が与える式を走査し，適切な操作を実行することによって，すべてのNeumann項の和に対する式を自動的に導出することを可能にします．もちろん，このメソッドを呼び出す前に，すべてのボリューム要素をモデルに追加する必要があります．Neumann項の導出は，2次偏微分方程式に対してのみ働く．高次pdeの汎用的な実装はより複雑になります．"

#: ../source/userdoc/model_Nitsche.rst:48
msgid "Generic Nitsche's method for a Dirichlet condition"
msgstr "Dirichlet条件のための汎用的なNitsche法"

#: ../source/userdoc/model_Nitsche.rst:50
msgid ""
"Assume that the variable :math:`u` is considered and that one wants to "
"prescribe the condition"
msgstr "変数 :math:`u` が考慮され，条件を規定したいとします．"

#: ../source/userdoc/model_Nitsche.rst:52
msgid ""
"Hu = g\n"
"\n"
msgstr ""
"Hu = g\n"
"\n"

#: ../source/userdoc/model_Nitsche.rst:55
msgid ""
"on a part :math:`\\Gamma_D`  of the boundary of the considered domain. Here "
":math:`H` is considered equal to one in the scalar case or can be either the"
" identity matrix in the vectorial case either a singular matrix having only "
"1 or 0 as eigenvalues. This allow here to prescribe only the normal or "
"tangent component of :math:`u`. For instance if one wants to prescribe only "
"the normal component, :math:`H` will be chosen to be equal to :math:`nn^T` "
"where :math:`n` is the outward unit normal on :math:`\\Gamma_D`."
msgstr ""
"部分 :math:`\\Gamma_D` は考慮する領域の境界です．ここで， :math:`H` "
"は，スカラーの場合，1と等しいと見なされるか，ベクトルの場合の恒等行列か，固有値として1または0のみを持つ特異行列のいずれかです．これにより，ここでは，"
" :math:`u` の接線または接線成分のみを処理することができます．たとえば，正規成分のみを処理したい場合， :math:`H` "
"は:math:`nn^T` と等しくなるように選択されます．ここで， :math:`n` は :math:`\\Gamma_D` "
"上の外向きの単位法線です．"

#: ../source/userdoc/model_Nitsche.rst:60
msgid ""
"Nitsche's method for prescribing this Dirichlet condition consists in adding"
" the following term to the weak formulation of the problem"
msgstr "このDirichlet条件を処理するためのNitsche法では，問題の弱形式に次の項を加えます．"

#: ../source/userdoc/model_Nitsche.rst:62
msgid ""
"\\int_{\\Gamma_D} \\dfrac{1}{\\gamma}(Hu-g-\\gamma HG).(Hv) - \\theta(Hu-g).(HD_uG[v])d\\Gamma,\n"
"\n"
msgstr ""
"\\int_{\\Gamma_D} \\dfrac{1}{\\gamma}(Hu-g-\\gamma HG).(Hv) - \\theta(Hu-g).(HD_uG[v])d\\Gamma,\n"
"\n"

#: ../source/userdoc/model_Nitsche.rst:65
msgid ""
"where :math:`\\gamma` and :math:`\\theta` are two parameters of Nitsche's "
"method and :math:`v` is the test function corresponding to :math:`u`. The "
"parameter :math:`\\theta` can be chosen positive or negative. :math:`\\theta"
" = 1` corresponds to the more standard method which leads to a symmetric "
"tangent term in standard situations, :math:`\\theta = 0` corresponds to a "
"non-symmetric method which has the advantage of a reduced number of terms "
"and not requiring the second derivatives of :math:`G` in the nonlinear case,"
" and :math:`\\theta = -1` is a kind of skew-symmetric method which ensures "
"an inconditonal coercivity (which means independent of :math:`\\gamma`) at "
"least in standard situations. The parameter :math:`\\gamma` is a kind of "
"penalization parameter (although the method is consistent) which is taken to"
" be :math:`\\gamma = \\gamma_0 h_T` where :math:`\\gamma_0` is taken uniform"
" on the mesh and :math:`h_T` is the diameter of the element :math:`T`. Note "
"that, in standard situations, except for :math:`\\theta = -1` the parameter "
":math:`\\gamma_0` has to be taken sufficiently small in order to ensure the "
"convergence of Nitsche's method."
msgstr ""
":math:`\\gamma` と :math:`\\theta` はNitsche法の2つのパラメータです． :math:`v` は "
":math:`u` に対応する試験関数です．パラメータ :math:`\\theta` は正または負が選択できます． :math:`\\theta = "
"1` は標準的な状況で対称的な接線項につながるより標準的な方法に対応します． :math:`\\theta = 0` "
"は数が減少するという利点を持つ非対称的な方法に対応します．非線形の場合には :math:`G` の2次導関数を必要とせず，:math:`\\theta "
"= -1` は少なくとも標準的な状況では非平衡保磁力を保証する一種のSkew対称法である（これは， :math:`\\gamma` ）．パラメータ "
":math:`\\gamma` は一種のペナルティ・パラメタですが（手法は一貫していますが），次のようになります :math:`\\gamma = "
"\\gamma_0 h_T` ，ここで， :math:`\\gamma_0` はメッシュで :math:`h_T` は要素 :math:`T` "
"の直径です． :math:`\\theta = -1` を除く標準的な状況では，パラメータ :math:`\\gamma_0` "
"はNitsche法の収束を確実にするために十分小さくする必要があることに注意してください．"

#: ../source/userdoc/model_Nitsche.rst:70
msgid ""
"The bricks adding a Dirichlet condition with Nitsche's method to a model are"
" the following::"
msgstr "Nitsche法でDirichlet条件をモデルに追加した要素は次のとおりです::"

#: ../source/userdoc/model_Nitsche.rst:80
msgid ""
"This function adds a Dirichlet condition on the variable `varname` and the "
"mesh region `region`. This region should be a boundary. `Neumannterm` is the"
" expression of the Neumann term (obtained by the Green formula) described as"
" an expression of GWFL. This term can be obtained with "
"md.Neumann_term(varname, region) once all volumic bricks have been added to "
"the model. The Dirichlet condition is prescribed with Nitsche's method. "
"`dataname` is the optional right hand side of the Dirichlet condition. It "
"could be constant or described on a fem; scalar or vector valued, depending "
"on the variable on which the Dirichlet condition is prescribed. `gamma0name`"
" is the Nitsche's method parameter. `theta` is a scalar value which can be "
"positive or negative. `theta = 1` corresponds to the standard symmetric "
"method which is conditionally coercive for  `gamma0` small. `theta = -1` "
"corresponds to the skew-symmetric method which is inconditionally coercive. "
"`theta = 0` is the simplest method for which the second derivative of the "
"Neumann term is not necessary even for nonlinear problems. Returns the brick"
" index in the model. ::"
msgstr ""
"この関数は変数 `varname` とメッシュ領域 `region` にDirichlet条件を追加します．この領域は境界でなければなりません． "
"`Neumannterm` "
"はGWFLの表現として記述されたNeumann項（Green式によって得られる）の表現です．この項は，すべてのボリューム要素がモデルに追加されると "
"md.Neumann_term(varname, region) で取得できます．Dirichlet条件はNitsche法で規定されています． "
"`dataname` "
"はDirichlet条件のオプションの右辺です．これは一定か，または有限要素法上に記述することができます;Dirichlet条件が規定されている変数に応じて，スカラー値またはベクトル値を返します．"
" `gamma0name` はNitsche法のパラメータです． `theta` は正または負のスカラー値です． `theta = 1` "
"は標準的な対称的なメソッドに対応しています．これは， `gamma0` が小さい場合に強制的に行われます． `theta = -1` "
"は非強制的強制的なSkew対称方法に対応します． `theta = 0` "
"はNeumann項の2次導関数が非線形問題であっても必要でない最も単純な方法です．モデル内の要素のインデックスを返します． ::"

#: ../source/userdoc/model_Nitsche.rst:108
msgid ""
"This function adds a Dirichlet condition to the normal component of the "
"vector (or tensor) valued variable `varname` and the mesh region `region`. "
"This region should be a boundary. `Neumannterm` is the expression of the "
"Neumann term (obtained by the Green formula) described as an expression of "
"GWFL. This term can be obtained with md.Neumann_term(varname, region) once "
"all volumic bricks have been added to the model. The Dirichlet condition is "
"prescribed with Nitsche's method. `dataname` is the optional right hand side"
" of the Dirichlet condition. It could be constant or described on a fem. "
"`gamma0name` is the Nitsche's method parameter. `theta` is a scalar value "
"which can be positive or negative. `theta = 1` corresponds to the standard "
"symmetric method which is conditionally coercive for  `gamma0` small. `theta"
" = -1` corresponds to the skew-symmetric method which is inconditionally "
"coercive. `theta = 0` is the simplest method for which the second derivative"
" of the Neumann term is not necessary even for nonlinear problems. Returns "
"the brick index in the model. (This brick is not fully tested) ::"
msgstr ""
"この関数は，ベクトル（またはテンソル）値変数 `varname` とメッシュ領域 `region` "
"の正規成分にDirichlet条件を追加します．この領域は境界でなければなりません． `Neumannterm` "
"はGWFLの表現として記述されたNeumann項（Green式によって得られる）の表現です．この項は，すべてのボリューム要素がモデルに追加されると "
"，md.Neumann_term(varname, region) で取得できます．Dirichletの状態はNitsche法で規定されています． "
"`dataname` はオプションのDirichlet条件の右辺です．これは一定であるか，またはfem上に記述することができます． "
"`gamma0name` はNitsche法のパラメータです． `theta` は正または負のスカラー値です． `theta = 1` "
"は標準的な対称メソッドに対応しています．これは， `gamma0` が小さい場合に強制的に行われます． `theta = -1` "
"は非強制的強制的なSkew対称法に対応します． `theta = 0` "
"はNeumann項の2次導関数が非線形問題であっても必要でない最も単純な方法です．モデル内の要素のインデックスを返します．（このブリック要素は完全にテストされていません）．"

#: ../source/userdoc/model_Nitsche.rst:136
msgid ""
"This function adds a Dirichlet condition on the variable `varname` and the "
"mesh region `region`. This version is for vector field. It prescribes a "
"condition :math:`Hu = r` where :math:`H` is a matrix field. The region "
"should be a boundary. This region should be a boundary. `Neumannterm` is the"
" expression of the Neumann term (obtained by the Green formula) described as"
" an expression of GWFL. This term can be obtained with "
"md.Neumann_term(varname, region) once all volumic bricks have been added to "
"the model. The Dirichlet condition is prescribed with Nitsche's method. "
"CAUTION : the matrix H should have all eigenvalues equal to 1 or 0. "
"`dataname` is the optional right hand side of the Dirichlet condition. It "
"could be constant or described on a fem. `gamma0name` is the Nitsche's "
"method parameter. `theta` is a scalar value which can be positive or "
"negative. `theta = 1` corresponds to the standard symmetric method which is "
"conditionally coercive for  `gamma0` small. `theta = -1` corresponds to the "
"skew-symmetric method which is inconditionally coercive. `theta = 0` is the "
"simplest method for which the second derivative of the Neumann term is not "
"necessary even for nonlinear problems. `Hname` is the data corresponding to "
"the matrix field `H`. It has to be a constant matrix or described on a "
"scalar fem. Returns the brick index in the model. (This brick is not fully "
"tested)"
msgstr ""
"この関数は変数 `varname` とメッシュ領域 `region` "
"にDirichlet条件を追加します．このバージョンはベクトルフィールド用です．それは条件 :math:`Hu = r` を規定します，ここで "
":math:`H` は行列のフィールドです．領域は境界でなければなりません．この領域は境界でなければなりません． `Neumannterm` "
"はGWFLの式として記述されたNeumann項（Green式によって得られる）の表現です．この項は，すべてのボリューム要素がモデルに追加されると， "
"md.Neumann_term(varname, region) "
"で取得できます．Dirichlet条件はNitsche法で規定されています．注意：行列Hはすべての固有値が1または0に等しくなければなりません． "
"`dataname` はDirichlet条件のオプションの右辺です．それは一定であるか，または有限要素法上に記述することができます． "
"`gamma0name` はNitscheのメソッドパラメータです． `theta` は正または負のスカラー値です． `theta = 1` "
"は標準的な対称的なメソッドに対応しています．これは， `gamma0` が小さい場合に強制的に行われます． `theta = -1` "
"は非強制的強制的なskew対称方法に対応します． `theta = 0` "
"はNeumann項の2次導関数が非線形問題であっても必要でない最も単純な方法です． `Hname` は行列フィールド `H` "
"に対応するデータです．それは一定の行列でなければならないか，またはスカラーのfemで記述されなければなりません．モデル内の要素のインデックスを返します．"
" （この要素は完全にテストされていません）"

#: ../source/userdoc/model_Nitsche.rst:164
msgid "Generic Nitsche's method for contact with friction condition"
msgstr "摩擦条件との接触のための汎用的なNitsche法"

#: ../source/userdoc/model_Nitsche.rst:166
msgid ""
"We describe here the use of Nitsche's method to prescribe a contact with "
"Coulomb friction condition in the small deformations framework. This "
"corresponds to a weak integral contact condition which as some similarity "
"with the ones which use Lagrange multipliers describe in the corresponding "
"section, see :ref:`weak_integral_contact_section`"
msgstr ""
"ここでは，微小変形フレームワークでCoulomb摩擦条件との接触を規定するNitsche法の使用について説明します．これは弱積分接触条件に相当し，対応する節でLagrange乗数を使用するものとある程度類似しているので，"
" :ref:`weak_integral_contact_section` を参照してください．"

#: ../source/userdoc/model_Nitsche.rst:168
msgid ""
"In order to simplify notations, let use denote by :math:`P_{n,\\mathscr{F}}`"
" the following map which corresponds to a couple of projections:"
msgstr ""
"表記法を簡略化するためには， :math:`P_{n,\\mathscr{F}}` を使用してください．次のマップはいくつかの予測に対応しています："

#: ../source/userdoc/model_Nitsche.rst:170
msgid ""
"P_{n,\\mathscr{F}}(x) = -(x.n)_- n + P_{B(0,\\mathscr{F}(x.n)_-)}(x - (x.n)n)\n"
"\n"
msgstr ""
"P_{n,\\mathscr{F}}(x) = -(x.n)_- n + P_{B(0,\\mathscr{F}(x.n)_-)}(x - (x.n)n)\n"
"\n"

#: ../source/userdoc/model_Nitsche.rst:173
msgid ""
"This application make the projection of the normal part of :math:`x` on "
":math:`\\rm I\\hspace{-0.15em}R_-` and the tangential part on the ball of "
"center :math:`0` and radius :math:`\\mathscr{F}(x.n)_-`, where "
":math:`\\mathscr{F}` is the friction coefficient."
msgstr ""
"このアプリケーションは， :math:`\\rm I\\hspace{-0.15em}R_-` と中心のボールの接線部分 :math:`0` と半径 "
":math:`\\mathscr{F}(x.n)_-` に :math:`x` の通常部分の投影を作成します．ここで， "
":math:`\\mathscr{F}` は摩擦係数です．"

#: ../source/userdoc/model_Nitsche.rst:175
msgid ""
"Using this, and considering that the sliding velocity is approximated by "
":math:`\\alpha(u_{_T} - w_{_T})` where the expression of :math:`\\alpha` and"
" :math:`w_{_T}` depend on the time integration scheme used (see "
":ref:`weak_integral_contact_section`), Nitsche's term for contact with "
"friction reads as:"
msgstr ""
"これを使って，すべり速度を :math:`\\alpha(u_{_T} - w_{_T})` "
"のように近似することを考えてみましょう．ここで，:math:`\\alpha` と :math:`w_{_T}` は使用されている時間積分スキーム（ "
":ref:`weak_integral_contact_section` 参照）に依存して，Nitscheの摩擦接触の項は以下のようになります．"

#: ../source/userdoc/model_Nitsche.rst:177
msgid ""
"&-\\int_{\\Gamma_C} \\theta \\gamma G\\cdot D_u G[v] d\\Gamma \\\\\n"
"&+\\int_{\\Gamma_C} \\gamma P_{n,\\mathscr{F}}(G - \\dfrac{Au}{\\gamma} + \\dfrac{gap}{\\gamma}n + \\dfrac{\\alpha w_{_T}}{\\gamma})\\cdot(\\theta D_u G[v] - \\dfrac{v}{\\gamma}) d\\Gamma.\n"
"\n"
msgstr ""
"&-\\int_{\\Gamma_C} \\theta \\gamma G\\cdot D_u G[v] d\\Gamma \\\\\n"
"&+\\int_{\\Gamma_C} \\gamma P_{n,\\mathscr{F}}(G - \\dfrac{Au}{\\gamma} + \\dfrac{gap}{\\gamma}n + \\dfrac{\\alpha w_{_T}}{\\gamma})\\cdot(\\theta D_u G[v] - \\dfrac{v}{\\gamma}) d\\Gamma.\n"
"\n"

#: ../source/userdoc/model_Nitsche.rst:181
msgid ""
"where :math:`\\Gamma_C` is the contact boundary, :math:`G` is the Neumann "
"term which represents here :math:`\\sigma n` the stress at the contact "
"boundary and :math:`A` is the :math:`d\\times d` matrix"
msgstr ""
"ここで， :math:`\\Gamma_C` は接触境界です． :math:`G` はNeumann項でここでは接触境界での応力 "
":math:`\\sigma n` を表します．そして :math:`A` は :math:`d\\times d` マトリックスです．"

#: ../source/userdoc/model_Nitsche.rst:183
msgid ""
"A = \\alpha I_d + (1-\\alpha)n n^T\n"
"\n"
msgstr ""
"A = \\alpha I_d + (1-\\alpha)n n^T\n"
"\n"

#: ../source/userdoc/model_Nitsche.rst:186
msgid ""
"Note that for the variant with :math:`\\theta=0` a majority of terms vanish."
msgstr ":math:`\\theta=0` の値では，大部分の項は消えることに注意してください．"

#: ../source/userdoc/model_Nitsche.rst:191
msgid ""
"The following function adds a contact condition with or without Coulomb "
"friction on the variable `varname_u` and the mesh boundary `region`.  "
"`Neumannterm` is the expression of the Neumann term (obtained by the Green "
"formula) described as an expression of GWFL. This term can be obtained with "
"md.Neumann_term(varname, region) once all volumic bricks have been added to "
"the model. The contact condition is prescribed with Nitsche's method. The "
"rigid obstacle should be described with the data `dataname_obstacle` being a"
" signed distance to the obstacle (interpolated on a finite element method). "
"`gamma0name` is the Nitsche's method parameter. `theta` is a scalar value "
"which can be positive or negative. `theta = 1` corresponds to the standard "
"symmetric method which is conditionally coercive for  `gamma0` small. `theta"
" = -1` corresponds to the skew-symmetric method which is inconditionally "
"coercive. `theta = 0` is the simplest method for which the second derivative"
" of the Neumann term is not necessary. The optional parameter "
"`dataexpr_friction_coeff` is the friction coefficient which could be any "
"expression of GWFL. Returns the brick index in the model.::"
msgstr ""
"以下の関数は，変数 `varname_u` とメッシュ境界 `region` にCoulomb摩擦の有無にかかわらず接触条件を追加します． "
"`Neumannterm` "
"はGWFLの表現として記述されたNeumann項（Green式によって得られる）の表現です．この項は，すべてのボリューム要素がモデルに追加されると "
"md.Neumann_term(varname, region) で取得できます．接触条件はNitsche法で規定されています．剛性の障害物はデータ "
"`dataname_obstacle` が障害物までの符号付き距離である（有限要素法で補間された）データで記述しなければなりません． "
"`gamma0name` はNitscheのメソッドパラメータです． `theta` は正または負のスカラー値です． `theta = 1` "
"は標準的な対称的なメソッドに対応しています．これは， `gamma0` が小さい場合に強制的に行われます． `theta = -1` "
"は非強制的強制的なSkew対称方法に対応します． `theta = 0` "
"はNeumann項の2次導関数が必要でない最も単純な方法です．オプションのパラメータ `dataexpr_friction_coeff` "
"はGWFLの任意の表現である摩擦係数です．モデル内の要素のインデックスを返します．"
