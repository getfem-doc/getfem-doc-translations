# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-14 01:10+0000\n"
"PO-Revision-Date: 2018-07-16 07:06+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/userdoc/asm.rst:10
msgid "Some Standard assembly procedures (low-level generic assembly)"
msgstr "いくつかの標準構築手順（低水準汎用構築）"

#: ../source/userdoc/asm.rst:12
msgid ""
"Procedures defined in the file :file:`getfem/getfem_assembling.h` allow the "
"assembly of stiffness matrices, mass matrices and boundary conditions for a "
"few amount of classical partial differential equation problems. All the "
"procedures have vectors and matrices template parameters in order to be used"
" with any matrix library."
msgstr ""
"ファイル :file:`getfem/getfem_assembling.h` "
"で定義されている手続きは，古典的な偏微分方程式の問題のいくつかの剛性行列，質量行列，境界条件の構築を可能にします．任意の行列ライブラリで使用するために，すべての手順にはベクトルと行列のテンプレートパラメータがあります．"

#: ../source/userdoc/asm.rst:17
msgid ""
"CAUTION: The assembly procedures do not clean the matrix/vector at the "
"begining of the assembly in order to keep the possibility to perform several"
" assembly operations on the same matrix/vector. Consequently, one has to "
"clean the matrix/vector before the first assembly operation."
msgstr ""
"注意：構築手順では，同じ行列/ベクトルに対して複数の構築操作を実行する可能性があるため，構築の最初に行列/ベクトルを初期化しません．したがって，最初の構築操作の前にマトリックス/ベクトルを初期化する必要があります．"

#: ../source/userdoc/asm.rst:21
msgid "Laplacian (Poisson) problem"
msgstr "Laplacian（Poisson）問題"

#: ../source/userdoc/asm.rst:23
msgid "An assembling procedure is defined to solve the problem:"
msgstr "この問題を解決するための構築手順が定義されています．"

#: ../source/userdoc/asm.rst:25
msgid ""
"-\\mbox{div}(a(x)\\cdot\\mbox{grad}(u(x))) &= f(x)\\ \\mbox{ in }\\Omega,  \\\\\n"
"u(x) & = U(x)\\ \\mbox{ on }\\Gamma_D, \\\\\n"
"\\frac{\\partial u}{\\partial\\eta}(x) & = F(x)\\ \\mbox{ on }\\Gamma_N,"
msgstr ""
"-\\mbox{div}(a(x)\\cdot\\mbox{grad}(u(x))) &= f(x)\\ \\mbox{ in }\\Omega,  \\\\\n"
"u(x) & = U(x)\\ \\mbox{ on }\\Gamma_D, \\\\\n"
"\\frac{\\partial u}{\\partial\\eta}(x) & = F(x)\\ \\mbox{ on }\\Gamma_N,"

#: ../source/userdoc/asm.rst:31
msgid ""
"where :math:`\\Omega` is an open domain of arbitrary dimension, "
":math:`\\Gamma_{D}` and :math:`\\Gamma_{N}` are parts of the boundary of "
":math:`\\Omega`, :math:`u(x)` is the unknown, :math:`a(x)` is a given "
"coefficient, :math:`f(x)` is a given source term, :math:`U(x)` the "
"prescribed value of :math:`u(x)` on :math:`\\Gamma_{D}` and :math:`F(x)` is "
"the prescribed normal derivative of :math:`u(x)` on :math:`\\Gamma_{N}`. The"
" function to be called to assemble the stiffness matrix is::"
msgstr ""
"ここで， :math:`\\Omega` は任意の次元の開領域， :math:`\\Gamma_{D}` および :math:`\\Gamma_{N}`"
" は :math:`\\Omega` の境界の一部， :math:`u(x)` は未知数， :math:`a(x)` は所与の係数， "
":math:`f(x)` は所与のソース項， :math:`U(x)` は :math:`\\Gamma_{D}` 上の規定値 :math:`u(x)`"
" であり， :math:`F(x)` は :math:`\\Gamma_{N}` 上の :math:`u(x)` の規定された標準偏差です． "
"剛性行列を構築するために呼び出される関数は次の通りです．"

#: ../source/userdoc/asm.rst:41
msgid "where"
msgstr "ここで"

#: ../source/userdoc/asm.rst:43
msgid ""
"``SM`` is a matrix of any type having the right dimension (i.e. "
"``mfu.nb_dof()``),"
msgstr "``SM`` は適切な次元（つまり， ``mfu.nb_dof()`` ）を持つ任意の型の行列です．"

#: ../source/userdoc/asm.rst:46
msgid ""
"``mim`` is a variable of type |gf_mim| defining the integration method used,"
msgstr "``mim`` は使用される積分法を定義する型 |gf_mim| の変数です．"

#: ../source/userdoc/asm.rst:48
msgid ""
"``mfu`` is a variable of type |gf_mf| and should define the finite element "
"method for the solution,"
msgstr "``mfu`` は解の有限要素法を定義する型 |gf_mf| の変数です．"

#: ../source/userdoc/asm.rst:51
msgid ""
"``mfd`` is a variable of type |gf_mf| (possibly equal to ``mfu``) describing"
" the finite element method on which the coefficient :math:`a(x)` is defined,"
msgstr ""
"``mfd`` は係数 :math:`a(x)` が定義されている有限要素法を記述する型 |gf_mf| （おそらく ``mfu`` "
"に等しい）の変数です．"

#: ../source/userdoc/asm.rst:54
msgid ""
"``A`` is the (real or complex) vector of the values of this coefficient on "
"each degree of freedom of ``mfd``."
msgstr "``A`` は ``mfd`` の各自由度に対する係数の値の（実数または複素数）ベクトルです．"

#: ../source/userdoc/asm.rst:57
msgid ""
"Both |mf| should use the same mesh (i.e. ``&mfu.linked_mesh() == "
"&mfd.linked_mesh()``)."
msgstr ""
"両方の |mf| は同じメッシュ（つまり， ``&mfu.linked_mesh() == &mfd.linked_mesh()`` "
"）を使用する必要があります．"

#: ../source/userdoc/asm.rst:60
msgid ""
"It is important to pay attention to the fact that the integration methods "
"stored in ``mim``, used to compute the elementary matrices, have to be "
"chosen of sufficient order. The order has to be determined considering the "
"polynomial degrees of element in ``mfu``, in ``mfd`` and the geometric "
"transformations for non-linear cases. For example, with linear geometric "
"transformations, if ``mfu`` is a :math:`P_{K}` FEM, and ``mfd`` is a "
":math:`P_{L}` FEM, the integration will have to be chosen of order "
":math:`\\geq 2(K-1) + L`, since the elementary integrals computed during the"
" assembly of ``SM`` are "
":math:`\\int\\nabla\\varphi_i\\nabla\\varphi_j\\psi_k` (with "
":math:`\\varphi_i` the basis functions for ``mfu`` and :math:`\\psi_i` the "
"basis functions for ``mfd``)."
msgstr ""
"基本行列を計算するのに使われる ``mim`` に格納されている積分法は十分な次元のものを選択することが重要です．次数は ``mfu`` "
"の要素の多項式の次数， ``mfd`` の非線形の場合の幾何変換を考慮して決定する必要があります．例えば，線形幾何学変換の場合， ``mfu`` は "
":math:`P_{K}` 有限要素法， ``mfd`` は :math:`P_{L}` 有限要素法です． 積分次数は次数 :math:`\\geq "
"2(K-1) + L` で選択する必要があります，それゆれ ``SM`` の構築の間に計算される要素積分は "
":math:`\\int\\nabla\\varphi_i\\nabla\\varphi_j\\psi_k` のようになります（それと "
":math:`\\varphi_i` は ``mfu`` の基底関数で， :math:`\\psi_i` は ``mfd`` の基底関数です）．"

#: ../source/userdoc/asm.rst:71
msgid "To assemble the source term, the function to be called is::"
msgstr "ソース項を構築するのに呼び出す関数は次の通りです．"

#: ../source/userdoc/asm.rst:75
msgid ""
"where ``B`` is a vector of any type having the correct dimension (still "
"``mfu.nb_dof()``), ``mim`` is a variable of type |gf_mim| defining the "
"integration method used, ``mfd`` is a variable of type |gf_mf| (possibly "
"equal to ``mfu``) describing the finite element method on which :math:`f(x)`"
" is defined, and ``V`` is the vector of the values of :math:`f(x)` on each "
"degree of freedom of ``mfd``."
msgstr ""
"``B`` は正しい次元（まだ ``mfu.nb_dof()`` ）を持つ型のベクトルで， ``mim`` は使用される積分法を定義する "
"|gf_mim| 型の変数です， ``mfd`` はそれぞれの自由度の :math:`f(x)` 上の有限要素法が記述されている型 |gf_mf| "
"（おそらく ``mfu`` に等しい）の変数です，そして ``V`` は ``mfd`` 上の各自由度の :math:`f(x)` の値のベクトルです．"

#: ../source/userdoc/asm.rst:81
msgid ""
"The function ``asm_source_term`` also has an optional argument, which is a "
"reference to a |gf_mr| (or just an integer ``i``, in which case "
"``mim.linked_mesh().region(i)`` will be considered). Hence for the Neumann "
"condition on :math:`\\Gamma_{N}`, the same function::"
msgstr ""
"関数 ``asm_source_term`` にはオプションの引数があります．これは |gf_mr| （または単に整数 ``i`` ， "
"``mim.linked_mesh().region(i)`` が考慮されます）．したがって，Neumann条件 :math:`\\Gamma_{N}`"
" と同等の関数は次の通りです．"

#: ../source/userdoc/asm.rst:88
msgid ""
"is used again, with ``nbound`` is the index of the boundary "
":math:`\\Gamma_{N}` in the linked mesh of ``mim``, ``mfu`` and ``mfd``."
msgstr ""
"``mim`` ， ``mfu`` ， ``mfd`` のリンクメッシュでは， ``nbound`` は境界 :math:`\\Gamma_{N}` "
"のインデックスです．"

#: ../source/userdoc/asm.rst:91
msgid ""
"There is two manner (well not really, since it is also possible to use "
"Lagrange multipliers, or to use penalization) to take into account the "
"Dirichlet condition on :math:`\\Gamma_{D}`, changing the linear system or "
"explicitly reduce to the kernel of the Dirichlet condition. For the first "
"manner, the following function is defined::"
msgstr ""
"線形システムを変更する，または陽にDirichlet条件の核に還元することにより， :math:`\\Gamma_{D}` "
"のDirichlet条件を考慮したり，線形システムを変更したり，Dirichlet条件のカーネルに陽に縮小するには，2つの方法があります（実際には，Lagrange乗数を使用するか，ペナルティを使用することも可能です）．最初の方法として，以下の関数が定義されています．"

#: ../source/userdoc/asm.rst:99
msgid ""
"where ``nbound`` is the index of the boundary :math:`\\Gamma_D` where the "
"Dirichlet condition is applied, ``R`` is the vector of the values of "
":math:`R(x)` on each degree of freedom of ``mfu``. This operation should be "
"the last one because it transforms the stiffness matrix ``SM``. It works "
"only for Lagrange elements. At the end, one obtains the discrete system:"
msgstr ""
"ここで， ``nbound`` は境界のインデックスです :math:`\\Gamma_D` Dirichlet条件が適用される場合， ``R`` は "
"``mfu`` の各自由度の :math:`R(x)` の値のベクトルです．この操作は，剛性行列 ``SM`` "
"を変換するので，最後の操作でなければなりません．これはLagrange要素に対してのみ機能します．最後に，離散システムの式は次の通りです．"

#: ../source/userdoc/asm.rst:105
msgid "[SM] U = B,"
msgstr "[SM] U = B,"

#: ../source/userdoc/asm.rst:109
msgid "where :math:`U` is the discrete unknown."
msgstr "ここで， :math:`U` は離散未知数です．"

#: ../source/userdoc/asm.rst:111
msgid "For the second manner, one should use the more general::"
msgstr "2番目の方法では，もっと汎用的な関数を使用します．"

#: ../source/userdoc/asm.rst:116
msgid ""
"See the Dirichlet condition as a general linear constraint that must satisfy"
" the solution :math:`u`. This function does the assembly of Dirichlet "
"conditions of type :math:`\\int_{\\Gamma} u(x)v(x) = "
"\\int_{\\Gamma}r(x)v(x)` for all :math:`v` in the space of multiplier "
"defined by ``mf_mult``. The fem ``mf_mult`` could be often chosen equal to "
"``mf_u`` except when ``mf_u`` is too \"complex\"."
msgstr ""
"解 :math:`u` を満たす汎用的な線形制約Dirichlet条件を参照してください．この関数は， ``mf_mult`` "
"で定義された乗数空間の全ての ``v`` に対して :math:`\\int_{\\Gamma} u(x)v(x) = "
"\\int_{\\Gamma}r(x)v(x)` の型のDirichlet条件の構築を行います．``mf_u`` があまりにも \"複雑\" "
"な場合を除いて，有限要素法の ``mf_mult`` は ``mf_u`` と同じように選ばれることが多いです．"

#: ../source/userdoc/asm.rst:122
msgid ""
"This function just assemble these constraints into a new linear system "
":math:`H u=R`, doing some additional simplification in order to obtain a "
"\"simple\" constraints matrix."
msgstr ""
"この関数はこれらの制約を新しい線形システム :math:`H u=R` に構築するだけです． また， \"単純な\" "
"制約行列を得るためにいくつかの追加の単純化を行います．"

#: ../source/userdoc/asm.rst:126
msgid "Then, one should call::"
msgstr "次の関数は"

#: ../source/userdoc/asm.rst:130
msgid ""
"which will return a vector :math:`U_d` which satisfies the Dirichlet "
"condition, and an orthogonal basis :math:`N` of the kernel of :math:`H`. "
"Hence, the discrete system that must be solved is:"
msgstr ""
"Dirichlet条件を満たすベクトル :math:`U_d` と， :math:`H` のカーネルの直交基底 :math:`N` "
"を返します．したがって，解く必要のある離散システムは，"

#: ../source/userdoc/asm.rst:134
msgid "(N'[SM]N) U_{int}=N'(B-[SM]U_d),"
msgstr "(N'[SM]N) U_{int}=N'(B-[SM]U_d),"

#: ../source/userdoc/asm.rst:138
msgid ""
"and the solution is $U=N U_{int}+U_d$. The output matrix :math:`N` should be"
" a :math:`nbdof \\times nbdof` (sparse) matrix but should be resized to "
"``ncols`` columns. The output vector :math:`U_d` should be a :math:`nbdof` "
"vector. A big advantage of this approach is to be generic, and do not "
"prescribed for the finite element method ``mf_u`` to be of Lagrange type. If"
" ``mf_u`` and ``mf_d`` are different, there is implicitly a projection (with"
" respect to the :math:`L^2` norm) of the data on the finite element "
"``mf_u``."
msgstr ""
"であり，解は :math:`U=N U_{int}+U_d` です．出力行列 :math:`N` は :math:`nbdof \\times "
"nbdof` （疎）行列でなければなりませんが， ``ncols`` 列にリサイズする必要があります．出力ベクトル :math:`U_d` は， "
":math:`nbdof` ベクトルでなければなりません．このアプローチの大きな利点は汎用性であり，有限要素法の ``mf_u`` "
"がLagrange型であることは規定されていません． ``mf_u`` と ``mf_d`` が異なる場合，有限要素 ``mf_u`` "
"上のデータの投影（ :math:`L^2` ノルムに関して）が暗黙的にあります．"

#: ../source/userdoc/asm.rst:146
msgid ""
"If you want to treat the more general scalar elliptic equation "
":math:`\\mbox{div}(A(x)\\nabla u)`, where :math:`A(x)` is square matrix, you"
" should use::"
msgstr ""
"より汎用的なスカラー楕円方程式 :math:`\\mbox{div}(A(x)\\nabla u)` "
"を扱いたい場合，次の式を使用する必要があります．ここで， :math:`A(x)` は正方行列です．"

#: ../source/userdoc/asm.rst:153
msgid ""
"The matrix data ``A`` should be defined on ``mfdata``. It is expected as a "
"vector representing a :math:`n \\times n \\times nbdof` tensor (in Fortran "
"order), where :math:`n` is the mesh dimension of ``mfu``, and :math:`nbdof` "
"is the number of dof of ``mfdata``."
msgstr ""
"行列データ ``A`` は， ``mfdata`` 上で定義し :math:`n \\times n \\times nbdof` "
"テンソル（Fortran順）を表すベクトルである必要があります． :math:`n` は ``mfu`` のメッシュの次元であり，  "
":math:`nbdof` は ``mfdata`` の自由度数です．"

#: ../source/userdoc/asm.rst:160
msgid "Linear Elasticity problem"
msgstr "線形弾性問題"

#: ../source/userdoc/asm.rst:162
msgid ""
"The following function assembles the stiffness matrix for linear "
"elasticity::"
msgstr "以下の関数は，線形弾性のための剛性行列を構築ます．"

#: ../source/userdoc/asm.rst:167
msgid ""
"where ``SM`` is a matrix of any type having the right dimension (i.e. here "
"``mfu.nb_dof()``), ``mim`` is a variable of type |gf_mim| defining the "
"integration method used, ``mfu`` is a variable of type |gf_mf| and should "
"define the finite element method for the solution, ``mfd`` is a variable of "
"type |gf_mf| (possibly equal to ``mfu``) describing the finite element "
"method on which the Lamé coefficient are defined, ``LAMBDA`` and ``MU`` are "
"vectors of the values of Lamé coefficients on each degree of freedom of "
"``mfd``."
msgstr ""
"``SM`` は適切な次元を持つ任意の型の行列です（ここでは ``mfu.nb_dof()`` ）， ``mim`` は使用される積分法を定義する "
"|gf_mim| 型の変数です．``mfu`` は解の有限要素法を定義する必要がある |gf_mf| 型の変数です． ``mfd`` "
"はLamé係数が定義されている有限要素法を記述する |gf_mf| 型の変数です（おそらくは ``mfu`` に等しい）． ``LAMBDA`` と "
"``MU`` はそれぞれ ``mfd`` の自由度に関するLamé係数の値のベクトルです．"

#: ../source/userdoc/asm.rst:177
msgid ""
"Linear elasticity problem is a vectorial problem, so the target dimension of"
" ``mfu`` (see ``mf.set_qdim(Q)``) should be the same as the dimension of the"
" mesh."
msgstr ""
"線形弾性問題はベクトル問題であるため， ``mfu`` （ ``mf.set_qdim(Q)`` "
"を参照）の対象次元はメッシュの次元と同じでなければなりません．"

#: ../source/userdoc/asm.rst:181
msgid ""
"In order to assemble source term, Neumann and Dirichlet conditions, same "
"functions as in previous section can be used."
msgstr "ソース項，NeumannおよびDirichlet条件を構築するために，前のセクションと同じ関数を使用します．"

#: ../source/userdoc/asm.rst:186
msgid "Stokes Problem with mixed finite element method"
msgstr "混合有限要素法によるStokes問題"

#: ../source/userdoc/asm.rst:188
msgid ""
"The assembly of the mixed term :math:`B = - \\int p\\nabla.v` is done with::"
msgstr ":math:`B = - \\int p\\nabla.v` 混合項の構築は次の通りです．"

#: ../source/userdoc/asm.rst:195
msgid "Assembling a mass matrix"
msgstr "質量行列の構築"

#: ../source/userdoc/asm.rst:197
msgid "Assembly of a mass matrix between two finite elements::"
msgstr "2つの有限要素間の質量行列の構築は次の通りです．"

#: ../source/userdoc/asm.rst:201
msgid ""
"It is also possible to obtain mass matrix on a boundary with the same "
"function:"
msgstr "同じ関数の境界上の質量行列を得ることも可能です．"

#: ../source/userdoc/asm.rst:203
msgid "getfem::asm_mass_matrix(M, mim, mf1, mf2, nbound);"
msgstr "getfem::asm_mass_matrix(M, mim, mf1, mf2, nbound);"

#: ../source/userdoc/asm.rst:205
msgid ""
"where ``nbound`` is the region index in ``mim.linked_mesh()``, or a "
"``mesh_region`` object."
msgstr ""
"``nbound`` は ``mim.linked_mesh()`` の領域インデックス，または ``mesh_region`` オブジェクトです．"
