# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-07 01:07+0000\n"
"PO-Revision-Date: 2020-04-23 00:22+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/matlab_octave/examples.rst:10
msgid "Examples"
msgstr "例題"

#: ../source/matlab_octave/examples.rst:15
msgid "A step-by-step basic example"
msgstr "ステップごとの基本的な例"

#: ../source/matlab_octave/examples.rst:17
msgid ""
"This example shows the basic usage of getfem, on the über-canonical problem "
"above all others: solving the :envvar:`Laplacian`, :math:`-\\Delta u = f` on"
" a square, with the Dirichlet condition :math:`u = g(x)` on the domain "
"boundary. You can find the **m-file** of this example under the name "
"**demo_step_by_step.m** in the directory ``interface/tests/matlab-octave/`` "
"of the |gf| distribution."
msgstr ""
"この例は，以下のような über-canonical 問題に対するgetfemの基本的な使い方を示しています．これは "
":envvar:`Laplacian`, :math:`-\\Delta u = f` を正方形上で，Dirichlet条件 :math:`u = "
"g(x)` をドメイン境界上で解きます．この例の **m-file** は **demo_step_by_step.m** という名前の下にあります． "
"|gf| ディストリビューションの ``interface/tests/matlab-octave/`` ディレクトリにあります．"

#: ../source/matlab_octave/examples.rst:23
msgid ""
"The first step is to **create a mesh**. It is possible to create simple "
"structured meshes or unstructured meshes for simple geometries (see "
"``gf_mesh('generate', mesher_object mo, scalar h)``) or to rely on an "
"external mesher (see ``gf_mesh('import', string FORMAT, string "
"FILENAME))``).  For this example, we just consider a regular **cartesian "
"mesh** whose nodes are :math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}`::"
msgstr ""
"最初のステップは **meshを作成する** ことです．単純なジオメトリ( ``gf_mesh('generate', mesher_object "
"mo, scalar h))`` を参照)用に単純な構造化メッシュまたは非構造化メッシュを作成することも，外部メッシャ( "
"``gf_mesh('import', string FORMAT, string FILENAME)`` を参照)に依存します．この例では，ノードが "
":math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}` である通常の **cartesian mesh**"
" を考えます．"

#: ../source/matlab_octave/examples.rst:34
msgid ""
"If you try to look at the value of ``m``, you'll notice that it appears to "
"be a structure containing two integers. The first one is its identifier, the"
" second one is its class-id, i.e. an identifier of its type. This small "
"structure is just an \"handle\" or \"descriptor\" to the real object, which "
"is stored in the |gf| memory and cannot be represented via |octv| and |mlab|"
" data structures. Anyway, you can still inspect the |gf| objects via the "
"command ``gf_workspace('stats')``."
msgstr ""
"``m`` "
"の値を調べれば，それが2つの整数を含む構造体であることに気づくでしょう．最初のものはその識別子であり，2番目のものはそのクラスID，すなわちその型の識別子です．この小さな構造は，実際のオブジェクトに対する単なる"
" \"handle\" または \"descriptor\" であり， |gf| メモリに格納され， |octv| と |mlab| "
"データ構造では表現できません．いずれにしても，  ``gf_workspace('stats')`` "
"コマンドを使って|gf|オブジェクトを検査することはできます．"

#: ../source/matlab_octave/examples.rst:40
msgid ""
"Now we can try to have a **look at the mesh**, with its vertices numbering "
"and the convexes numbering::"
msgstr "次に，頂点の番号と凸の番号が付いた **メッシュを見てみましょう** ．"

#: ../source/matlab_octave/examples.rst:46
msgid ""
"As you can see, the mesh is regular, and the numbering of its nodes and "
"convexes is also regular (this is guaranteed for cartesian meshes, but do "
"not hope a similar numbering for the degrees of freedom)."
msgstr ""
"このように，メッシュは規則的であり，節点と凸の番号付けも規則的です(これは直交メッシュでは保証されていますが，自由度に同様の番号付けは望めません)．"

#: ../source/matlab_octave/examples.rst:50
msgid ""
"The next step is to **create a mesh_fem object**. This one links a mesh with"
" a set of FEM::"
msgstr "次のステップでは **mesh_fem オブジェクト** を作成します．これは，メッシュをFEMの集合とリンクします．"

#: ../source/matlab_octave/examples.rst:57
msgid ""
"The first instruction builds a new |mlab_mf| object, the second argument "
"specifies that this object will be used to interpolate scalar fields (since "
"the unknown :math:`u` is a scalar field). The second instruction assigns the"
" :math:`Q_2` FEM to every convex (each basis function is a polynomial of "
"degree 4, remember that :math:`P_k` are polynomials of degree :math:`k`, "
"while :math:`Q_k` are polynomials of degree :math:`2k`). As :math:`Q_2` is a"
" polynomial FEM, you can view the expression of its basis functions on the "
"reference element::"
msgstr ""
"最初の命令は新しい |mlab_mf| "
"オブジェクトを構築し，2番目の引数はこのオブジェクトがスカラーフィールドの補間に使用されることを指定します(未知変数 :math:`u` "
"はスカラーフィールドです)．第2の命令は，すべての凸(各基底関数は4次の多項式であり :math:`k` 次 :math:`P_k` "
"多項式であることを覚えておいてください，ここで :math:`2k` 次 :math:`Q_k` 多項式です)に :math:`Q_2` "
"有限要素法を割り当てます． :math:`Q_2` は多項式有限要素法なので，参照要素でその基底関数の式を見ることができます．"

#: ../source/matlab_octave/examples.rst:78
msgid ""
"It is also possible to make use of the \"object oriented\" features of "
"|octv| and |mlab|. As you may have noticed, when a class \"foo\" is provided"
" by the |gfi|, it is build with the function ``gf_foo``, and manipulated "
"with the functions ``gf_foo_get`` and ``gf_foo_set``. But you may also "
"create the object with the ``gfFoo`` constructor , and manipulated with the "
"``get(..)`` and ``set(..)`` methods. For example, the previous steps could "
"have been::"
msgstr ""
"|mlab| の \"object oriented\" 機能を利用することもできます．お気付きかもしれませんが，クラス \"foo\" が |gfi|"
" によって提供される場合，それは関数 ``gf_foo`` でビルドされ，関数 ``gf_foo_get`` および ``gf_foo_set`` "
"で操作されます．しかし， ``gfFoo`` コンストラクタでオブジェクトを作成し， ``get(..)`` および ``set(..)`` "
"メソッドで操作することもできます．たとえば，前の手順は次のようになります．"

#: ../source/matlab_octave/examples.rst:98
msgid ""
"Now, in order to perform numerical integrations on ``mf``, we need to "
"**build a mesh_im object**::"
msgstr "さて， ``mf`` で数値積分を行うには， **mesh_im オブジェクトを構築する** 必要があります．"

#: ../source/matlab_octave/examples.rst:104
msgid ""
"The integration method will be used to compute the various integrals on each"
" element: here we choose to perform exact computations (no "
":envvar:`quadrature formula`), which is possible since the geometric "
"transformation of these convexes from the reference convex is linear (this "
"is true for all simplices, and this is also true for the parallelepipeds of "
"our regular mesh, but it is not true for general quadrangles), and the "
"chosen FEM is polynomial. Hence it is possible to analytically integrate "
"every basis function/product of basis functions/gradients/etc. There are "
"many alternative FEM methods and integration methods (see :ref:`ud`)."
msgstr ""
"積分法を使用して各要素の各種積分を計算します．ここでは，正確な計算(非 "
":envvar:`求積公式`)を実行することを選択します．これは，参照凸からのこれらの凸の幾何変換が線形(これはすべての単体に当てはまり，通常のメッシュの平行六面体にも当てはまりますが，一般的な四角形には当てはまりません)であり，選択したFEMが多項式であるために可能です．このため，すべての基底関数/基底関数の積/傾き/などを解析的に積分することが可能であり，FEMの手法や積分法にも多くの選択肢があります("
" :ref:`ud` を参照)．"

#: ../source/matlab_octave/examples.rst:114
msgid ""
"Note however that in the general case, approximate integration methods are a"
" better choice than exact integration methods."
msgstr "ただし，一般的なケースでは，厳密な積分法よりも近似積分法の方が適しています．"

#: ../source/matlab_octave/examples.rst:117
msgid ""
"Now we have to **find the** \":envvar:`boundary`\" **of the domain**, in "
"order to set a Dirichlet condition. A mesh object has the ability to store "
"some sets of convexes and convex faces. These sets (called \"regions\") are "
"accessed via an integer #id::"
msgstr ""
"次に，Dirichlet条件を設定するために，**領域の** \":envvar:`boundary`\" を **検索する** "
"必要があります．メッシュオブジェクトには，凸面と凸面の集合を保存する機能があります．これらの集合(\"regions\" と呼ばれます)には，整数 "
"*#id* を使用してアクセスします．"

#: ../source/matlab_octave/examples.rst:128
msgid ""
"Here we find the faces of the convexes which are on the boundary of the mesh"
" (i.e. the faces which are not shared by two convexes)."
msgstr "ここでは，メッシュの境界上にある凸の面(つまり，2つの凸によって共有されていない面)を見つけます．"

#: ../source/matlab_octave/examples.rst:131
#: ../source/matlab_octave/examples.rstNone
msgid "Remark:"
msgstr "備考:"

#: ../source/matlab_octave/examples.rst:133
msgid ""
"we could have used ``gf_mesh_get(m, 'OuTEr_faCes')``, as the interface is "
"case-insensitive, and whitespaces can be replaced by underscores."
msgstr ""
"インターフェースは大文字小文字を区別せず，空白はアンダースコアで置き換えることができるので， ``gf_mesh_get(m, "
"'OuTEr_faCes')`` を使うこともできます．"

#: ../source/matlab_octave/examples.rst:136
msgid ""
"The array ``border`` has two rows, on the first row is a convex number, on "
"the second row is a face number (which is local to the convex, there is no "
"global numbering of faces). Then this set of faces is assigned to the region"
" number 42."
msgstr ""
"配列 ``border`` "
"には二つの行があり，最初の行は凸の番号で，次の行は面の番号です(これは凸に対してローカルであり，面のグローバルな番号付けはありません)．次に，この面の集合を領域番号42に割り当てます．"

#: ../source/matlab_octave/examples.rst:140
msgid ""
"At this point, we just have to describe the model and run the solver to get "
"the solution! The \":envvar:`model`\" is created with the ``gf_model`` (or "
"``gfModel``) constructor. A model is basically an object which build a "
"global linear system (tangent matrix for non-linear problems) and its "
"associated right hand side. Typical modifications are insertion of the "
"stiffness matrix for the problem considered (linear elasticity, laplacian, "
"etc), handling of a set of contraints, Dirichlet condition, addition of a "
"source term to the right hand side etc. The global tangent matrix and its "
"right hand side are stored in the \":envvar:`model`\" structure."
msgstr ""
"この時点では，モデルを記述し，ソルバを実行して解を取得するだけです． \":envvar:`model`\" は ``gf_model`` (または "
"``gfModel`` "
")コンストラクタで作成されます．モデルは基本的に，全体線形システム(非線形問題の接線行列)とそれに関連するRHSを構築するオブジェクトです．代表的な修正は，考慮される問題(線形弾性，Laplacian等)に対する剛性マトリックスの挿入，拘束の集合の処理，Dirichlet条件，ソース項のRHSへの追加などです．全体正接行列とその右辺は，"
" \":envvar:`model`\" 構造に格納されます．"

#: ../source/matlab_octave/examples.rst:150
msgid ""
"Let us build a problem with an easy solution: :math:`u=x(x-1)y(y-1)+x^5`, "
"then we have :math:`\\Delta u=2(x^2+y^2)-2(x+y)+20x^3` (the FEM won't be "
"able to catch the exact solution since we use a :math:`Q^2` method)."
msgstr ""
"簡単な方法で問題を作成してみましょう． :math:`u=x(x-1)y(y-1)+x^5` とすると， :math:`\\Delta "
"u=2(x^2+y^2)-2(x+y)+20x^3` ( :math:`Q^2` "
"法を使っているので，FEMは正確な解を捕らえることができません)となります．"

#: ../source/matlab_octave/examples.rst:154
msgid "We start with an empty real model::"
msgstr "まず空の実数モデルから始めます．"

#: ../source/matlab_octave/examples.rst:159
msgid ""
"(a model is either ``'real'`` or ``'complex'``). And we declare that ``u`` "
"is an unknown of the system on the finite element method `mf` by::"
msgstr ""
"(モデルは  ``'real'`` か ``'complex'`` のどちらかです)．そして有限要素法 `mf` のシステムでは， ``u`` "
"は未知であると宣言します．"

#: ../source/matlab_octave/examples.rst:166
msgid ""
"Now, we add a \"generic elliptic\" brick, which handles "
":math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` problems, where :math:`A` can "
"be a scalar field, a matrix field, or an order 4 tensor field. By default, "
":math:`A=1`. We add it on our main variable ``u`` with::"
msgstr ""
"ここで，以下の問題を処理する \"generic elliptic\" ブリックを追加します．ここで "
":math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` 問題をハンドルします．ここで :math:`A` "
"はスカラー場，行列場，4次テンソル場の場合があります．デフォルトでは， :math:`A=1` です．これを変数 ``u`` に追加します．"

#: ../source/matlab_octave/examples.rst:175
msgid "Next we add a Dirichlet condition on the domain boundary::"
msgstr "次に，領域の境界にDirichlet条件を追加します．"

#: ../source/matlab_octave/examples.rst:183
msgid ""
"The two first lines defines a data of the model which represents the value "
"of the Dirichlet condition. The third one add a Dirichlet condition to the "
"variable ``u`` on the boundary number ``42``. The dirichlet condition is "
"imposed with lagrange multipliers. Another possibility is to use a "
"penalization. A |mlab_mf| argument is also required, as the Dirichlet "
"condition :math:`u=g` is imposed in a weak form :math:`\\int_\\Gamma "
"u(x)v(x) = \\int_\\Gamma g(x)v(x) ~ \\forall v` where :math:`v` is taken in "
"the space of multipliers given by here by ``mf``."
msgstr ""
"最初の2行は，Dirichlet条件の値を表すモデルのデータを定義します．3つ目は，境界番号 ``42`` の変数 ``u`` "
"にDirichlet条件を追加します．Dirichlet条件はLagrange乗数を用いて課しました．他にはペナルティ法があります． |mlab_mf|"
" 引数も必要です．これはDirichlet条件 :math:`u=g` が弱形式 :math:`\\int_\\Gamma u(x)v(x) = "
"\\int_\\Gamma g(x)v(x)\\ \\forall v` で課されるからです．ここで :math:`v` はここでは ``mf`` "
"で与えられる乗数空間で使われます．"

#: ../source/matlab_octave/examples.rst:194
msgid ""
"the polynomial expression was interpolated on ``mf``. It is possible only if"
" ``mf`` is of Lagrange type. In this first example we use the same |mlab_mf|"
" for the unknown and for the data such as ``g``, but in the general case, "
"``mf`` won't be Lagrangian and another (Lagrangian) |mf| will be used for "
"the description of Dirichlet conditions, source terms etc."
msgstr ""
"多項式は ``mf`` で補間されます．これは ``mf`` がLagrange型の場合のみ可能です．この最初の例では，未知変数と ``g`` "
"のようなデータに同じ |mlab_mf| を使用していますが，一般的なケースでは ``mf`` "
"はLagrangianではなく，Dirichlet条件やソース項などの記述には別の(Lagrangian) |mf| が使用されます．"

#: ../source/matlab_octave/examples.rst:200
msgid "A source term can be added with the following lines::"
msgstr "ソース項は以下の行で追加できます．"

#: ../source/matlab_octave/examples.rst:207
msgid ""
"It only remains now to launch the solver. The linear system is assembled and"
" solve with the instruction::"
msgstr "ソルバを起動するだけです．線形システムは次の命令で組み立てられ，解かれます．"

#: ../source/matlab_octave/examples.rst:213
msgid ""
"The model now contains the solution (as well as other things, such as the "
"linear system which was solved). It is extracted, a display into a |octv| or"
" |mlab| figure::"
msgstr "これで，(解かれた線形系のような他のものと同様に)モデルに解が含まれました．抽出され， |octv| か |mlab| 図に表示されます．"

#: ../source/matlab_octave/examples.rst:223
msgid "Another Laplacian with exact solution"
msgstr "別のLaplacianによる厳密解"

#: ../source/matlab_octave/examples.rst:225
msgid "This is the :file:`tests/matlab-octave/demo_laplacian.m` example."
msgstr "これは :file:`tests/matlab-octave/demo_laplacian.m` の例です．"

#: ../source/matlab_octave/examples.rst:231
msgid "Linear and non-linear elasticity"
msgstr "線形および非線形弾性"

#: ../source/matlab_octave/examples.rst:233
msgid ""
"This example uses a mesh that was generated with `GiD`_. The object is "
"meshed with quadratic tetrahedrons. You can find the ``m-file`` of this "
"example under the name :file:`demo_tripod.m` in the directory :file:`tests"
"/matlab-octave` of the toolbox distribution."
msgstr ""
"この例では， `GiD`_ で生成されたメッシュを使用しています．オブジェクトは2次4面体でメッシュ分割されます．この例の ``m-file`` は "
"|gf| ディストリビューションの  :file:`tests/matlab-octave` ディレクトリの :file:`demo_tripod.m`"
" にあります．"

#: ../source/matlab_octave/examples.rst:240
msgid "Here is the final figure, displaying the :envvar:`Von Mises` stress:"
msgstr "次の図は :envvar:`Von Mises` 応力を示しています．"

#: ../source/matlab_octave/examples.rst:247
msgid "deformed tripod"
msgstr "変形三脚"

#: ../source/matlab_octave/examples.rst:251
msgid "Avoiding the bricks framework"
msgstr "ブリックフレームワークを使わない"

#: ../source/matlab_octave/examples.rst:253
msgid ""
"The model bricks are very convenient, as they hide most of the details of "
"the assembly of the final linear systems. However it is also possible to "
"stay at a lower level, and handle the assembly of linear systems, and their "
"resolution, directly in |octv| or |mlab|. For example, the demonstration "
":file:`demo_tripod_alt.m` is very similar to the :file:`demo_tripod.m` "
"except that the assembly is explicit::"
msgstr ""
"モデルブリックは，最終的な線形システムのアセンブリのほとんどの詳細を隠蔽するため，非常に便利です．しかし，より低い水準で，線形システムのアセンブリと解析を直接"
" |octv| か |mlab| で処理することも可能です．例えば， :file:`demo_tripod_alt.m` "
"はアセンブリが明示的であることを除き， :file:`demo_tripod.m` によく似ています．"

#: ../source/matlab_octave/examples.rst:283
msgid ""
"In |gfi|, the assembly of vectors, and matrices is done via the ``gf_asm`` "
"function. The Dirichlet condition :math:`u(x) = r(x)` is handled in the weak"
" form :math:`\\int (h(x)u(x)).v(x) = \\int r(x).v(x)\\quad \\forall v` "
"(where :math:`h(x)` is a :math:`3\\times3` matrix field -- here it is "
"constant and equal to the identity). The reduced system ``KK UU = FF`` is "
"then built via the elimination of Dirichlet constraints from the original "
"system. Note that it might be more efficient (and simpler) to deal with "
"Dirichlet condition via a penalization technique."
msgstr ""
"|gfi| では，ベクトルと行列のアセンブリは ``gf_asm`` 関数により行われます．Dirichlet条件 :math:`u(x) = "
"r(x)` は，弱形式 :math:`\\int (h(x)u(x)).v(x) = \\int r(x).v(x)\\quad\\forall v` "
"で処理されます(ここで， :math:`h(x)` は :math:`3\\times 3` "
"行列です．これは定数であり，単位と等価です)．元のシステムからDirichlet条件を除去することにより，縮約システム ``KK UU = FF`` "
"を構築します．ペナルティ法を使用してDirichlet条件を処理する方が効率的(よりシンプル)であることに注意してください．"

#: ../source/matlab_octave/examples.rst:294
msgid "Other examples"
msgstr "その他の例"

#: ../source/matlab_octave/examples.rst:296
msgid ""
"the :file:`demo_refine.m` script shows a simple 2D or 3D bar whose extremity"
" is clamped. An adaptative refinement is used to obtain a better "
"approximation in the area where the stress is singular (the transition "
"between the clamped area and the neumann boundary)."
msgstr ""
":file:`demo_refine.m` "
"スクリプトは，端部がクランプされた単純な2次元または3次元バーを示します．応力が特異な領域(クランプ領域とNeumann境界の間の遷移)でより良い近似を得るために適合リファインメントを用いました．"

#: ../source/matlab_octave/examples.rst:301
msgid ""
"the :file:`demo_nonlinear_elasticity.m` script shows a 3D bar which is is "
"bended and twisted. This is a quasi-static problem as the deformation is "
"applied in many steps. At each step, a non-linear (large deformations) "
"elasticity problem is solved."
msgstr ""
":file:`demo_nonlinear_elasticity.m` "
"スクリプトは，曲げ捻りの3次元バーを示しています．これは，変形が多数のステップで適用されるため，準静的な問題です．各ステップで非線形(有限変形)弾性問題を解きます．"

#: ../source/matlab_octave/examples.rst:306
msgid ""
"the :file:`demo_stokes_3D_tank.m` script shows a Stokes (viscous fluid) "
"problem in a tank. The :file:`demo_stokes_3D_tank_draw.m` shows how to draw "
"a nice plot of the solution, with mesh slices and stream lines. Note that "
"the :file:`demo_stokes_3D_tank_alt.m` is the old example, which uses the "
"deprecated ``gf_solve`` function."
msgstr ""
":file:`demo_stokes_3D_tank.m` スクリプトはタンク内のStokes(粘性流体)問題を示します． "
":file:`demo_stokes_3D_tank_draw.m` "
"はメッシュスライスとストリームラインを使用して，解の適切なプロットを描画する方法を示します． "
":file:`demo_stokes_3D_tank_alt.m` は古い例で，廃止された ``gf_solve`` 関数を使っています．"

#: ../source/matlab_octave/examples.rst:312
msgid ""
"the :file:`demo_bilaplacian.m` script is just an adaption of the |gf| "
"example :file:`tests/bilaplacian.cc`. Solve the bilaplacian (or a Kirchhoff-"
"Love plate model) on a square."
msgstr ""
":file:`demo_bilaplacian.m` スクリプトは， |gf| の例である :file:`tests/bilaplacian.cc` "
"を改作したものです．bilaplacian(かKirchhoff-Loveのプレートモデル)を正方形で求解します．"

#: ../source/matlab_octave/examples.rst:316
msgid ""
"the :file:`demo_plasticity.m` script is an adaptation of the |gf| example "
":file:`tests/plasticity.cc`: a 2D or 3D bar is bended in many steps, and the"
" plasticity of the material is taken into account (plastification occurs "
"when the material's Von Mises exceeds a given threshold)."
msgstr ""
":file:`demo_plasticity.m` スクリプトは， |gf| の例である :file:`tests/plasticity.cc` "
"を応用したものです．2次元または3次元バーは多数のステップで曲げられ，材料の塑性が考慮されます(材料の Von Mises "
"が所定の閾値を超えたときに塑化が起こります)．"

#: ../source/matlab_octave/examples.rst:321
msgid ""
"the :file:`demo_wave2D.m` is a 2D scalar wave equation example (diffraction "
"of a plane wave by a cylinder), with high order geometric transformations "
"and high order FEMs."
msgstr ""
":file:`demo_wave2D.m` は高次の幾何学的変換と高次のFEMを持つ2次元スカラー波動方程式の例(円柱による平面波の回折)です．"

#: ../source/matlab_octave/examples.rst:327
msgid "Using Octave/Matlab Object-Oriented features"
msgstr "Octave/Matlabオブジェクト指向フィーチャーの使用"

#: ../source/matlab_octave/examples.rst:329
msgid ""
"The basic functions of the |gf| toolbox do not use any advanced |octv| or "
"|mlab| features (except that the handles to getfem objects are stored in a "
"small structure). But the toolbox comes with a set of objects, which "
"encapsulate the handles and make them look as real |octv| / |mlab| objects. "
"The aim is not to provide extra-functionalities, but to have a better "
"integration of the toolbox."
msgstr ""
"|gf| ツールボックスの基本機能では，拡張 |octv| か |mlab| "
"機能は使用しません(ただし，getfemオブジェクトのハンドルは小さな構造体に格納されます)．しかしツールボックスには，ハンドルをカプセル化して本当の "
"|octv| / |mlab| "
"オブジェクトのように見せるオブジェクトの集合が付属しています．目的は特別な機能を提供することではなく，ツールボックスの一貫性を改善することです．"

#: ../source/matlab_octave/examples.rst:334
msgid "Here is an example of its use::"
msgstr "使用例を次に示します．"

#: ../source/matlab_octave/examples.rst:355
msgid "Refer to the OO-commands reference :ref:`mlab-oocmd` for more details."
msgstr "詳細は，OOコマンドのリファレンス :ref:`mlab-oocmd` を参照してください．"
