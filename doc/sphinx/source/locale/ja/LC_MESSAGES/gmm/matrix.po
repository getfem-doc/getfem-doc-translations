# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 00:54+0000\n"
"PO-Revision-Date: 2018-07-16 07:15+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/87607/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/gmm/matrix.rst:10
msgid "Matrix and Vector type provided by |gmm|"
msgstr "|gmm| によって提供される行列およびベクトル型"

#: ../source/gmm/matrix.rst:13
msgid ""
"The convention is that any vector or matrix type (except if it is a  "
"reference) can be instantiated with the constructors::"
msgstr "どのようなベクトル型や行列型(参照である場合を除く)でもコンストラクタでインスタンス化することができます。"

#: ../source/gmm/matrix.rst:19
msgid ""
"No other constructor is used inside |gmm| and you should not use any other "
"if you want your code to be compatible with any matrix and vector type."
msgstr ""
"|gmm| "
"の内部では他のコンストラクタは使用されていません。また、行列やベクトル型と互換性を持たせたい場合は、他のコンストラクタを使用しないでください。"

#: ../source/gmm/matrix.rst:22
msgid ""
"It is assumed that each vector type interfaced with |gmm| allows to access "
"to a component with the following syntax::"
msgstr "|gmm| でインターフェイスされる各ベクトル型は、次の構文でコンポーネントにアクセスできます。"

#: ../source/gmm/matrix.rst:29
msgid ""
"The write access being available if the vector is not a constant reference. "
"For a matrix::"
msgstr "ベクトルが定数参照でない場合に使用できる書き込みアクセスについて。行列の場合は次のようになります。"

#: ../source/gmm/matrix.rst:34
msgid ""
"Again the write access is available if the matrix is not a const reference. "
"Generally, especially for sparse matrices, this access is not very "
"efficient. Linear algebra procedures access to the components of the vectors"
" and matrices via iterators. (see section  :ref:`gmm-inside`)"
msgstr ""
"この場合も、行列がconst参照でない場合は、書き込みアクセスが可能です。一般に、特に疎行列の場合、このアクセスはあまり効率的ではありません。線形代数のプロシージャはイテレータを介してベクトルと行列の成分にアクセスします。("
" :ref:`gmm-inside` 参照)"

#: ../source/gmm/matrix.rst:36
msgid ""
"It is also not recommended (at all) to use the original copy operator for "
"vectors or matrices. Generally, it will not do the appropriate job. instead,"
" you have to use the method::"
msgstr ""
"ベクトルや行列にオリジナルのコピー演算子を使用することも(全く)お勧めしません。一般的に、それは適切に動きません。代わりに、次のメソッドを使用する必要があります。"

#: ../source/gmm/matrix.rst:41
msgid ""
"which works for all correctly interfaced matrix and vector type, even if "
"``V`` is not of the same type as ``W`` (``V`` could be sparse and ``W`` "
"dense for instance)."
msgstr ""
"これは、たとえ ``V`` が ``W`` と同じ型でなくても(たとえば、 ``V`` は疎、 ``W`` "
"は密の場合)、正しくインターフェイスされた行列とベクトル型のすべてに対して機能します。"

#: ../source/gmm/matrix.rst:43
msgid ""
"in |gmm|, a vector is not a (n by 1) matrix, it is a one dimensional object."
" If you need to use a vector as a (n by 1) column matrix or a (1 by n) row "
"matrix, you can do it with::"
msgstr ""
"|gmm| "
"では、ベクトルは(n×1)行列ではなく、1次元オブジェクトです。ベクトルを(n×1)列行列または(1×n)行行列として使用する必要がある場合は、次のようにします。"

#: ../source/gmm/matrix.rst:50
msgid ""
"In the following, the template parameter ``T`` will represent a scalar type "
"like ``double`` or ``std::complex<double>``."
msgstr ""
"以下では、テンプレートパラメータ ``T`` は、 ``double`` や ``std::complex<double>`` "
"のようなスカラー型を表します。"

#: ../source/gmm/matrix.rst:54
msgid "dense vectors"
msgstr "密ベクトル"

#: ../source/gmm/matrix.rst:56
msgid ""
"|gmm| interfaces ``std::vector<T>`` so you can use it as your basic dense "
"vector type. If you need to interface another type of dense vector you can "
"see in ``gmm/gmm_interface.h`` some examples."
msgstr ""
"|gmm| は ``std::vector1<T>`` "
"をインターフェイスするので、基本的な密ベクトル型として使うことができます。別の型の密なベクトルをインタフェースする必要がある場合は、 "
"``gmm/gmm_interface.h`` のいくつか例をを参照してください。"

#: ../source/gmm/matrix.rst:61
msgid "sparse vectors"
msgstr "疎ベクトル"

#: ../source/gmm/matrix.rst:63
msgid ""
"|gmm| provides two types of sparse vectors: ``gmm::wsvector<T>`` and "
"``gmm::rsvector<T>``. ``gmm::wsvector<T>`` is optimized for write operations"
" and ``gmm::rsvector<T>`` is optimized for read operations. It should be "
"appropriate to use ``gmm::wsvector<T>`` for assembling procedures and then "
"to copy the vector in a ``gmm::rsvector<T>`` for the solvers. Those two "
"vector types can be used to create row major or column major matrices (see "
"section  :ref:`gmmracmat`)."
msgstr ""
"|gmm| には、 ``gmm::wsvector<T>`` と ``gmm::rsvector<T>`` という2種類の疎ベクトルがあります。 "
"``gmm::wsvector<T>`` は書き込み操作用に最適化されており、 ``gmm::rsvector<T>`` "
"は読み込み操作用に最適化されています。アセンブル手順には ``gmm::wsvector<T>`` を使用し、ソルバーには "
"``gmm::rsvector<T>`` でベクトルをコピーするのが適切です。これらの2つのベクトル型は、行優先行列または列優先行列( "
":ref:`gmmracmat` を参照)を作成するために使用できます。"

#: ../source/gmm/matrix.rst:66
msgid "skyline vectors"
msgstr "スカイラインベクトル"

#: ../source/gmm/matrix.rst:68
msgid ""
"The type ``gmm::slvector<T>`` defines a skyline vector, in the sense that "
"only an interval of this vector is stored. With this type of vector you can "
"build skyline matrices as ``gmm::row_matrix< gmm::slvector<T> >`` (see next "
"section :ref:`gmmracmat`)."
msgstr ""
"型  ``gmm::slvector<T>`` "
"は、スカイラインベクトルを定義します。これは、このベクトルの間隔だけが格納されるという意味です。このタイプのベクトルを使うと、スカイライン行列を "
"``gmm::row_matrix< gmm::slvector<T> >`` (次の節 :ref:`gmmracmat` "
"を参照)として構築することができます。"

#: ../source/gmm/matrix.rst:73
msgid "generic row and column matrices"
msgstr "包括的な行と列の行列"

#: ../source/gmm/matrix.rst:75
msgid ""
"|gmm| provides the two following types of matrices: "
"``gmm::row_matrix<VECT>`` and ``gmm::col_matrix<VECT>`` where ``VECT`` "
"should be a valid (i.e. interfaced) vector type. Those two type of matrices "
"store an array of ``VECT`` so the memory is not contiguous. Initializations "
"are::"
msgstr ""
"|gmm| は ``gmm::row_matrix<VECT>`` と ``gmm::col_matrix<VECT>`` "
"の2つの型の行列を提供します。ここで ``VECT`` は有効な(すなわち、インターフェイス)ベクトル型であるべきです。この2種類の行列は "
"``VECT`` の配列を格納するため、メモリは連続していません。初期化は次のとおりです。"

#: ../source/gmm/matrix.rst:81
msgid ""
"Of course ``gmm::row_matrix<VECT>`` is a row matrix and it is impossible to "
"access to a particular column of this matrix."
msgstr "もちろん ``gmm::row_matrix<VECT>`` は行行列であり、この行列の特定の列にアクセスすることはできません。"

#: ../source/gmm/matrix.rst:84
msgid ""
"``gmm::mat_nrows(M)`` gives the number of rows of a matrix and "
"``gmm::mat_ncols(M)`` the number of columns."
msgstr "``gmm::mat_nrows(M)`` は行列の行数を表し、 ``gmm::mat_ncols(M)`` は列数を表します。"

#: ../source/gmm/matrix.rst:87
msgid "dense matrices"
msgstr "密行列"

#: ../source/gmm/matrix.rst:89
msgid "It is recommended to use the type::"
msgstr "次の型を使用することをお勧めします。"

#: ../source/gmm/matrix.rst:93
msgid ""
"to represent a dense matrix type because it is compatible with the Fortran "
"format (column major) and some operations are interfaced with blas and "
"Lapack (see section  :ref:`gmm-lapack`). It is considered as a column and "
"row matrix (column preferred) which means that you can access both to the "
"columns and rows."
msgstr ""
"密行列型を表現するため、Fortran形式(列優先)と互換性があり、一部の演算がblasおよびLapack( :ref:`gmm-lapack` "
"を参照)とインタフェースされるためです。これは、列と行の行列(行優先)と見なされ、列と行の両方にアクセスできます。"

#: ../source/gmm/matrix.rst:95
msgid ""
"However, matrix types as ``gmm::row_matrix< std::vector<double> >`` or "
"``gmm::col_matrix< std::vector<double> >`` represent also some dense "
"matrices."
msgstr ""
"しかし、 ``gmm::row_matrix< std::vector<double> >`` や ``gmm::col_matrix< "
"std::vector<double> >`` などの行列型も密行列を表します。"

#: ../source/gmm/matrix.rst:98
msgid "sparse matrices"
msgstr "疎行列"

#: ../source/gmm/matrix.rst:100
msgid ""
"Similarly, ``gmm::row_matrix< gmm::wsvector<double> >`` or "
"``gmm::col_matrix< gmm::rsvector<double> >`` represents some sparse "
"matrices, but |gmm| provides also two types of classical sparse matrix "
"types::"
msgstr ""
"同様に、 ``gmm::row_matrix< gmm::wsvector<double> >`` や ``gmm::col_matrix< "
"gmm::rsvector<double> >`` はいくつかの疎行列を表しますが、 |gmm| は古典的な疎行列の型を二つ提供します。"

#: ../source/gmm/matrix.rst:105
msgid ""
"The type ``gmm::csr_matrix<T>`` represents a compressed sparse row matrix "
"and ``gmm::csc_matrix<T>`` a compressed sparse column matrix. The "
"particularity of these two types of matrices is to be read only, in the "
"sense that it is not possible to access at a particular component to write "
"on it (the operation is too expansive). The only write operation permitted "
"is ``gmm::copy``. The right way to use these matrices is first to execute "
"the write operations on another type of matrix like ``gmm::row_matrix< "
"gmm::wsvector<double> >`` then to do a copy::"
msgstr ""
"型 ``gmm::csr_matrix<T>`` は圧縮された行疎行列を表し、  ``gmm::csc_matrix<T>``  "
"は圧縮された列疎行列を表します。これら二つのタイプの行列の特殊性は、特定のコンポーネントにアクセスして書き込むことがでない(操作が拡張しすぎている)という意味で、読み出し専用です。許可されている書き込み操作は"
" ``gmm::copy`` だけです。これらの行列を使う正しい方法は、まず ``gmm::row_matrix< "
"gmm::wsvector<double> >`` のような別の型の行列に対して書き込み操作を実行し、それからコピーを行うことです。"

#: ../source/gmm/matrix.rst:117
msgid ""
"Matrices ``gmm::csr_matrix<T>`` and ``gmm::csc_matrix<T>`` have the "
"advantage to have a standard format (interfaceable with Fortran code) and to"
" have a compact format (contiguous in memory). To be able to be compatible "
"with Fortran programs a second template parameter exists on these type, you "
"can declare::"
msgstr ""
"行列 ``gmm::csr_matrix<T>`` と ``gmm::csc_matrix<T>`` "
"は、標準形式(Fortranコードとのインターフェースが可能)と(メモリ内で連続な)コンパクトフォーマットを持つ利点があります。Fortranプログラムとの互換性を確保するために、これらの型に2番目のテンプレートパラメータが存在する場合、次のように宣言できます。"

#: ../source/gmm/matrix.rst:122
msgid "The ``1`` means that a shift will be done on all the indices."
msgstr "``1`` はすべてのインデックスがシフトされることを意味します。"
