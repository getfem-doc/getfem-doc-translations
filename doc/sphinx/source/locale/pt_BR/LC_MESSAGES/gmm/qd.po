# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-02 01:06+0000\n"
"PO-Revision-Date: 2018-07-16 07:14+0000\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/getfem-doc/teams/87607/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../source/gmm/qd.rst:11
msgid "How to use |gmm| with QD type (double-double and quad-double)"
msgstr ""

#: ../source/gmm/qd.rst:13
msgid ""
"The QD library (see http://www.cs.berkeley.edu/\\verb\\~\\yozo or "
"http://www.nersc.gov/\\verb\\~\\dhb/mpdist/mpdist.html) is an efficient "
"library for double-double (32 decimal digits) and quad-double (approx. 64 "
"decimal digits). Once you installed this library on your system you have to "
"link your program with QD library (with -lqd). In your program, include the "
"header files of QD with::"
msgstr ""

#: ../source/gmm/qd.rst:20
msgid ""
"Then the two type ``dd_real`` and ``qd_real`` will be usable with |gmm|. You"
" will also be able to use ``std::complex<dd_real>`` and "
"``std::complex<qdreal>``"
msgstr ""

#: ../source/gmm/qd.rst:22
msgid ""
"IMPORTANT : do not forget to initialize QD before using it with the "
"following call::"
msgstr ""

#: ../source/gmm/qd.rst:27
msgid ""
"This disables the 80 bits precision of x86 processors which conflicts with "
"QD. Once you finished to use QD you can reactivate it with::"
msgstr ""

#: ../source/gmm/qd.rst:31
msgid "(see the QD documentation for more details)."
msgstr ""
