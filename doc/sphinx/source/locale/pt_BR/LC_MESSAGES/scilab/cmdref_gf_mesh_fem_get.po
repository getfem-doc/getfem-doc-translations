# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-13 02:22+0000\n"
"PO-Revision-Date: 2018-07-16 07:02+0000\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/getfem-doc/teams/87607/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:8
msgid "gf_mesh_fem_get"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:10
msgid "**Synopsis**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:53
msgid "**Description :**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:56
msgid "General function for inquiry about mesh_fem objects."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:59
msgid "**Command list :**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:63
msgid "``n = gf_mesh_fem_get(mesh_fem MF, 'nbdof')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:65
msgid "Return the number of degrees of freedom (dof) of the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:68
msgid "``n = gf_mesh_fem_get(mesh_fem MF, 'nb basic dof')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:70
msgid "Return the number of basic degrees of freedom (dof) of the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:73
msgid "``DOF = gf_mesh_fem_get(mesh_fem MF, 'dof from cv',mat CVids)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:75
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'basic dof from cv') "
"instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:78
msgid "``DOF = gf_mesh_fem_get(mesh_fem MF, 'basic dof from cv',mat CVids)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:80
msgid "Return the dof of the convexes listed in <literal>CVids</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:82
msgid ""
"WARNING: the Degree of Freedom might be returned in ANY order, do not use "
"this function in your assembly routines. Use 'basic dof from cvid' instead, "
"if you want to be able to map a convex number with its associated degrees of"
" freedom."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:87
msgid ""
"One can also get the list of basic dof on a set on convex faces, by "
"indicating on the second row of <literal>CVids</literal> the faces numbers "
"(with respect to the convex number on the first row)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:92
msgid ""
"``{DOFs, IDx} = gf_mesh_fem_get(mesh_fem MF, 'dof from cvid'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:94
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'basic dof from cvid')"
" instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:98
msgid ""
"``{DOFs, IDx} = gf_mesh_fem_get(mesh_fem MF, 'basic dof from cvid'[, mat "
"CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:100
msgid "Return the degrees of freedom attached to each convex of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:102
msgid ""
"If <literal>CVids</literal> is omitted, all the convexes will be considered "
"(equivalent to <literal>CVids = 1 ... gf_mesh_get(mesh M, 'max "
"cvid')</literal>)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:105
msgid ""
"<literal>IDx</literal> is a vector, <literal>length(IDx) = "
"length(CVids)+1</literal>. <literal>DOFs</literal> is a vector containing "
"the concatenated list of dof of each convex in <literal>CVids</literal>. "
"Each entry of <literal>IDx</literal> is the position of the corresponding "
"convex point list in <literal>DOFs</literal>. Hence, for example, the list "
"of points of the second convex is DOFs(IDx(2):IDx(3)-1)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:111
msgid ""
"If <literal>CVids</literal> contains convex #id which do not exist in the "
"mesh, their point list will be empty."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:115
msgid "``gf_mesh_fem_get(mesh_fem MF, 'non conformal dof'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:117
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'non conformal basic "
"dof') instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:121
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'non conformal basic dof'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:123
msgid "Return partially linked degrees of freedom."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:125
msgid ""
"Return the basic dof located on the border of a convex and which belong to "
"only one convex, except the ones which are located on the border of the "
"mesh.  For example, if the convex 'a' and 'b' share a common face, 'a' has a"
" P1 FEM, and 'b' has a P2 FEM, then the basic dof on the middle of the face "
"will be returned by this function (this can be useful when searching the "
"interfaces between classical FEM and hierarchical FEM)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:134
msgid "``gf_mesh_fem_get(mesh_fem MF, 'qdim')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:136
msgid "Return the dimension Q of the field interpolated by the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:138
msgid ""
"By default, Q=1 (scalar field). This has an impact on the dof numbering."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:141
msgid "``{FEMs, CV2F} = gf_mesh_fem_get(mesh_fem MF, 'fem'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:143
msgid "Return a list of FEM used by the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:145
msgid ""
"<literal>FEMs</literal> is an array of all fem objects found in the convexes"
" given in <literal>CVids</literal>. If <literal>CV2F</literal> was supplied "
"as an output argument, it contains, for each convex listed in "
"<literal>CVids</literal>, the index of its correspounding FEM in "
"<literal>FEMs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:150
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have any "
"FEM have their correspounding entry in <literal>CV2F</literal> set to -1."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:156
msgid "``CVs = gf_mesh_fem_get(mesh_fem MF, 'convex_index')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:158
msgid "Return the list of convexes who have an FEM."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:161
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_lagrangian'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:163
msgid "Test if the mesh_fem is Lagrangian."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:165
msgid ""
"Lagrangian means that each base function Phi[i] is such that Phi[i](P[j]) = "
"delta(i,j), where P[j] is the dof location of the jth base function, and "
"delta(i,j) = 1 if i==j, else 0."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:169
msgid ""
"If <literal>CVids</literal> is omitted, it returns 1 if all convexes in the "
"mesh are Lagrangian. If <literal>CVids</literal> is used, it returns the "
"convex indices (with respect to <literal>CVids</literal>) which are "
"Lagrangian."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:174
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_equivalent'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:176
msgid "Test if the mesh_fem is equivalent."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:178
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:185
msgid "See gf_mesh_fem_get(mesh_fem MF, 'is_lagrangian')"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:181
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_polynomial'[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:183
msgid "Test if all base functions are polynomials."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:188
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_reduced')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:190
msgid "Return 1 if the optional reduction matrix is applied to the dofs."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:193
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'reduction matrix')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:195
msgid "Return the optional reduction matrix."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:198
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'extension matrix')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:200
msgid "Return the optional extension matrix."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:203
msgid "``Vr = gf_mesh_fem_get(mesh_fem MF, 'reduce vector', vec V)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:205
msgid ""
"Multiply the provided vector V with the extension matrix of the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:208
msgid "``Ve = gf_mesh_fem_get(mesh_fem MF, 'extend vector', vec V)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:210
msgid ""
"Multiply the provided vector V with the reduction matrix of the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:213
msgid "``DOFs = gf_mesh_fem_get(mesh_fem MF, 'basic dof on region',mat Rs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:215
msgid ""
"Return the list of basic dof (before the optional reduction) lying on one of"
" the mesh regions listed in <literal>Rs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:218
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:231
msgid ""
"More precisely, this function returns the basic dof whose support is non-"
"null on one of regions whose #ids are listed in <literal>Rs</literal> (note "
"that for boundary regions, some dof nodes may not lie exactly on the "
"boundary, for example the dof of Pk(n,0) lies on the center of the convex, "
"but the base function in not null on the convex border)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:226
msgid "``DOFs = gf_mesh_fem_get(mesh_fem MF, 'dof on region',mat Rs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:228
msgid ""
"Return the list of dof (after the optional reduction) lying on one of the "
"mesh regions listed in <literal>Rs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:238
msgid ""
"For a reduced mesh_fem a dof is lying on a region if its potential "
"corresponding shape function is nonzero on this region. The extension matrix"
" is used to make the correspondence between basic and reduced dofs."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:244
msgid "``DOFpts = gf_mesh_fem_get(mesh_fem MF, 'dof nodes'[, mat DOFids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:246
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'basic dof nodes') "
"instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:249
msgid ""
"``DOFpts = gf_mesh_fem_get(mesh_fem MF, 'basic dof nodes'[, mat DOFids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:251
msgid "Get location of basic degrees of freedom."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:253
msgid ""
"Return the list of interpolation points for the specified dof #IDs in "
"<literal>DOFids</literal> (if <literal>DOFids</literal> is omitted, all "
"basic dof are considered)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:258
msgid "``DOFP = gf_mesh_fem_get(mesh_fem MF, 'dof partition')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:260
msgid "Get the 'dof_partition' array."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:262
msgid ""
"Return the array which associates an integer (the partition number) to each "
"convex of the mesh_fem. By default, it is an all-zero array. The degrees of "
"freedom of each convex of the mesh_fem are connected only to the dof of "
"neighboring convexes which have the same partition number, hence it is "
"possible to create partially discontinuous mesh_fem very easily."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:270
msgid "``gf_mesh_fem_get(mesh_fem MF, 'save',string filename[, string opt])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:272
msgid ""
"Save a mesh_fem in a text file (and optionally its linked mesh object if "
"<literal>opt</literal> is the string 'with_mesh')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:276
msgid "``gf_mesh_fem_get(mesh_fem MF, 'char'[, string opt])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:278
msgid "Output a string description of the mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:280
msgid ""
"By default, it does not include the description of the linked mesh object, "
"except if <literal>opt</literal> is 'with_mesh'."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:284
msgid "``gf_mesh_fem_get(mesh_fem MF, 'display')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:286
msgid "displays a short summary for a mesh_fem object."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:289
msgid "``m = gf_mesh_fem_get(mesh_fem MF, 'linked mesh')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:291
msgid "Return a reference to the mesh object linked to <literal>mf</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:294
msgid "``m = gf_mesh_fem_get(mesh_fem MF, 'mesh')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:296
msgid ""
"Return a reference to the mesh object linked to <literal>mf</literal>. "
"(identical to gf_mesh_get(mesh M, 'linked mesh'))"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:300
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to vtk',string filename, ... "
"['ascii'], U, 'name'...)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:302
msgid "Export a mesh_fem and some fields to a vtk file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:304
msgid ""
"The FEM and geometric transformations will be mapped to order 1 or 2 "
"isoparametric Pk (or Qk) FEMs (as VTK does not handle higher order "
"elements). If you need to represent high-order FEMs or high-order geometric "
"transformations, you should consider gf_slice_get(slice S, 'export to vtk')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:311
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to vtu',string filename, ... "
"['ascii'], U, 'name'...)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:313
msgid "Export a mesh_fem and some fields to a vtu file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:315
msgid ""
"The FEM and geometric transformations will be mapped to order 1 or 2 "
"isoparametric Pk (or Qk) FEMs (as VTK(XML) does not handle higher order "
"elements). If you need to represent high-order FEMs or high-order geometric "
"transformations, you should consider gf_slice_get(slice S, 'export to vtu')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:322
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to dx',string filename, ...['as', "
"string mesh_name][,'edges']['serie',string serie_name][,'ascii'][,'append'],"
" U, 'name'...)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:324
msgid "Export a mesh_fem and some fields to an OpenDX file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:326
msgid ""
"This function will fail if the mesh_fem mixes different convex types (i.e. "
"quads and triangles), or if OpenDX does not handle a specific element type "
"(i.e. prism connections are not known by OpenDX)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:330
msgid ""
"The FEM will be mapped to order 1 Pk (or Qk) FEMs. If you need to represent "
"high-order FEMs or high-order geometric transformations, you should consider"
" gf_slice_get(slice S, 'export to dx')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:335
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to pos',string filename[, string "
"name][[,mesh_fem mf1], mat U1, string nameU1[[,mesh_fem mf2], mat U2, string"
" nameU2,...]])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:337
msgid "Export a mesh_fem and some fields to a pos file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:339
msgid ""
"The FEM and geometric transformations will be mapped to order 1 "
"isoparametric Pk (or Qk) FEMs (as GMSH does not handle higher order "
"elements)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:344
msgid "``gf_mesh_fem_get(mesh_fem MF, 'dof_from_im',mesh_im mim[, int p])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:346
msgid ""
"Return a selection of dof who contribute significantly to the mass-matrix "
"that would be computed with <literal>mf</literal> and the integration method"
" <literal>mim</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:350
msgid ""
"<literal>p</literal> represents the dimension on what the integration method"
" operates (default <literal>p = mesh dimension</literal>)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:353
msgid ""
"IMPORTANT: you still have to set a valid integration method on the convexes "
"which are not crosses by the levelset!"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:357
msgid ""
"``U = gf_mesh_fem_get(mesh_fem MF, 'interpolate_convex_data',mat Ucv)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:359
msgid ""
"Interpolate data given on each convex of the mesh to the mesh_fem dof. The "
"mesh_fem has to be lagrangian, and should be discontinuous (typically an "
"FEM_PK(N,0) or FEM_QK(N,0) should be used)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:363
msgid ""
"The last dimension of the input vector Ucv should have gf_mesh_get(mesh M, "
"'max cvid') elements."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:366
msgid ""
"Example of use: gf_mesh_fem_get(mesh_fem MF, 'interpolate_convex_data', "
"gf_mesh_get(mesh M, 'quality'))"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:369
msgid "``z = gf_mesh_fem_get(mesh_fem MF, 'memsize')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:371
msgid "Return the amount of memory (in bytes) used by the mesh_fem object."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:373
msgid "The result does not take into account the linked mesh object."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:376
msgid "``gf_mesh_fem_get(mesh_fem MF, 'has_linked_mesh_levelset')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:378
msgid "Is a mesh_fem_level_set or not."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:381
msgid "``gf_mesh_fem_get(mesh_fem MF, 'linked_mesh_levelset')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:383
msgid "if it is a mesh_fem_level_set gives the linked mesh_level_set."
msgstr ""
