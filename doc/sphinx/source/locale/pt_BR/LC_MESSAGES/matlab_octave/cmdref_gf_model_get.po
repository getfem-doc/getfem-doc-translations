# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2025 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-06 02:06+0000\n"
"PO-Revision-Date: 2020-04-26 01:50+0000\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/tkoyama010/teams/87607/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/matlab_octave/cmdref_gf_model_get.rst:8
msgid "gf_model_get"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:10
msgid "**Synopsis**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:60
msgid "**Description :**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:63
msgid "Get information from a model object."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:66
msgid "**Command list :**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:70
msgid "``b = gf_model_get(model M, 'is_complex')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:72
msgid "Return 0 is the model is real, 1 if it is complex."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:75
msgid "``T = gf_model_get(model M, 'nbdof')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:77
msgid "Return the total number of degrees of freedom of the model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:80
msgid "``dt = gf_model_get(model M, 'get time step')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:82
msgid "Gives the value of the time step."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:85
msgid "``t = gf_model_get(model M, 'get time')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:87
msgid "Give the value of the data `t` corresponding to the current time."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:90
msgid "``T = gf_model_get(model M, 'tangent_matrix')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:92
msgid "Return the tangent matrix stored in the model ."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:95
msgid "``gf_model_get(model M, 'rhs')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:97
msgid "Return the right hand side of the tangent problem."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:100
msgid ""
"``gf_model_get(model M, 'brick term rhs', int ind_brick[, int ind_term, int "
"sym, int ind_iter])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:102
msgid ""
"Gives the access to the part of the right hand side of a term of a "
"particular nonlinear brick. Does not account of the eventual time "
"dispatcher. An assembly of the rhs has to be done first. `ind_brick` is the "
"brick index. `ind_term` is the index of the term inside the brick (default "
"value : 1). `sym` is to access to the second right hand side of for "
"symmetric terms acting on two different variables (default is 0). `ind_iter`"
" is the iteration number when time dispatchers are used (default is 1)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:113
msgid "``z = gf_model_get(model M, 'memsize')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:115
msgid ""
"Return a rough approximation of the amount of memory (in bytes) used by the "
"model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:119
msgid "``gf_model_get(model M, 'variable list')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:121
msgid "print to the output the list of variables and constants of the model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:124
msgid "``gf_model_get(model M, 'brick list')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:126
msgid "print to the output the list of bricks of the model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:129
msgid "``gf_model_get(model M, 'list residuals')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:131
msgid ""
"print to the output the residuals corresponding to all terms included in the"
" model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:135
msgid "``V = gf_model_get(model M, 'variable', string name)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:137
msgid "Gives the value of a variable or data."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:140
msgid ""
"``V = gf_model_get(model M, 'interpolation', string expr, {mesh_fem mf | "
"mesh_imd mimd | vec pts,  mesh m}[, int region[, int extrapolation[, int "
"rg_source]]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:142
msgid ""
"Interpolate a certain expression with respect to the mesh_fem `mf` or the "
"mesh_im_data `mimd` or the set of points `pts` on mesh `m`. The expression "
"has to be valid according to the high-level generic assembly language "
"possibly including references to the variables and data of the model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:148
msgid ""
"The options `extrapolation` and `rg_source` are specific to interpolations "
"with respect to a set of points `pts`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:152
msgid ""
"``V = gf_model_get(model M, 'local_projection', mesh_im mim, string expr, "
"mesh_fem mf[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:154
msgid ""
"Make an elementwise L2 projection of an expression with respect to the "
"mesh_fem `mf`. This mesh_fem has to be a discontinuous one. The expression "
"has to be valid according to the high-level generic assembly language "
"possibly including references to the variables and data of the model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:162
msgid "``mf = gf_model_get(model M, 'mesh fem of variable', string name)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:164
msgid "Gives access to the `mesh_fem` of a variable or data."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:167
msgid ""
"``name = gf_model_get(model M, 'mult varname Dirichlet', int ind_brick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:169
msgid ""
"Gives the name of the multiplier variable for a Dirichlet brick. If the "
"brick is not a Dirichlet condition with multiplier brick, this function has "
"an undefined behavior"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:174
msgid "``I = gf_model_get(model M, 'interval of variable', string varname)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:176
msgid ""
"Gives the interval of the variable `varname` in the linear system of the "
"model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:180
msgid "``V = gf_model_get(model M, 'from variables'[, bool with_internal])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:182
msgid ""
"Return the vector of all the degrees of freedom of the model consisting of "
"the concatenation of the variables of the model (useful to solve your "
"problem with you own solver)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:187
msgid "``gf_model_get(model M, 'assembly'[, string option])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:189
msgid ""
"Assembly of the tangent system taking into account the terms from all "
"bricks. `option`, if specified, should be 'build_all', 'build_rhs', "
"'build_matrix', 'build_rhs_with_internal', 'build_matrix_condensed', "
"'build_all_condensed'. The default is to build the whole tangent linear "
"system (matrix and rhs). This function is useful to solve your problem with "
"you own solver."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:197
msgid "``{nbit, converged} = gf_model_get(model M, 'solve'[, ...])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:199
msgid "Run the standard getfem solver."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:201
msgid ""
"Note that you should be able to use your own solver if you want (it is "
"possible to obtain the tangent matrix and its right hand side with the "
"gf_model_get(model M, 'tangent matrix') etc.)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:205
msgid "Various options can be specified:"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:207
msgid "'noisy' or 'very_noisy'"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:208
msgid ""
"the solver will display some information showing the progress (residual "
"values etc.)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:210
msgid "'max_iter', int NIT"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:211
msgid "set the maximum iterations numbers."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:212
msgid "'max_res', @float RES"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:213
msgid "set the target residual value."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:214
msgid "'diverged_res', @float RES"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:215
msgid ""
"set the threshold value of the residual beyond which the iterative method is"
" considered to diverge (default is 1e200)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:217
msgid "'lsolver', string SOLVER_NAME"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:218
msgid ""
"select explicitely the solver used for the linear systems (the default value"
" is 'auto', which lets getfem choose itself). Possible values are 'superlu',"
" 'mumps' (if supported), 'cg/ildlt', 'gmres/ilu' and 'gmres/ilut'."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:222
msgid "'lsearch', string LINE_SEARCH_NAME"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:223
msgid ""
"select explicitely the line search method used for the linear systems (the "
"default value is 'default'). Possible values are 'simplest', 'systematic', "
"'quadratic' or 'basic'."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:227
msgid "Return the number of iterations, if an iterative method is used."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:229
msgid ""
"Note that it is possible to disable some variables (see gf_model_set(model "
"M, 'disable variable') ) in order to solve the problem only with respect to "
"a subset of variables (the disabled variables are then considered as data) "
"for instance to replace the global Newton strategy with a fixed point one."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:236
msgid ""
"``gf_model_get(model M, 'test tangent matrix'[, scalar EPS[, int NB[, scalar"
" scale]]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:238
msgid ""
"Test the consistency of the tangent matrix in some random positions and "
"random directions (useful to test newly created bricks). `EPS` is the value "
"of the small parameter for the finite difference computation of the "
"derivative is the random direction (default is 1E-6). `NN` is the number of "
"tests (default is 100). `scale` is a parameter for the random position "
"(default is 1, 0 is an acceptable value) around the current position. Each "
"dof of the random position is chosen in the range [current-scale, "
"current+scale]."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:249
msgid ""
"``gf_model_get(model M, 'test tangent matrix term', string varname1, string "
"varname2[, scalar EPS[, int NB[, scalar scale]]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:251
msgid ""
"Test the consistency of a part of the tangent matrix in some random "
"positions and random directions (useful to test newly created bricks). The "
"increment is only made on variable `varname2` and tested on the part of the "
"residual corresponding to `varname1`. This means that only the term "
"(`varname1`, `varname2`) of the tangent matrix is tested. `EPS` is the value"
" of the small parameter for the finite difference computation of the "
"derivative is the random direction (default is 1E-6). `NN` is the number of "
"tests (default is 100). `scale` is a parameter for the random position "
"(default is 1, 0 is an acceptable value) around the current position. Each "
"dof of the random position is chosen in the range [current-scale, "
"current+scale]."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:266
msgid ""
"``expr = gf_model_get(model M, 'Neumann term', string varname, int region)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:268
msgid ""
"Gives the assembly string corresponding to the Neumann term of the fem "
"variable `varname` on `region`. It is deduced from the assembly string "
"declared by the model bricks. `region` should be the index of a boundary "
"region on the mesh where `varname` is defined. Care to call this function "
"only after all the volumic bricks have been declared. Complains, if a brick "
"omit to declare an assembly string."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:277
msgid ""
"``V = gf_model_get(model M, 'compute isotropic linearized Von Mises or "
"Tresca', string varname, string dataname_lambda, string dataname_mu, "
"mesh_fem mf_vm[, string version])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:279
msgid ""
"Compute the Von-Mises stress or the Tresca stress of a field (only valid for"
" isotropic linearized elasticity in 3D). `version` should be  'Von_Mises' or"
" 'Tresca' ('Von_Mises' is the default). Parametrized by Lame coefficients."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:285
msgid ""
"``V = gf_model_get(model M, 'compute isotropic linearized Von Mises "
"pstrain', string varname, string data_E, string data_nu, mesh_fem mf_vm)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:287
msgid ""
"Compute the Von-Mises stress  of a displacement field for isotropic "
"linearized elasticity in 3D or in 2D with plane strain assumption. "
"Parametrized by Young's modulus and Poisson ratio."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:292
msgid ""
"``V = gf_model_get(model M, 'compute isotropic linearized Von Mises "
"pstress', string varname, string data_E, string data_nu, mesh_fem mf_vm)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:294
msgid ""
"Compute the Von-Mises stress  of a displacement field for isotropic "
"linearized elasticity in 3D or in 2D with plane stress assumption. "
"Parametrized by Young's modulus and Poisson ratio."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:299
msgid ""
"``V = gf_model_get(model M, 'compute Von Mises or Tresca', string varname, "
"string lawname, string dataname, mesh_fem mf_vm[, string version])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:301
msgid ""
"Compute on `mf_vm` the Von-Mises stress or the Tresca stress of a field for "
"nonlinear elasticity in 3D. `lawname` is the constitutive law which could be"
" 'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean' or 'Ciarlet "
"Geymonat'. `dataname` is a vector of parameters for the constitutive law. "
"Its length depends on the law. It could be a short vector of constant values"
" or a vector field described on a finite element method for variable "
"coefficients. `version` should be  'Von_Mises' or 'Tresca' ('Von_Mises' is "
"the default)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:311
msgid ""
"``V = gf_model_get(model M, 'compute finite strain elasticity Von Mises',  "
"string lawname, string varname, string params, mesh_fem mf_vm[, int "
"region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:313
msgid ""
"Compute on `mf_vm` the Von-Mises stress of a field `varname` for nonlinear "
"elasticity in 3D. `lawname` is the constitutive law which should be a valid "
"name. `params` are the parameters law. It could be a short vector of "
"constant values or may depend on data or variables of the model. Uses the "
"high-level generic assembly."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:321
msgid ""
"``V = gf_model_get(model M, 'compute second Piola Kirchhoff tensor', string "
"varname, string lawname, string dataname, mesh_fem mf_sigma)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:323
msgid ""
"Compute on `mf_sigma` the second Piola Kirchhoff stress tensor of a field "
"for nonlinear elasticity in 3D. `lawname` is the constitutive law which "
"could be 'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean' or 'Ciarlet"
" Geymonat'. `dataname` is a vector of parameters for the constitutive law. "
"Its length depends on the law. It could be a short vector of constant values"
" or a vector field described on a finite element method for variable "
"coefficients."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:333
msgid ""
"``gf_model_get(model M, 'elastoplasticity next iter', mesh_im mim, string "
"varname, string previous_dep_name, string projname, string datalambda, "
"string datamu, string datathreshold, string datasigma)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:335
msgid ""
"Used with the old (obsolete) elastoplasticity brick to pass from an "
"iteration to the next one. Compute and save the stress constraints sigma for"
" the next iterations. 'mim' is the integration method to use for the "
"computation. 'varname' is the main variable of the problem. "
"'previous_dep_name' represents the displacement at the previous time step. "
"'projname' is the type of projection to use. For the moment it could only be"
" 'Von Mises' or 'VM'. 'datalambda' and 'datamu' are the Lame coefficients of"
" the material. 'datasigma' is a vector which will contain the new stress "
"constraints values."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:346
msgid ""
"``gf_model_get(model M, 'small strain elastoplasticity next iter', mesh_im "
"mim,  string lawname, string unknowns_type [, string varnames, ...] [, "
"string params, ...] [, string theta = '1' [, string dt = 'timestep']] [, int"
" region = -1])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:348
msgid ""
"Function that allows to pass from a time step to another for the small "
"strain plastic brick. The parameters have to be exactly the same than the "
"one of `add_small_strain_elastoplasticity_brick`, so see the documentation "
"of this function for the explanations. Basically, this brick computes the "
"plastic strain and the plastic multiplier and stores them for the next step."
" Additionaly, it copies the computed displacement to the data that stores "
"the displacement of the previous time step (typically 'u' to 'Previous_u'). "
"It has to be called before any use of "
"`compute_small_strain_elastoplasticity_Von_Mises`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:360
msgid ""
"``V = gf_model_get(model M, 'small strain elastoplasticity Von Mises', "
"mesh_im mim, mesh_fem mf_vm, string lawname, string unknowns_type [, string "
"varnames, ...] [, string params, ...] [, string theta = '1' [, string dt = "
"'timestep']] [, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:362
msgid ""
"This function computes the Von Mises stress field with respect to a small "
"strain elastoplasticity term, approximated on `mf_vm`, and stores the result"
" into `VM`.  All other parameters have to be exactly the same as for "
"`add_small_strain_elastoplasticity_brick`. Remember that "
"`small_strain_elastoplasticity_next_iter` has to be called before any call "
"of this function."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:370
msgid ""
"``V = gf_model_get(model M, 'compute elastoplasticity Von Mises or Tresca', "
"string datasigma, mesh_fem mf_vm[, string version])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:372
msgid ""
"Compute on `mf_vm` the Von-Mises or the Tresca stress of a field for "
"plasticity and return it into the vector V. `datasigma` is a vector which "
"contains the stress constraints values supported by the mesh. `version` "
"should be 'Von_Mises' or 'Tresca' ('Von_Mises' is the default)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:378
msgid ""
"``V = gf_model_get(model M, 'compute plastic part', mesh_im mim, mesh_fem "
"mf_pl, string varname, string previous_dep_name, string projname, string "
"datalambda, string datamu, string datathreshold, string datasigma)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:380
msgid ""
"Compute on `mf_pl` the plastic part and return it into the vector V. "
"`datasigma` is a vector which contains the stress constraints values "
"supported by the mesh."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:385
msgid ""
"``gf_model_get(model M, 'finite strain elastoplasticity next iter', mesh_im "
"mim, string lawname, string unknowns_type, [, string varnames, ...] [, "
"string params, ...] [, int region = -1])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:387
msgid ""
"Function that allows to pass from a time step to another for the finite "
"strain plastic brick. The parameters have to be exactly the same than the "
"one of `add_finite_strain_elastoplasticity_brick`, so see the documentation "
"of this function for the explanations. Basically, this brick computes the "
"plastic strain and the plastic multiplier and stores them for the next step."
" For the Simo-Miehe law which is currently the only one implemented, this "
"function updates the state variables defined in the last two entries of "
"`varnames`, and resets the plastic multiplier field given as the second "
"entry of `varnames`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:399
msgid ""
"``V = gf_model_get(model M, 'compute finite strain elastoplasticity Von "
"Mises', mesh_im mim, mesh_fem mf_vm, string lawname, string unknowns_type, "
"[, string varnames, ...] [, string params, ...] [, int region = -1])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:401
msgid ""
"Compute on `mf_vm` the Von-Mises or the Tresca stress of a field for "
"plasticity and return it into the vector V. The first input parameters ar as"
" in the function 'finite strain elastoplasticity next iter'."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:406
msgid ""
"``V = gf_model_get(model M, 'sliding data group name of large sliding "
"contact brick', int indbrick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:408
#: ../source/matlab_octave/cmdref_gf_model_get.rst:414
#: ../source/matlab_octave/cmdref_gf_model_get.rst:420
#: ../source/matlab_octave/cmdref_gf_model_get.rst:426
#: ../source/matlab_octave/cmdref_gf_model_get.rst:432
#: ../source/matlab_octave/cmdref_gf_model_get.rst:438
msgid ""
"Gives the name of the group of variables corresponding to the sliding data "
"for an existing large sliding contact brick."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:412
msgid ""
"``V = gf_model_get(model M, 'displacement group name of large sliding "
"contact brick', int indbrick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:418
msgid ""
"``V = gf_model_get(model M, 'transformation name of large sliding contact "
"brick', int indbrick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:424
msgid ""
"``V = gf_model_get(model M, 'sliding data group name of Nitsche large "
"sliding contact brick', int indbrick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:430
msgid ""
"``V = gf_model_get(model M, 'displacement group name of Nitsche large "
"sliding contact brick', int indbrick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:436
msgid ""
"``V = gf_model_get(model M, 'transformation name of Nitsche large sliding "
"contact brick', int indbrick)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:442
msgid ""
"``M = gf_model_get(model M, 'matrix term', int ind_brick, int ind_term)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:444
msgid "Gives the matrix term ind_term of the brick ind_brick if it exists"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:447
msgid "``s = gf_model_get(model M, 'char')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:449
msgid "Output a (unique) string representation of the model."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:451
msgid ""
"This can be used to perform comparisons between two different model objects."
" This function is to be completed."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:456
msgid "``gf_model_get(model M, 'display')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_model_get.rst:458
msgid "displays a short summary for a model object."
msgstr ""
