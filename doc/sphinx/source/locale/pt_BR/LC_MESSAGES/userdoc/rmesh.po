# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-16 01:29+0000\n"
"PO-Revision-Date: 2018-07-16 07:07+0000\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/tkoyama010/teams/87607/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/userdoc/rmesh.rst:10
msgid "Mesh refinement"
msgstr ""

#: ../source/userdoc/rmesh.rst:12
msgid ""
"Mesh refinement with the Bank et all method (see [bank1983]_) is available "
"in dimension 1, 2 or 3 for simplex meshes (segments, triangles and "
"tetrahedrons). For a given object ``mymesh`` of type |gf_m|, the method::"
msgstr ""

#: ../source/userdoc/rmesh.rst:18
msgid ""
"refines the elements whose indices are stored in ``bv`` (a |dal_bv| object)."
" The conformity of the mesh is kept thanks to additional refinement (the so "
"called green triangles). Information about green triangles (in Figure "
":ref:`ud-fig-refine`) is stored on the mesh object to gather them for "
"further refinements (see [bank1983]_)."
msgstr ""

#: ../source/userdoc/rmesh.rst:29
msgid "Example of Bank refinement in 2D"
msgstr ""

#: ../source/userdoc/rmesh.rst:31
msgid ""
"Mesh refinement is most of the time coupled with an *a posteriori* error "
"estimate. A very basic error estimate is available in the file "
":file:`getfem/getfem_error_estimate.h`::"
msgstr ""

#: ../source/userdoc/rmesh.rst:37
msgid ""
"where ``mim`` is the integration method (a |gf_mim| object), ``mf`` is the "
"finite element method on which the unknown has been computed (a |gf_mf| "
"object), ``U`` is the vector of degrees of freedom of the unknown, ``err`` "
"is a sufficiently large vector in which the error estimate is computed for "
"each element of the mesh, and ``rg`` is a mesh region bulild from elements "
"on which the error estimate should be computed (a |gf_mr| object)."
msgstr ""

#: ../source/userdoc/rmesh.rst:43
msgid ""
"This basic error estimate is only valid for order two problems and just "
"compute the sum of the jump in normal derivative across the elements on each"
" edge (for two-dimensional problems) or each face (for three-dimensional "
"problems). This means that for each face :math:`e` of the mesh the following"
" quantity is computed:"
msgstr ""

#: ../source/userdoc/rmesh.rst:49
msgid ""
"\\int_e |\\hspace{0.01em}[\\hspace{-0.12em}[\n"
"\\partial_n u ]\\hspace{-0.12em}]\\hspace{0.01em}|^2 d \\Gamma,"
msgstr ""

#: ../source/userdoc/rmesh.rst:54
msgid ""
"where :math:`[\\hspace{-0.12em}[\\partial_n u]\\hspace{-0.12em}]` is the "
"jump of the normal derivative. Then, the error estimate for a given element "
"is the sum of the computed quantities on each internal face multiplied by "
"the element diameter. This basic error estimate can be taken as a model for "
"more elaborated ones. It uses the high-level generic assembly and the "
"``neighbor_element`` interpolate transformation (see :ref:`ud-gasm-high-"
"inter-elt-disc`)."
msgstr ""
