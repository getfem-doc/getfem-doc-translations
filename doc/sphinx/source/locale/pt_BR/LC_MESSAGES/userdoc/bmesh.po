# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-13 01:37+0000\n"
"PO-Revision-Date: 2018-07-16 07:05+0000\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/tkoyama010/teams/87607/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/userdoc/bmesh.rst:10
msgid "Build a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:12
msgid ""
"As a preliminary, you may want to read this short introduction to the |gf| "
"`glossary`_."
msgstr ""

#: ../source/userdoc/bmesh.rst:15
msgid ""
"|gf| has its own structure to store meshes defined in the files "
":file:`getfem/bgeot_mesh_structure.h` and :file:`getfem/getfem_mesh.h`. The "
"main structure is defined in :file:`getfem/getfem_mesh.h` by the object "
"|gf_m|."
msgstr ""

#: ../source/userdoc/bmesh.rst:19
msgid ""
"This object is able to store any element in any dimension even if you mix "
"elements with different dimensions."
msgstr ""

#: ../source/userdoc/bmesh.rst:22
msgid ""
"There is only a (very) experimental meshing procedure in |gf| to mesh "
"complex geometries. But you can easily load a mesh from any format (some "
"procedures are in :file:`getfem/getfem_import.h` to load meshes from some "
"public domain mesh generators)."
msgstr ""

#: ../source/userdoc/bmesh.rst:26
msgid ""
"The structure |gf_m| may also contain a description about a region of the "
"mesh, such as a boundary or a set of elements. This is handled via a "
"container of convexes and convex faces, |gf_mr|. We refer to [remacle2003]_ "
"for a discussion on mesh representation."
msgstr ""

#: ../source/userdoc/bmesh.rst:32
msgid "Add an element to a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:34
msgid "Suppose the variable ``mymesh`` has been declared by::"
msgstr ""

#: ../source/userdoc/bmesh.rst:38
msgid ""
"then you have two ways to insert a new element to this mesh: from a list of "
"points or from a list of indexes of already existing points."
msgstr ""

#: ../source/userdoc/bmesh.rst:41
msgid "To enter a new point on a mesh use the method::"
msgstr ""

#: ../source/userdoc/bmesh.rst:45
msgid ""
"where ``pt`` is of type |bg_bn|. The index ``i`` is the index of this point "
"on the mesh. If the point already exists in the mesh, a new point is not "
"inserted and the index of the already existing point is returned. A mesh has"
" a principal dimension, which is the dimension of its points. It is not "
"possible to have points of different dimensions in a same mesh."
msgstr ""

#: ../source/userdoc/bmesh.rst:51
msgid "The most basic function to add a new element to a mesh is::"
msgstr ""

#: ../source/userdoc/bmesh.rst:55
msgid ""
"This is a template function, with ``pgt`` of type |bg_pgt| (basically a "
"pointer to an instance of type |bg_gt|) and ``it`` is an iterator on a list "
"of indexes of already existing points. For instance, if one needs to add a "
"new triangle in a 3D mesh, one needs to define first an array with the "
"indexes of the three points::"
msgstr ""

#: ../source/userdoc/bmesh.rst:65
msgid "then adding the element is done by::"
msgstr ""

#: ../source/userdoc/bmesh.rst:69
msgid ""
"where ``bgeot::simplex_geotrans(N,1);`` denotes the usual linear geometric "
"transformation for simplices of dimension N."
msgstr ""

#: ../source/userdoc/bmesh.rst:72
msgid "For simplices, a more specialized function exists, which is::"
msgstr ""

#: ../source/userdoc/bmesh.rst:76
msgid ""
"It is also possible to give directly the list of points with the function::"
msgstr ""

#: ../source/userdoc/bmesh.rst:80
msgid "where now ``itp`` is an iterator on an array of points. For example::"
msgstr ""

#: ../source/userdoc/bmesh.rst:88
msgid "It is possible to use also::"
msgstr ""

#: ../source/userdoc/bmesh.rst:92
msgid ""
"For other elements than simplices, it is still possible to use "
"``mymesh.add_convex_by_points`` or ``mymesh.add_convex`` with the "
"appropriate geometric transformation."
msgstr ""

#: ../source/userdoc/bmesh.rst:96
msgid ""
"``bgeot::parallelepiped_geotrans(N, 1)`` describes the usual transformation "
"for parallelepipeds of dimension ``N`` (quadrilateron for ``N=2``, "
"hexahedron for ``N=3``, ...)"
msgstr ""

#: ../source/userdoc/bmesh.rst:100
msgid ""
"``bgeot::prism_geotrans(N, 1)`` describes the usual transformation for "
"prisms of dimension ``N`` (usual prism is for ``N=3``. A generalized prism "
"is the product of a simplex of dimension ``N-1`` with a segment)"
msgstr ""

#: ../source/userdoc/bmesh.rst:104
msgid "Specialized functions exist also::"
msgstr ""

#: ../source/userdoc/bmesh.rst:111
msgid ""
"The order of the points in the array of points is not important for "
"simplices (except if you care about the orientation of your simplices). For "
"other elements, it is important to respect the vertex order shown in "
":ref:`ud-fig-elem` (first order elements)."
msgstr ""

#: ../source/userdoc/bmesh.rst:119
msgid "Vertex numeration for usual first order elements"
msgstr ""

#: ../source/userdoc/bmesh.rst:121
msgid ""
"Note that a general rule, including for higher order transformations, is "
"that the vertex numeration follows the one of the corresponding Lagrange "
"finite element method (see  :ref:`ud-appendixa`)."
msgstr ""

#: ../source/userdoc/bmesh.rst:125
msgid "Remove an element from a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:127
msgid "To remove an element from a mesh, simply use::"
msgstr ""

#: ../source/userdoc/bmesh.rst:131
msgid "where ``i`` is the index of the element."
msgstr ""

#: ../source/userdoc/bmesh.rst:135
msgid "Simple structured meshes"
msgstr ""

#: ../source/userdoc/bmesh.rst:137
msgid ""
"For parallelepiped domains, it is possible to obtain structured meshes with "
"simplices, parallelepipeds or prisms elements from three functions defined "
"in :file:`getfem/getfem_regular_meshes.h`."
msgstr ""

#: ../source/userdoc/bmesh.rst:141
msgid "The simplest function to use is::"
msgstr ""

#: ../source/userdoc/bmesh.rst:146
msgid ""
"which fills the mesh ``m`` with a regular mesh of "
"simplices/parallelepipeds/prisms (depending on the value of ``pgt``). The "
"number of cells in each direction is given by ``nsubdiv``. The following "
"example builds a mesh of quadratic triangles on the unit square (the mesh "
"can be scaled and translated afterwards)::"
msgstr ""

#: ../source/userdoc/bmesh.rst:155
msgid "More specialized regular mesh functions are also available::"
msgstr ""

#: ../source/userdoc/bmesh.rst:162
msgid ""
"where ``mymesh`` is a mesh variable in which the structured mesh will be "
"built, ``N`` is the dimension (limited to 4 for simplices, 5 for prisms, "
"unlimited for parallelepipeds), ``org`` is of type ``bgeot::base_node`` and "
"represents the origin of the mesh, ``ivect`` is an iterator on an array of "
"``N`` vectors to build the parallelepiped domain, ``iref`` is an iterator on"
" an array of ``N`` integers representing the number of division on each "
"direction."
msgstr ""

#: ../source/userdoc/bmesh.rst:169
msgid ""
"For instance, to build a mesh with tetrahedrons for a unit cube with "
":math:`10\\times~10\\times~10` cells one can write::"
msgstr ""

#: ../source/userdoc/bmesh.rst:184
msgid ""
"``base_node`` and ``base_small_vector`` are almost identical, they are both "
"''small'' vector classes (they cannot store more than 16 elements), used to "
"describe geometrical points, and geometrical vectors. Their memory footprint"
" is lower than a ``std::vector``."
msgstr ""

#: ../source/userdoc/bmesh.rst:192
msgid "Mesh regions"
msgstr ""

#: ../source/userdoc/bmesh.rst:194
msgid ""
"A mesh object can contain many |gf_mr| objects (declaration in "
":file:`getfem/getfem_mesh_region.h`). These objects are containers for a set"
" of convexes and convex faces. They are used to define boundaries, or a "
"partition of the mesh for parallel solvers, etc.::"
msgstr ""

#: ../source/userdoc/bmesh.rst:209
msgid "Methods of the |gf_m| object"
msgstr ""

#: ../source/userdoc/bmesh.rst:211
msgid "The list is not exhaustive."
msgstr ""

#: ../source/userdoc/bmesh.rst:215
msgid "main dimension of the mesh."
msgstr ""

#: ../source/userdoc/bmesh.rst:219
msgid ""
"gives a ``dal::bit_vector`` object which represents all the indexes of valid"
" points of a mesh (see below)."
msgstr ""

#: ../source/userdoc/bmesh.rst:224
msgid "gives the point of each index (a ``bgeot::base_node``)."
msgstr ""

#: ../source/userdoc/bmesh.rst:228
msgid ""
"gives a ``dal::bit_vector`` object which represents all the indexes of valid"
" elements of a mesh (see below)."
msgstr ""

#: ../source/userdoc/bmesh.rst:233
msgid ""
"gives the description of the structure of element of index ``i``. The "
"function return a |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:238
msgid "number of faces of |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:242
msgid "number of vertices of |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:246
msgid "intrinsic dimension of |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:251
msgid "number of vertices of the face of local index ``f`` of |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:255
msgid ""
"return a container with the local indexes of all vertices of the face of "
"local index ``f`` of |bg_pcs|. For instance "
"``mesh.structure_of_convex(i)->ind_points_of_face(f)[0]`` is the local index"
" of the first vertex."
msgstr ""

#: ../source/userdoc/bmesh.rst:262
msgid "gives the structure (a |bg_pcs|) of local index ``f`` of |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:267
msgid "gives a container with the global indexes of vertices of |bg_pcs|."
msgstr ""

#: ../source/userdoc/bmesh.rst:271
msgid ""
"gives a container with the vertices of |bg_pcs|. This is an array of "
"``bgeot::base_node``."
msgstr ""

#: ../source/userdoc/bmesh.rst:276
msgid ""
"gives a container with the indexes of all elements attached to the point of "
"global index ``ipt``."
msgstr ""

#: ../source/userdoc/bmesh.rst:281
msgid ""
"gives a container with the indexes of all elements in ``mesh`` having the "
"common face of local index ``f`` of element ``ic`` except element ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:287
msgid ""
"gives the index of the first elements in ``mesh`` having the common face of "
"local index ``f`` of element ``ic`` except element ``ic``. return "
"size_type(-1) if none is found."
msgstr ""

#: ../source/userdoc/bmesh.rst:293
msgid ""
"return whether or not the element ``ic`` has a neighbor with respect to its "
"face of local index ``f``."
msgstr ""

#: ../source/userdoc/bmesh.rst:298
msgid "delete all elements and points from the mesh."
msgstr ""

#: ../source/userdoc/bmesh.rst:303
msgid ""
"compact the structure (renumbers points and convexes such that there is no "
"hole in their numbering)."
msgstr ""

#: ../source/userdoc/bmesh.rst:308
msgid ""
"return the geometric transformation of the element of index ``i`` (in a "
"|bg_pgt|). See :ref:`dp` for more details about geometric transformations."
msgstr ""

#: ../source/userdoc/bmesh.rst:313
msgid ""
"gives a ``bgeot::base_small_vector`` representing an outward normal to the "
"element at the face of local index ``f`` at the point of local coordinates "
"(coordinates in the element of reference) ``pt``. The point ``pt`` has no "
"influence if the geometric transformation is linear. This is not a unit "
"normal, the norm of the resulting vector is the ratio between the surface of"
" the face of the reference element and the surface of the face of the real "
"element."
msgstr ""

#: ../source/userdoc/bmesh.rst:323
msgid "gives an estimate of the area of convex ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:327
msgid "gives a rough estimate of the quality of element ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:331
msgid "gives an estimate of the radius of element ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:335
msgid ""
"return a |gf_mr|. The region is stored in the mesh, and can contain a set of"
" convex numbers and or convex faces."
msgstr ""

#: ../source/userdoc/bmesh.rst:340
msgid "returns true if the region of index ``irg`` has been created."
msgstr ""

#: ../source/userdoc/bmesh.rst:342
msgid ""
"The methods of the convexes/convex faces container ``getfem::mesh_region`` "
"are:"
msgstr ""

#: ../source/userdoc/bmesh.rst:346
msgid "add the convex of index ``ic`` to the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:350
msgid "add the face number ``f`` of the convex ``ic``."
msgstr ""

#: ../source/userdoc/bmesh.rst:355
msgid "remove the convex or the convex face from the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:360
msgid "return true if the convex (or convex face) is in the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:364
msgid "return true if the region does not contain any convex."
msgstr ""

#: ../source/userdoc/bmesh.rst:368
msgid "return true if the region does not contain any convex face."
msgstr ""

#: ../source/userdoc/bmesh.rst:372
msgid ""
"return a ``dal::bit_vector`` containing the list of convexes which are "
"stored (or whose faces are stored) in the region."
msgstr ""

#: ../source/userdoc/bmesh.rst:375
msgid "Iteration over a |gf_mr| should be done with |gf_mrv|::"
msgstr ""

#: ../source/userdoc/bmesh.rst:384
msgid "Using |dal_bv|"
msgstr ""

#: ../source/userdoc/bmesh.rst:386
msgid ""
"The object |dal_bv| (declared in :file:`getfem/dal_bit_vector.h`) is a "
"structure heavily used in |gf|. It is very close to ``std::bitset`` and "
"``std::vector<bool>`` but with additional functionalities to represent a set"
" of non negative integers and iterate over them."
msgstr ""

#: ../source/userdoc/bmesh.rst:391
msgid ""
"If ``nn`` is declared to be a |dal_bv|, the two instructions ``nn.add(6)`` "
"or ``nn[6] = true`` are equivalent and means that integer 6 is added to the "
"set."
msgstr ""

#: ../source/userdoc/bmesh.rst:395
msgid ""
"In a same way ``nn.sup(6)`` or ``nn[6] = false`` remove the integer 6 from "
"the set. The instruction ``nn.add(6, 4)`` adds 6,7,8,9 to the set."
msgstr ""

#: ../source/userdoc/bmesh.rst:399
msgid ""
"To iterate on a |dal_bv|, it is possible to use iterators as usual, but, "
"most of the time, as this object represents a set of integers, one just "
"wants to iterate on the integers included into the set. The simplest way to "
"do that is to use the pseudo-iterator |dal_bv_v|."
msgstr ""

#: ../source/userdoc/bmesh.rst:405
msgid ""
"For instance, here is the code to iterate on the points of a mesh and print "
"it to the standard output::"
msgstr ""

#: ../source/userdoc/bmesh.rst:412
msgid "Face numbering"
msgstr ""

#: ../source/userdoc/bmesh.rst:414
msgid ""
"The numeration of faces on usual elements is given in figure :ref:`ud-fig-"
"elemf`."
msgstr ""

#: ../source/userdoc/bmesh.rst:421
msgid "faces numeration for usual elements"
msgstr ""

#: ../source/userdoc/bmesh.rst:423
msgid ""
"Note that, while the convexes and the points are globally numbered in a "
"|gf_m| object, there is no global numbering of the faces, so the only way to"
" refer to a given face, is to give the convex number, and the local face "
"number in the convex."
msgstr ""

#: ../source/userdoc/bmesh.rst:431
msgid "Save and load meshes"
msgstr ""

#: ../source/userdoc/bmesh.rst:434
msgid "From |gf| file format"
msgstr ""

#: ../source/userdoc/bmesh.rst:436
msgid ""
"In :file:`getfem/getfem_mesh.h`, two methods are defined to load meshes from"
" file and write meshes to a file."
msgstr ""

#: ../source/userdoc/bmesh.rst:441
msgid "save the mesh into a file."
msgstr ""

#: ../source/userdoc/bmesh.rst:445
msgid "load the mesh from a file."
msgstr ""

#: ../source/userdoc/bmesh.rst:447
msgid ""
"The following is an example of how to load a mesh and extract information on"
" it::"
msgstr ""

#: ../source/userdoc/bmesh.rst:480
msgid "Import a mesh"
msgstr ""

#: ../source/userdoc/bmesh.rst:482
msgid "The file :file:`getfem/getfem_import.h` provides the function::"
msgstr ""

#: ../source/userdoc/bmesh.rst:486
msgid ""
"Here the string ``fmtfilename`` must contain a descriptor of the file format"
" (\"gid\", \"gmsh\", \"cdb\", \"noboite\", \"am_fmt\", \"emc2_mesh\", or "
"\"structured\"), followed by a colon and the file name (if there is not "
"format descriptor, it is assumed that the file is a native getfem mesh and "
"the ``mesh::read_from_file()`` method is used). Example::"
msgstr ""

#: ../source/userdoc/bmesh.rst:495
msgid "Alternatively the function::"
msgstr ""

#: ../source/userdoc/bmesh.rst:500
msgid ""
"can be used in an equivalent manner with the string ``fmt`` being one of the"
" aforementioned format specifiers."
msgstr ""

#: ../source/userdoc/bmesh.rst:503
msgid ""
"The \"gid\" format specifier is for meshes generated by `GiD`_ and \"gmsh\" "
"is for meshes generated by the open-source mesh generator `Gmsh`_. The "
"\"cdb\" format specifier is for reading meshes from `ANSYS "
"<http://www.ansys.com>`_ models exported in blocked format with the CDWRITE "
"command. Currently the `ANSYS`_ element types "
"42,45,73,82,87,89,90,92,95,162,182,183,185,186,187 and 191 can be imported, "
"this however does not include any finite element techology linked to these "
"elements but only their geometry. The \"noboite\" format is for TetMesh-"
"GHS3D, and the \"am_fmt\" and \"emc2_mesh\" are for files built with `EMC2`_"
" (but 2D only)."
msgstr ""

#: ../source/userdoc/bmesh.rst:513
msgid ""
"The \"structured\" format is just a short specification for regular meshes: "
"the rest of ``fmtfilename`` in that case is not a filename, but a string "
"whose format is following::"
msgstr ""

#: ../source/userdoc/bmesh.rst:523
msgid ""
"where ``GT`` is the name of the geometric transformation, ``NSUBDIV`` a "
"vector of the number of subdivisions in each coordinate (default value 2), "
"``ORG`` is the origin of the mesh (default value ``[0,0,...]``), ``SIZES`` "
"is a vector of the sizes in each direction (default value ``[1, 1, ...]`` "
"and if ``NOISED=1`` the nodes of the interior of the mesh are randomly "
"\"shaken\" (default value ``NOISED=0``). In that string, all the parameters "
"are optional except ``GT``."
msgstr ""
