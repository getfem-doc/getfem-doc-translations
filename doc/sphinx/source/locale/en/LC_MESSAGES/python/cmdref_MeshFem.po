# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-05 04:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../source/python/cmdref_MeshFem.rst:8
msgid "MeshFem"
msgstr ""

#: ../docstring getfem.MeshFem:1 of
msgid "GeFEM MeshFem object"
msgstr ""

#: ../docstring getfem.MeshFem:3 of
msgid "This object represents a finite element method defined on a whole mesh."
msgstr ""

#: ../docstring getfem.MeshFem:6 of
msgid "General constructor for MeshFem objects"
msgstr ""

#: ../docstring getfem.MeshFem:8 of
msgid ""
"``MF = MeshFem(Mesh m[, int Qdim1=1[, int Qdim2=1, ...]])`` Build a new "
"MeshFem object."
msgstr ""

#: ../docstring getfem.MeshFem:11 of
msgid ""
"The `Qdim` parameters specifies the dimension of the field represented by"
" the finite element method. Qdim1 = 1 for a scalar field, Qdim1 = n for a"
" vector field off size n, Qdim1=m, Qdim2=n for a matrix field of size mxn"
" ... Returns the handle of the created object."
msgstr ""

#: ../docstring getfem.MeshFem:17 of
msgid ""
"``MF = MeshFem('load', string fname[, Mesh m])`` Load a MeshFem from a "
"file."
msgstr ""

#: ../docstring getfem.MeshFem:20 of
msgid ""
"If the mesh `m` is not supplied (this kind of file does not store the "
"mesh), then it is read from the file `fname` and its descriptor is "
"returned as the second output argument."
msgstr ""

#: ../docstring getfem.MeshFem:24 of
msgid ""
"``MF = MeshFem('from string', string s[, Mesh m])`` Create a MeshFem "
"object from its string description."
msgstr ""

#: ../docstring getfem.MeshFem:27 of
msgid "See also ``MeshFem.char()``"
msgstr ""

#: ../docstring getfem.MeshFem:29 of
msgid "``MF = MeshFem('clone', MeshFem mf)`` Create a copy of a MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem:32 of
msgid ""
"``MF = MeshFem('sum', MeshFem mf1, MeshFem mf2[, MeshFem mf3[, ...]])`` "
"Create a MeshFem that spans two (or more) MeshFem's."
msgstr ""

#: ../docstring getfem.MeshFem:35 of
msgid "All MeshFem must share the same mesh."
msgstr ""

#: ../docstring getfem.MeshFem:37 of
msgid "After that, you should not modify the FEM of `mf1`, `mf2` etc."
msgstr ""

#: ../docstring getfem.MeshFem:39 of
msgid ""
"``MF = MeshFem('product', MeshFem mf1, MeshFem mf2)`` Create a MeshFem "
"that spans all the product of a selection of shape functions of `mf1` by "
"all shape functions of `mf2`. Designed for Xfem enrichment."
msgstr ""

#: ../docstring getfem.MeshFem:44 of
msgid "`mf1` and `mf2` must share the same mesh."
msgstr ""

#: ../docstring getfem.MeshFem:46 of
msgid "After that, you should not modify the FEM of `mf1`, `mf2`."
msgstr ""

#: ../docstring getfem.MeshFem:48 of
msgid ""
"``MF = MeshFem('levelset', MeshLevelSet mls, MeshFem mf)`` Create a "
"MeshFem that is conformal to implicit surfaces defined in MeshLevelSet."
msgstr ""

#: ../docstring getfem.MeshFem:52 of
msgid ""
"``MF = MeshFem('global function', Mesh m, LevelSet ls, (GlobalFunction "
"GF1,...)[, int Qdim_m])`` Create a MeshFem whose base functions are "
"global function given by the user in the system of coordinate defined by "
"the iso-values of the two level-set function of `ls`."
msgstr ""

#: ../docstring getfem.MeshFem:57 of
msgid ""
"``MF = MeshFem('partial', MeshFem mf, ivec DOFs[, ivec RCVs])`` Build a "
"restricted MeshFem by keeping only a subset of the degrees of freedom of "
"`mf`."
msgstr ""

#: ../docstring getfem.MeshFem:61 getfem.MeshFem.set_partial:4 of
msgid "If `RCVs` is given, no FEM will be put on the convexes listed in `RCVs`."
msgstr ""

#: ../docstring getfem.MeshFem.adapt:1 of
msgid ""
"For a MeshFem levelset object only. Adapt the mesh_fem object to a change"
" of the levelset function."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cv:1 of
msgid "Return the dof of the convexes listed in `CVids`."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cv:3 of
msgid ""
"WARNING: the Degree of Freedom might be returned in ANY order, do not use"
" this function in your assembly routines. Use 'basic dof from cvid' "
"instead, if you want to be able to map a convex number with its "
"associated degrees of freedom."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cv:8 of
msgid ""
"One can also get the list of basic dof on a set on convex faces, by "
"indicating on the second row of `CVids` the faces numbers (with respect "
"to the convex number on the first row)."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cvid:1 of
msgid "Return the degrees of freedom attached to each convex of the mesh."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cvid:3 of
msgid ""
"If `CVids` is omitted, all the convexes will be considered (equivalent to"
" `CVids = 1 ... Mesh.max_cvid()`)."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cvid:6 of
msgid ""
"`IDx` is a vector, `length(IDx) = length(CVids)+1`. `DOFs` is a vector "
"containing the concatenated list of dof of each convex in `CVids`. Each "
"entry of `IDx` is the position of the corresponding convex point list in "
"`DOFs`. Hence, for example, the list of points of the second convex is "
"DOFs[IDx(2):IDx(3)]."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_from_cvid:12 of
msgid ""
"If `CVids` contains convex #id which do not exist in the mesh, their "
"point list will be empty."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_nodes:1 of
msgid "Get location of basic degrees of freedom."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_nodes:3 of
msgid ""
"Return the list of interpolation points for the specified dof #IDs in "
"`DOFids` (if `DOFids` is omitted, all basic dof are considered)."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_on_region:1 of
msgid ""
"Return the list of basic dof (before the optional reduction) lying on one"
" of the mesh regions listed in `Rs`."
msgstr ""

#: ../docstring getfem.MeshFem.basic_dof_on_region:4
#: getfem.MeshFem.dof_on_region:4 of
msgid ""
"More precisely, this function returns the basic dof whose support is non-"
"null on one of regions whose #ids are listed in `Rs` (note that for "
"boundary regions, some dof nodes may not lie exactly on the boundary, for"
" example the dof of Pk(n,0) lies on the center of the convex, but the "
"base function in not null on the convex border)."
msgstr ""

#: ../docstring getfem.MeshFem.char:1 of
msgid "Output a string description of the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.char:3 of
msgid ""
"By default, it does not include the description of the linked mesh "
"object, except if `opt` is 'with_mesh'."
msgstr ""

#: ../docstring getfem.MeshFem.convex_index:1 of
msgid "Return the list of convexes who have a FEM."
msgstr ""

#: ../docstring getfem.MeshFem.display:1 of
msgid "displays a short summary for a MeshFem object."
msgstr ""

#: ../docstring getfem.MeshFem.dof_from_cv:1 of
msgid "Deprecated function. Use MeshFem.basic_dof_from_cv() instead."
msgstr ""

#: ../docstring getfem.MeshFem.dof_from_cvid:1 of
msgid "Deprecated function. Use MeshFem.basic_dof_from_cvid() instead."
msgstr ""

#: ../docstring getfem.MeshFem.dof_from_im:1 of
msgid ""
"Return a selection of dof who contribute significantly to the mass-matrix"
" that would be computed with `mf` and the integration method `mim`."
msgstr ""

#: ../docstring getfem.MeshFem.dof_from_im:5 of
msgid ""
"`p` represents the dimension on what the integration method operates "
"(default `p = mesh dimension`)."
msgstr ""

#: ../docstring getfem.MeshFem.dof_from_im:8 of
msgid ""
"IMPORTANT: you still have to set a valid integration method on the "
"convexes which are not crosses by the levelset!"
msgstr ""

#: ../docstring getfem.MeshFem.dof_nodes:1 of
msgid "Deprecated function. Use MeshFem.basic_dof_nodes() instead."
msgstr ""

#: ../docstring getfem.MeshFem.dof_on_region:1 of
msgid ""
"Return the list of dof (after the optional reduction) lying on one of the"
" mesh regions listed in `Rs`."
msgstr ""

#: ../docstring getfem.MeshFem.dof_on_region:11 of
msgid ""
"For a reduced mesh_fem a dof is lying on a region if its potential "
"corresponding shape function is nonzero on this region. The extension "
"matrix is used to make the correspondence between basic and reduced dofs."
msgstr ""

#: ../docstring getfem.MeshFem.dof_partition:1 of
msgid "Get the 'dof_partition' array."
msgstr ""

#: ../docstring getfem.MeshFem.dof_partition:3 of
msgid ""
"Return the array which associates an integer (the partition number) to "
"each convex of the MeshFem. By default, it is an all-zero array. The "
"degrees of freedom of each convex of the MeshFem are connected only to "
"the dof of neighbouring convexes which have the same partition number, "
"hence it is possible to create partially discontinuous MeshFem very "
"easily."
msgstr ""

#: ../docstring getfem.MeshFem.eval:1 of
msgid "interpolate an expression on the (lagrangian) MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.eval:3 of
msgid "Examples::"
msgstr ""

#: ../docstring getfem.MeshFem.export_to_dx:1 of
msgid ""
"Synopsis: MeshFem.export_to_dx(self,string filename, ...['as', string "
"mesh_name][,'edges']['serie',string serie_name][,'ascii'][,'append'], U, "
"'name'...)"
msgstr ""

#: ../docstring getfem.MeshFem.export_to_dx:3 of
msgid "Export a MeshFem and some fields to an OpenDX file."
msgstr ""

#: ../docstring getfem.MeshFem.export_to_dx:5 of
msgid ""
"This function will fail if the MeshFem mixes different convex types (i.e."
" quads and triangles), or if OpenDX does not handle a specific element "
"type (i.e. prism connections are not known by OpenDX)."
msgstr ""

#: ../docstring getfem.MeshFem.export_to_dx:9 of
msgid ""
"The FEM will be mapped to order 1 Pk (or Qk) FEMs. If you need to "
"represent high-order FEMs or high-order geometric transformations, you "
"should consider Slice.export_to_dx()."
msgstr ""

#: ../docstring getfem.MeshFem.export_to_pos:1 of
msgid ""
"Synopsis: MeshFem.export_to_pos(self,string filename[, string "
"name][[,MeshFem mf1], mat U1, string nameU1[[,MeshFem mf2], mat U2, "
"string nameU2,...]])"
msgstr ""

#: ../docstring getfem.MeshFem.export_to_pos:3 of
msgid "Export a MeshFem and some fields to a pos file."
msgstr ""

#: ../docstring getfem.MeshFem.export_to_pos:5 of
msgid ""
"The FEM and geometric transformations will be mapped to order 1 "
"isoparametric Pk (or Qk) FEMs (as GMSH does not handle higher order "
"elements)."
msgstr ""

#: ../docstring getfem.MeshFem.export_to_vtk:1 of
msgid ""
"Synopsis: MeshFem.export_to_vtk(self,string filename, ... ['ascii'], U, "
"'name'...)"
msgstr ""

#: ../docstring getfem.MeshFem.export_to_vtk:3 of
msgid "Export a MeshFem and some fields to a vtk file."
msgstr ""

#: ../docstring getfem.MeshFem.export_to_vtk:5 of
msgid ""
"The FEM and geometric transformations will be mapped to order 1 or 2 "
"isoparametric Pk (or Qk) FEMs (as VTK does not handle higher order "
"elements). If you need to represent high-order FEMs or high-order "
"geometric transformations, you should consider Slice.export_to_vtk()."
msgstr ""

#: ../docstring getfem.MeshFem.extend_vector:1 of
msgid "Multiply the provided vector V with the reduction matrix of the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.extension_matrix:1 of
msgid "Return the optional extension matrix."
msgstr ""

#: ../docstring getfem.MeshFem.fem:1 of
msgid "Return a list of FEM used by the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.fem:3 of
msgid ""
"`FEMs` is an array of all Fem objects found in the convexes given in "
"`CVids`. If `CV2F` was supplied as an output argument, it contains, for "
"each convex listed in `CVids`, the index of its correspounding FEM in "
"`FEMs`."
msgstr ""

#: ../docstring getfem.MeshFem.fem:8 of
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have "
"any FEM have their correspounding entry in `CV2F` set to -1."
msgstr ""

#: ../docstring getfem.MeshFem.has_linked_mesh_levelset:1 of
msgid "Is a mesh_fem_level_set or not."
msgstr ""

#: ../docstring getfem.MeshFem.interpolate_convex_data:1 of
msgid ""
"Interpolate data given on each convex of the mesh to the MeshFem dof. The"
" MeshFem has to be lagrangian, and should be discontinuous (typically a "
"FEM_PK(N,0) or FEM_QK(N,0) should be used)."
msgstr ""

#: ../docstring getfem.MeshFem.interpolate_convex_data:5 of
msgid ""
"The last dimension of the input vector Ucv should have Mesh.max_cvid() "
"elements."
msgstr ""

#: ../docstring getfem.MeshFem.interpolate_convex_data:8 of
msgid "Example of use: MeshFem.interpolate_convex_data(Mesh.quality())"
msgstr ""

#: ../docstring getfem.MeshFem.is_equivalent:1 of
msgid "Test if the MeshFem is equivalent."
msgstr ""

#: ../docstring getfem.MeshFem.is_equivalent:3 getfem.MeshFem.is_polynomial:3
#: of
msgid "See MeshFem.is_lagrangian()"
msgstr ""

#: ../docstring getfem.MeshFem.is_lagrangian:1 of
msgid "Test if the MeshFem is Lagrangian."
msgstr ""

#: ../docstring getfem.MeshFem.is_lagrangian:3 of
msgid ""
"Lagrangian means that each base function Phi[i] is such that Phi[i](P[j])"
" = delta(i,j), where P[j] is the dof location of the jth base function, "
"and delta(i,j) = 1 if i==j, else 0."
msgstr ""

#: ../docstring getfem.MeshFem.is_lagrangian:7 of
msgid ""
"If `CVids` is omitted, it returns 1 if all convexes in the mesh are "
"Lagrangian. If `CVids` is used, it returns the convex indices (with "
"respect to `CVids`) which are Lagrangian."
msgstr ""

#: ../docstring getfem.MeshFem.is_polynomial:1 of
msgid "Test if all base functions are polynomials."
msgstr ""

#: ../docstring getfem.MeshFem.is_reduced:1 of
msgid "Return 1 if the optional reduction matrix is applied to the dofs."
msgstr ""

#: ../docstring getfem.MeshFem.linked_mesh:1 of
msgid "Return a reference to the Mesh object linked to `mf`."
msgstr ""

#: ../docstring getfem.MeshFem.linked_mesh_levelset:1 of
msgid "if it is a mesh_fem_level_set gives the linked mesh_level_set."
msgstr ""

#: ../docstring getfem.MeshFem.memsize:1 of
msgid "Return the amount of memory (in bytes) used by the mesh_fem object."
msgstr ""

#: ../docstring getfem.MeshFem.memsize:3 of
msgid "The result does not take into account the linked mesh object."
msgstr ""

#: ../docstring getfem.MeshFem.mesh:1 of
msgid ""
"Return a reference to the Mesh object linked to `mf`. (identical to "
"Mesh.linked_mesh())"
msgstr ""

#: ../docstring getfem.MeshFem.nb_basic_dof:1 of
msgid "Return the number of basic degrees of freedom (dof) of the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.nbdof:1 of
msgid "Return the number of degrees of freedom (dof) of the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.non_conformal_basic_dof:1 of
msgid "Return partially linked degrees of freedom."
msgstr ""

#: ../docstring getfem.MeshFem.non_conformal_basic_dof:3 of
msgid ""
"Return the basic dof located on the border of a convex and which belong "
"to only one convex, except the ones which are located on the border of "
"the mesh.  For example, if the convex 'a' and 'b' share a common face, "
"'a' has a P1 FEM, and 'b' has a P2 FEM, then the basic dof on the middle "
"of the face will be returned by this function (this can be useful when "
"searching the interfaces between classical FEM and hierarchical FEM)."
msgstr ""

#: ../docstring getfem.MeshFem.non_conformal_dof:1 of
msgid "Deprecated function. Use MeshFem.non_conformal_basic_dof() instead."
msgstr ""

#: ../docstring getfem.MeshFem.qdim:1 of
msgid "Return the dimension Q of the field interpolated by the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.qdim:3 of
msgid "By default, Q=1 (scalar field). This has an impact on the dof numbering."
msgstr ""

#: ../docstring getfem.MeshFem.reduce_meshfem:1 of
msgid ""
"Set reduction mesh fem This function selects the degrees of freedom of "
"the finite element method by selecting a set of independent vectors of "
"the matrix RM. The numer of columns of RM should corresponds to the "
"number of degrees of freedom of the finite element method."
msgstr ""

#: ../docstring getfem.MeshFem.reduce_vector:1 of
msgid "Multiply the provided vector V with the extension matrix of the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.reduction:1 of
msgid "Set or unset the use of the reduction/extension matrices."
msgstr ""

#: ../docstring getfem.MeshFem.reduction_matrices:1 of
msgid "Set the reduction and extension matrices and valid their use."
msgstr ""

#: ../docstring getfem.MeshFem.reduction_matrix:1 of
msgid "Return the optional reduction matrix."
msgstr ""

#: ../docstring getfem.MeshFem.save:1 of
msgid ""
"Save a MeshFem in a text file (and optionally its linked mesh object if "
"`opt` is the string 'with_mesh')."
msgstr ""

#: ../docstring getfem.MeshFem.set_classical_discontinuous_fem:1 of
msgid ""
"Synopsis: MeshFem.set_classical_discontinuous_fem(self, int k[[, "
"'complete'], @tscalar alpha[, ivec CVIDX]])"
msgstr ""

#: ../docstring getfem.MeshFem.set_classical_discontinuous_fem:3 of
msgid "Assigns a classical (Lagrange polynomial) discontinuous fem of order k."
msgstr ""

#: ../docstring getfem.MeshFem.set_classical_discontinuous_fem:5 of
msgid ""
"Similar to MeshFem.set_classical_fem() except that FEM_PK_DISCONTINUOUS "
"is used. Param `alpha` the node inset, :math:`0 \\leq alpha < 1`, where 0"
" implies usual dof nodes, greater values move the nodes toward the center"
" of gravity, and 1 means that all degrees of freedom collapse on the "
"center of gravity. The option 'complete' requests complete Langrange "
"polynomial elements, even if the element geometric transformation is an "
"incomplete one (e.g. 8-node quadrilateral or 20-node hexahedral)."
msgstr ""

#: ../docstring getfem.MeshFem.set_classical_fem:1 of
msgid ""
"Synopsis: MeshFem.set_classical_fem(self, int k[[, 'complete'], ivec "
"CVids])"
msgstr ""

#: ../docstring getfem.MeshFem.set_classical_fem:3 of
msgid ""
"Assign a classical (Lagrange polynomial) fem of order `k` to the MeshFem."
" The option 'complete' requests complete Langrange polynomial elements, "
"even if the element geometric transformation is an incomplete one (e.g. "
"8-node quadrilateral or 20-node hexahedral)."
msgstr ""

#: ../docstring getfem.MeshFem.set_classical_fem:8 of
msgid "Uses FEM_PK for simplexes, FEM_QK for parallelepipeds etc."
msgstr ""

#: ../docstring getfem.MeshFem.set_dof_partition:1 of
msgid "Change the 'dof_partition' array."
msgstr ""

#: ../docstring getfem.MeshFem.set_dof_partition:3 of
msgid ""
"`DOFP` is a vector holding a integer value for each convex of the "
"MeshFem. See MeshFem.dof_partition() for a description of \"dof "
"partition\"."
msgstr ""

#: ../docstring getfem.MeshFem.set_enriched_dofs:1 of
msgid ""
"For a MeshFem product object only. Set te enriched dofs and adapt the "
"MeshFem product."
msgstr ""

#: ../docstring getfem.MeshFem.set_fem:1 of
msgid "Set the Finite Element Method."
msgstr ""

#: ../docstring getfem.MeshFem.set_fem:3 of
msgid ""
"Assign a FEM `f` to all convexes whose #ids are listed in `CVids`. If "
"`CVids` is not given, the integration is assigned to all convexes."
msgstr ""

#: ../docstring getfem.MeshFem.set_fem:6 of
msgid "See the help of Fem to obtain a list of available FEM methods."
msgstr ""

#: ../docstring getfem.MeshFem.set_partial:1 of
msgid ""
"Can only be applied to a partial MeshFem. Change the subset of the "
"degrees of freedom of `mf`."
msgstr ""

#: ../docstring getfem.MeshFem.set_qdim:1 of
msgid "Change the `Q` dimension of the field that is interpolated by the MeshFem."
msgstr ""

#: ../docstring getfem.MeshFem.set_qdim:3 of
msgid ""
"`Q = 1` means that the MeshFem describes a scalar field, `Q = N` means "
"that the MeshFem describes a vector field of dimension N."
msgstr ""

