# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-05 01:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../source/python/cmdref_Mesh.rst:8
msgid "Mesh"
msgstr ""

#: ../docstring getfem.Mesh:1 of
msgid "GeFEM Mesh object"
msgstr ""

#: ../docstring getfem.Mesh:3 of
msgid ""
"This object is able to store any element in any dimension even if you mix"
" elements with different dimensions."
msgstr ""

#: ../docstring getfem.Mesh:9 of
msgid "General constructor for Mesh objects"
msgstr ""

#: ../docstring getfem.Mesh:11 of
msgid "``M = Mesh('empty', int dim)`` Create a new empty mesh."
msgstr ""

#: ../docstring getfem.Mesh:14 of
msgid ""
"``M = Mesh('cartesian', vec X[, vec Y[, vec Z,..]])`` Build quickly a "
"regular mesh of quadrangles, cubes, etc."
msgstr ""

#: ../docstring getfem.Mesh:17 of
msgid ""
"``M = Mesh('pyramidal', vec X[, vec Y[, vec Z,..]])`` Build quickly a "
"regular mesh of pyramids, etc."
msgstr ""

#: ../docstring getfem.Mesh:20 of
msgid ""
"``M = Mesh('cartesian Q1', vec X, vec Y[, vec Z,..])`` Build quickly a "
"regular mesh of quadrangles, cubes, etc. with Q1 elements."
msgstr ""

#: ../docstring getfem.Mesh:24 of
msgid ""
"``M = Mesh('triangles grid', vec X, vec Y)`` Build quickly a regular mesh"
" of triangles."
msgstr ""

#: ../docstring getfem.Mesh:27 of
msgid ""
"This is a very limited and somehow deprecated function (See also "
"``Mesh('ptND')``, ``Mesh('regular simplices')`` and "
"``Mesh('cartesian')``)."
msgstr ""

#: ../docstring getfem.Mesh:31 of
msgid ""
"``M = Mesh('regular simplices', vec X[, vec Y[, vec Z,...]]['degree', int"
" k]['noised'])`` Mesh a n-dimensional parallelepiped with simplices "
"(triangles, tetrahedrons etc) ."
msgstr ""

#: ../docstring getfem.Mesh:35 of
msgid ""
"The optional degree may be used to build meshes with non linear geometric"
" transformations."
msgstr ""

#: ../docstring getfem.Mesh:38 of
msgid ""
"``M = Mesh('curved', Mesh m, vec F)`` Build a curved (n+1)-dimensions "
"mesh from a n-dimensions mesh `m`."
msgstr ""

#: ../docstring getfem.Mesh:41 of
msgid ""
"The points of the new mesh have one additional coordinate, given by the "
"vector `F`. This can be used to obtain meshes for shells. `m` may be a "
"MeshFem object, in that case its linked mesh will be used."
msgstr ""

#: ../docstring getfem.Mesh:45 of
msgid ""
"``M = Mesh('prismatic', Mesh m, int nl[, int degree])`` Extrude a "
"prismatic Mesh `M` from a Mesh `m`."
msgstr ""

#: ../docstring getfem.Mesh:48 of
msgid ""
"In the additional dimension there are `nl` layers of elements distributed"
" from ``0`` to ``1``. If the optional parameter `degree` is provided with"
" a value greater than the default value of ``1``, a non-linear "
"transformation of corresponding degree is considered in the extrusion "
"direction."
msgstr ""

#: ../docstring getfem.Mesh:54 of
msgid ""
"``M = Mesh('pt2D', mat P, imat T[, int n])`` Build a mesh from a 2D "
"triangulation."
msgstr ""

#: ../docstring getfem.Mesh:57 of
msgid ""
"Each column of `P` contains a point coordinate, and each column of `T` "
"contains the point indices of a triangle. `n` is optional and is a zone "
"number. If `n` is specified then only the zone number `n` is converted "
"(in that case, `T` is expected to have 4 rows, the fourth containing "
"these zone numbers)."
msgstr ""

#: ../docstring getfem.Mesh:65 of
msgid ""
"``M = Mesh('ptND', mat P, imat T)`` Build a mesh from a n-dimensional "
"\"triangulation\"."
msgstr ""

#: ../docstring getfem.Mesh:68 of
msgid ""
"Similar function to 'pt2D', for building simplexes meshes from a "
"triangulation given in `T`, and a list of points given in `P`. The "
"dimension of the mesh will be the number of rows of `P`, and the "
"dimension of the simplexes will be the number of rows of `T`."
msgstr ""

#: ../docstring getfem.Mesh:73 of
msgid ""
"``M = Mesh('load', string filename)`` Load a mesh from a getfem++ ascii "
"mesh file."
msgstr ""

#: ../docstring getfem.Mesh:76 of
msgid "See also ``Mesh.save(string filename)``."
msgstr ""

#: ../docstring getfem.Mesh:78 of
msgid ""
"``M = Mesh('from string', string s)`` Load a mesh from a string "
"description."
msgstr ""

#: ../docstring getfem.Mesh:81 of
msgid "For example, a string returned by ``Mesh.char()``."
msgstr ""

#: ../docstring getfem.Mesh:83 of
msgid "``M = Mesh('import', string format, string filename)`` Import a mesh."
msgstr ""

#: ../docstring getfem.Mesh:86 of
msgid "`format` may be:"
msgstr ""

#: ../docstring getfem.Mesh:88 of
msgid "'gmsh' for a mesh created with `Gmsh`"
msgstr ""

#: ../docstring getfem.Mesh:89 of
msgid "'gid' for a mesh created with `GiD`"
msgstr ""

#: ../docstring getfem.Mesh:90 of
msgid "'cdb' for a mesh created with `ANSYS`"
msgstr ""

#: ../docstring getfem.Mesh:91 of
msgid "'am_fmt' for a mesh created with `EMC2`"
msgstr ""

#: ../docstring getfem.Mesh:93 of
msgid "``M = Mesh('clone', Mesh m2)`` Create a copy of a mesh."
msgstr ""

#: ../docstring getfem.Mesh:96 of
msgid ""
"``M = Mesh('generate', MesherObject mo, scalar h[, int K = 1[, mat "
"vertices]])`` Call the experimental mesher of Getfem on the geometry "
"represented by `mo`. please control the conformity of the produced mesh. "
"You can help the mesher by adding a priori vertices in the array "
"`vertices` which should be of size ``n x m`` where ``n`` n is the "
"dimension of the mesh and ``m`` the number of points. `h` is approximate "
"diameter of the elements. `K` is the degree of the mesh ( > 1 for curved "
"boundaries).  The mesher try to optimize the quality of the elements. "
"This operation may be time consuming. Note that if the mesh generation "
"fails, because of some random procedure used, it can be run again since "
"it will not give necessarily the same result due to random procedures "
"used. The messages send to the console by the mesh generation can be "
"deactivated using `gf_util('trace level', 2)`. More information can be "
"obtained by `gf_util('trace level', 4)`. See ``MesherObject`` to "
"manipulate geometric primitives in order to describe the geometry."
msgstr ""

#: ../docstring getfem.Mesh.add_convex:1 of
msgid "Add a new convex into the mesh."
msgstr ""

#: ../docstring getfem.Mesh.add_convex:3 of
msgid ""
"The convex structure (triangle, prism,...) is given by `GT` (obtained "
"with GeoTrans('...')), and its points are given by the columns of `PTS`. "
"On return, `CVIDs` contains the convex #ids. `PTS` might be a "
"3-dimensional array in order to insert more than one convex (or a two "
"dimensional array correctly shaped according to Fortran ordering)."
msgstr ""

#: ../docstring getfem.Mesh.add_point:1 of
msgid "Insert new points in the mesh and return their #ids."
msgstr ""

#: ../docstring getfem.Mesh.add_point:3 of
msgid ""
"`PTS` should be an ``nxm`` matrix , where ``n`` is the mesh dimension, "
"and ``m`` is the number of points that will be added to the mesh. On "
"output, `PIDs` contains the point #ids of these new points."
msgstr ""

#: ../docstring getfem.Mesh.add_point:8 of
msgid ""
"Remark: if some points are already part of the mesh (with a small "
"tolerance of approximately ``1e-8``), they won't be inserted again, and "
"`PIDs` will contain the previously assigned #ids of these points."
msgstr ""

#: ../docstring getfem.Mesh.adjacent_face:1 of
msgid ""
"Return convex face of the neighbour element if it exists. If the convex "
"have more than one neighbour relatively to the face ``f`` (think to bar "
"elements in 3D for instance), return the first face found."
msgstr ""

#: ../docstring getfem.Mesh.all_faces:1 of
msgid ""
"Return the set of faces of the in CVIDs (in all the mesh if CVIDs is "
"omitted). Note that the face shared by two neighbour elements will be "
"represented twice."
msgstr ""

#: ../docstring getfem.Mesh.boundaries:1 of
msgid "DEPRECATED FUNCTION. Use 'regions' instead."
msgstr ""

#: ../docstring getfem.Mesh.boundary:1 getfem.Mesh.set_boundary:1 of
msgid "DEPRECATED FUNCTION. Use 'region' instead."
msgstr ""

#: ../docstring getfem.Mesh.char:1 of
msgid "Output a string description of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.convex_area:1 of
msgid "Return an estimate of the area of each convex."
msgstr ""

#: ../docstring getfem.Mesh.convex_radius:1 of
msgid "Return an estimate of the radius of each convex."
msgstr ""

#: ../docstring getfem.Mesh.convexes_in_box:1 of
msgid ""
"Return the set of convexes lying entirely within the box defined by the "
"corner points `pmin` and `pmax`."
msgstr ""

#: ../docstring getfem.Mesh.convexes_in_box:3 of
msgid ""
"The output `CVIDs` is a two-rows matrix, the first row lists convex #ids,"
" and the second one lists face numbers (local number in the convex). If "
"`CVIDs` is given, it returns portion of the boundary of the convex set "
"defined by the #ids listed in `CVIDs`."
msgstr ""

#: ../docstring getfem.Mesh.curved_edges:1 getfem.Mesh.edges:3 of
msgid "[OBSOLETE FUNCTION! will be removed in a future release]"
msgstr ""

#: ../docstring getfem.Mesh.curved_edges:3 of
msgid ""
"More sophisticated version of Mesh.edges() designed for curved elements. "
"This one will return N (N>=2) points of the (curved) edges. With N==2, "
"this is equivalent to Mesh.edges(). Since the points are no more always "
"part of the mesh, their coordinates are returned instead of points "
"number, in the array E which is a [ mesh_dim x 2 x nb_edges ] array.  If "
"the optional output argument C is specified, it will contain the convex "
"number associated with each edge."
msgstr ""

#: ../docstring getfem.Mesh.cvid:1 of
msgid "Return the list of all convex #id."
msgstr ""

#: ../docstring getfem.Mesh.cvid:3 of
msgid ""
"Note that their numbering is not supposed to be contiguous from 0 to "
"Mesh.nbcvs()-1, especially if some points have been removed from the "
"mesh. You can use Mesh.optimize_structure() to enforce a contiguous "
"numbering."
msgstr ""

#: ../docstring getfem.Mesh.cvid_from_pid:1 of
msgid "Search convex #ids related with the point #ids given in `PIDs`."
msgstr ""

#: ../docstring getfem.Mesh.cvid_from_pid:3 of
msgid ""
"If `share=False`, search convex whose vertex #ids are in `PIDs`. If "
"`share=True`, search convex #ids that share the point #ids given in "
"`PIDs`. `CVIDs` is a  vector (possibly empty)."
msgstr ""

#: ../docstring getfem.Mesh.cvstruct:1 of
msgid "Return an array of the convex structures."
msgstr ""

#: ../docstring getfem.Mesh.cvstruct:3 of
msgid ""
"If `CVIDs` is not given, all convexes are considered. Each convex "
"structure is listed once in `S`, and `CV2S` maps the convexes indice in "
"`CVIDs` to the indice of its structure in `S`."
msgstr ""

#: ../docstring getfem.Mesh.del_convex:1 of
msgid "Remove one or more convexes from the mesh."
msgstr ""

#: ../docstring getfem.Mesh.del_convex:3 of
msgid ""
"`CVIDs` should contain the convexes #ids, such as the ones returned by "
"the 'add convex' command."
msgstr ""

#: ../docstring getfem.Mesh.del_convex_of_dim:1 of
msgid "Remove all convexes of dimension listed in `DIMs`."
msgstr ""

#: ../docstring getfem.Mesh.del_convex_of_dim:3 of
msgid ""
"For example; ``Mesh.del_convex_of_dim([1,2])`` remove all line segments, "
"triangles and quadrangles."
msgstr ""

#: ../docstring getfem.Mesh.del_point:1 of
msgid "Removes one or more points from the mesh."
msgstr ""

#: ../docstring getfem.Mesh.del_point:3 of
msgid ""
"`PIDs` should contain the point #ids, such as the one returned by the "
"'add point' command."
msgstr ""

#: ../docstring getfem.Mesh.delete_boundary:1 of
msgid "DEPRECATED FUNCTION. Use 'delete region' instead."
msgstr ""

#: ../docstring getfem.Mesh.delete_region:1 of
msgid "Remove the regions whose #ids are listed in `RIDs`"
msgstr ""

#: ../docstring getfem.Mesh.dim:1 of
msgid "Get the dimension of the mesh (2 for a 2D mesh, etc)."
msgstr ""

#: ../docstring getfem.Mesh.display:1 of
msgid "displays a short summary for a Mesh object."
msgstr ""

#: ../docstring getfem.Mesh.edges:1 of
msgid "Synopsis: [E,C] = Mesh.edges(self [, CVLST][, 'merge'])"
msgstr ""

#: ../docstring getfem.Mesh.edges:5 of
msgid ""
"Return the list of edges of mesh M for the convexes listed in the row "
"vector CVLST. E is a 2 x nb_edges matrix containing point indices. If "
"CVLST is omitted, then the edges of all convexes are returned. If CVLST "
"has two rows then the first row is supposed to contain convex numbers, "
"and the second face numbers, of which the edges will be returned.  If "
"'merge' is indicated, all common edges of convexes are merged in a single"
" edge.  If the optional output argument C is specified, it will contain "
"the convex number associated with each edge."
msgstr ""

#: ../docstring getfem.Mesh.export_to_dx:1 of
msgid ""
"Synopsis: Mesh.export_to_dx(self, string filename, ... "
"[,'ascii'][,'append'][,'as',string name,[,'serie',string "
"serie_name]][,'edges'])"
msgstr ""

#: ../docstring getfem.Mesh.export_to_dx:3 of
msgid "Exports a mesh to an OpenDX file."
msgstr ""

#: ../docstring getfem.Mesh.export_to_dx:5 of
msgid "See also MeshFem.export_to_dx(), Slice.export_to_dx()."
msgstr ""

#: ../docstring getfem.Mesh.export_to_pos:1 of
msgid "Exports a mesh to a POS file ."
msgstr ""

#: ../docstring getfem.Mesh.export_to_pos:3 of
msgid "See also MeshFem.export_to_pos(), Slice.export_to_pos()."
msgstr ""

#: ../docstring getfem.Mesh.export_to_vtk:1 of
msgid ""
"Synopsis: Mesh.export_to_vtk(self, string filename, ... "
"[,'ascii'][,'quality'])"
msgstr ""

#: ../docstring getfem.Mesh.export_to_vtk:3 of
msgid "Exports a mesh to a VTK file ."
msgstr ""

#: ../docstring getfem.Mesh.export_to_vtk:5 of
msgid ""
"If 'quality' is specified, an estimation of the quality of each convex "
"will be written to the file."
msgstr ""

#: ../docstring getfem.Mesh.export_to_vtk:8 of
msgid "See also MeshFem.export_to_vtk(), Slice.export_to_vtk()."
msgstr ""

#: ../docstring getfem.Mesh.extend_region:1 of
msgid ""
"Extends the region identified by the region number `rnum` to include the "
"set of convexes or/and convex faces provided in the matrix `CVFIDs`, see "
"also ``Mesh.(set region)``."
msgstr ""

#: ../docstring getfem.Mesh.faces_from_cvid:1 of
msgid "Synopsis: CVFIDs = Mesh.faces_from_cvid(self[, ivec CVIDs][, 'merge'])"
msgstr ""

#: ../docstring getfem.Mesh.faces_from_cvid:3 of
msgid "Return a list of convex faces from a list of convex #id."
msgstr ""

#: ../docstring getfem.Mesh.faces_from_cvid:5 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers (local number in the convex). If `CVIDs` is not"
" given, all convexes are considered. The optional argument 'merge' merges"
" faces shared by the convex of `CVIDs`."
msgstr ""

#: ../docstring getfem.Mesh.faces_from_pid:1 of
msgid "Return the convex faces whose vertex #ids are in `PIDs`."
msgstr ""

#: ../docstring getfem.Mesh.faces_from_pid:3 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers (local number in the convex). For a convex face"
" to be returned, EACH of its points have to be listed in `PIDs`."
msgstr ""

#: ../docstring getfem.Mesh.geotrans:1 of
msgid "Returns an array of the geometric transformations."
msgstr ""

#: ../docstring getfem.Mesh.geotrans:3 of
msgid "See also Mesh.cvstruct()."
msgstr ""

#: ../docstring getfem.Mesh.inner_faces:1 of
msgid ""
"Return the set of faces shared at least by two elements in CVIDs. Each "
"face is represented only once and is arbitrarily chosen between the two "
"neighbour elements."
msgstr ""

#: ../docstring getfem.Mesh.max_cvid:1 of
msgid "Return the maximum #id of all convexes in the mesh (see 'max pid')."
msgstr ""

#: ../docstring getfem.Mesh.max_pid:1 of
msgid "Return the maximum #id of all points in the mesh (see 'max cvid')."
msgstr ""

#: ../docstring getfem.Mesh.memsize:1 of
msgid "Return the amount of memory (in bytes) used by the mesh."
msgstr ""

#: ../docstring getfem.Mesh.merge:1 of
msgid "Merge with the Mesh `m2`."
msgstr ""

#: ../docstring getfem.Mesh.merge:3 of
msgid ""
"Overlapping points, within a tolerance radius `tol`, will not be "
"duplicated. If `m2` is a MeshFem object, its linked mesh will be used."
msgstr ""

#: ../docstring getfem.Mesh.nbcvs:1 of
msgid "Get the number of convexes of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.nbpts:1 of
msgid "Get the number of points of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.normal_of_face:1 of
msgid ""
"Evaluates the normal of convex `cv`, face `f` at the `nfpt` point of the "
"face."
msgstr ""

#: ../docstring getfem.Mesh.normal_of_face:3 of
msgid ""
"If `nfpt` is not specified, then the normal is evaluated at each "
"geometrical node of the face."
msgstr ""

#: ../docstring getfem.Mesh.normal_of_faces:1 of
msgid "Evaluates (at face centers) the normals of convexes."
msgstr ""

#: ../docstring getfem.Mesh.normal_of_faces:3 of
msgid ""
"`CVFIDs` is supposed a two-rows matrix, the first row lists convex #ids, "
"and the second lists face numbers (local number in the convex)."
msgstr ""

#: ../docstring getfem.Mesh.optimize_structure:1 of
msgid "Reset point and convex numbering."
msgstr ""

#: ../docstring getfem.Mesh.optimize_structure:3 of
msgid ""
"After optimisation, the points (resp. convexes) will be consecutively "
"numbered from ``0`` to ``Mesh.max_pid()-1`` (resp. "
"``Mesh.max_cvid()-1``)."
msgstr ""

#: ../docstring getfem.Mesh.orphaned_pid:1 of
msgid "Search point #id which are not linked to a convex."
msgstr ""

#: ../docstring getfem.Mesh.outer_faces:1 of
msgid "Return the set of faces not shared by two elements."
msgstr ""

#: ../docstring getfem.Mesh.outer_faces:3 of
msgid ""
"The output `CVFIDs` is a two-rows matrix, the first row lists convex "
"#ids, and the second one lists face numbers (local number in the convex)."
" If `CVIDs` is not given, all convexes are considered, and it basically "
"returns the mesh boundary. If `CVIDs` is given, it returns the boundary "
"of the convex set whose #ids are listed in `CVIDs`."
msgstr ""

#: ../docstring getfem.Mesh.outer_faces_in_box:1 of
msgid ""
"Return the set of faces not shared by two convexes and lying within the "
"box defined by the corner points `pmin` and `pmax`."
msgstr ""

#: ../docstring getfem.Mesh.outer_faces_in_box:3
#: getfem.Mesh.outer_faces_with_direction:3 of
msgid ""
"The output `CVFIDs` is a two-rows matrix, the first row lists convex "
"#ids, and the second one lists face numbers (local number in the convex)."
" If `CVIDs` is given, it returns portion of the boundary of the convex "
"set defined by the #ids listed in `CVIDs`."
msgstr ""

#: ../docstring getfem.Mesh.outer_faces_with_direction:1 of
msgid ""
"Return the set of faces not shared by two convexes and with a mean "
"outward vector lying within an angle `angle` (in radians) from vector "
"`v`."
msgstr ""

#: ../docstring getfem.Mesh.pid:1 of
msgid "Return the list of points #id of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.pid:3 of
msgid ""
"Note that their numbering is not supposed to be contiguous from 0 to "
"Mesh.nbpts()-1, especially if some points have been removed from the "
"mesh. You can use Mesh.optimize_structure() to enforce a contiguous "
"numbering."
msgstr ""

#: ../docstring getfem.Mesh.pid_from_coords:1 of
msgid "Search point #id whose coordinates are listed in `PTS`."
msgstr ""

#: ../docstring getfem.Mesh.pid_from_coords:3 of
msgid ""
"`PTS` is an array containing a list of point coordinates. On return, "
"`PIDs` is a vector containing points #id for each point found in `eps` "
"range, and -1 for those which where not found in the mesh."
msgstr ""

#: ../docstring getfem.Mesh.pid_from_cvid:1 of
msgid "Return the points attached to each convex of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.pid_from_cvid:3 of
msgid ""
"If `CVIDs` is omitted, all the convexes will be considered (equivalent to"
" `CVIDs = Mesh.max_cvid()`). `IDx` is a vector, length(IDx) = "
"length(CVIDs)+1. `Pid` is a vector containing the concatenated list of "
"#id of points of each convex in `CVIDs`. Each entry of `IDx` is the "
"position of the corresponding convex point list in `Pid`. Hence, for "
"example, the list of #id of points of the second convex is "
"Pid[IDx(2):IDx(3)]."
msgstr ""

#: ../docstring getfem.Mesh.pid_from_cvid:12 getfem.Mesh.pts_from_cvid:12 of
msgid ""
"If `CVIDs` contains convex #id which do not exist in the mesh, their "
"point list will be empty."
msgstr ""

#: ../docstring getfem.Mesh.pid_in_cvids:1 of
msgid "Search point #id listed in `CVIDs`."
msgstr ""

#: ../docstring getfem.Mesh.pid_in_cvids:3 getfem.Mesh.pid_in_regions:3 of
msgid "`PIDs` is a vector containing points #id."
msgstr ""

#: ../docstring getfem.Mesh.pid_in_faces:1 of
msgid "Search point #id listed in `CVFIDs`."
msgstr ""

#: ../docstring getfem.Mesh.pid_in_faces:3 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers. On return, `PIDs` is a vector containing "
"points #id."
msgstr ""

#: ../docstring getfem.Mesh.pid_in_regions:1 of
msgid "Search point #id listed in `RIDs`."
msgstr ""

#: ../docstring getfem.Mesh.pts:1 of
msgid "Return the list of point coordinates of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.pts:3 of
msgid ""
"Each column of the returned matrix contains the coordinates of one point."
" If the optional argument `PIDs` was given, only the points whose #id is "
"listed in this vector are returned. Otherwise, the returned matrix will "
"have Mesh.max_pid() columns, which might be greater than Mesh.nbpts() (if"
" some points of the mesh have been destroyed and no call to "
"Mesh.optimize_structure() have been issued). The columns corresponding to"
" deleted points will be filled with NaN. You can use Mesh.pid() to filter"
" such invalid points."
msgstr ""

#: ../docstring getfem.Mesh.pts_from_cvid:1 of
msgid "Search point listed in `CVID`."
msgstr ""

#: ../docstring getfem.Mesh.pts_from_cvid:3 of
msgid ""
"If `CVIDs` is omitted, all the convexes will be considered (equivalent to"
" `CVIDs = Mesh.max_cvid()`). `IDx` is a vector, length(IDx) = "
"length(CVIDs)+1. `Pts` is a vector containing the concatenated list of "
"points of each convex in `CVIDs`. Each entry of `IDx` is the position of "
"the corresponding convex point list in `Pts`. Hence, for example, the "
"list of points of the second convex is Pts[:,IDx[2]:IDx[3]]."
msgstr ""

#: ../docstring getfem.Mesh.quality:1 of
msgid ""
"Return an estimation of the quality of each convex (:math:`0 \\leq Q "
"\\leq 1`)."
msgstr ""

#: ../docstring getfem.Mesh.refine:1 of
msgid "Use a Bank strategy for mesh refinement."
msgstr ""

#: ../docstring getfem.Mesh.refine:3 of
msgid ""
"If `CVIDs` is not given, the whole mesh is refined. Note that the "
"regions, and the finite element methods and integration methods of the "
"MeshFem and MeshIm objects linked to this mesh will be automagically "
"refined."
msgstr ""

#: ../docstring getfem.Mesh.region:1 of
msgid "Return the list of convexes/faces on the regions `RIDs`."
msgstr ""

#: ../docstring getfem.Mesh.region:3 of
msgid ""
"`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the "
"second lists face numbers (local number in the convex). (and -1 when the "
"whole convex is in the regions)."
msgstr ""

#: ../docstring getfem.Mesh.region_intersect:1 of
msgid ""
"Replace the region number `r1` with its intersection with region number "
"`r2`."
msgstr ""

#: ../docstring getfem.Mesh.region_merge:1 of
msgid "Merge region number `r2` into region number `r1`."
msgstr ""

#: ../docstring getfem.Mesh.region_subtract:1 of
msgid ""
"Replace the region number `r1` with its difference with region number "
"`r2`."
msgstr ""

#: ../docstring getfem.Mesh.regions:1 of
msgid "Return the list of valid regions stored in the mesh."
msgstr ""

#: ../docstring getfem.Mesh.save:1 of
msgid "Save the mesh object to an ascii file."
msgstr ""

#: ../docstring getfem.Mesh.save:3 of
msgid "This mesh can be restored with Mesh('load', filename)."
msgstr ""

#: ../docstring getfem.Mesh.set_pts:1 of
msgid "Replace the coordinates of the mesh points with those given in `PTS`."
msgstr ""

#: ../docstring getfem.Mesh.set_region:1 of
msgid ""
"Assigns the region number `rnum` to the set of convexes or/and convex "
"faces provided in the matrix `CVFIDs`."
msgstr ""

#: ../docstring getfem.Mesh.set_region:4 of
msgid ""
"The first row of `CVFIDs` contains convex #ids, and the second row "
"contains a face number in the convex (or ``-1`` for the whole convex "
"(regions are usually used to store a list of convex faces, but you may "
"also use them to store a list of convexes)."
msgstr ""

#: ../docstring getfem.Mesh.set_region:9 of
msgid ""
"If a vector is provided (or a one row matrix) the region will represent "
"the corresponding set of convex."
msgstr ""

#: ../docstring getfem.Mesh.transform:1 of
msgid "Applies the matrix `T` to each point of the mesh."
msgstr ""

#: ../docstring getfem.Mesh.transform:3 of
msgid ""
"Note that `T` is not required to be a ``NxN`` matrix (with ``N = "
"Mesh.dim()``). Hence it is possible to transform a 2D mesh into a 3D one "
"(and reciprocally)."
msgstr ""

#: ../docstring getfem.Mesh.translate:1 of
msgid "Translates each point of the mesh from `V`."
msgstr ""

#: ../docstring getfem.Mesh.triangulated_surface:1 of
msgid "[DEPRECATED FUNCTION! will be removed in a future release]"
msgstr ""

#: ../docstring getfem.Mesh.triangulated_surface:3 of
msgid ""
"Similar function to Mesh.curved_edges() : split (if necessary, i.e. if "
"the geometric transformation if non-linear) each face into sub-triangles "
"and return their coordinates in T (see also gf_compute('eval on P1 tri "
"mesh'))"
msgstr ""

