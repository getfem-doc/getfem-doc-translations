# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-03 01:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/scilab/cmdref_gf_compute.rst:8
msgid "gf_compute"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:10
msgid "**Synopsis**"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:30
msgid "**Description :**"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:34
msgid "Various computations involving the solution U to a finite element problem."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:37
msgid "**Command list :**"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:41
msgid "``n = gf_compute(mesh_fem MF, vec U, 'L2 norm', mesh_im mim[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:43
msgid "Compute the L2 norm of the (real or complex) field <literal>U</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:45
#: ../source/scilab/cmdref_gf_compute.rst:53
#: ../source/scilab/cmdref_gf_compute.rst:61
#: ../source/scilab/cmdref_gf_compute.rst:69
#: ../source/scilab/cmdref_gf_compute.rst:77
#: ../source/scilab/cmdref_gf_compute.rst:85
#: ../source/scilab/cmdref_gf_compute.rst:93
msgid "If <literal>CVids</literal> is given, the norm will be computed only on the listed elements."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:49
msgid "``n = gf_compute(mesh_fem MF, vec U, 'L2 dist', mesh_im mim, mesh_fem mf2, vec U2[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:51
msgid "Compute the L2 distance between <literal>U</literal> and <literal>U2</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:57
msgid "``n = gf_compute(mesh_fem MF, vec U, 'H1 semi norm', mesh_im mim[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:59
msgid "Compute the L2 norm of grad(<literal>U</literal>)."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:65
msgid "``n = gf_compute(mesh_fem MF, vec U, 'H1 semi dist', mesh_im mim, mesh_fem mf2, vec U2[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:67
msgid "Compute the semi H1 distance between <literal>U</literal> and <literal>U2</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:73
msgid "``n = gf_compute(mesh_fem MF, vec U, 'H1 norm', mesh_im mim[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:75
msgid "Compute the H1 norm of <literal>U</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:81
msgid "``n = gf_compute(mesh_fem MF, vec U, 'H2 semi norm', mesh_im mim[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:83
msgid "Compute the L2 norm of D^2(<literal>U</literal>)."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:89
msgid "``n = gf_compute(mesh_fem MF, vec U, 'H2 norm', mesh_im mim[, mat CVids])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:91
msgid "Compute the H2 norm of <literal>U</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:97
msgid "``DU = gf_compute(mesh_fem MF, vec U, 'gradient', mesh_fem mf_du)``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:99
msgid "Compute the gradient of the field <literal>U</literal> defined on mesh_fem <literal>mf_du</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:101
msgid "The gradient is interpolated on the mesh_fem <literal>mf_du</literal>, and returned in <literal>DU</literal>. For example, if <literal>U</literal> is defined on a P2 mesh_fem, <literal>DU</literal> should be evaluated on a P1-discontinuous mesh_fem. <literal>mf</literal> and <literal>mf_du</literal> should share the same mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:106
msgid "<literal>U</literal> may have any number of dimensions (i.e. this function is not restricted to the gradient of scalar fields, but may also be used for tensor fields). However the last dimension of <literal>U</literal> has to be equal to the number of dof of <literal>mf</literal>. For example, if <literal>U</literal> is a [3x3xNmf] array (where Nmf is the number of dof of <literal>mf</literal>), <literal>DU</literal> will be a [Nx3x3[xQ]xNmf_du] array, where N is the dimension of the mesh, Nmf_du is the number of dof of <literal>mf_du</literal>, and the optional Q dimension is inserted if <literal>Qdim_mf != Qdim_mf_du</literal>, where Qdim_mf is the Qdim of <literal>mf</literal> and Qdim_mf_du is the Qdim of <literal>mf_du</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:117
msgid "``HU = gf_compute(mesh_fem MF, vec U, 'hessian', mesh_fem mf_h)``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:119
msgid "Compute the hessian of the field <literal>U</literal> defined on mesh_fem <literal>mf_h</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:121
msgid "See also gf_compute('gradient', mesh_fem mf_du)."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:124
msgid "``UP = gf_compute(mesh_fem MF, vec U, 'eval on triangulated surface', int Nrefine, [vec CVLIST])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:126
msgid "[OBSOLETE FUNCTION! will be removed in a future release] Utility function designed for 2D triangular meshes : returns a list of triangles coordinates with interpolated U values. This can be used for the accurate visualization of data defined on a discontinous high order element. On output, the six first rows of UP contains the triangle coordinates, and the others rows contain the interpolated values of U (one for each triangle vertex) CVLIST may indicate the list of convex number that should be consider, if not used then all the mesh convexes will be used. U should be a row vector."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:139
msgid "``Ui = gf_compute(mesh_fem MF, vec U, 'interpolate on', {mesh_fem mfi | slice sli | vec pts})``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:141
msgid "Interpolate a field on another mesh_fem or a slice or a list of points."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:144
msgid "Interpolation on another mesh_fem <literal>mfi</literal>:"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:144
msgid "<literal>mfi</literal> has to be Lagrangian. If <literal>mf</literal> and <literal>mfi</literal> share the same mesh object, the interpolation will be much faster."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:149
msgid "Interpolation on a slice <literal>sli</literal>:"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:147
msgid "this is similar to interpolation on a refined P1-discontinuous mesh, but it is much faster. This can also be used with gf_slice('points') to obtain field values at a given set of points."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:151
msgid "Interpolation on a set of points <literal>pts</literal>"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:153
msgid "See also gf_asm('interpolation matrix')"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:157
msgid "``Ue = gf_compute(mesh_fem MF, vec U, 'extrapolate on', mesh_fem mfe)``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:159
msgid "Extrapolate a field on another mesh_fem."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:161
msgid "If the mesh of <literal>mfe</literal> is stricly included in the mesh of <literal>mf</literal>, this function does stricly the same job as gf_compute('interpolate_on'). However, if the mesh of <literal>mfe</literal> is not exactly included in <literal>mf</literal> (imagine interpolation between a curved refined mesh and a coarse mesh), then values which are outside <literal>mf</literal> will be extrapolated."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:168
msgid "See also gf_asm('extrapolation matrix')"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:171
msgid "``E = gf_compute(mesh_fem MF, vec U, 'error estimate', mesh_im mim)``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:173
msgid "Compute an a posteriori error estimate."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:175
#: ../source/scilab/cmdref_gf_compute.rst:183
msgid "Currently there is only one which is available: for each convex, the jump of the normal derivative is integrated on its faces."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:179
msgid "``E = gf_compute(mesh_fem MF, vec U, 'error estimate nitsche', mesh_im mim, int GAMMAC, int GAMMAN, scalar lambda_, scalar mu_, scalar gamma0, scalar f_coeff, scalar vertical_force)``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:181
msgid "Compute an a posteriori error estimate in the case of Nitsche method."
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:187
msgid "``gf_compute(mesh_fem MF, vec U, 'convect', mesh_fem mf_v, vec V, scalar dt, int nt[, string option[, vec per_min, vec per_max]])``"
msgstr ""

#: ../source/scilab/cmdref_gf_compute.rst:189
msgid "Compute a convection of <literal>U</literal> with regards to a steady state velocity field <literal>V</literal> with a Characteristic-Galerkin method. The result is returned in-place in <literal>U</literal>. This method is restricted to pure Lagrange fems for U. <literal>mf_v</literal> should represent a continuous finite element method. <literal>dt</literal> is the integration time and <literal>nt</literal> is the number of integration step on the caracteristics. <literal>option</literal> is an option for the part of the boundary where there is a re-entrant convection. <literal>option = 'extrapolation'</literal> for an extrapolation on the nearest element, <literal>option = 'unchanged'</literal> for a constant value on that boundary or <literal>option = 'periodicity'</literal> for a peridiodic boundary. For this latter option the two vectors per_min, per_max has to be given and represent the limits of the periodic domain (on components where per_max[k] < per_min[k] no operation is done). This method is rather dissipative, but stable."
msgstr ""
