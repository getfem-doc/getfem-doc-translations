# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-30 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/scilab/cmdref_gf_mesh_get.rst:8
msgid "gf_mesh_get"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:10
msgid "**Synopsis**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:63
msgid "**Description :**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:66
msgid "General mesh inquiry function. All these functions accept also a mesh_fem argument instead of a mesh M (in that case, the mesh_fem linked mesh will be used)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:71
msgid "**Command list :**"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:75
msgid "``d = gf_mesh_get(mesh M, 'dim')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:77
msgid "Get the dimension of the mesh (2 for a 2D mesh, etc)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:80
msgid "``np = gf_mesh_get(mesh M, 'nbpts')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:82
msgid "Get the number of points of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:85
msgid "``nc = gf_mesh_get(mesh M, 'nbcvs')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:87
msgid "Get the number of convexes of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:90
msgid "``P = gf_mesh_get(mesh M, 'pts'[, ivec PIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:92
msgid "Return the list of point coordinates of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:94
msgid "Each column of the returned matrix contains the coordinates of one point. If the optional argument <literal>PIDs</literal> was given, only the points whose #id is listed in this vector are returned. Otherwise, the returned matrix will have gf_mesh_get(mesh M, 'max_pid') columns, which might be greater than gf_mesh_get(mesh M, 'nbpts') (if some points of the mesh have been destroyed and no call to gf_mesh_set(mesh M, 'optimize structure') have been issued). The columns corresponding to deleted points will be filled with NaN. You can use gf_mesh_get(mesh M, 'pid') to filter such invalid points."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:105
msgid "``Pid = gf_mesh_get(mesh M, 'pid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:107
msgid "Return the list of points #id of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:109
msgid "Note that their numbering is not supposed to be contiguous from 1 to gf_mesh_get(mesh M, 'nbpts'), especially if some points have been removed from the mesh. You can use gf_mesh_set(mesh M, 'optimize_structure') to enforce a contiguous numbering."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:116
msgid "``PIDs = gf_mesh_get(mesh M, 'pid in faces', imat CVFIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:118
msgid "Return point #id listed in <literal>CVFIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:120
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers. On return, <literal>PIDs</literal> is a vector containing points #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:125
msgid "``PIDs = gf_mesh_get(mesh M, 'pid in cvids', imat CVIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:127
msgid "Return point #id listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:129
#: ../source/scilab/cmdref_gf_mesh_get.rst:136
msgid "<literal>PIDs</literal> is a vector containing points #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:132
msgid "``PIDs = gf_mesh_get(mesh M, 'pid in regions', imat RIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:134
msgid "Return point #id listed in <literal>RIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:139
msgid "``PIDs = gf_mesh_get(mesh M, 'pid from coords', mat PTS[, scalar radius=0])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:141
msgid "Return point #id whose coordinates are listed in <literal>PTS</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:143
msgid "<literal>PTS</literal> is an array containing a list of point coordinates. On return, <literal>PIDs</literal> is a vector containing points #id for each point found in <literal>eps</literal> range, and -1 for those which where not found in the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:149
msgid "``{Pid, IDx} = gf_mesh_get(mesh M, 'pid from cvid'[, imat CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:151
msgid "Return the points attached to each convex of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:153
msgid "If <literal>CVIDs</literal> is omitted, all the convexes will be considered (equivalent to <literal>CVIDs = gf_mesh_get(mesh M, 'max cvid')</literal>). <literal>IDx</literal> is a vector, length(IDx) = length(CVIDs)+1. <literal>Pid</literal> is a vector containing the concatenated list of #id of points of each convex in <literal>CVIDs</literal>. Each entry of <literal>IDx</literal> is the position of the corresponding convex point list in <literal>Pid</literal>. Hence, for example, the list of #id of points of the second convex is Pid(IDx(2):IDx(3)-1)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:162
#: ../source/scilab/cmdref_gf_mesh_get.rst:180
msgid "If <literal>CVIDs</literal> contains convex #id which do not exist in the mesh, their point list will be empty."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:166
msgid "``{Pts, IDx} = gf_mesh_get(mesh M, 'pts from cvid'[, imat CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:168
msgid "Search point listed in <literal>CVID</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:170
msgid "Return <literal>Pts</literal> and <literal>IDx</literal>. If <literal>CVIDs</literal> is omitted, all the convexes will be considered (equivalent to <literal>CVIDs = gf_mesh_get(mesh M, 'max cvid')</literal>). <literal>IDx</literal> is a vector, length(IDx) = length(CVIDs)+1. <literal>Pts</literal> is a vector containing the concatenated list of points of each convex in <literal>CVIDs</literal>. Each entry of <literal>IDx</literal> is the position of the corresponding convex point list in <literal>Pts</literal>. Hence, for example, the list of points of the second convex is Pts(:,IDx(2):IDx(3)-1)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:184
msgid "``CVid = gf_mesh_get(mesh M, 'cvid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:186
msgid "Return the list of all convex #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:188
msgid "Note that their numbering is not supposed to be contiguous from 1 to gf_mesh_get(mesh M, 'nbcvs'), especially if some points have been removed from the mesh. You can use gf_mesh_set(mesh M, 'optimize_structure') to enforce a contiguous numbering."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:195
msgid "``m = gf_mesh_get(mesh M, 'max pid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:197
msgid "Return the maximum #id of all points in the mesh (see 'max cvid')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:200
msgid "``m = gf_mesh_get(mesh M, 'max cvid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:202
msgid "Return the maximum #id of all convexes in the mesh (see 'max pid')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:205
msgid "``[E,C] = gf_mesh_get(mesh M, 'edges' [, CVLST][, 'merge'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:207
#: ../source/scilab/cmdref_gf_mesh_get.rst:222
msgid "[OBSOLETE FUNCTION! will be removed in a future release]"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:209
msgid "Return the list of edges of mesh M for the convexes listed in the row vector CVLST. E is a 2 x nb_edges matrix containing point indices. If CVLST is omitted, then the edges of all convexes are returned. If CVLST has two rows then the first row is supposed to contain convex numbers, and the second face numbers, of which the edges will be returned.  If 'merge' is indicated, all common edges of convexes are merged in a single edge.  If the optional output argument C is specified, it will contain the convex number associated with each edge."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:220
msgid "``[E,C] = gf_mesh_get(mesh M, 'curved edges', int N [, CVLST])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:224
msgid "Return E and C. More sophisticated version of gf_mesh_get(mesh M, 'edges') designed for curved elements. This one will return N (N>=2) points of the (curved) edges. With N==2, this is equivalent to gf_mesh_get(mesh M, 'edges'). Since the points are no more always part of the mesh, their coordinates are returned instead of points number, in the array E which is a [ mesh_dim x 2 x nb_edges ] array.  If the optional output argument C is specified, it will contain the convex number associated with each edge."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:235
msgid "``PIDs = gf_mesh_get(mesh M, 'orphaned pid')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:237
msgid "Return point #id which are not linked to a convex."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:240
msgid "``CVIDs = gf_mesh_get(mesh M, 'cvid from pid', ivec PIDs[, bool share=False])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:242
msgid "Return convex #ids related with the point #ids given in <literal>PIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:244
msgid "If <literal>share=False</literal>, search convex whose vertex #ids are in <literal>PIDs</literal>. If <literal>share=True</literal>, search convex #ids that share the point #ids given in <literal>PIDs</literal>. <literal>CVIDs</literal> is a  vector (possibly empty)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:250
msgid "``CVFIDs = gf_mesh_get(mesh M, 'faces from pid', ivec PIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:252
msgid "Return the convex faces whose vertex #ids are in <literal>PIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:254
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). For a convex face to be returned, EACH of its points have to be listed in <literal>PIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:260
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces'[, dim][, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:262
msgid "Return the set of faces not shared by two elements."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:264
msgid "The output <literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). If <literal>dim</literal> is provided, the function is forced to detect faces of elements that have dimension <literal>dim</literal>, e.g. <literal>dim</literal>=2 will detect edges of surface elements, even if these belong to a 3D mesh. If <literal>CVIDs</literal> is not given, all convexes are considered, and the function basically returns the mesh boundary. If <literal>CVIDs</literal> is given, it returns the boundary of the convex set whose #ids are listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:275
msgid "``CVFIDs = gf_mesh_get(mesh M, 'inner faces'[, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:277
msgid "Return the set of faces shared at least by two elements in CVIDs. Each face is represented only once and is arbitrarily chosen between the two neighbor elements."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:282
msgid "``CVFIDs = gf_mesh_get(mesh M, 'all faces'[, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:284
msgid "Return the set of faces of the in CVIDs (in all the mesh if CVIDs is omitted). Note that the face shared by two neighbor elements will be represented twice."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:289
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces with direction', vec v, scalar angle[, dim][, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:291
msgid "Return the set of faces not shared by two convexes and with a mean outward vector lying within an angle <literal>angle</literal> (in radians) from vector <literal>v</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:293
#: ../source/scilab/cmdref_gf_mesh_get.rst:304
#: ../source/scilab/cmdref_gf_mesh_get.rst:315
msgid "The output <literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). The argument <literal>dim</literal> works as in outer_faces(). If <literal>CVIDs</literal> is given, it returns portion of the boundary of the convex set defined by the #ids listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:300
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces in box', vec pmin, vec pmax[, dim][, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:302
msgid "Return the set of faces not shared by two convexes and lying within the box defined by the corner points <literal>pmin</literal> and <literal>pmax</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:311
msgid "``CVFIDs = gf_mesh_get(mesh M, 'outer faces in ball', vec center, scalar radius[, dim][, CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:313
msgid "Return the set of faces not shared by two convexes and lying within the ball of corresponding <literal>center</literal> and <literal>radius</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:322
msgid "``CVFIDs = gf_mesh_get(mesh M, 'adjacent face', int cvid, int fid)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:324
msgid "Return convex face of the neighbor element if it exists. If the convex have more than one neighbor relatively to the face <literal></literal>f<literal></literal> (think to bar elements in 3D for instance), return the first face found."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:330
msgid "``CVFIDs = gf_mesh_get(mesh M, 'faces from cvid'[, ivec CVIDs][, 'merge'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:332
msgid "Return a list of convex faces from a list of convex #id."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:334
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). If <literal>CVIDs</literal> is not given, all convexes are considered. The optional argument 'merge' merges faces shared by the convex of <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:340
msgid "``[mat T] = gf_mesh_get(mesh M, 'triangulated surface', int Nrefine [,CVLIST])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:342
msgid "[DEPRECATED FUNCTION! will be removed in a future release]"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:344
msgid "Similar function to gf_mesh_get(mesh M, 'curved edges') : split (if necessary, i.e. if the geometric transformation if non-linear) each face into sub-triangles and return their coordinates in T (see also gf_compute('eval on P1 tri mesh'))"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:350
msgid "``N = gf_mesh_get(mesh M, 'normal of face', int cv, int f[, int nfpt])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:352
msgid "Return the normal vector of convex <literal>cv</literal>, face <literal>f</literal> at the <literal>nfpt</literal> point of the face."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:354
msgid "If <literal>nfpt</literal> is not specified, then the normal is evaluated at each geometrical node of the face."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:358
msgid "``N = gf_mesh_get(mesh M, 'normal of faces', imat CVFIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:360
msgid "Return matrix of (at face centers) the normal vectors of convexes."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:362
msgid "<literal>CVFIDs</literal> is supposed a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:366
msgid "``CVIDs = gf_mesh_get(mesh M, 'convexes in box', vec pmin, vec pmax)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:368
msgid "Return the set of convexes lying entirely within the box defined by the corner points <literal>pmin</literal> and <literal>pmax</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:370
msgid "The output <literal>CVIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). If <literal>CVIDs</literal> is given, it returns portion of the boundary of the convex set defined by the #ids listed in <literal>CVIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:376
msgid "``Q = gf_mesh_get(mesh M, 'quality'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:378
msgid "Return an estimation of the quality of each convex (<latex style=\"text\"><![CDATA[0 \\leq Q \\leq 1]]></latex>)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:381
msgid "``A = gf_mesh_get(mesh M, 'convex area'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:383
msgid "Return an estimate of the area of each convex."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:386
msgid "``A = gf_mesh_get(mesh M, 'convex radius'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:388
msgid "Return an estimate of the radius of each convex."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:391
msgid "``{S, CV2S} = gf_mesh_get(mesh M, 'cvstruct'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:393
msgid "Return an array of the convex structures."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:395
msgid "If <literal>CVIDs</literal> is not given, all convexes are considered. Each convex structure is listed once in <literal>S</literal>, and <literal>CV2S</literal> maps the convexes indice in <literal>CVIDs</literal> to the indice of its structure in <literal>S</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:400
msgid "``{GT, CV2GT} = gf_mesh_get(mesh M, 'geotrans'[, ivec CVIDs])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:402
msgid "Returns an array of the geometric transformations."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:404
msgid "See also gf_mesh_get(mesh M, 'cvstruct')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:407
msgid "``RIDs = gf_mesh_get(mesh M, 'boundaries')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:409
msgid "DEPRECATED FUNCTION. Use 'regions' instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:412
msgid "``RIDs = gf_mesh_get(mesh M, 'regions')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:414
msgid "Return the list of valid regions stored in the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:417
msgid "``RIDs = gf_mesh_get(mesh M, 'boundary')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:419
msgid "DEPRECATED FUNCTION. Use 'region' instead."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:422
msgid "``CVFIDs = gf_mesh_get(mesh M, 'region', ivec RIDs)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:424
msgid "Return the list of convexes/faces on the regions <literal>RIDs</literal>."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:426
msgid "<literal>CVFIDs</literal> is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). (and 0 when the whole convex is in the regions)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:432
msgid "``gf_mesh_get(mesh M, 'save', string filename)``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:434
msgid "Save the mesh object to an ascii file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:436
msgid "This mesh can be restored with gf_mesh('load', filename)."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:439
msgid "``s = gf_mesh_get(mesh M, 'char')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:441
msgid "Output a string description of the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:444
msgid "``gf_mesh_get(mesh M, 'export to vtk', string filename, ... [,'ascii'][,'quality'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:446
msgid "Exports a mesh to a VTK file ."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:448
#: ../source/scilab/cmdref_gf_mesh_get.rst:458
msgid "If 'quality' is specified, an estimation of the quality of each convex will be written to the file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:451
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to vtk'), gf_slice_get(slice S, 'export to vtk')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:454
msgid "``gf_mesh_get(mesh M, 'export to vtu', string filename, ... [,'ascii'][,'quality'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:456
msgid "Exports a mesh to a VTK(XML) file ."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:461
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to vtu'), gf_slice_get(slice S, 'export to vtu')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:464
msgid "``gf_mesh_get(mesh M, 'export to dx', string filename, ... [,'ascii'][,'append'][,'as',string name,[,'serie',string serie_name]][,'edges'])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:466
msgid "Exports a mesh to an OpenDX file."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:468
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to dx'), gf_slice_get(slice S, 'export to dx')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:471
msgid "``gf_mesh_get(mesh M, 'export to pos', string filename[, string name])``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:473
msgid "Exports a mesh to a POS file ."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:475
msgid "See also gf_mesh_fem_get(mesh_fem MF, 'export to pos'), gf_slice_get(slice S, 'export to pos')."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:478
msgid "``z = gf_mesh_get(mesh M, 'memsize')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:480
msgid "Return the amount of memory (in bytes) used by the mesh."
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:483
msgid "``gf_mesh_get(mesh M, 'display')``"
msgstr ""

#: ../source/scilab/cmdref_gf_mesh_get.rst:485
msgid "displays a short summary for a mesh object."
msgstr ""
