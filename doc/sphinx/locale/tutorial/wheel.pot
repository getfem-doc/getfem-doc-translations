# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-30 01:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/wheel.rst:8
msgid "Example of wheel in contact (Assembly between two meshes, transformations, use of fixed size variables)"
msgstr ""

#: ../source/tutorial/wheel.rst:10
msgid "In this example of a deformable ''wheel'' enters in contact with a deformable foundation. We use here python interface, translate this program for another interface or in C++ is easy (see the previous example). The complete program  `demo_wheel_contact.py` can be found in the directory `interface/tests/python`."
msgstr ""

#: ../source/tutorial/wheel.rst:13
msgid "The problem setting"
msgstr ""

#: ../source/tutorial/wheel.rst:15
msgid "Let :math:`\\Omega^1 \\subset \\rm I\\hspace{-0.15em}R^2` be the reference configuration of a 2D wheel and :math:`\\Omega^2 \\subset \\rm I\\hspace{-0.15em}R^2` the reference configuration of a deformable foundation. We consider small deformation of these two bodies (linearized elasticity) and the contact between them. We also consider that the rim of the wheel is rigid and apply a vertical force on the wheel."
msgstr ""

#: ../source/tutorial/wheel.rst:19
msgid "Building the program"
msgstr ""

#: ../source/tutorial/wheel.rst:22
msgid "Let us begin by loading Getfem and fixing the parameters of the problem"
msgstr ""

#: ../source/tutorial/wheel.rst:43
msgid "Mesh generation"
msgstr ""

#: ../source/tutorial/wheel.rst:45
msgid "We consider that the radius of the wheel is 15cm and the one of the rim 8cm and that the wheel lies on a deformable foundation of thickness 10cm. We generate the mesh of the wheel using the experimental mesher of |gf|. Concerning the mesh of the foundation, we build a structured mesh (see the documentation of the Mesh object in the python interface)."
msgstr ""

#: ../source/tutorial/wheel.rst:58
msgid "The result is the following"
msgstr ""

#: ../source/tutorial/wheel.rst:66
msgid "Boundary selection"
msgstr ""

#: ../source/tutorial/wheel.rst:68
msgid "We have to select the different parts of the boundary where we will set some boundary conditions, namely the boundary of the rim (in order to apply a force and the fact that the rim is rigid), the contact boundary of the wheel and the bottom boundary of the foundation that we will assume clamped."
msgstr ""

#: ../source/tutorial/wheel.rst:83
msgid "Note that the command `mesh1.outer_faces_with_direction([0., -1.], np.pi/4)` allows to select all the faces having a unit outward normal having an angle less or equal to `np.pi/4` with the vector `[0., -1.]`. The command `mesh1.region_subtract(CONTACT_BOUND, HOLE_BOUND)` allow to delete the faces corresponding to the rim in the contact boundary."
msgstr ""

#: ../source/tutorial/wheel.rst:86
msgid "Definition of finite elements methods and integration method"
msgstr ""

#: ../source/tutorial/wheel.rst:88
msgid "We define `mfu1`, `mfu2` two finite element methods which will approximate the displacements in the wheel and the foundation respectively. `mflambda` is  finite element method to approximate a multiplier to take into account the rigidity of the rim, `mflambda_C` is to approximate the contact multiplier (contact pressure) and `mfvm1`, `mfvm2` will be used to interpolate the Von Mises stresses of the wheel and the foundation for post-processing. `mim1`, `mim2` are two integration methods on the  wheel and the foundation."
msgstr ""

#: ../source/tutorial/wheel.rst:110
msgid "Model definition"
msgstr ""

#: ../source/tutorial/wheel.rst:112
msgid "We use a real model and declare the two variables which will represent the displacements:"
msgstr ""

#: ../source/tutorial/wheel.rst:121
msgid "Linearized elasticity bricks"
msgstr ""

#: ../source/tutorial/wheel.rst:123
msgid "We add the |Lame| coefficients as data of the model and add a linearized elasticity brick for the wheel and the foundation:"
msgstr ""

#: ../source/tutorial/wheel.rst:133
msgid "Clamped condition at the bottom of the foundation"
msgstr ""

#: ../source/tutorial/wheel.rst:135
msgid "We prescribed the displacement at  bottom face of the foundation to vanish, for instance with a multiplier with the add of the following brick:"
msgstr ""

#: ../source/tutorial/wheel.rst:142
msgid "Contact condition (use of interpolate transformations)"
msgstr ""

#: ../source/tutorial/wheel.rst:144
msgid "Now, let us see how to prescribed the contact condition between the two structures. It is possible to use predefined bricks (see  :ref:`ud-model-contact-friction` for small deformation/small sliding contact and :ref:`ud-model-contact-friction-large` for large deformation/large sliding contact). However, we will see here how to directly prescribe a contact condition using an augmented Lagrangian formulation and the interpolate transformations."
msgstr ""

#: ../source/tutorial/wheel.rst:146
msgid "For small deformation contact, the correspondence between points of one contact surface to the other have to be described on the reference configuration and is not evolving, which is of course simpler but is an approximation."
msgstr ""

#: ../source/tutorial/wheel.rst:148
msgid "We consider that the contact boundary of the wheel is the slave one and we have to describe the transformation from the contact boundary of the wheel to the contact boundary of the foundation. This is quite simple here, since the contact boundary of the foundation corresponds to a vanishing vertical coordinate. So we define the transformation"
msgstr ""

#: ../source/tutorial/wheel.rst:150
msgid "X \\longmapsto (X(1), 0)"
msgstr ""

#: ../source/tutorial/wheel.rst:154
msgid "where :math:`X` is the vector of coordinates of the point. We add this transformation to the model with the command"
msgstr ""

#: ../source/tutorial/wheel.rst:160
msgid "As a consequence, it will be possible to use this transformation, from the mesh of the wheel to the mesh of the foundation, into GWFL expressions. Notes that this is here a very simple constant expression. More complex expressions depending on the data or even the variables of the model can be used. If the expression of a transformation depends on the variable of the model, the tangent linear system will automatically takes into account this dependence (see :ref:`ud-gasm-high-transf` for more details). Note also that transformation corresponding to a large sliding contact and automatically searching for the correspondence between contact boundaries exist in |gf| (see :ref:`ud-model-contact-friction-large-hlgav`)."
msgstr ""

#: ../source/tutorial/wheel.rst:162
msgid "Using the defined transformation, we can write an integral contact condition using an augmented Lagrangian formulation (see :ref:`ud-model-contact-friction` for more details). The corresponding term (to be added to the rest of the weak formulation) reads:"
msgstr ""

#: ../source/tutorial/wheel.rst:164
msgid "& \\cdots +  \\int_{\\Gamma_c} \\lambda_N(X) (\\delta_{u^1}(X)-\\delta_{u^2}(\\Pi(X)))\\cdot n d\\Gamma \\\\\n"
"& -   \\int_{\\Gamma_c} \\left(\\lambda_N(X) + \\left(\\lambda_N(X) + \\dfrac{1}{h_T\\gamma_0}((X + u^1(X))\\cdot n - (\\Pi(X) - u^2(\\Pi(X)))\\cdot n\\right)_-\\right)\\delta_{\\lambda_N}(X) d\\Gamma = 0 ~~~~ \\forall \\delta_{\\lambda_N}, \\forall \\delta_{u^1}, \\forall \\delta_{u^2},"
msgstr ""

#: ../source/tutorial/wheel.rst:169
msgid "where :math:`\\Gamma_c` is the slave contact boundary, :math:`\\lambda_N` is the contact multiplier (contact pressure), :math:`h_T` is the radius of the element, :math:`\\Pi` is the transformation, `n` is the outward normal vector to the master contact boundary (here :math:`n = (0,1)`), :math:`\\gamma_0` is an augmentation parameter, :math:`(\\cdot)_-:I\\hspace{-0.2em}R\\rightarrow I\\hspace{-0.2em}R_+` is the negative part and :math:`\\delta_{\\lambda_N}, \\delta_{u^1}, \\delta_{u^2}` are the test  functions corresponding to :math:`\\lambda_N, u^1, u^2`, respectively."
msgstr ""

#: ../source/tutorial/wheel.rst:171
msgid "Using GWFL, the contact condition can be added by:"
msgstr ""

#: ../source/tutorial/wheel.rst:184
msgid "Prescribing the rigidity of the rim and the vertical force"
msgstr ""

#: ../source/tutorial/wheel.rst:186
msgid "We have now to prescribe the rigidity of the rim. This is a non-standard condition, since we do not know a priori what will be the vertical displacement of the rim. We can use an additional unknown for that vertical displacement. We add an additional fixed size variable `alpha_D` (which mean that it does not a finite element field) of size 1 with"
msgstr ""

#: ../source/tutorial/wheel.rst:192
msgid "We need a multiplier to prescribe the displacement on the rim boundary:"
msgstr ""

#: ../source/tutorial/wheel.rst:198
msgid "This multiplier represents the boundary stress that is necessary to prescribe the vertical displacement to be :math:`(0, -\\alpha_D)`. The constraint we want to apply on this multiplier is that its integral over the rim boundary is the vertical force we want to apply. The corresponding weak formulation term to be added to the rest of the weak formulation reads"
msgstr ""

#: ../source/tutorial/wheel.rst:200
msgid "\\cdots + \\int_{\\Gamma_D} -\\lambda_D.\\delta_{u^1} + ((0, \\alpha_D) - u^1).\\delta_{\\lambda_D} + (\\lambda_D.(0,1) + F)\\delta_{\\alpha_D} d\\Gamma = 0,"
msgstr ""

#: ../source/tutorial/wheel.rst:204
msgid "where :math:`\\Gamma_D` is the rim boundary, :math:`F` is the applied density of force."
msgstr ""

#: ../source/tutorial/wheel.rst:206
msgid "This could be added to the model with GWFL:"
msgstr ""

#: ../source/tutorial/wheel.rst:214
msgid "For more robustness, a small penalization on :math:`alpha_D` can be added"
msgstr ""

#: ../source/tutorial/wheel.rst:221
msgid "Note that the fixed size variable `alpha_D` is linked to each points of the rim boundary. This means that the line of the tangent matrix corresponding to `alpha_D` may have a lot of nonzero components. This is why such a use of fixed size variable have to be done with care."
msgstr ""

#: ../source/tutorial/wheel.rst:224
msgid "Model solve"
msgstr ""

#: ../source/tutorial/wheel.rst:226
msgid "We can now solve our problem with:"
msgstr ""

#: ../source/tutorial/wheel.rst:232
msgid "Note that in some configuration, it is preferable to use a more basic line search than the default one:"
msgstr ""

#: ../source/tutorial/wheel.rst:240
msgid "Export the solution"
msgstr ""

#: ../source/tutorial/wheel.rst:242
msgid "Now the code to export the solution with the VonMises stress:"
msgstr ""

#: ../source/tutorial/wheel.rst:269
msgid "Plot of the solution."
msgstr ""
