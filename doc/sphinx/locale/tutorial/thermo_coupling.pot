# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-21 01:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/thermo_coupling.rst:8
msgid "Example of Thermo-elastic and electrical coupling (simple nonlinear coupled problem, model object, generic assembly, solve and visualization)"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:10
msgid "This example aims to present a simple example of a multiphysics problem with a nonlinear coupling of a displacement field, a temperature field and an electric potential field. It also aims to compare the use of the C++ library and the different interfaces. The corresponding demo files are present in the test directories of |gf| (`tests/`, `interface/tests/python`, `interface/scr/scilab/demos` and `interface/tests/matlab`)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:13
msgid "The problem setting"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:15
msgid "Let :math:`\\Omega \\subset \\rm I\\hspace{-0.15em}R^2` be the reference configuration of a 2D plate (see the geometry :ref:`here <tut-fig-meshthermo>`) of thickness :math:`\\varepsilon` submitted to external forces, electric potential and heating. We will denote by  :math:`\\theta : \\Omega \\rightarrow \\rm I\\hspace{-0.15em}R` the temperature field (in |degreC|),  :math:`V : \\Omega \\rightarrow \\rm I\\hspace{-0.15em}R` the electric potential field and :math:`u : \\Omega \\rightarrow \\rm I\\hspace{-0.15em}R^2` the membrane displacement field."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:18
#: ../source/tutorial/thermo_coupling.rst:668
msgid "Thermal problem"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:20
msgid "The lateral faces of the plates are supposed to be in thermal insulation since the front and back faces of the plate are supposed to be in thermal exchange with the air (supposed at 20 |degreC|) with a heat transfer coefficient :math:`D`."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:22
msgid "The equation on the temperature :math:`\\theta` and boundary condition can be written as follows:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:24
msgid "\\left\\{\\begin{array}{l}\n"
"-\\mbox{div}(\\varepsilon\\kappa(\\nabla \\theta)) + 2D(\\theta - T_0) - \\varepsilon\\sigma|\\nabla V|^2 = 0 ~~ \\mbox{ in } \\Omega, \\\\\n"
"\\kappa\\nabla \\theta \\cdot n = 0 ~~ \\mbox{ on } \\partial \\Omega,\n"
"\\end{array} \\right."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:32
msgid "where the thermal conductivity is designed by :math:`\\kappa`, :math:`T_0` is the temperature of the air, :math:`\\partial \\Omega` the boundary of the domain :math:`\\Omega` and :math:`n` the outward unit normal vector to :math:`\\Omega` on :math:`\\partial \\Omega`."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:34
msgid "The term :math:`\\sigma|\\nabla V|^2` is a nonlinear coupling term corresponding to the Joule heating term, where :math:`\\sigma` is the electrical conductivity."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:37
#: ../source/tutorial/thermo_coupling.rst:612
msgid "Electric potential problem"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:39
msgid "We consider a potential difference of :math:`0.1V` between the right and left lateral face of the plate. The other faces are considered electrically insulated. The equation for the electric potential reads as"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:41
msgid " \\left\\{\\begin{array}{l}\n"
"-\\mbox{div}(\\varepsilon\\sigma(\\nabla V)) = 0 ~~ \\mbox{ in } \\Omega, \\\\\n"
"\\sigma\\nabla V \\cdot n = 0 ~~ \\mbox{ on the top an bottom lateral faces}, \\\\\n"
"V = 0 ~~ \\mbox{ on the right lateral face}, \\\\\n"
"V = 0.1 ~~ \\mbox{ on the left lateral face}, \\\\\n"
"\\end{array} \\right."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:50
msgid "where :math:`\\sigma` is still the electrical conductivity. Moreover, we consider that :math:`\\sigma` depends on the temperature as follows:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:52
msgid "\\sigma = \\dfrac{1}{\\rho_0(1+\\alpha(\\theta - T_0))},"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:56
msgid "where :math:`T_0` is a reference temperature (air temperature here), :math:`\\rho_0` the resistance temperature coefficient at :math:`T_0` and :math:`\\alpha` a second resistance temperature coefficient."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:61
msgid "Deformation problem"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:63
msgid "We consider the membrane small deformation of the plate under a force applied on the right lateral face and influenced by the heating of the plate. The displacement :math:`u` will be solution of the following problem (linearized elasticity):"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:65
msgid " \\left\\{\\begin{array}{l}\n"
"-\\mbox{div}(\\bar{\\sigma}(u)) = 0 ~~ \\mbox{ in } \\Omega, \\\\\n"
"\\bar{\\sigma}\\ n = 0 ~~ \\mbox{ on the top an bottom lateral faces}, \\\\\n"
"\\bar{\\sigma}\\ n = F ~~ \\mbox{ on the right lateral face}, \\\\\n"
"u = 0 ~~ \\mbox{ on the left lateral face},\n"
"\\end{array} \\right."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:74
msgid "where :math:`F` is the force density applied on the right lateral boundary and :math:`\\bar{\\sigma}(u)` is the Cauchy stress tensor defined by"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:76
msgid "\\bar{\\sigma}(u) = \\lambda^* \\mbox{div}(u) I + 2\\mu \\bar{\\varepsilon}(u) + \\beta(T_0-\\theta) I,"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:80
msgid ":math:`\\bar{\\varepsilon}(u) = (\\nabla u + (\\nabla u)^T)/2` being the linearized strain tensor, :math:`I` the identity second order tensor and :math:`\\lambda^*, \\mu` being the |Lame| coefficients defined  by"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:82
msgid "&\\lambda = \\dfrac{E\\nu}{(1+\\nu)(1-2\\nu)}, \\\\\n"
"&\\mu = \\dfrac{E}{2(1+\\nu)}, \\\\\n"
"&\\lambda^* = \\dfrac{2\\lambda\\mu}{\\lambda+2*\\mu},"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:88
msgid "from :math:`E` the Young modulus and :math:`\\nu` the Poisson ratio of the material."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:90
msgid "The term :math:`\\beta(T_0-\\theta) I` corresponds to the thermal expansion term, where :math:`\\beta = \\alpha_{th} E/(1-2\\nu)`, :math:`\\alpha_{th}` being the thermal expansion coefficient."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:94
msgid "The weak formulation"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:96
msgid "An important step is to obtain the weak formulation of the coupled system of equations. This is a crucial step since the finite element formulation is based on the weak formulation (Galerkin approximation) and the weak formulation is the only one which can give us the expression of the terms to be added."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:98
msgid "Weak formulation of each partial differential equation is obtained by multiplying the equation with a test function corresponding to the main unknown satisfying homogeneous Dirichlet conditions where the main unknown satisfies a Dirichlet condition, then integrating over the domain :math:`\\Omega` and performing some integrations by parts (using Green's formula). The weak formulation of the system of partial differential equations reads:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:100
msgid "&\\mbox{Find } \\theta, V, u \\mbox{ with } V = 0.1, u = 0 \\mbox{ on the left face}, V = 0 \\mbox{ on the right face}, \\\\\n"
"& \\int_{\\Omega} \\varepsilon\\kappa\\nabla\\theta\\cdot\\nabla\\delta_{\\theta} + 2D\\theta\\delta_{\\theta}d\\Omega = \\int_{\\Omega} (2DT_0 + \\varepsilon\\sigma|\\nabla V|^2)\\delta_{\\theta} d\\Omega ~~~\\mbox{ for all } \\delta_{\\theta}, \\\\\n"
"& \\int_{\\Omega} \\varepsilon\\sigma\\nabla V\\cdot\\nabla\\delta_V = 0 d\\Omega ~~~ \\mbox{ for all } \\delta_V \\mbox{ satisfying } \\delta_V = 0 \\mbox{ on the left and right faces}, \\\\\n"
"& \\int_{\\Omega} \\bar{\\sigma}(u):\\bar{\\varepsilon}(\\delta_u)d\\Omega = \\int_{\\Gamma_N} F\\cdot \\delta_u d\\Gamma ~~~ \\mbox{ for all } \\delta_{u} \\mbox{ satisfying } \\delta_u = 0 \\mbox{ on the left face},"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:108
msgid "where :math:`\\delta_{\\theta}, \\delta_V, \\delta_u` are the test functions corresponding to :math:`\\theta, V, u`, respectively, :math:`\\Gamma_N` denotes the right boundary where the density of force :math:`F` is applied and :math:`\\bar{\\sigma}:\\bar{\\varepsilon}` is the Frobenius scalar product between second order tensors."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:111
msgid "Implementation in C++ and with the interface"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:113
msgid "Let us now make a detailed presentation of the use of |gf| to approximate the problem. We build simultaneously a C++, Python, Scilab and Matlab program. For Matlab and Scilab programs, we will not use the oriented object commands (see :ref:`mlab-oocmd` how to use them)"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:116
msgid "Initialization"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:118
msgid "First, in C++, ones has to include a certain number of headers for the model object, the generic assembly, the linear algebra interface (Gmm++), the experimental mesher and the export facilities. For Python, this is simpler, |gf| can be imported globally (numpy has also to be imported). For Scilab, the library has first to be loaded in the Scilab console (this is not described here) and for Matlab, nothing is necessary, except a `gf_workspace('clear all')` which allows to clear all |gf| variables."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:123
#: ../source/tutorial/thermo_coupling.rst:161
#: ../source/tutorial/thermo_coupling.rst:209
#: ../source/tutorial/thermo_coupling.rst:276
#: ../source/tutorial/thermo_coupling.rst:374
#: ../source/tutorial/thermo_coupling.rst:431
#: ../source/tutorial/thermo_coupling.rst:491
#: ../source/tutorial/thermo_coupling.rst:545
#: ../source/tutorial/thermo_coupling.rst:619
#: ../source/tutorial/thermo_coupling.rst:675
#: ../source/tutorial/thermo_coupling.rst:730
#: ../source/tutorial/thermo_coupling.rst:759
#: ../source/tutorial/thermo_coupling.rst:808
msgid "**C++**"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:138
#: ../source/tutorial/thermo_coupling.rst:223
#: ../source/tutorial/thermo_coupling.rst:302
#: ../source/tutorial/thermo_coupling.rst:382
#: ../source/tutorial/thermo_coupling.rst:443
#: ../source/tutorial/thermo_coupling.rst:498
#: ../source/tutorial/thermo_coupling.rst:560
#: ../source/tutorial/thermo_coupling.rst:633
#: ../source/tutorial/thermo_coupling.rst:687
#: ../source/tutorial/thermo_coupling.rst:735
#: ../source/tutorial/thermo_coupling.rst:770
#: ../source/tutorial/thermo_coupling.rst:838
msgid "**Python**"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:143
#: ../source/tutorial/thermo_coupling.rst:234
#: ../source/tutorial/thermo_coupling.rst:326
#: ../source/tutorial/thermo_coupling.rst:388
#: ../source/tutorial/thermo_coupling.rst:453
#: ../source/tutorial/thermo_coupling.rst:505
#: ../source/tutorial/thermo_coupling.rst:574
#: ../source/tutorial/thermo_coupling.rst:644
#: ../source/tutorial/thermo_coupling.rst:698
#: ../source/tutorial/thermo_coupling.rst:739
#: ../source/tutorial/thermo_coupling.rst:779
#: ../source/tutorial/thermo_coupling.rst:859
msgid "**Scilab**"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:147
#: ../source/tutorial/thermo_coupling.rst:245
#: ../source/tutorial/thermo_coupling.rst:345
#: ../source/tutorial/thermo_coupling.rst:396
#: ../source/tutorial/thermo_coupling.rst:463
#: ../source/tutorial/thermo_coupling.rst:512
#: ../source/tutorial/thermo_coupling.rst:592
#: ../source/tutorial/thermo_coupling.rst:655
#: ../source/tutorial/thermo_coupling.rst:709
#: ../source/tutorial/thermo_coupling.rst:743
#: ../source/tutorial/thermo_coupling.rst:788
#: ../source/tutorial/thermo_coupling.rst:891
msgid "**Matlab**"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:154
msgid "Parameters of the model"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:156
msgid "Let us now define the different physical and numerical parameters of the problem. For script languages (Python, Scilab and Matlab) there is no differences."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:181
msgid "**Scripts**"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:200
msgid "Mesh generation"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:202
msgid "|gf| has some limited meshing facilities which are described here. We are going to use them. However, there is no guaranty of the quality and conformity of the obtained mesh, so it is better to verify the mesh if you use |gf| meshing facilities. You can also use external meshers (GiD or Gmsh for instance) and import them (see :ref:`ud-load_save_mesh`)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:204
msgid "The geometry of the domain is supposed to be a rectangle with three circular holes (see :ref:`tut-fig-meshthermo`). The geometry is described thanks to some geometrical primitives and union/setminus operations (see :file:`src/getfem/getfem_mesher.h` file). In the following, `h` stands for the mesh size and `2` is the degree of the mesh (this means that the transformation is of degree two, we used curved edges)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:262
msgid "The obtained mesh."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:269
msgid "Boundary selection"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:271
msgid "Since we have different boundary conditions on the different parts of the boundary, we have to number the different parts of the boundary (in the hole, thermal and electrical insulation together with a stress free boundary conditions are assumed). Thus, we have to select the element faces on the mesh and define mesh regions (see :ref:`ud-mesh_regions`) 1, 2, 3, 4 to be the right boundary, the left one, the top one and the bottom one respectively. These boundary numbers will be used in the model bricks."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:367
msgid "Mesh draw"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:369
msgid "In order to preview the mesh and to control its validity, the following instructions can be used:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:405
msgid "In C++ and with the Python interface, an external graphical post-processor has to be used (for instance, gmsh, Mayavi2 or Paraview). With Scilab and Matlab interfaces, the internal plot facilities can be used (see the result :ref:`tut-fig-meshthermo`)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:409
msgid "Definition of finite element methods and integration method"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:411
msgid "We will define three finite element methods. The first one, `mfu` is to approximate the displacement field. This is a vector field. This is defined in C++ by"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:418
msgid "where the `2` stands for the dimension of the vector field. The second line sets the finite element used. `classical_finite_element` means a continuous Lagrange element and remember that `elements_degree` has been set to `2` which means that we will use quadratic (isoparametric) elements."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:420
msgid "There is a wide choice of pre-existing finite element methods in |gf|, see :ref:`ud-appendixa`. However, Lagrange finite element methods are the most used in practice."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:422
msgid "The second finite element method is a scalar one, `mft` with which we will approximate both the temperature field and the electric potential field. A single finite element method can serve to approximate an arbitrary number of finite element variables."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:424
msgid "The third finite element method is a discontinuous scalar Lagrange one which will allow us to interpolate the derivative of one of the variables (for instance to interpolate the Von Mises stress)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:426
msgid "The last thing to define is an integration method `mim`. There is no default integration method in |gf| so this is mandatory to define an integration method. Of course, the order of the integration method have to be chosen sufficient to make a convenient integration of the selected finite element method. Here, the square of `elements_degree` is sufficient."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:478
msgid "Model definition"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:480
msgid "The model object in |gf| gather the variables of the models (the unknowns), the data and what is called the model bricks. The model bricks are some parts of the model (linear or nonlinear terms) applied on a single variable or linking several variables. They are used to make the assembly of the (tangent) linear system (see :ref:`ud-model-object` for more details)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:482
msgid "This is not strictly mandatory to use the model object since one may use directly the assembly procedures and build by it own the (tangent) linear system. The model object allows a rapid build of the model since most classical parts of a model are pre-programmed: standard boundary conditions, standard partial differential equations, use of multipliers to prescribe a constraint ... Moreover, some bricks are designed to extend the possibilities of the standard bricks (generic assembly bricks, explicit matrix brick ...). Thus, it is recommended to use the framework of the model object."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:484
msgid "There are two versions of the model: the real one and the complex one. Complex models have to be reserved for special applications (some electromagnetism problems for instance) where it is advantageous to solve a complex linear system."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:486
msgid "Let us declare a real model with the three variables corresponding to the three fields to be computed:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:522
msgid "Membrane elastic deformation problem"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:524
msgid "Let us now begin by the elastic deformation problem. We will use the predefined brick added by `add_isotropic_linearized_elasticity_brick` below. Basically it adds the term corresponding to"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:526
msgid "\\int_{\\Omega} (\\lambda^* \\mbox{div}(u) I + 2\\mu \\bar{\\varepsilon}(u)):\\bar{\\varepsilon}(\\delta_u)dx,"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:530
msgid "to the tangent linear system. In order to use this model brick, the data corresponding to the |Lame| coefficient have to be added to the model first. Here, the |Lame| coefficients are constant over the domain. However, it it also possible to define some non-constant data. Note also that instead of using this predefined brick, one can use equivalently GWFL, the generic weak form language term `add_linear_term(md mim, \"lambda*(Div_u*Div_Test_u) + mu*((Grad_u + Grad_u'):Grad_Test_u)\"`."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:532
msgid "Concerning the coupling term"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:534
msgid "\\int_{\\Omega} (\\beta\\theta I) :\\bar{\\varepsilon}(\\delta_u)dx,"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:538
msgid "there is no predefined brick and we use directly a GWFL term `add_linear_term(md mim, \"beta*theta*Div_Test_u)\"`. See :ref:`ud-gasm-high` for more details on GWFL. Basically, the principle is that the assembly string is compiled into a list of optimized assembly instructions which are executed on each Gauss point."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:540
msgid "The following program allows to take into account the whole elastic deformation equation. Note the use of specific brick to prescribe the Dirichlet condition on the left boundary. There is several option to prescribe a Dirichlet condition (see :ref:`ud-model-Dirichlet`)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:614
msgid "Similarly, the following program take into account the electric potential equation. Note the definition of the  electrical conductivity :math:`\\sigma` and again the use of GWFL terms."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:670
msgid "Now, the program to take into account the thermal problem:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:723
msgid "Model solve"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:725
msgid "Once the model is correctly defined, we can simply solve it by:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:748
msgid "Since the problem is globally nonlinear, a Newton method is used to iteratively solve the problem. It needs a few iterations (about 4 in that case)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:752
msgid "Model solve with two steps"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:754
msgid "Another option to solve the problem is to solve first the thermal and electric potential problems. Indeed, in our model, the thermal and  electric potential do not depend on the deformation. Once the  thermal and electric potential problem, we then solve the deformation problem. This can be done as follows:"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:801
msgid "Export/visualization of the solution"
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:803
msgid "The finite element problem is now solved. We can plot the solution as follows. Note that for the C++ and Python programs, it is necessary to use an external graphical post-processor. Note also that arbitrary quantities can be post-processed using the generic interpolation (see `ga_interpolation_Lagrange_fem` below). It is also possible to make complex exports and slices (see :ref:`ud-export`)."
msgstr ""

#: ../source/tutorial/thermo_coupling.rst:926
msgid "Plot of the solution."
msgstr ""
