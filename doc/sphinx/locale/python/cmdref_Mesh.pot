# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 02:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/python/cmdref_Mesh.rst:8
msgid "Mesh"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:1
msgid "GetFEM Mesh object"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:3
msgid "This object is able to store any element in any dimension even if you mix elements with different dimensions."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:9
msgid "General constructor for Mesh objects"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:11
msgid "``M = Mesh('empty', int dim)`` Create a new empty mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:14
msgid "``M = Mesh('cartesian', vec X[, vec Y[, vec Z,..]])`` Build quickly a regular mesh of quadrangles, cubes, etc."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:17
msgid "``M = Mesh('pyramidal', vec X[, vec Y[, vec Z,..]])`` Build quickly a regular mesh of pyramids, etc."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:20
msgid "``M = Mesh('cartesian Q1', vec X, vec Y[, vec Z,..])`` Build quickly a regular mesh of quadrangles, cubes, etc. with Q1 elements."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:24
msgid "``M = Mesh('triangles grid', vec X, vec Y)`` Build quickly a regular mesh of triangles."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:27
msgid "This is a very limited and somehow deprecated function (See also ``Mesh('ptND')``, ``Mesh('regular simplices')`` and ``Mesh('cartesian')``)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:31
msgid "``M = Mesh('regular simplices', vec X[, vec Y[, vec Z,...]]['degree', int k]['noised'])`` Mesh a n-dimensional parallelepiped with simplices (triangles, tetrahedrons etc) ."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:35
msgid "The optional degree may be used to build meshes with non linear geometric transformations."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:38
msgid "``M = Mesh('curved', Mesh m, vec F)`` Build a curved (n+1)-dimensions mesh from a n-dimensions mesh `m`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:41
msgid "The points of the new mesh have one additional coordinate, given by the vector `F`. This can be used to obtain meshes for shells. `m` may be a MeshFem object, in that case its linked mesh will be used."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:45
msgid "``M = Mesh('prismatic', Mesh m, int nl[, int degree])`` Extrude a prismatic Mesh `M` from a Mesh `m`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:48
msgid "In the additional dimension there are `nl` layers of elements distributed from ``0`` to ``1``. If the optional parameter `degree` is provided with a value greater than the default value of ``1``, a non-linear transformation of corresponding degree is considered in the extrusion direction."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:54
msgid "``M = Mesh('pt2D', mat P, imat T[, int n])`` Build a mesh from a 2D triangulation."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:57
msgid "Each column of `P` contains a point coordinate, and each column of `T` contains the point indices of a triangle. `n` is optional and is a zone number. If `n` is specified then only the zone number `n` is converted (in that case, `T` is expected to have 4 rows, the fourth containing these zone numbers)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:65
msgid "``M = Mesh('ptND', mat P, imat T)`` Build a mesh from a n-dimensional \"triangulation\"."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:68
msgid "Similar function to 'pt2D', for building simplexes meshes from a triangulation given in `T`, and a list of points given in `P`. The dimension of the mesh will be the number of rows of `P`, and the dimension of the simplexes will be the number of rows of `T`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:73
msgid "``M = Mesh('load', string filename)`` Load a mesh from a GetFEM ascii mesh file."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:76
msgid "See also ``Mesh.save(string filename)``."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:78
msgid "``M = Mesh('from string', string s)`` Load a mesh from a string description."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:81
msgid "For example, a string returned by ``Mesh.char()``."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:83
msgid "``M = Mesh('import', string format, string filename)`` Import a mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:86
msgid "`format` may be:"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:88
msgid "'gmsh' for a mesh created with `Gmsh`"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:89
msgid "'gmsh_with_lower_dim_elt' for a mesh created with `Gmsh` and including elements of lower dimension than the mesh"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:90
msgid "'gid' for a mesh created with `GiD`"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:91
msgid "'cdb' for a mesh created with `ANSYS`"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:92
msgid "'am_fmt' for a mesh created with `EMC2`"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:94
msgid "``M = Mesh('clone', Mesh m2)`` Create a copy of a mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh:97
msgid "``M = Mesh('generate', MesherObject mo, scalar h[, int K = 1[, mat vertices]])`` Call the experimental mesher of Getfem on the geometry represented by `mo`. please control the conformity of the produced mesh. You can help the mesher by adding a priori vertices in the array `vertices` which should be of size ``n x m`` where ``n`` n is the dimension of the mesh and ``m`` the number of points. `h` is approximate diameter of the elements. `K` is the degree of the mesh ( > 1 for curved boundaries).  The mesher try to optimize the quality of the elements. This operation may be time consuming. Note that if the mesh generation fails, because of some random procedure used, it can be run again since it will not give necessarily the same result due to random procedures used. The messages send to the console by the mesh generation can be deactivated using `gf_util('trace level', 2)`. More information can be obtained by `gf_util('trace level', 4)`. See ``MesherObject`` to manipulate geometric primitives in order to describe the geometry."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.add_convex:1
msgid "Add a new convex into the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.add_convex:3
msgid "The convex structure (triangle, prism,...) is given by `GT` (obtained with GeoTrans('...')), and its points are given by the columns of `PTS`. On return, `CVIDs` contains the convex #ids. `PTS` might be a 3-dimensional array in order to insert more than one convex (or a two dimensional array correctly shaped according to Fortran ordering)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.add_point:1
msgid "Insert new points in the mesh and return their #ids."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.add_point:3
msgid "`PTS` should be an ``nxm`` matrix , where ``n`` is the mesh dimension, and ``m`` is the number of points that will be added to the mesh. On output, `PIDs` contains the point #ids of these new points."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.add_point:8
msgid "Remark: if some points are already part of the mesh (with a small tolerance of approximately ``1e-8``), they won't be inserted again, and `PIDs` will contain the previously assigned #ids of these points."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.adjacent_face:1
msgid "Return convex face of the neighbor element if it exists. If the convex have more than one neighbor relatively to the face ``f`` (think to bar elements in 3D for instance), return the first face found."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.all_faces:1
msgid "Return the set of faces of the in CVIDs (in all the mesh if CVIDs is omitted). Note that the face shared by two neighbor elements will be represented twice."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.boundaries:1
msgid "DEPRECATED FUNCTION. Use 'regions' instead."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.boundary:1
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.set_boundary:1
msgid "DEPRECATED FUNCTION. Use 'region' instead."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.char:1
msgid "Output a string description of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.convex_area:1
msgid "Return an estimate of the area of each convex."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.convex_radius:1
msgid "Return an estimate of the radius of each convex."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.convexes_in_box:1
msgid "Return the set of convexes lying entirely within the box defined by the corner points `pmin` and `pmax`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.convexes_in_box:3
msgid "The output `CVIDs` is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). If `CVIDs` is given, it returns portion of the boundary of the convex set defined by the #ids listed in `CVIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.curved_edges:1
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.edges:3
msgid "[OBSOLETE FUNCTION! will be removed in a future release]"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.curved_edges:3
msgid "Return E and C. More sophisticated version of Mesh.edges() designed for curved elements. This one will return N (N>=2) points of the (curved) edges. With N==2, this is equivalent to Mesh.edges(). Since the points are no more always part of the mesh, their coordinates are returned instead of points number, in the array E which is a [ mesh_dim x 2 x nb_edges ] array.  If the optional output argument C is specified, it will contain the convex number associated with each edge."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.cvid:1
msgid "Return the list of all convex #id."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.cvid:3
msgid "Note that their numbering is not supposed to be contiguous from 0 to Mesh.nbcvs()-1, especially if some points have been removed from the mesh. You can use Mesh.optimize_structure() to enforce a contiguous numbering."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.cvid_from_pid:1
msgid "Return convex #ids related with the point #ids given in `PIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.cvid_from_pid:3
msgid "If `share=False`, search convex whose vertex #ids are in `PIDs`. If `share=True`, search convex #ids that share the point #ids given in `PIDs`. `CVIDs` is a  vector (possibly empty)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.cvstruct:1
msgid "Return an array of the convex structures."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.cvstruct:3
msgid "If `CVIDs` is not given, all convexes are considered. Each convex structure is listed once in `S`, and `CV2S` maps the convexes indice in `CVIDs` to the indice of its structure in `S`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.del_convex:1
msgid "Remove one or more convexes from the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.del_convex:3
msgid "`CVIDs` should contain the convexes #ids, such as the ones returned by the 'add convex' command."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.del_convex_of_dim:1
msgid "Remove all convexes of dimension listed in `DIMs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.del_convex_of_dim:3
msgid "For example; ``Mesh.del_convex_of_dim([1,2])`` remove all line segments, triangles and quadrangles."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.del_point:1
msgid "Removes one or more points from the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.del_point:3
msgid "`PIDs` should contain the point #ids, such as the one returned by the 'add point' command."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.delete_boundary:1
msgid "DEPRECATED FUNCTION. Use 'delete region' instead."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.delete_region:1
msgid "Remove the regions whose #ids are listed in `RIDs`"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.dim:1
msgid "Get the dimension of the mesh (2 for a 2D mesh, etc)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.display:1
msgid "displays a short summary for a Mesh object."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.edges:1
msgid "Synopsis: [E,C] = Mesh.edges(self [, CVLST][, 'merge'])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.edges:5
msgid "Return the list of edges of mesh M for the convexes listed in the row vector CVLST. E is a 2 x nb_edges matrix containing point indices. If CVLST is omitted, then the edges of all convexes are returned. If CVLST has two rows then the first row is supposed to contain convex numbers, and the second face numbers, of which the edges will be returned.  If 'merge' is indicated, all common edges of convexes are merged in a single edge.  If the optional output argument C is specified, it will contain the convex number associated with each edge."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_dx:1
msgid "Synopsis: Mesh.export_to_dx(self, string filename, ... [,'ascii'][,'append'][,'as',string name,[,'serie',string serie_name]][,'edges'])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_dx:3
msgid "Exports a mesh to an OpenDX file."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_dx:5
msgid "See also MeshFem.export_to_dx(), Slice.export_to_dx()."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_pos:1
msgid "Exports a mesh to a POS file ."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_pos:3
msgid "See also MeshFem.export_to_pos(), Slice.export_to_pos()."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtk:1
msgid "Synopsis: Mesh.export_to_vtk(self, string filename, ... [,'ascii'][,'quality'])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtk:3
msgid "Exports a mesh to a VTK file ."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtk:5
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtu:5
msgid "If 'quality' is specified, an estimation of the quality of each convex will be written to the file."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtk:8
msgid "See also MeshFem.export_to_vtk(), Slice.export_to_vtk()."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtu:1
msgid "Synopsis: Mesh.export_to_vtu(self, string filename, ... [,'ascii'][,'quality'])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtu:3
msgid "Exports a mesh to a VTK(XML) file ."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.export_to_vtu:8
msgid "See also MeshFem.export_to_vtu(), Slice.export_to_vtu()."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.extend_region:1
msgid "Extends the region identified by the region number `rnum` to include the set of convexes or/and convex faces provided in the matrix `CVFIDs`, see also ``Mesh.(set region)``."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.faces_from_cvid:1
msgid "Synopsis: CVFIDs = Mesh.faces_from_cvid(self[, ivec CVIDs][, 'merge'])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.faces_from_cvid:3
msgid "Return a list of convex faces from a list of convex #id."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.faces_from_cvid:5
msgid "`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). If `CVIDs` is not given, all convexes are considered. The optional argument 'merge' merges faces shared by the convex of `CVIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.faces_from_pid:1
msgid "Return the convex faces whose vertex #ids are in `PIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.faces_from_pid:3
msgid "`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). For a convex face to be returned, EACH of its points have to be listed in `PIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.geotrans:1
msgid "Returns an array of the geometric transformations."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.geotrans:3
msgid "See also Mesh.cvstruct()."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.inner_faces:1
msgid "Return the set of faces shared at least by two elements in CVIDs. Each face is represented only once and is arbitrarily chosen between the two neighbor elements."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.max_cvid:1
msgid "Return the maximum #id of all convexes in the mesh (see 'max pid')."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.max_pid:1
msgid "Return the maximum #id of all points in the mesh (see 'max cvid')."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.memsize:1
msgid "Return the amount of memory (in bytes) used by the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.merge:1
msgid "Merge with the Mesh `m2`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.merge:3
msgid "Overlapping points, within a tolerance radius `tol`, will not be duplicated. If `m2` is a MeshFem object, its linked mesh will be used."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.nbcvs:1
msgid "Get the number of convexes of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.nbpts:1
msgid "Get the number of points of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.normal_of_face:1
msgid "Return the normal vector of convex `cv`, face `f` at the `nfpt` point of the face."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.normal_of_face:3
msgid "If `nfpt` is not specified, then the normal is evaluated at each geometrical node of the face."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.normal_of_faces:1
msgid "Return matrix of (at face centers) the normal vectors of convexes."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.normal_of_faces:3
msgid "`CVFIDs` is supposed a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.optimize_structure:1
msgid "Reset point and convex numbering."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.optimize_structure:3
msgid "After optimisation, the points (resp. convexes) will be consecutively numbered from ``0`` to ``Mesh.max_pid()-1`` (resp. ``Mesh.max_cvid()-1``)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.orphaned_pid:1
msgid "Return point #id which are not linked to a convex."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces:1
msgid "Synopsis: CVFIDs = Mesh.outer_faces(self[, dim][, CVIDs])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces:3
msgid "Return the set of faces not shared by two elements."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces:5
msgid "The output `CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). If `dim` is provided, the function is forced to detect faces of elements that have dimension `dim`, e.g. `dim`=2 will detect edges of surface elements, even if these belong to a 3D mesh. If `CVIDs` is not given, all convexes are considered, and the function basically returns the mesh boundary. If `CVIDs` is given, it returns the boundary of the convex set whose #ids are listed in `CVIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_in_ball:1
msgid "Synopsis: CVFIDs = Mesh.outer_faces_in_ball(self, vec center, scalar radius[, dim][, CVIDs])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_in_ball:3
msgid "Return the set of faces not shared by two convexes and lying within the ball of corresponding `center` and `radius`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_in_ball:5
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_in_box:5
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_with_direction:5
msgid "The output `CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the second one lists face numbers (local number in the convex). The argument `dim` works as in outer_faces(). If `CVIDs` is given, it returns portion of the boundary of the convex set defined by the #ids listed in `CVIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_in_box:1
msgid "Synopsis: CVFIDs = Mesh.outer_faces_in_box(self, vec pmin, vec pmax[, dim][, CVIDs])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_in_box:3
msgid "Return the set of faces not shared by two convexes and lying within the box defined by the corner points `pmin` and `pmax`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_with_direction:1
msgid "Synopsis: CVFIDs = Mesh.outer_faces_with_direction(self, vec v, scalar angle[, dim][, CVIDs])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.outer_faces_with_direction:3
msgid "Return the set of faces not shared by two convexes and with a mean outward vector lying within an angle `angle` (in radians) from vector `v`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid:1
msgid "Return the list of points #id of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid:3
msgid "Note that their numbering is not supposed to be contiguous from 0 to Mesh.nbpts()-1, especially if some points have been removed from the mesh. You can use Mesh.optimize_structure() to enforce a contiguous numbering."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_from_coords:1
msgid "Return point #id whose coordinates are listed in `PTS`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_from_coords:3
msgid "`PTS` is an array containing a list of point coordinates. On return, `PIDs` is a vector containing points #id for each point found in `eps` range, and -1 for those which where not found in the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_from_cvid:1
msgid "Return the points attached to each convex of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_from_cvid:3
msgid "If `CVIDs` is omitted, all the convexes will be considered (equivalent to `CVIDs = Mesh.max_cvid()`). `IDx` is a vector, length(IDx) = length(CVIDs)+1. `Pid` is a vector containing the concatenated list of #id of points of each convex in `CVIDs`. Each entry of `IDx` is the position of the corresponding convex point list in `Pid`. Hence, for example, the list of #id of points of the second convex is Pid[IDx(2):IDx(3)]."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_from_cvid:12
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pts_from_cvid:13
msgid "If `CVIDs` contains convex #id which do not exist in the mesh, their point list will be empty."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_in_cvids:1
msgid "Return point #id listed in `CVIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_in_cvids:3
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_in_regions:3
msgid "`PIDs` is a vector containing points #id."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_in_faces:1
msgid "Return point #id listed in `CVFIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_in_faces:3
msgid "`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers. On return, `PIDs` is a vector containing points #id."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pid_in_regions:1
msgid "Return point #id listed in `RIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pts:1
msgid "Return the list of point coordinates of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pts:3
msgid "Each column of the returned matrix contains the coordinates of one point. If the optional argument `PIDs` was given, only the points whose #id is listed in this vector are returned. Otherwise, the returned matrix will have Mesh.max_pid() columns, which might be greater than Mesh.nbpts() (if some points of the mesh have been destroyed and no call to Mesh.optimize_structure() have been issued). The columns corresponding to deleted points will be filled with NaN. You can use Mesh.pid() to filter such invalid points."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pts_from_cvid:1
msgid "Search point listed in `CVID`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.pts_from_cvid:3
msgid "Return `Pts` and `IDx`. If `CVIDs` is omitted, all the convexes will be considered (equivalent to `CVIDs = Mesh.max_cvid()`). `IDx` is a vector, length(IDx) = length(CVIDs)+1. `Pts` is a vector containing the concatenated list of points of each convex in `CVIDs`. Each entry of `IDx` is the position of the corresponding convex point list in `Pts`. Hence, for example, the list of points of the second convex is Pts[:,IDx[2]:IDx[3]]."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.quality:1
msgid "Return an estimation of the quality of each convex (:math:`0 \\leq Q \\leq 1`)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.refine:1
msgid "Use a Bank strategy for mesh refinement."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.refine:3
msgid "If `CVIDs` is not given, the whole mesh is refined. Note that the regions, and the finite element methods and integration methods of the MeshFem and MeshIm objects linked to this mesh will be automagically refined."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.region:1
msgid "Return the list of convexes/faces on the regions `RIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.region:3
msgid "`CVFIDs` is a two-rows matrix, the first row lists convex #ids, and the second lists face numbers (local number in the convex). (and -1 when the whole convex is in the regions)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.region_intersect:1
msgid "Replace the region number `r1` with its intersection with region number `r2`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.region_merge:1
msgid "Merge region number `r2` into region number `r1`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.region_subtract:1
msgid "Replace the region number `r1` with its difference with region number `r2`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.regions:1
msgid "Return the list of valid regions stored in the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.save:1
msgid "Save the mesh object to an ascii file."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.save:3
msgid "This mesh can be restored with Mesh('load', filename)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.set_pts:1
msgid "Replace the coordinates of the mesh points with those given in `PTS`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.set_region:1
msgid "Assigns the region number `rnum` to the set of convexes or/and convex faces provided in the matrix `CVFIDs`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.set_region:4
msgid "The first row of `CVFIDs` contains convex #ids, and the second row contains a face number in the convex (or ``-1`` for the whole convex (regions are usually used to store a list of convex faces, but you may also use them to store a list of convexes)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.set_region:9
msgid "If a vector is provided (or a one row matrix) the region will represent the corresponding set of convex."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.transform:1
msgid "Applies the matrix `T` to each point of the mesh."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.transform:3
msgid "Note that `T` is not required to be a ``NxN`` matrix (with ``N = Mesh.dim()``). Hence it is possible to transform a 2D mesh into a 3D one (and reciprocally)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.translate:1
msgid "Translates each point of the mesh from `V`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.triangulated_surface:1
msgid "[DEPRECATED FUNCTION! will be removed in a future release]"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.Mesh.triangulated_surface:3
msgid "Similar function to Mesh.curved_edges() : split (if necessary, i.e. if the geometric transformation if non-linear) each face into sub-triangles and return their coordinates in T (see also gf_compute('eval on P1 tri mesh'))"
msgstr ""
