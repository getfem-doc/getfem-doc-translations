# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-08 01:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/python/cmdref_MeshIm.rst:8
msgid "MeshIm"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:1
msgid "GetFEM MeshIm object"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:3
msgid "This object represents an integration method defined on a whole mesh (an  potentially on its boundaries)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:7
msgid "General constructor for MeshIm objects"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:9
msgid "``MIM = MeshIm('load', string fname[, Mesh m])`` Load a MeshIm from a file."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:12
msgid "If the mesh `m` is not supplied (this kind of file does not store the mesh), then it is read from the file and its descriptor is returned as the second output argument."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:16
msgid "``MIM = MeshIm('from string', string s[, Mesh m])`` Create a MeshIm object from its string description."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:19
msgid "See also ``MeshIm.char()``"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:21
msgid "``MIM = MeshIm('clone', MeshIm mim)`` Create a copy of a MeshIm."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:24
msgid "``MIM = MeshIm('levelset', MeshLevelSet mls, string where, Integ im[, Integ im_tip[, Integ im_set]])`` Build an integration method conformal to a partition defined implicitly by a levelset."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:28
msgid "The `where` argument define the domain of integration with respect to the levelset, it has to be chosen among 'ALL', 'INSIDE', 'OUTSIDE' and 'BOUNDARY'."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:32
msgid "it can be completed by a string defining the boolean operation to define the integration domain when there is more than one levelset."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:35
msgid "the syntax is very simple, for example if there are 3 different levelset,"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:38
msgid "\"a*b*c\" is the intersection of the domains defined by each levelset (this is the default behaviour if this function is not called)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:42
msgid "\"a+b+c\" is the union of their domains."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:44
msgid "\"c-(a+b)\" is the domain of the third levelset minus the union of the domains of the two others."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:47
msgid "\"!a\" is the complementary of the domain of a (i.e. it is the domain where a(x)>0)"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:50
msgid "The first levelset is always referred to with \"a\", the second with \"b\", and so on."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:53
msgid "for intance INSIDE(a*b*c)"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:55
msgid "CAUTION: this integration method will be defined only on the element cut by the level-set. For the 'ALL', 'INSIDE' and 'OUTSIDE' options it is mandatory to use the method ``MeshIm.set_integ()`` to define the integration method on the remaining elements."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:60
msgid "``MIM = MeshIm(Mesh m, [{Integ im|int im_degree}])`` Build a new MeshIm object."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm:63
msgid "For convenience, optional arguments (`im` or `im_degree`) can be provided, in that case a call to ``MeshIm.integ()`` is issued with these arguments."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.adapt:1
msgid "For a MeshIm levelset object only. Adapt the integration methods to a change of the levelset function."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.char:1
msgid "Output a string description of the MeshIm."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.char:3
msgid "By default, it does not include the description of the linked Mesh object."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.convex_index:1
msgid "Return the list of convexes who have a integration method."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.convex_index:3
msgid "Convexes who have the dummy IM_NONE method are not listed."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.display:1
msgid "displays a short summary for a MeshIm object."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.eltm:1
msgid "Return the elementary matrix (or tensor) integrated on the convex `cv`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.eltm:3
#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.im_nodes:6
msgid "**WARNING**"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.eltm:5
msgid "Be sure that the fem used for the construction of `em` is compatible with the fem assigned to element `cv` ! This is not checked by the function ! If the argument `f` is given, then the elementary tensor is integrated on the face `f` of `cv` instead of the whole convex."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.im_nodes:1
msgid "Return the coordinates of the integration points, with their weights."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.im_nodes:3
msgid "`CVids` may be a list of convexes, or a list of convex faces, such as returned by Mesh.region()"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.im_nodes:8
msgid "Convexes which are not part of the mesh, or convexes which do not have an approximate integration method do not have their corresponding entry (this has no meaning for exact integration methods!)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.integ:1
msgid "Return a list of integration methods used by the MeshIm."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.integ:3
msgid "`I` is an array of all Integ objects found in the convexes given in `CVids`. If `CV2I` was supplied as an output argument, it contains, for each convex listed in `CVids`, the index of its correspounding integration method in `I`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.integ:8
msgid "Convexes which are not part of the mesh, or convexes which do not have any integration method have their correspounding entry in `CV2I` set to -1."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.linked_mesh:1
msgid "Returns a reference to the Mesh object linked to `mim`."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.memsize:1
msgid "Return the amount of memory (in bytes) used by the MeshIm object."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.memsize:3
msgid "The result does not take into account the linked Mesh object."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.save:1
msgid "Saves a MeshIm in a text file (and optionally its linked mesh object)."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.set_integ:1
msgid "Synopsis: MeshIm.set_integ(self,{Integ im|int im_degree}[, ivec CVids])"
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.set_integ:3
msgid "Set the integration method."
msgstr ""

#: ../../../../../../venv/lib/python3.8/site-packages/getfem/getfem.py:docstring of getfem.getfem.MeshIm.set_integ:5
msgid "Assign an integration method to all convexes whose #ids are listed in `CVids`. If `CVids` is not given, the integration is assigned to all convexes. It is possible to assign a specific integration method with an integration method handle `im` obtained via Integ('IM_SOMETHING'), or to let getfem choose a suitable integration method with `im_degree` (choosen such that polynomials of :math:`\\text{degree} \\leq \\text{im\\_degree}` are exactly integrated. If `im_degree=-1`, then the dummy integration method IM_NONE will  be used.)"
msgstr ""
