# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-29 14:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/asm.rst:10
msgid "Some Standard assembly procedures (low-level generic assembly)"
msgstr ""

#: ../source/userdoc/asm.rst:12
msgid "Procedures defined in the file :file:`getfem/getfem_assembling.h` allow the assembly of stiffness matrices, mass matrices and boundary conditions for a few amount of classical partial differential equation problems. All the procedures have vectors and matrices template parameters in order to be used with any matrix library."
msgstr ""

#: ../source/userdoc/asm.rst:17
msgid "CAUTION: The assembly procedures do not clean the matrix/vector at the begining of the assembly in order to keep the possibility to perform several assembly operations on the same matrix/vector. Consequently, one has to clean the matrix/vector before the first assembly operation."
msgstr ""

#: ../source/userdoc/asm.rst:21
msgid "Laplacian (Poisson) problem"
msgstr ""

#: ../source/userdoc/asm.rst:23
msgid "An assembling procedure is defined to solve the problem:"
msgstr ""

#: ../source/userdoc/asm.rst:25
msgid "-\\mbox{div}(a(x)\\cdot\\mbox{grad}(u(x))) &= f(x)\\ \\mbox{ in }\\Omega,  \\\\ u(x) & = U(x)\\ \\mbox{ on }\\Gamma_D, \\\\ \\frac{\\partial u}{\\partial\\eta}(x) & = F(x)\\ \\mbox{ on }\\Gamma_N,"
msgstr ""

#: ../source/userdoc/asm.rst:31
msgid "where :math:`\\Omega` is an open domain of arbitrary dimension, :math:`\\Gamma_{D}` and :math:`\\Gamma_{N}` are parts of the boundary of :math:`\\Omega`, :math:`u(x)` is the unknown, :math:`a(x)` is a given coefficient, :math:`f(x)` is a given source term, :math:`U(x)` the prescribed value of :math:`u(x)` on :math:`\\Gamma_{D}` and :math:`F(x)` is the prescribed normal derivative of :math:`u(x)` on :math:`\\Gamma_{N}`. The function to be called to assemble the stiffness matrix is::"
msgstr ""

#: ../source/userdoc/asm.rst:41
msgid "where"
msgstr ""

#: ../source/userdoc/asm.rst:43
msgid "``SM`` is a matrix of any type having the right dimension (i.e. ``mfu.nb_dof()``),"
msgstr ""

#: ../source/userdoc/asm.rst:46
msgid "``mim`` is a variable of type |gf_mim| defining the integration method used,"
msgstr ""

#: ../source/userdoc/asm.rst:48
msgid "``mfu`` is a variable of type |gf_mf| and should define the finite element method for the solution,"
msgstr ""

#: ../source/userdoc/asm.rst:51
msgid "``mfd`` is a variable of type |gf_mf| (possibly equal to ``mfu``) describing the finite element method on which the coefficient :math:`a(x)` is defined,"
msgstr ""

#: ../source/userdoc/asm.rst:54
msgid "``A`` is the (real or complex) vector of the values of this coefficient on each degree of freedom of ``mfd``."
msgstr ""

#: ../source/userdoc/asm.rst:57
msgid "Both |mf| should use the same mesh (i.e. ``&mfu.linked_mesh() == &mfd.linked_mesh()``)."
msgstr ""

#: ../source/userdoc/asm.rst:60
msgid "It is important to pay attention to the fact that the integration methods stored in ``mim``, used to compute the elementary matrices, have to be chosen of sufficient order. The order has to be determined considering the polynomial degrees of element in ``mfu``, in ``mfd`` and the geometric transformations for non-linear cases. For example, with linear geometric transformations, if ``mfu`` is a :math:`P_{K}` FEM, and ``mfd`` is a :math:`P_{L}` FEM, the integration will have to be chosen of order :math:`\\geq 2(K-1) + L`, since the elementary integrals computed during the assembly of ``SM`` are :math:`\\int\\nabla\\varphi_i\\nabla\\varphi_j\\psi_k` (with :math:`\\varphi_i` the basis functions for ``mfu`` and :math:`\\psi_i` the basis functions for ``mfd``)."
msgstr ""

#: ../source/userdoc/asm.rst:71
msgid "To assemble the source term, the function to be called is::"
msgstr ""

#: ../source/userdoc/asm.rst:75
msgid "where ``B`` is a vector of any type having the correct dimension (still ``mfu.nb_dof()``), ``mim`` is a variable of type |gf_mim| defining the integration method used, ``mfd`` is a variable of type |gf_mf| (possibly equal to ``mfu``) describing the finite element method on which :math:`f(x)` is defined, and ``V`` is the vector of the values of :math:`f(x)` on each degree of freedom of ``mfd``."
msgstr ""

#: ../source/userdoc/asm.rst:81
msgid "The function ``asm_source_term`` also has an optional argument, which is a reference to a |gf_mr| (or just an integer ``i``, in which case ``mim.linked_mesh().region(i)`` will be considered). Hence for the Neumann condition on :math:`\\Gamma_{N}`, the same function::"
msgstr ""

#: ../source/userdoc/asm.rst:88
msgid "is used again, with ``nbound`` is the index of the boundary :math:`\\Gamma_{N}` in the linked mesh of ``mim``, ``mfu`` and ``mfd``."
msgstr ""

#: ../source/userdoc/asm.rst:91
msgid "There is two manner (well not really, since it is also possible to use Lagrange multipliers, or to use penalization) to take into account the Dirichlet condition on :math:`\\Gamma_{D}`, changing the linear system or explicitly reduce to the kernel of the Dirichlet condition. For the first manner, the following function is defined::"
msgstr ""

#: ../source/userdoc/asm.rst:99
msgid "where ``nbound`` is the index of the boundary :math:`\\Gamma_D` where the Dirichlet condition is applied, ``R`` is the vector of the values of :math:`R(x)` on each degree of freedom of ``mfu``. This operation should be the last one because it transforms the stiffness matrix ``SM``. It works only for Lagrange elements. At the end, one obtains the discrete system:"
msgstr ""

#: ../source/userdoc/asm.rst:105
msgid "[SM] U = B,"
msgstr ""

#: ../source/userdoc/asm.rst:109
msgid "where :math:`U` is the discrete unknown."
msgstr ""

#: ../source/userdoc/asm.rst:111
msgid "For the second manner, one should use the more general::"
msgstr ""

#: ../source/userdoc/asm.rst:116
msgid "See the Dirichlet condition as a general linear constraint that must satisfy the solution :math:`u`. This function does the assembly of Dirichlet conditions of type :math:`\\int_{\\Gamma} u(x)v(x) = \\int_{\\Gamma}r(x)v(x)` for all :math:`v` in the space of multiplier defined by ``mf_mult``. The fem ``mf_mult`` could be often chosen equal to ``mf_u`` except when ``mf_u`` is too \"complex\"."
msgstr ""

#: ../source/userdoc/asm.rst:122
msgid "This function just assemble these constraints into a new linear system :math:`H u=R`, doing some additional simplification in order to obtain a \"simple\" constraints matrix."
msgstr ""

#: ../source/userdoc/asm.rst:126
msgid "Then, one should call::"
msgstr ""

#: ../source/userdoc/asm.rst:130
msgid "which will return a vector :math:`U_d` which satisfies the Dirichlet condition, and an orthogonal basis :math:`N` of the kernel of :math:`H`. Hence, the discrete system that must be solved is:"
msgstr ""

#: ../source/userdoc/asm.rst:134
msgid "(N'[SM]N) U_{int}=N'(B-[SM]U_d),"
msgstr ""

#: ../source/userdoc/asm.rst:138
msgid "and the solution is $U=N U_{int}+U_d$. The output matrix :math:`N` should be a :math:`nbdof \\times nbdof` (sparse) matrix but should be resized to ``ncols`` columns. The output vector :math:`U_d` should be a :math:`nbdof` vector. A big advantage of this approach is to be generic, and do not prescribed for the finite element method ``mf_u`` to be of Lagrange type. If ``mf_u`` and ``mf_d`` are different, there is implicitly a projection (with respect to the :math:`L^2` norm) of the data on the finite element ``mf_u``."
msgstr ""

#: ../source/userdoc/asm.rst:146
msgid "If you want to treat the more general scalar elliptic equation :math:`\\mbox{div}(A(x)\\nabla u)`, where :math:`A(x)` is square matrix, you should use::"
msgstr ""

#: ../source/userdoc/asm.rst:153
msgid "The matrix data ``A`` should be defined on ``mfdata``. It is expected as a vector representing a :math:`n \\times n \\times nbdof` tensor (in Fortran order), where :math:`n` is the mesh dimension of ``mfu``, and :math:`nbdof` is the number of dof of ``mfdata``."
msgstr ""

#: ../source/userdoc/asm.rst:160
msgid "Linear Elasticity problem"
msgstr ""

#: ../source/userdoc/asm.rst:162
msgid "The following function assembles the stiffness matrix for linear elasticity::"
msgstr ""

#: ../source/userdoc/asm.rst:167
msgid "where ``SM`` is a matrix of any type having the right dimension (i.e. here ``mfu.nb_dof()``), ``mim`` is a variable of type |gf_mim| defining the integration method used, ``mfu`` is a variable of type |gf_mf| and should define the finite element method for the solution, ``mfd`` is a variable of type |gf_mf| (possibly equal to ``mfu``) describing the finite element method on which the Lamé coefficient are defined, ``LAMBDA`` and ``MU`` are vectors of the values of Lamé coefficients on each degree of freedom of ``mfd``."
msgstr ""

#: ../source/userdoc/asm.rst:177
msgid "Linear elasticity problem is a vectorial problem, so the target dimension of ``mfu`` (see ``mf.set_qdim(Q)``) should be the same as the dimension of the mesh."
msgstr ""

#: ../source/userdoc/asm.rst:181
msgid "In order to assemble source term, Neumann and Dirichlet conditions, same functions as in previous section can be used."
msgstr ""

#: ../source/userdoc/asm.rst:186
msgid "Stokes Problem with mixed finite element method"
msgstr ""

#: ../source/userdoc/asm.rst:188
msgid "The assembly of the mixed term :math:`B = - \\int p\\nabla.v` is done with::"
msgstr ""

#: ../source/userdoc/asm.rst:195
msgid "Assembling a mass matrix"
msgstr ""

#: ../source/userdoc/asm.rst:197
msgid "Assembly of a mass matrix between two finite elements::"
msgstr ""

#: ../source/userdoc/asm.rst:201
msgid "It is also possible to obtain mass matrix on a boundary with the same function:"
msgstr ""

#: ../source/userdoc/asm.rst:203
msgid "getfem::asm_mass_matrix(M, mim, mf1, mf2, nbound);"
msgstr ""

#: ../source/userdoc/asm.rst:205
msgid "where ``nbound`` is the region index in ``mim.linked_mesh()``, or a ``mesh_region`` object."
msgstr ""
