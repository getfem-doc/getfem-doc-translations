# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-15 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/export.rst:10
msgid "Export and view a solution"
msgstr ""

#: ../source/userdoc/export.rst:12
msgid "There are essentially four ways to view the result of getfem computations:"
msgstr ""

#: ../source/userdoc/export.rst:14
msgid "Matlab, with the matlab-interface."
msgstr ""

#: ../source/userdoc/export.rst:15
msgid "The open-source Mayavi or any other VTK files viewer."
msgstr ""

#: ../source/userdoc/export.rst:16
msgid "The open-source OpenDX program."
msgstr ""

#: ../source/userdoc/export.rst:17
msgid "The open-source Gmsh program."
msgstr ""

#: ../source/userdoc/export.rst:19
msgid "The objects that can be exported are, |m|, |mf| objects, and |smsl|."
msgstr ""

#: ../source/userdoc/export.rst:22
msgid "Saving mesh and mesh_fem objects for the Matlab interface"
msgstr ""

#: ../source/userdoc/export.rst:24
msgid "If you have installed the Matlab interface, you can simply use ``mesh_fem::write_to_file`` and save the solution as a plain text file, and then, load them into Matlab. For example, supposing you have a solution ``U`` on a |mf| ``mf``,::"
msgstr ""

#: ../source/userdoc/export.rst:36
msgid "and then, under matlab:"
msgstr ""

#: ../source/userdoc/export.rst:44
msgid "See the getfem-matlab interface documentation for more details."
msgstr ""

#: ../source/userdoc/export.rst:46
msgid "Two other file formats are supported for export: the `VTK`_ file format, the `OpenDX`_ file format and the `Gmsh`_ post-processing file format. Both can export either a |gf_m| or |gf_mf| , but also the more versatile |gf_smsl|."
msgstr ""

#: ../source/userdoc/export.rst:50
msgid "Examples of use can be found in the examples of the tests directory."
msgstr ""

#: ../source/userdoc/export.rst:55
msgid "Producing mesh slices"
msgstr ""

#: ../source/userdoc/export.rst:57
msgid "|gf| provides \"slicers\" objects which are dedicated to generating post-treatment data from meshes and solutions. These slicers, defined in the file :file:`getfem/getfem_mesh_slicers.h` take a |m| (and sometimes a |mf| with a solution field) on input, and produce a set of simplices after applying some operations such as *intersection with a plane*, *extraction of the mesh boundary*, *refinement of each convex*, *extraction of isosurfaces*, etc. The output of these slicers can be stored in a |gf_smsl| object (see the file :file:`getfem/getfem_mesh_slice.h`). A |smsl| object may be considered as a P1 discontinuous FEM on a non-conformal mesh with fast interpolation ability. Slices are made of segments, triangles and tetrahedrons, so the convexes of the original mesh are always simplexified."
msgstr ""

#: ../source/userdoc/export.rst:69
msgid "All slicer operation inherit from |gf_sl_a|, it is very easy to create a new slicer. Example of slicers are (some of them use a |gf_sl_ddb| which is just a reference to a |mf| ``mf`` and a field ``U`` on this |mf|)."
msgstr ""

#: ../source/userdoc/export.rst:75
msgid "empty slicer."
msgstr ""

#: ../source/userdoc/export.rst:79
msgid "extract the boundary of a mesh."
msgstr ""

#: ../source/userdoc/export.rst:83
msgid "apply a deformation to the mesh , the deformation field is defined on a |mf|."
msgstr ""

#: ../source/userdoc/export.rst:87
msgid "cut the mesh with a half space (if ``orient`` = -1 or +1), or a plane (if ``orient`` = 0), ``x0`` being a node of the plane, and ``n`` being a normal of the plane."
msgstr ""

#: ../source/userdoc/export.rst:93
msgid "cut with the interior (``orient``=-1), boundary (``orient``=0) or exterior (``orient``=+1) or a sphere of center ``x0`` and radius ``R``."
msgstr ""

#: ../source/userdoc/export.rst:98
msgid "slice with the interior/boundary/exterior of a cylinder of axis ``(x0,x1)`` and radius ``R``."
msgstr ""

#: ../source/userdoc/export.rst:103
msgid "cut with the isosurface defined by the scalar field ``mfU`` and ``val``. Keep only simplices where ::math:`u(x)<val` (``orient``=-1), :math:`u(x)=val` (``orient=0`` or :math:`u(x)>val`."
msgstr ""

#: ../source/userdoc/export.rst:109
msgid "cut the convexes with the convexes of the mesh ``m2``."
msgstr ""

#: ../source/userdoc/export.rst:113
msgid "merges the output of two slicer operations."
msgstr ""

#: ../source/userdoc/export.rst:117
msgid "intersect the output of two slicer operations."
msgstr ""

#: ../source/userdoc/export.rst:121
msgid "return the complementary of a slicer operation."
msgstr ""

#: ../source/userdoc/export.rst:125
msgid "slicer whose side-effect is to build the mesh ``edges_m`` with the edges of the sliced mesh."
msgstr ""

#: ../source/userdoc/export.rst:130
msgid "in some (rare) occasions , it might be useful to build a mesh from a slice. Note however that there is absolutely no guaranty that the mesh will be conformal (although it is often the case)."
msgstr ""

#: ../source/userdoc/export.rst:136
msgid "record the output of the slicing operation into a |smsl| object. Note that it is often more convenient to use the ``stored_mesh_slice::build(...)`` method to achieve the same result."
msgstr ""

#: ../source/userdoc/export.rst:142
msgid "shrink or expand each convex with respect to its gravity center."
msgstr ""

#: ../source/userdoc/export.rst:144
msgid "In order to apply these slicers, a ``getfem::mesh_slicer(mesh&)`` object should be created, and the |gf_sl_a| are then stacked with ``mesh_slicer::push_back_action(slicer_action&)`` and ``mesh_slicer::push_front_action(slicer_action&)``. The slicing operation is finally executed with ``mesh_slicer::exec(int nrefine)`` (or ``mesh_slicer::exec(int nrefine, const mesh_region &cvlst)`` to apply the operation to a subset of the mesh, or its boundary etc.)."
msgstr ""

#: ../source/userdoc/export.rst:152
msgid "The ``nrefine`` parameter is very important, as the \"precision\" of the final result will depend on it: if the data that is represented on the final slice is just P1 data on convexes with a linear geometric transformation, ``nrefine = 1`` is the right choice, but for P2, P3, non linear transformation etc, it is better to refine each convex of the original mesh during the slicing operation. This allows an accurate representation of any finite element field onto a very simple structure (linear segment/triangles/tetrahedrons with P1 discontinuous data on them) which is what most visualization programs (gmsh, mayavi, opendx, matlab, etc.) expect."
msgstr ""

#: ../source/userdoc/export.rst:161
msgid "Example of use (cut the boundary of a mesh ``m`` with a half-space, and save the result into a |smsl|)::"
msgstr ""

#: ../source/userdoc/export.rst:174
msgid "In order to build a |gf_smsl| object during the slicing operation, the ``stored_mesh_slice::build()`` method is often more convenient than using explicitly the ``slicer_build_stored_mesh_slice`` slicer::"
msgstr ""

#: ../source/userdoc/export.rst:181
msgid "The simplest way to use these slices is to export them to |vtk|, |opendx|, or |gmsh|. The file :file:`getfem/getfem_export.h` contains three classes: |gf_vtk_export|, |gf_dx_export| and |gf_pos_export|."
msgstr ""

#: ../source/userdoc/export.rst:187
msgid "Exporting |m|, |mf| or slices to VTK"
msgstr ""

#: ../source/userdoc/export.rst:189
msgid "First, it is important to know the limitation of VTK data files: each file can contain only one mesh, with at most one scalar field and one vector field and one tensor field on this mesh (in that order). VTK files can handle data on segment, triangles, quadrangles, tetrahedrons and hexahedrons. Although quadratic triangles, segments etc are said to be supported, it is just equivalent to using ``nrefine=2`` when building a slice. VTK data file do support meshes with more than one type of element (i.e. meshes with triangles and quadrangles, for example)."
msgstr ""

#: ../source/userdoc/export.rst:198
msgid "For example, supposing that a |smsl| ``sl`` has already been built::"
msgstr ""

#: ../source/userdoc/export.rst:207
msgid "In this example, the fields ``P`` and ``U`` are interpolated on the slice nodes, and then written into the VTK field. The vector fields should always be written after the scalar fields (and the tensor fields should be written last)."
msgstr ""

#: ../source/userdoc/export.rst:211
msgid "It is also possible to export a |mf| without having to build a slice::"
msgstr ""

#: ../source/userdoc/export.rst:220
msgid "Note however that with this approach, the ``vtk_export`` will map each convex/fem of ``mfu`` to a VTK element type. As VTK does not handle elements of degree greater than 2, there will be a loss of precision for higher degree FEMs."
msgstr ""

#: ../source/userdoc/export.rst:225
msgid "Exporting |m|, |mf| or slices to OpenDX"
msgstr ""

#: ../source/userdoc/export.rst:227
msgid "The OpenDX data file is more versatile than the VTK one. It is able to store more that one mesh, any number of fields on these meshes etc. However, it does only handle elements of degree 1 and 0 (segments, triangles, tetrahedrons, quadrangles etc.). And each mesh can only be made of one type of element, it cannot mix triangles and quadrangles in a same object. For that reason, it is generally preferable to export |gf_smsl| objects (in which non simplex elements are simplexified, and which allows refinement of elements) than |gf_mf| and |gf_m| objects."
msgstr ""

#: ../source/userdoc/export.rst:236
msgid "The basic usage is very similar to |gf_vtk_export|::"
msgstr ""

#: ../source/userdoc/export.rst:242
msgid "Moreover, |gf_dx_export| is able to reopen a '.dx' file and append new data into it. Hence it is possible, if many time-steps are to be saved, to view intermediate results in OpenDX during the computations. The prototype of the constructor is::"
msgstr ""

#: ../source/userdoc/export.rst:249
msgid "An example of use, with multiple time steps (taken from :file:`tests/dynamic_friction.cc`)::"
msgstr ""

#: ../source/userdoc/export.rst:270
msgid "In this example, an OpenDX \"time series\" is created, for each time step, two data fields are saved: a vector field called \"deformation\", and a scalar field called \"von_mises_stress\"."
msgstr ""

#: ../source/userdoc/export.rst:274
msgid "Note also that the ``dx_export::exporting_mesh_edges()`` function has been called. It implies that for each mesh exported, the edges of the original mesh are also exported (into another OpenDX mesh). In this example, you have access in OpenDX to 4 data fields: \"deformation\", \"deformation_edges\", \"von_mises_stress\" and \"von_mises_stress_edges\"."
msgstr ""

#: ../source/userdoc/export.rst:280
msgid "The ``tests/dynamic_friction.net`` is an example of OpenDX program for these data (run it with ``cd tests; dx -edit dynamic_friction.net`` , menu \"Execute/sequencer\")."
msgstr ""
