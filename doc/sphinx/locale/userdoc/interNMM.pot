# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2018 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-22 01:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/userdoc/interNMM.rst:10
msgid "Interpolation/projection of a finite element method on non-matching meshes"
msgstr ""

#: ../source/userdoc/interNMM.rst:12
msgid "A special finite element method is defined in :file:`getfem/getfem_interpolated_fem.h` which is not a real finite element method, but a pseudo-fem which interpolates a finite element method defined on another mesh. If you need to assemble a matrix with finite element methods defined on different meshes, you may use the \"interpolated fem\" or \"projected fem\" for that purpose::"
msgstr ""

#: ../source/userdoc/interNMM.rst:24
msgid "Because each base function of the finite element method has to be interpolated, such a computation can be a heavy procedure. By default, the interpolated fem object store the interpolation data."
msgstr ""

#: ../source/userdoc/interNMM.rst:28
msgid "The interpolation is made on each Gauss point of the integration methods of ``mim``, so only this integration method can be used in assembly procedures."
msgstr ""

#: ../source/userdoc/interNMM.rst:32
msgid "For instance if you need to compute the mass matrix between two different finite element methods defined on two different meshes, this is an example of code which interpolate the second FEM. on the mesh of the first FEM., assuming that ``mf`` describes the finite element method and ``mim`` is the chosen integration method::"
msgstr ""

#: ../source/userdoc/interNMM.rst:44
msgid "The object pointed by ``ifem`` contains all the information concerning the interpolation. It could use a lot of memory. As pfem is a shared_ptr, the interpolated fem will be automatically destroyed when the last pointer on it is destroyed. To obtain a better accuracy, it is better to refine the integration method (with ``IM_STRUCTURED_COMPOSITE`` for instance) rather than increase its order."
msgstr ""

#: ../source/userdoc/interNMM.rst:53
msgid "mixed methods with different meshes"
msgstr ""

#: ../source/userdoc/interNMM.rst:54
msgid "Instead of using the previous tools (interpolated and projected fems), it is possible to use a finite element variable defined on an another mesh than the one on which an assembly is computed using the \"interpolate transformation\" tool of the weak form language (see :ref:`ud-gasm-high-transf` ), the finite element variables will be interpolated on each Gauss point. There is no restriction on the dimensions of the mesh used, which means in particular that a two-dimensional fem variable can be interpolated on a one-dimensional mesh (allowing the coupling of shell and beam elements, for instance). It is also possible to use some transformations like polar coordinates to euclidean ones."
msgstr ""

#: ../source/userdoc/interNMM.rst:67
msgid "mortar methods"
msgstr ""

#: ../source/userdoc/interNMM.rst:68
msgid "Mortar methods are supported by |gf|. The coupling term between non matching meshes can in particular be computed using the interpolate transformations of the weak form language (see :ref:`ud-gasm-high-transf`)."
msgstr ""
