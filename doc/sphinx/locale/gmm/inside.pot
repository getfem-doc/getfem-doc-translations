# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-26 01:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/gmm/inside.rst:11
msgid "Deeper inside |gmm|"
msgstr ""

#: ../source/gmm/inside.rst:15
msgid "The linalg_traits structure"
msgstr ""

#: ../source/gmm/inside.rst:17
msgid "The major principle of |gmm| is that each vector and matrix type has a corresponding structure (which is never instantiated) named ``linalg_traits`` containing all informations on it. For instance, the component ``linalg_type`` of this structure is set to ``abstract_vector`` or ``abstract_matrix`` if the corresponding type represent a vector or a matrix. If ``V`` is an interfaced type of vector and ``M`` an interface type of matrix, it is possible to access to this component with::"
msgstr ""

#: ../source/gmm/inside.rst:22
msgid "The types ``abstract_vector`` and ``abstract_matrix`` are defined in ``gmm/gmm_def.h``. They are void type allowing to specialize generic algorithms."
msgstr ""

#: ../source/gmm/inside.rst:24
msgid "For a vector type, the following informations are available::"
msgstr ""

#: ../source/gmm/inside.rst:64
msgid "and for a matrix type::"
msgstr ""

#: ../source/gmm/inside.rst:115
msgid "This is this structure you have to fill in to interface a new vector or matrix type. You can see some examples in ``gmm/gmm_interface.h`` . Most of the generic algorithms are in ``gmm/gmm_blas.h`` ."
msgstr ""

#: ../source/gmm/inside.rst:119
msgid "How to iterate on the components of a vector"
msgstr ""

#: ../source/gmm/inside.rst:121
msgid "Here is an example which accumulate the components of a vector. It is assumed that ``V`` is a vector type and ``v`` an instantiated vector::"
msgstr ""

#: ../source/gmm/inside.rst:130
msgid "This piece of code will work with every kind of interfaced vector."
msgstr ""

#: ../source/gmm/inside.rst:132
msgid "For sparse or skyline vectors, it is possible to obtain the index of the components pointed by the iterator with ``it.index()``. Here is the example of the scalar product of two sparse or skyline vectors, assuming ``V1`` and ``V2`` are two vector types and ``v1``, ``v2`` two corresponding instantiated vectors::"
msgstr ""

#: ../source/gmm/inside.rst:153
msgid "This algorithm use the fact that indices are increasing in a sparse vector. This code will not work for dense vectors because dense vector iterators do not have the method ``it.index()``."
msgstr ""

#: ../source/gmm/inside.rst:156
msgid "How to iterate on a matrix"
msgstr ""

#: ../source/gmm/inside.rst:158
msgid "You can iterate on the rows of a matrix if it is not a column major matrix and on the columns of a matrix if it is not a row major matrix (the type ``gmm::dense_matrix<T>`` has is sub orientation type as col_and_rox, so you can iterate on both rows and columns)."
msgstr ""

#: ../source/gmm/inside.rst:160
msgid "If you need not to be optimal, you can use a basic loop like that::"
msgstr ""

#: ../source/gmm/inside.rst:170
msgid "But you can also use iterators, like that::"
msgstr ""

#: ../source/gmm/inside.rst:186
msgid "How to make your algorithm working on all type of matrices"
msgstr ""

#: ../source/gmm/inside.rst:188
msgid "For this, you will generally have to specialize it. For instance, let us take a look at the code for ``gmm::nnz`` which count the number of stored components (in fact, the real ``gmm::nnz`` algorithm is specialized in most of the cases so that it does not count the components one by one)::"
msgstr ""

#: ../source/gmm/inside.rst:222
msgid "The first function dispatch on the second or the third function respectively if the parameter is a vector or a matrix. The third function dispatch again on the fourth and the fifth function respectively if the matrix is row_major or column major. Of course, as the function are declared ``inline``, at least the two dispatcher functions will not be implemented. Which means that this construction is not costly."
msgstr ""
