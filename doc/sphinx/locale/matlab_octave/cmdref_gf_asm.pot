# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-11 02:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/matlab_octave/cmdref_gf_asm.rst:8
msgid "gf_asm"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:10
msgid "**Synopsis**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:42
msgid "**Description :**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:46
msgid "General assembly function."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:48
msgid "Many of the functions below use more than one mesh_fem: the main mesh_fem (mf_u) used for the main unknown, and data mesh_fem (mf_d) used for the data. It is always assumed that the Qdim of mf_d is equal to 1: if mf_d is used to describe vector or tensor data, you just have to \"stack\" (in fortran ordering) as many scalar fields as necessary."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:56
msgid "**Command list :**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:60
msgid "``{...} = gf_asm('generic', mesh_im mim, int order, string expression, int region, [model model, ['Secondary_domain', 'name',]] [string varname, int is_variable[, {mesh_fem mf, mesh_imd mimd}], value], ['select_output', 'varname1'[, 'varname2]], ...)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:62
msgid "High-level generic assembly procedure for volumic or boundary assembly."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:64
msgid "Performs the generic assembly of `expression` with the integration method `mim` on the mesh region of index `region` (-1 means all elements of the mesh). The same mesh should be shared by the integration method and all the finite element methods or mesh_im_data corresponding to the variables."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:70
msgid "`order` indicates either that the (scalar) potential (order = 0) or the (vector) residual (order = 1) or the tangent (matrix) (order = 2) is to be computed."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:74
msgid "`model` is an optional parameter allowing to take into account all variables and data of a model. Note that all enabled variables of the model will occupy space in the returned vector/matrix corresponding to their degrees of freedom in the global system, even if they are not present in `expression`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:80
msgid "The variables and constants (data) are listed after the region number (or optionally the model). For each variable/constant, a name must be given first (as it is referred in the assembly string), then an integer equal to 1 or 0 is expected respectively for declaring a variable or a constant, then the finite element method if it is a fem variable/constant or the mesh_im_data if it is data defined on integration points, and the vector representing the value of the variable/constant. It is possible to give an arbitrary number of variable/constant. The difference between a variable and a constant is that test functions are only available for variables, not for constants."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:92
msgid "`select_output` is an optional parameter which allows to reduce the output vector (for `order` equal to 1) or the matrix (for `order` equal to 2) to the degrees of freedom of the specified variables. One variable has to be specified for a vector output and two for a matrix output."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:98
msgid "Note that if several variables are given, the assembly of the tangent matrix/residual vector will be done considering the order in the call of the function (the degrees of freedom of the first variable, then of the second one, and so on). If a model is provided, all degrees of freedom of the model will be counted first, even if some of the model variables do not appear in `expression`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:105
msgid "For example, the L2 norm of a vector field \"u\" can be computed with::"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:111
msgid "The nonhomogeneous Laplacian stiffness matrix of a scalar field can be evaluated with::"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:120
msgid "``M = gf_asm('mass matrix', mesh_im mim, mesh_fem mf1[, mesh_fem mf2[, int region]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:122
msgid "Assembly of a mass matrix."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:124
#: ../source/matlab_octave/cmdref_gf_asm.rst:134
#: ../source/matlab_octave/cmdref_gf_asm.rst:145
#: ../source/matlab_octave/cmdref_gf_asm.rst:192
#: ../source/matlab_octave/cmdref_gf_asm.rst:202
#: ../source/matlab_octave/cmdref_gf_asm.rst:212
#: ../source/matlab_octave/cmdref_gf_asm.rst:274
#: ../source/matlab_octave/cmdref_gf_asm.rst:407
#: ../source/matlab_octave/cmdref_gf_asm.rst:415
#: ../source/matlab_octave/cmdref_gf_asm.rst:423
msgid "Return a spmat object."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:128
msgid "``L = gf_asm('laplacian', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec a[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:130
msgid "Assembly of the matrix for the Laplacian problem."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:132
msgid ":math:`\\nabla\\cdot(a(x)\\nabla u)`  with `a` a scalar."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:138
msgid "``Le = gf_asm('linear elasticity', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec lambda_d, vec mu_d[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:140
msgid "Assembles of the matrix for the linear (isotropic) elasticity problem."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:142
msgid ":math:`\\nabla\\cdot(C(x):\\nabla u)` with :math:`C` defined via `lambda_d` and `mu_d`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:149
msgid "``TRHS = gf_asm('nonlinear elasticity', mesh_im mim, mesh_fem mf_u, vec U, string law, mesh_fem mf_d, mat params, {'tangent matrix'|'rhs'|'incompressible tangent matrix', mesh_fem mf_p, vec P|'incompressible rhs', mesh_fem mf_p, vec P})``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:151
msgid "Assembles terms (tangent matrix and right hand side) for nonlinear elasticity."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:153
msgid "The solution `U` is required at the current time-step. The `law` may be choosen among:"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:156
msgid "'SaintVenant Kirchhoff': Linearized law, should be avoided. This law has the two usual Lame coefficients as parameters, called lambda and mu."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:159
msgid "'Mooney Rivlin': This law has three parameters, called C1, C2 and D1. Can be preceded with the words 'compressible' or 'incompressible' to force a specific version. By default, the incompressible version is considered which requires only the first two material coefficients."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:164
msgid "'neo Hookean': A special case of the 'Mooney Rivlin' law that requires one material coefficient less (C2 = 0). By default, its compressible version is used."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:167
msgid "'Ciarlet Geymonat': This law has 3 parameters, called lambda, mu and gamma, with gamma chosen such that gamma is in ]-lambda/2-mu, -mu[."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:171
msgid "The parameters of the material law are described on the mesh_fem `mf_d`. The matrix `params` should have `nbdof(mf_d)` columns, each row correspounds to a parameter."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:175
msgid "The last argument selects what is to be built: either the tangent matrix, or the right hand side. If the incompressibility is considered, it should be followed by a mesh_fem `mf_p`, for the pression."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:180
msgid "Return a spmat object (tangent matrix), vec object (right hand side), tuple of spmat objects (incompressible tangent matrix), or tuple of vec objects (incompressible right hand side)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:186
msgid "``A = gf_asm('helmholtz', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec k[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:188
msgid "Assembly of the matrix for the Helmholtz problem."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:190
msgid ":math:`\\Delta u + k^2 u` = 0,  with `k` complex scalar."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:196
msgid "``A = gf_asm('bilaplacian', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec a[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:198
msgid "Assembly of the matrix for the Bilaplacian problem."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:200
#: ../source/matlab_octave/cmdref_gf_asm.rst:210
msgid ":math:`\\Delta(a(x)\\Delta u) = 0`   with `a` scalar."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:206
msgid "``A = gf_asm('bilaplacian KL', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec a, vec nu[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:208
msgid "Assembly of the matrix for the Bilaplacian problem with Kirchhoff-Love formulation."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:216
msgid "``V = gf_asm('volumic source', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec fd[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:218
msgid "Assembly of a volumic source term."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:220
msgid "Output a vector `V`, assembled on the mesh_fem `mf_u`, using the data vector `fd` defined on the data mesh_fem `mf_d`. `fd` may be real or complex-valued."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:224
#: ../source/matlab_octave/cmdref_gf_asm.rst:236
#: ../source/matlab_octave/cmdref_gf_asm.rst:388
#: ../source/matlab_octave/cmdref_gf_asm.rst:399
msgid "Return a vec object."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:228
msgid "``B = gf_asm('boundary source', int bnum, mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec G)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:230
msgid "Assembly of a boundary source term."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:232
msgid "`G` should be a [Qdim x N] matrix, where N is the number of dof of `mf_d`, and Qdim is the dimension of the unkown u (that is set when creating the mesh_fem)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:240
msgid "``{HH, RR} = gf_asm('dirichlet', int bnum, mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, mat H, vec R [, scalar threshold])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:242
msgid "Assembly of Dirichlet conditions of type `h.u = r`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:244
msgid "Handle `h.u = r` where h is a square matrix (of any rank) whose size is equal to the dimension of the unkown u. This matrix is stored in `H`, one column per dof in `mf_d`, each column containing the values of the matrix h stored in fortran order:"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:249
msgid "`H(:,j) = [h11(x_j) h21(x_j) h12(x_j) h22(x_j)]`"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:253
msgid "if u is a 2D vector field."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:255
msgid "Of course, if the unknown is a scalar field, you just have to set `H = ones(1, N)`, where N is the number of dof of `mf_d`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:258
msgid "This is basically the same than calling gf_asm('boundary qu term') for `H` and calling gf_asm('neumann') for `R`, except that this function tries to produce a 'better' (more diagonal) constraints matrix (when possible)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:263
msgid "See also gf_spmat_get(spmat S, 'Dirichlet_nullspace')."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:266
msgid "``Q = gf_asm('boundary qu term',int boundary_num, mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, mat q)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:268
msgid "Assembly of a boundary qu term."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:270
msgid "`q` should be be a [Qdim x Qdim x N] array, where N is the number of dof of `mf_d`, and Qdim is the dimension of the unkown u (that is set when creating the mesh_fem)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:278
msgid "``gf_asm('define function', string name, int nb_args, string expression[, string expression_derivative_t[, string expression_derivative_u]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:280
msgid "Define a new function `name` which can be used in high level generic assembly. The function can have one or two parameters. In `expression` all available predefined function or operation of the generic assembly can be used. However, no reference to some variables or data can be specified. The argument of the function is `t` for a one parameter function and `t` and `u` for a two parameter function. For instance 'sin(pi*t)+2*t*t' is a valid expression for a one parameter function and 'sin(max(t,u)*pi)' is a valid expression for a two parameters function. `expression_derivative_t` and `expression_derivative_u` are optional expressions for the derivatives with respect to `t` and `u`. If they are not furnished, a symbolic derivation is used."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:295
msgid "``gf_asm('undefine function', string name)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:297
msgid "Cancel the definition of a previously defined function `name` for the high level generic assembly."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:301
msgid "``gf_asm('define linear hardening function', string name, scalar sigma_y0, scalar H, ... [string 'Frobenius'])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:303
msgid "Define a new linear hardening function under the name `name`, with initial yield stress `sigma_y0` and hardening modulus H. If an extra string argument with the value 'Frobenius' is provided, the hardening function is expressed in terms of Frobenius norms of its input strain and output stress, instead of their Von-Mises equivalents."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:310
msgid "``gf_asm('define Ramberg Osgood hardening function', string name, scalar sigma_ref, {scalar eps_ref | scalar E, scalar alpha}, scalar n[, string 'Frobenius'])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:312
msgid "Define a new Ramberg Osgood hardening function under the name `name`, with initial yield stress `sigma_y0` and hardening modulus H. If an extra string argument with the value 'Frobenius' is provided, the hardening function is expressed in terms of Frobenius norms of its input strain and output stress, instead of their Von-Mises equivalents."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:319
msgid "``gf_asm('expression analysis', string expression [, {mesh mesh | mesh_im mim}] [, der_order] [, model model] [, string varname, int is_variable[, {mesh_fem mf | mesh_imd mimd}], ...])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:321
msgid "Analyse a high-level generic assembly expression and print information about the provided expression."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:325
msgid "``{...} = gf_asm('volumic' [,CVLST], expr [, mesh_ims, mesh_fems, data...])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:327
msgid "Low-level generic assembly procedure for volumic assembly."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:329
msgid "The expression `expr` is evaluated over the mesh_fem's listed in the arguments (with optional data) and assigned to the output arguments. For details about the syntax of assembly expressions, please refer to the getfem user manual (or look at the file getfem_assembling.h in the GetFEM sources)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:335
msgid "For example, the L2 norm of a field can be computed with::"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:341
msgid "The Laplacian stiffness matrix can be evaluated with::"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:348
msgid "``{...} = gf_asm('boundary', int bnum, string expr [, mesh_im mim, mesh_fem mf, data...])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:350
msgid "Low-level generic boundary assembly."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:352
msgid "See the help for gf_asm('volumic')."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:355
msgid "``Mi = gf_asm('interpolation matrix', mesh_fem mf, {mesh_fem mfi | vec pts})``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:357
msgid "Build the interpolation matrix from a mesh_fem onto another mesh_fem or a set of points."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:359
msgid "Return a matrix `Mi`, such that `V = Mi.U` is equal to gf_compute('interpolate_on',mfi). Useful for repeated interpolations. Note that this is just interpolation, no elementary integrations are involved here, and `mfi` has to be lagrangian. In the more general case, you would have to do a L2 projection via the mass matrix."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:366
msgid "`Mi` is a spmat object."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:370
msgid "``Me = gf_asm('extrapolation matrix',mesh_fem mf,  {mesh_fem mfe | vec pts})``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:372
msgid "Build the extrapolation matrix from a mesh_fem onto another mesh_fem or a set of points."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:374
msgid "Return a matrix `Me`, such that `V = Me.U` is equal to gf_compute('extrapolate_on',mfe). Useful for repeated extrapolations."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:378
msgid "`Me` is a spmat object."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:382
msgid "``B = gf_asm('integral contact Uzawa projection', int bnum, mesh_im mim, mesh_fem mf_u, vec U, mesh_fem mf_lambda, vec vec_lambda, mesh_fem mf_obstacle, vec obstacle, scalar r [, {scalar coeff | mesh_fem mf_coeff, vec coeff} [, int option[, scalar alpha, vec W]]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:386
msgid "Specific assembly procedure for the use of an Uzawa algorithm to solve"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:385
msgid "contact problems. Projects the term $-(\\lambda - r (u_N-g))_-$ on the finite element space of $\\lambda$."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:392
msgid "``B = gf_asm('level set normal source term', int bnum, mesh_im mim, mesh_fem mf_u, mesh_fem mf_lambda, vec vec_lambda, mesh_fem mf_levelset, vec levelset)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:394
msgid "Performs an assembly of the source term represented by `vec_lambda` on `mf_lambda` considered to be a component in the direction of the gradient of a levelset function (normal to the levelset) of a vector field defined on `mf_u` on the boundary `bnum`."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:403
msgid "``M = gf_asm('lsneuman matrix', mesh_im mim, mesh_fem mf1, mesh_fem mf2, levelset ls[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:405
msgid "Assembly of a level set Neuman  matrix."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:411
msgid "``M = gf_asm('nlsgrad matrix', mesh_im mim, mesh_fem mf1, mesh_fem mf2, levelset ls[, int region])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:413
msgid "Assembly of a nlsgrad matrix."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:419
msgid "``M = gf_asm('stabilization patch matrix', @tm mesh, mesh_fem mf,  mesh_im mim, real ratio, real h)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:421
msgid "Assembly of stabilization patch matrix ."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:427
msgid "``{Q, G, H, R, F} = gf_asm('pdetool boundary conditions', mf_u, mf_d, b, e[, f_expr])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:429
msgid "Assembly of pdetool boundary conditions."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_asm.rst:431
msgid "`B` is the boundary matrix exported by pdetool, and `E` is the edges array. `f_expr` is an optionnal expression (or vector) for the volumic term. On return `Q, G, H, R, F` contain the assembled boundary conditions (`Q` and `H` are matrices), similar to the ones returned by the function ASSEMB from PDETOOL."
msgstr ""
