# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-14 02:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/matlab_octave/examples.rst:10
msgid "Examples"
msgstr ""

#: ../source/matlab_octave/examples.rst:15
msgid "A step-by-step basic example"
msgstr ""

#: ../source/matlab_octave/examples.rst:17
msgid "This example shows the basic usage of getfem, on the Ã¼ber-canonical problem above all others: solving the :envvar:`Laplacian`, :math:`-\\Delta u = f` on a square, with the Dirichlet condition :math:`u = g(x)` on the domain boundary. You can find the **m-file** of this example under the name **demo_step_by_step.m** in the directory ``interface/tests/matlab-octave/`` of the |gf| distribution."
msgstr ""

#: ../source/matlab_octave/examples.rst:23
msgid "The first step is to **create a mesh**. It is possible to create simple structured meshes or unstructured meshes for simple geometries (see ``gf_mesh('generate', mesher_object mo, scalar h)``) or to rely on an external mesher (see ``gf_mesh('import', string FORMAT, string FILENAME))``).  For this example, we just consider a regular **cartesian mesh** whose nodes are :math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}`::"
msgstr ""

#: ../source/matlab_octave/examples.rst:34
msgid "If you try to look at the value of ``m``, you'll notice that it appears to be a structure containing two integers. The first one is its identifier, the second one is its class-id, i.e. an identifier of its type. This small structure is just an \"handle\" or \"descriptor\" to the real object, which is stored in the |gf| memory and cannot be represented via |octv| and |mlab| data structures. Anyway, you can still inspect the |gf| objects via the command ``gf_workspace('stats')``."
msgstr ""

#: ../source/matlab_octave/examples.rst:40
msgid "Now we can try to have a **look at the mesh**, with its vertices numbering and the convexes numbering::"
msgstr ""

#: ../source/matlab_octave/examples.rst:46
msgid "As you can see, the mesh is regular, and the numbering of its nodes and convexes is also regular (this is guaranteed for cartesian meshes, but do not hope a similar numbering for the degrees of freedom)."
msgstr ""

#: ../source/matlab_octave/examples.rst:50
msgid "The next step is to **create a mesh_fem object**. This one links a mesh with a set of FEM::"
msgstr ""

#: ../source/matlab_octave/examples.rst:57
msgid "The first instruction builds a new |mlab_mf| object, the second argument specifies that this object will be used to interpolate scalar fields (since the unknown :math:`u` is a scalar field). The second instruction assigns the :math:`Q_2` FEM to every convex (each basis function is a polynomial of degree 4, remember that :math:`P_k` are polynomials of degree :math:`k`, while :math:`Q_k` are polynomials of degree :math:`2k`). As :math:`Q_2` is a polynomial FEM, you can view the expression of its basis functions on the reference element::"
msgstr ""

#: ../source/matlab_octave/examples.rst:78
msgid "It is also possible to make use of the \"object oriented\" features of |octv| and |mlab|. As you may have noticed, when a class \"foo\" is provided by the |gfi|, it is build with the function ``gf_foo``, and manipulated with the functions ``gf_foo_get`` and ``gf_foo_set``. But you may also create the object with the ``gfFoo`` constructor , and manipulated with the ``get(..)`` and ``set(..)`` methods. For example, the previous steps could have been::"
msgstr ""

#: ../source/matlab_octave/examples.rst:98
msgid "Now, in order to perform numerical integrations on ``mf``, we need to **build a mesh_im object**::"
msgstr ""

#: ../source/matlab_octave/examples.rst:104
msgid "The integration method will be used to compute the various integrals on each element: here we choose to perform exact computations (no :envvar:`quadrature formula`), which is possible since the geometric transformation of these convexes from the reference convex is linear (this is true for all simplices, and this is also true for the parallelepipeds of our regular mesh, but it is not true for general quadrangles), and the chosen FEM is polynomial. Hence it is possible to analytically integrate every basis function/product of basis functions/gradients/etc. There are many alternative FEM methods and integration methods (see :ref:`ud`)."
msgstr ""

#: ../source/matlab_octave/examples.rst:114
msgid "Note however that in the general case, approximate integration methods are a better choice than exact integration methods."
msgstr ""

#: ../source/matlab_octave/examples.rst:117
msgid "Now we have to **find the** \":envvar:`boundary`\" **of the domain**, in order to set a Dirichlet condition. A mesh object has the ability to store some sets of convexes and convex faces. These sets (called \"regions\") are accessed via an integer #id::"
msgstr ""

#: ../source/matlab_octave/examples.rst:128
msgid "Here we find the faces of the convexes which are on the boundary of the mesh (i.e. the faces which are not shared by two convexes)."
msgstr ""

#: ../source/matlab_octave/examples.rst:131
#: ../source/matlab_octave/examples.rst:None
msgid "Remark:"
msgstr ""

#: ../source/matlab_octave/examples.rst:133
msgid "we could have used ``gf_mesh_get(m, 'OuTEr_faCes')``, as the interface is case-insensitive, and whitespaces can be replaced by underscores."
msgstr ""

#: ../source/matlab_octave/examples.rst:136
msgid "The array ``border`` has two rows, on the first row is a convex number, on the second row is a face number (which is local to the convex, there is no global numbering of faces). Then this set of faces is assigned to the region number 42."
msgstr ""

#: ../source/matlab_octave/examples.rst:140
msgid "At this point, we just have to describe the model and run the solver to get the solution! The \":envvar:`model`\" is created with the ``gf_model`` (or ``gfModel``) constructor. A model is basically an object which build a global linear system (tangent matrix for non-linear problems) and its associated right hand side. Typical modifications are insertion of the stiffness matrix for the problem considered (linear elasticity, laplacian, etc), handling of a set of contraints, Dirichlet condition, addition of a source term to the right hand side etc. The global tangent matrix and its right hand side are stored in the \":envvar:`model`\" structure."
msgstr ""

#: ../source/matlab_octave/examples.rst:150
msgid "Let us build a problem with an easy solution: :math:`u=x(x-1)y(y-1)+x^5`, then we have :math:`\\Delta u=2(x^2+y^2)-2(x+y)+20x^3` (the FEM won't be able to catch the exact solution since we use a :math:`Q^2` method)."
msgstr ""

#: ../source/matlab_octave/examples.rst:154
msgid "We start with an empty real model::"
msgstr ""

#: ../source/matlab_octave/examples.rst:159
msgid "(a model is either ``'real'`` or ``'complex'``). And we declare that ``u`` is an unknown of the system on the finite element method `mf` by::"
msgstr ""

#: ../source/matlab_octave/examples.rst:166
msgid "Now, we add a \"generic elliptic\" brick, which handles :math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` problems, where :math:`A` can be a scalar field, a matrix field, or an order 4 tensor field. By default, :math:`A=1`. We add it on our main variable ``u`` with::"
msgstr ""

#: ../source/matlab_octave/examples.rst:175
msgid "Next we add a Dirichlet condition on the domain boundary::"
msgstr ""

#: ../source/matlab_octave/examples.rst:183
msgid "The two first lines defines a data of the model which represents the value of the Dirichlet condition. The third one add a Dirichlet condition to the variable ``u`` on the boundary number ``42``. The dirichlet condition is imposed with lagrange multipliers. Another possibility is to use a penalization. A |mlab_mf| argument is also required, as the Dirichlet condition :math:`u=g` is imposed in a weak form :math:`\\int_\\Gamma u(x)v(x) = \\int_\\Gamma g(x)v(x) ~ \\forall v` where :math:`v` is taken in the space of multipliers given by here by ``mf``."
msgstr ""

#: ../source/matlab_octave/examples.rst:194
msgid "the polynomial expression was interpolated on ``mf``. It is possible only if ``mf`` is of Lagrange type. In this first example we use the same |mlab_mf| for the unknown and for the data such as ``g``, but in the general case, ``mf`` won't be Lagrangian and another (Lagrangian) |mf| will be used for the description of Dirichlet conditions, source terms etc."
msgstr ""

#: ../source/matlab_octave/examples.rst:200
msgid "A source term can be added with the following lines::"
msgstr ""

#: ../source/matlab_octave/examples.rst:207
msgid "It only remains now to launch the solver. The linear system is assembled and solve with the instruction::"
msgstr ""

#: ../source/matlab_octave/examples.rst:213
msgid "The model now contains the solution (as well as other things, such as the linear system which was solved). It is extracted, a display into a |octv| or |mlab| figure::"
msgstr ""

#: ../source/matlab_octave/examples.rst:223
msgid "Another Laplacian with exact solution"
msgstr ""

#: ../source/matlab_octave/examples.rst:225
msgid "This is the :file:`tests/matlab-octave/demo_laplacian.m` example."
msgstr ""

#: ../source/matlab_octave/examples.rst:231
msgid "Linear and non-linear elasticity"
msgstr ""

#: ../source/matlab_octave/examples.rst:233
msgid "This example uses a mesh that was generated with `GiD`_. The object is meshed with quadratic tetrahedrons. You can find the ``m-file`` of this example under the name :file:`demo_tripod.m` in the directory :file:`tests/matlab-octave` of the toolbox distribution."
msgstr ""

#: ../source/matlab_octave/examples.rst:240
msgid "Here is the final figure, displaying the :envvar:`Von Mises` stress:"
msgstr ""

#: ../source/matlab_octave/examples.rst:247
msgid "deformed tripod"
msgstr ""

#: ../source/matlab_octave/examples.rst:251
msgid "Avoiding the bricks framework"
msgstr ""

#: ../source/matlab_octave/examples.rst:253
msgid "The model bricks are very convenient, as they hide most of the details of the assembly of the final linear systems. However it is also possible to stay at a lower level, and handle the assembly of linear systems, and their resolution, directly in |octv| or |mlab|. For example, the demonstration :file:`demo_tripod_alt.m` is very similar to the :file:`demo_tripod.m` except that the assembly is explicit::"
msgstr ""

#: ../source/matlab_octave/examples.rst:283
msgid "In |gfi|, the assembly of vectors, and matrices is done via the ``gf_asm`` function. The Dirichlet condition :math:`u(x) = r(x)` is handled in the weak form :math:`\\int (h(x)u(x)).v(x) = \\int r(x).v(x)\\quad \\forall v` (where :math:`h(x)` is a :math:`3\\times3` matrix field -- here it is constant and equal to the identity). The reduced system ``KK UU = FF`` is then built via the elimination of Dirichlet constraints from the original system. Note that it might be more efficient (and simpler) to deal with Dirichlet condition via a penalization technique."
msgstr ""

#: ../source/matlab_octave/examples.rst:294
msgid "Other examples"
msgstr ""

#: ../source/matlab_octave/examples.rst:296
msgid "the :file:`demo_refine.m` script shows a simple 2D or 3D bar whose extremity is clamped. An adaptative refinement is used to obtain a better approximation in the area where the stress is singular (the transition between the clamped area and the neumann boundary)."
msgstr ""

#: ../source/matlab_octave/examples.rst:301
msgid "the :file:`demo_nonlinear_elasticity.m` script shows a 3D bar which is is bended and twisted. This is a quasi-static problem as the deformation is applied in many steps. At each step, a non-linear (large deformations) elasticity problem is solved."
msgstr ""

#: ../source/matlab_octave/examples.rst:306
msgid "the :file:`demo_stokes_3D_tank.m` script shows a Stokes (viscous fluid) problem in a tank. The :file:`demo_stokes_3D_tank_draw.m` shows how to draw a nice plot of the solution, with mesh slices and stream lines. Note that the :file:`demo_stokes_3D_tank_alt.m` is the old example, which uses the deprecated ``gf_solve`` function."
msgstr ""

#: ../source/matlab_octave/examples.rst:312
msgid "the :file:`demo_bilaplacian.m` script is just an adaption of the |gf| example :file:`tests/bilaplacian.cc`. Solve the bilaplacian (or a Kirchhoff-Love plate model) on a square."
msgstr ""

#: ../source/matlab_octave/examples.rst:316
msgid "the :file:`demo_plasticity.m` script is an adaptation of the |gf| example :file:`tests/plasticity.cc`: a 2D or 3D bar is bended in many steps, and the plasticity of the material is taken into account (plastification occurs when the material's Von Mises exceeds a given threshold)."
msgstr ""

#: ../source/matlab_octave/examples.rst:321
msgid "the :file:`demo_wave2D.m` is a 2D scalar wave equation example (diffraction of a plane wave by a cylinder), with high order geometric transformations and high order FEMs."
msgstr ""

#: ../source/matlab_octave/examples.rst:327
msgid "Using Octave/Matlab Object-Oriented features"
msgstr ""

#: ../source/matlab_octave/examples.rst:329
msgid "The basic functions of the |gf| toolbox do not use any advanced |octv| or |mlab| features (except that the handles to getfem objects are stored in a small structure). But the toolbox comes with a set of objects, which encapsulate the handles and make them look as real |octv| / |mlab| objects. The aim is not to provide extra-functionalities, but to have a better integration of the toolbox."
msgstr ""

#: ../source/matlab_octave/examples.rst:334
msgid "Here is an example of its use::"
msgstr ""

#: ../source/matlab_octave/examples.rst:355
msgid "Refer to the OO-commands reference :ref:`mlab-oocmd` for more details."
msgstr ""
