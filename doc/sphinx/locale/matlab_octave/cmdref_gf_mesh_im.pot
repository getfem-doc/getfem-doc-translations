# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2020 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-11 01:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:8
msgid "gf_mesh_im"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:10
msgid "**Synopsis**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:20
msgid "**Description :**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:23
msgid "General constructor for mesh_im objects."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:25
msgid "This object represents an integration method defined on a whole mesh (an potentially on its boundaries)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:29
msgid "**Command list :**"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:33
msgid "``MIM = gf_mesh_im('load', string fname[, mesh m])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:35
msgid "Load a mesh_im from a file."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:37
msgid "If the mesh `m` is not supplied (this kind of file does not store the mesh), then it is read from the file and its descriptor is returned as the second output argument."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:42
msgid "``MIM = gf_mesh_im('from string', string s[, mesh m])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:44
msgid "Create a mesh_im object from its string description."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:46
msgid "See also ``gf_mesh_im_get(mesh_im MI, 'char')``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:49
msgid "``MIM = gf_mesh_im('clone', mesh_im mim)``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:51
msgid "Create a copy of a mesh_im."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:54
msgid "``MIM = gf_mesh_im('levelset', mesh_levelset mls, string where, integ im[, integ im_tip[, integ im_set]])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:56
msgid "Build an integration method conformal to a partition defined implicitly by a levelset."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:59
msgid "The `where` argument define the domain of integration with respect to the levelset, it has to be chosen among 'ALL', 'INSIDE', 'OUTSIDE' and 'BOUNDARY'."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:63
msgid "it can be completed by a string defining the boolean operation to define the integration domain when there is more than one levelset."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:66
msgid "the syntax is very simple, for example if there are 3 different levelset,"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:69
msgid "\"a*b*c\" is the intersection of the domains defined by each levelset (this is the default behaviour if this function is not called)."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:73
msgid "\"a+b+c\" is the union of their domains."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:75
msgid "\"c-(a+b)\" is the domain of the third levelset minus the union of the domains of the two others."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:78
msgid "\"!a\" is the complementary of the domain of a (i.e. it is the domain where a(x)>0)"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:81
msgid "The first levelset is always referred to with \"a\", the second with \"b\", and so on."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:84
msgid "for intance INSIDE(a*b*c)"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:86
msgid "CAUTION: this integration method will be defined only on the element cut by the level-set. For the 'ALL', 'INSIDE' and 'OUTSIDE' options it is mandatory to use the method ``gf_mesh_im_set(mesh_im MI, 'integ')`` to define the integration method on the remaining elements."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:93
msgid "``MIM = gf_mesh_im(mesh m, [{integ im|int im_degree}])``"
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:95
msgid "Build a new mesh_im object."
msgstr ""

#: ../source/matlab_octave/cmdref_gf_mesh_im.rst:97
msgid "For convenience, optional arguments (`im` or `im_degree`) can be provided, in that case a call to ``gf_mesh_im_get(mesh_im MI, 'integ')`` is issued with these arguments."
msgstr ""
