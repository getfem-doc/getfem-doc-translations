# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022 GetFEM project
# This file is distributed under the same license as the GetFEM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM 5.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-14 01:34+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/documenting/markup.rst:4
msgid "Additional Markup Constructs"
msgstr ""

#: ../source/documenting/markup.rst:6
msgid "Sphinx adds a lot of new directives and interpreted text roles to standard reST markup.  This section contains the reference material for these facilities. Documentation for \"standard\" reST constructs is not included here, though they are used in the Python documentation."
msgstr ""

#: ../source/documenting/markup.rst:13
msgid "This is just an overview of Sphinx' extended markup capabilities; full coverage can be found in `its own documentation <http://sphinx.pocoo.org/contents.html>`_."
msgstr ""

#: ../source/documenting/markup.rst:19
msgid "Meta-information markup"
msgstr ""

#: ../source/documenting/markup.rst:23
msgid "Identifies the author of the current section.  The argument should include the author's name such that it can be used for presentation (though it isn't) and email address.  The domain name portion of the address should be lower case.  Example::"
msgstr ""

#: ../source/documenting/markup.rst:30
msgid "Currently, this markup isn't reflected in the output in any way, but it helps keep track of contributions."
msgstr ""

#: ../source/documenting/markup.rst:35
msgid "Module-specific markup"
msgstr ""

#: ../source/documenting/markup.rst:37
msgid "The markup described in this section is used to provide information about a module being documented.  Each module should be documented in its own file. Normally this markup appears after the title heading of that file; a typical file might start like this::"
msgstr ""

#: ../source/documenting/markup.rst:51
msgid "As you can see, the module-specific markup consists of two directives, the ``module`` directive and the ``moduleauthor`` directive."
msgstr ""

#: ../source/documenting/markup.rst:56
msgid "This directive marks the beginning of the description of a module (or package submodule, in which case the name should be fully qualified, including the package name)."
msgstr ""

#: ../source/documenting/markup.rst:60
msgid "The ``platform`` option, if present, is a comma-separated list of the platforms on which the module is available (if it is available on all platforms, the option should be omitted).  The keys are short identifiers; examples that are in use include \"IRIX\", \"Mac\", \"Windows\", and \"Unix\".  It is important to use a key which has already been used when applicable."
msgstr ""

#: ../source/documenting/markup.rst:66
msgid "The ``synopsis`` option should consist of one sentence describing the module's purpose -- it is currently only used in the Global Module Index."
msgstr ""

#: ../source/documenting/markup.rst:69
msgid "The ``deprecated`` option can be given (with no value) to mark a module as deprecated; it will be designated as such in various locations then."
msgstr ""

#: ../source/documenting/markup.rst:74
msgid "The ``moduleauthor`` directive, which can appear multiple times, names the authors of the module code, just like ``sectionauthor`` names the author(s) of a piece of documentation.  It too does not result in any output currently."
msgstr ""

#: ../source/documenting/markup.rst:80
msgid "It is important to make the section title of a module-describing file meaningful since that value will be inserted in the table-of-contents trees in overview files."
msgstr ""

#: ../source/documenting/markup.rst:86
msgid "Information units"
msgstr ""

#: ../source/documenting/markup.rst:88
msgid "There are a number of directives used to describe specific features provided by modules.  Each directive requires one or more signatures to provide basic information about what is being described, and the content should be the description.  The basic version makes entries in the general index; if no index entry is desired, you can give the directive option flag ``:noindex:``.  The following example shows all of the features of this directive type::"
msgstr ""

#: ../source/documenting/markup.rst:101
msgid "The signatures of object methods or data attributes should always include the type name (``.. method:: FileInput.input(...)``), even if it is obvious from the context which type they belong to; this is to enable consistent cross-references.  If you describe methods belonging to an abstract protocol, such as \"context managers\", include a (pseudo-)type name too to make the index entries more informative."
msgstr ""

#: ../source/documenting/markup.rst:108
msgid "The directives are:"
msgstr ""

#: ../source/documenting/markup.rst:112
msgid "Describes a C++ function. The signature should be given as in C++, e.g.::"
msgstr ""

#: ../source/documenting/markup.rst:118
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr ""

#: ../source/documenting/markup.rst:122
msgid "This is also used to describe function-like preprocessor macros.  The names of the arguments should be given so they may be used in the description."
msgstr ""

#: ../source/documenting/markup.rst:125
msgid "Note that you don't have to backslash-escape asterisks in the signature, as it is not parsed by the reST inliner."
msgstr ""

#: ../source/documenting/markup.rst:130
msgid "Describes a C struct member. Example signature::"
msgstr ""

#: ../source/documenting/markup.rst:134
msgid "The text of the description should include the range of values allowed, how the value should be interpreted, and whether the value can be changed. References to structure members in text should use the ``member`` role."
msgstr ""

#: ../source/documenting/markup.rst:140
msgid "Describes a \"simple\" C macro.  Simple macros are macros which are used for code expansion, but which do not take arguments so cannot be described as functions.  This is not to be used for simple constant definitions.  Examples of its use in the Python documentation include ``PyObject_HEAD`` and ``Py_BEGIN_ALLOW_THREADS``."
msgstr ""

#: ../source/documenting/markup.rst:148
msgid "Describes a C type. The signature should just be the type name."
msgstr ""

#: ../source/documenting/markup.rst:152
msgid "Describes a global C variable.  The signature should include the type, such as::"
msgstr ""

#: ../source/documenting/markup.rst:159
msgid "Describes global data in a module, including both variables and values used as \"defined constants.\"  Class and object attributes are not documented using this environment."
msgstr ""

#: ../source/documenting/markup.rst:165
msgid "Describes an exception class.  The signature can, but need not include parentheses with constructor arguments."
msgstr ""

#: ../source/documenting/markup.rst:170
msgid "Describes a module-level function.  The signature should include the parameters, enclosing optional parameters in brackets.  Default values can be given if it enhances clarity.  For example::"
msgstr ""

#: ../source/documenting/markup.rst:176
msgid "Object methods are not documented using this directive. Bound object methods placed in the module namespace as part of the public interface of the module are documented using this, as they are equivalent to normal functions for most purposes."
msgstr ""

#: ../source/documenting/markup.rst:181
msgid "The description should include information about the parameters required and how they are used (especially whether mutable objects passed as parameters are modified), side effects, and possible exceptions.  A small example may be provided."
msgstr ""

#: ../source/documenting/markup.rst:188
msgid "Describes a class.  The signature can include parentheses with parameters which will be shown as the constructor arguments."
msgstr ""

#: ../source/documenting/markup.rst:193
msgid "Describes an object data attribute.  The description should include information about the type of the data to be expected and whether it may be changed directly."
msgstr ""

#: ../source/documenting/markup.rst:199
msgid "Describes an object method.  The parameters should not include the ``self`` parameter.  The description should include similar information to that described for ``function``."
msgstr ""

#: ../source/documenting/markup.rst:205
msgid "Describes a Python ``bytecode`` instruction."
msgstr ""

#: ../source/documenting/markup.rst:209
msgid "Describes a command line option or switch.  Option argument names should be enclosed in angle brackets.  Example::"
msgstr ""

#: ../source/documenting/markup.rst:218
msgid "Describes an environment variable that Python uses or defines."
msgstr ""

#: ../source/documenting/markup.rst:221
msgid "There is also a generic version of these directives:"
msgstr ""

#: ../source/documenting/markup.rst:225
msgid "This directive produces the same formatting as the specific ones explained above but does not create index entries or cross-referencing targets.  It is used, for example, to describe the directives in this document. Example::"
msgstr ""

#: ../source/documenting/markup.rst:235
msgid "Showing code examples"
msgstr ""

#: ../source/documenting/markup.rst:237
msgid "Examples of Python source code or interactive sessions are represented using standard reST literal blocks.  They are started by a ``::`` at the end of the preceding paragraph and delimited by indentation."
msgstr ""

#: ../source/documenting/markup.rst:241
msgid "Representing an interactive session requires including the prompts and output along with the Python code.  No special markup is required for interactive sessions.  After the last line of input or output presented, there should not be an \"unused\" primary prompt; this is an example of what *not* to do::"
msgstr ""

#: ../source/documenting/markup.rst:250
msgid "Syntax highlighting is handled in a smart way:"
msgstr ""

#: ../source/documenting/markup.rst:252
msgid "There is a \"highlighting language\" for each source file.  Per default, this is ``'python'`` as the majority of files will have to highlight Python snippets."
msgstr ""

#: ../source/documenting/markup.rst:256
msgid "Within Python highlighting mode, interactive sessions are recognized automatically and highlighted appropriately."
msgstr ""

#: ../source/documenting/markup.rst:259
msgid "The highlighting language can be changed using the ``highlight`` directive, used as follows::"
msgstr ""

#: ../source/documenting/markup.rst:264
msgid "This language is used until the next ``highlight`` directive is encountered."
msgstr ""

#: ../source/documenting/markup.rst:267
msgid "The values normally used for the highlighting language are:"
msgstr ""

#: ../source/documenting/markup.rst:269
msgid "``python`` (the default)"
msgstr ""

#: ../source/documenting/markup.rst:270
msgid "``c``"
msgstr ""

#: ../source/documenting/markup.rst:271
msgid "``rest``"
msgstr ""

#: ../source/documenting/markup.rst:272
msgid "``none`` (no highlighting)"
msgstr ""

#: ../source/documenting/markup.rst:274
msgid "If highlighting with the current language fails, the block is not highlighted in any way."
msgstr ""

#: ../source/documenting/markup.rst:277
msgid "Longer displays of verbatim text may be included by storing the example text in an external file containing only plain text.  The file may be included using the ``literalinclude`` directive. [1]_ For example, to include the Python source file :file:`example.py`, use::"
msgstr ""

#: ../source/documenting/markup.rst:284
msgid "The file name is relative to the current file's path.  Documentation-specific include files should be placed in the ``Doc/includes`` subdirectory."
msgstr ""

#: ../source/documenting/markup.rst:289
msgid "Inline markup"
msgstr ""

#: ../source/documenting/markup.rst:291
msgid "As said before, Sphinx uses interpreted text roles to insert semantic markup in documents."
msgstr ""

#: ../source/documenting/markup.rst:294
msgid "Names of local variables, such as function/method arguments, are an exception, they should be marked simply with ``*var*``."
msgstr ""

#: ../source/documenting/markup.rst:297
msgid "For all other roles, you have to write ``:rolename:`content```."
msgstr ""

#: ../source/documenting/markup.rst:299
msgid "There are some additional facilities that make cross-referencing roles more versatile:"
msgstr ""

#: ../source/documenting/markup.rst:302
msgid "You may supply an explicit title and reference target, like in reST direct hyperlinks: ``:role:`title <target>``` will refer to *target*, but the link text will be *title*."
msgstr ""

#: ../source/documenting/markup.rst:306
msgid "If you prefix the content with ``!``, no reference/hyperlink will be created."
msgstr ""

#: ../source/documenting/markup.rst:308
msgid "For the Python object roles, if you prefix the content with ``~``, the link text will only be the last component of the target.  For example, ``:meth:`~Queue.Queue.get``` will refer to ``Queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""

#: ../source/documenting/markup.rst:313
msgid "In HTML output, the link's ``title`` attribute (that is e.g. shown as a tool-tip on mouse-hover) will always be the full target name."
msgstr ""

#: ../source/documenting/markup.rst:316
msgid "The following roles refer to objects in modules and are possibly hyperlinked if a matching identifier is found:"
msgstr ""

#: ../source/documenting/markup.rst:321
msgid "The name of a module; a dotted name may be used.  This should also be used for package names."
msgstr ""

#: ../source/documenting/markup.rst:326
msgid "The name of a Python function; dotted names may be used.  The role text should not include trailing parentheses to enhance readability.  The parentheses are stripped when searching for identifiers."
msgstr ""

#: ../source/documenting/markup.rst:332
msgid "The name of a module-level variable or constant."
msgstr ""

#: ../source/documenting/markup.rst:336
msgid "The name of a \"defined\" constant.  This may be a C-language ``#define`` or a Python variable that is not intended to be changed."
msgstr ""

#: ../source/documenting/markup.rst:341
msgid "A class name; a dotted name may be used."
msgstr ""

#: ../source/documenting/markup.rst:345
msgid "The name of a method of an object.  The role text should include the type name and the method name.  A dotted name may be used."
msgstr ""

#: ../source/documenting/markup.rst:350
msgid "The name of a data attribute of an object."
msgstr ""

#: ../source/documenting/markup.rst:354
msgid "The name of an exception. A dotted name may be used."
msgstr ""

#: ../source/documenting/markup.rst:356
msgid "The name enclosed in this markup can include a module name and/or a class name. For example, ``:func:`filter``` could refer to a function named ``filter`` in the current module, or the built-in function of that name.  In contrast, ``:func:`foo.filter``` clearly refers to the ``filter`` function in the ``foo`` module."
msgstr ""

#: ../source/documenting/markup.rst:362
msgid "Normally, names in these roles are searched first without any further qualification, then with the current module name prepended, then with the current module and class name (if any) prepended.  If you prefix the name with a dot, this order is reversed.  For example, in the documentation of the :mod:`codecs` module, ``:func:`open``` always refers to the built-in function, while ``:func:`.open``` refers to :func:`codecs.open`."
msgstr ""

#: ../source/documenting/markup.rst:369
msgid "A similar heuristic is used to determine whether the name is an attribute of the currently documented class."
msgstr ""

#: ../source/documenting/markup.rst:372
msgid "The following roles create cross-references to C-language constructs if they are defined in the API documentation:"
msgstr ""

#: ../source/documenting/markup.rst:377
msgid "The name of a C-language variable."
msgstr ""

#: ../source/documenting/markup.rst:381
msgid "The name of a C-language function. Should include trailing parentheses."
msgstr ""

#: ../source/documenting/markup.rst:385
msgid "The name of a \"simple\" C macro, as defined above."
msgstr ""

#: ../source/documenting/markup.rst:389
msgid "The name of a C-language type."
msgstr ""

#: ../source/documenting/markup.rst:392
msgid "The following role does possibly create a cross-reference, but does not refer to objects:"
msgstr ""

#: ../source/documenting/markup.rst:397
msgid "The name of a grammar token (used in the reference manual to create links between production displays)."
msgstr ""

#: ../source/documenting/markup.rst:401
msgid "The following role creates a cross-reference to the term in the glossary:"
msgstr ""

#: ../source/documenting/markup.rst:405
msgid "Reference to a term in the glossary.  The glossary is created using the ``glossary`` directive containing a definition list with terms and definitions.  It does not have to be in the same file as the ``term`` markup, in fact, by default the Python docs have one global glossary in the ``glossary.rst`` file."
msgstr ""

#: ../source/documenting/markup.rst:411
msgid "If you use a term that's not explained in a glossary, you'll get a warning during build."
msgstr ""

#: ../source/documenting/markup.rst:416
msgid "The following roles don't do anything special except formatting the text in a different style:"
msgstr ""

#: ../source/documenting/markup.rst:421
msgid "The name of an OS-level command, such as ``rm``."
msgstr ""

#: ../source/documenting/markup.rst:425
msgid "Mark the defining instance of a term in the text.  (No index entries are generated.)"
msgstr ""

#: ../source/documenting/markup.rst:430
msgid "An environment variable.  Index entries are generated."
msgstr ""

#: ../source/documenting/markup.rst:434
msgid "The name of a file or directory.  Within the contents, you can use curly braces to indicate a \"variable\" part, for example::"
msgstr ""

#: ../source/documenting/markup.rst:439
msgid "In the built documentation, the ``x`` will be displayed differently to indicate that it is to be replaced by the Python minor version."
msgstr ""

#: ../source/documenting/markup.rst:444
msgid "Labels presented as part of an interactive user interface should be marked using ``guilabel``.  This includes labels from text-based interfaces such as those created using :mod:`curses` or other text-based libraries.  Any label used in the interface should be marked with this role, including button labels, window titles, field names, menu and menu selection names, and even values in selection lists."
msgstr ""

#: ../source/documenting/markup.rst:453
msgid "Mark a sequence of keystrokes.  What form the key sequence takes may depend on platform- or application-specific conventions.  When there are no relevant conventions, the names of modifier keys should be spelled out, to improve accessibility for new users and non-native speakers.  For example, an *xemacs* key sequence may be marked like ``:kbd:`C-x C-f```, but without reference to a specific application or platform, the same sequence should be marked as ``:kbd:`Control-x Control-f```."
msgstr ""

#: ../source/documenting/markup.rst:463
msgid "The name of a keyword in Python."
msgstr ""

#: ../source/documenting/markup.rst:467
msgid "The name of an RFC 822-style mail header.  This markup does not imply that the header is being used in an email message, but can be used to refer to any header of the same \"style\".  This is also used for headers defined by the various MIME specifications.  The header name should be entered in the same way it would normally be found in practice, with the camel-casing conventions being preferred where there is more than one common usage. For example: ``:mailheader:`Content-Type```."
msgstr ""

#: ../source/documenting/markup.rst:477
msgid "The name of a :command:`make` variable."
msgstr ""

#: ../source/documenting/markup.rst:481
msgid "A reference to a Unix manual page including the section, e.g. ``:manpage:`ls(1)```."
msgstr ""

#: ../source/documenting/markup.rst:486
msgid "Menu selections should be marked using the ``menuselection`` role.  This is used to mark a complete sequence of menu selections, including selecting submenus and choosing a specific operation, or any subsequence of such a sequence.  The names of individual selections should be separated by ``-->``."
msgstr ""

#: ../source/documenting/markup.rst:492
msgid "For example, to mark the selection \"Start > Programs\", use this markup::"
msgstr ""

#: ../source/documenting/markup.rst:496
msgid "When including a selection that includes some trailing indicator, such as the ellipsis some operating systems use to indicate that the command opens a dialog, the indicator should be omitted from the selection name."
msgstr ""

#: ../source/documenting/markup.rst:502
msgid "The name of a MIME type, or a component of a MIME type (the major or minor portion, taken alone)."
msgstr ""

#: ../source/documenting/markup.rst:507
msgid "The name of a Usenet newsgroup."
msgstr ""

#: ../source/documenting/markup.rst:511
msgid "A command-line option to an executable program.  The leading hyphen(s) must be included."
msgstr ""

#: ../source/documenting/markup.rst:516
msgid "The name of an executable program.  This may differ from the file name for the executable for some platforms.  In particular, the ``.exe`` (or other) extension should be omitted for Windows programs."
msgstr ""

#: ../source/documenting/markup.rst:522
msgid "A regular expression. Quotes should not be included."
msgstr ""

#: ../source/documenting/markup.rst:526
msgid "A piece of literal text, such as code.  Within the contents, you can use curly braces to indicate a \"variable\" part, as in ``:file:``."
msgstr ""

#: ../source/documenting/markup.rst:529
msgid "If you don't need the \"variable part\" indication, use the standard ````code```` instead."
msgstr ""

#: ../source/documenting/markup.rst:534
msgid "A Python or C variable or parameter name."
msgstr ""

#: ../source/documenting/markup.rst:537
msgid "The following roles generate external links:"
msgstr ""

#: ../source/documenting/markup.rst:541
msgid "A reference to a Python Enhancement Proposal.  This generates appropriate index entries. The text \"PEP *number*\\ \" is generated; in the HTML output, this text is a hyperlink to an online copy of the specified PEP."
msgstr ""

#: ../source/documenting/markup.rst:547
msgid "A reference to an Internet Request for Comments.  This generates appropriate index entries. The text \"RFC *number*\\ \" is generated; in the HTML output, this text is a hyperlink to an online copy of the specified RFC."
msgstr ""

#: ../source/documenting/markup.rst:552
msgid "Note that there are no special roles for including hyperlinks as you can use the standard reST markup for that purpose."
msgstr ""

#: ../source/documenting/markup.rst:559
msgid "Cross-linking markup"
msgstr ""

#: ../source/documenting/markup.rst:561
msgid "To support cross-referencing to arbitrary sections in the documentation, the standard reST labels are \"abused\" a bit: Every label must precede a section title; and every label name must be unique throughout the entire documentation source."
msgstr ""

#: ../source/documenting/markup.rst:566
msgid "You can then reference to these sections using the ``:ref:`label-name``` role."
msgstr ""

#: ../source/documenting/markup.rst:568
#: ../source/documenting/markup.rst:595
#: ../source/documenting/markup.rst:618
msgid "Example::"
msgstr ""

#: ../source/documenting/markup.rst:579
msgid "The ``:ref:`` invocation is replaced with the section title."
msgstr ""

#: ../source/documenting/markup.rst:583
msgid "Paragraph-level markup"
msgstr ""

#: ../source/documenting/markup.rst:585
msgid "These directives create short paragraphs and can be used inside information units as well as normal text:"
msgstr ""

#: ../source/documenting/markup.rst:590
msgid "An especially important bit of information about an API that a user should be aware of when using whatever bit of API the note pertains to.  The content of the directive should be written in complete sentences and include all appropriate punctuation."
msgstr ""

#: ../source/documenting/markup.rst:603
msgid "An important bit of information about an API that a user should be very aware of when using whatever bit of API the warning pertains to.  The content of the directive should be written in complete sentences and include all appropriate punctuation. This differs from ``note`` in that it is recommended over ``note`` for information regarding security."
msgstr ""

#: ../source/documenting/markup.rst:611
msgid "This directive documents the version of Python which added the described feature to the library or C API. When this applies to an entire module, it should be placed at the top of the module section before any prose."
msgstr ""

#: ../source/documenting/markup.rst:615
msgid "The first argument must be given and is the version in question; you can add a second argument consisting of a *brief* explanation of the change."
msgstr ""

#: ../source/documenting/markup.rst:623
msgid "Note that there must be no blank line between the directive head and the explanation; this is to make these blocks visually continuous in the markup."
msgstr ""

#: ../source/documenting/markup.rst:628
msgid "Similar to ``versionadded``, but describes when and what changed in the named feature in some way (new parameters, changed side effects, etc.)."
msgstr ""

#: ../source/documenting/markup.rst:635
msgid "Many sections include a list of references to module documentation or external documents.  These lists are created using the ``seealso`` directive."
msgstr ""

#: ../source/documenting/markup.rst:638
msgid "The ``seealso`` directive is typically placed in a section just before any sub-sections.  For the HTML output, it is shown boxed off from the main flow of the text."
msgstr ""

#: ../source/documenting/markup.rst:642
msgid "The content of the ``seealso`` directive should be a reST definition list. Example::"
msgstr ""

#: ../source/documenting/markup.rst:655
msgid "This directive creates a paragraph heading that is not used to create a table of contents node.  It is currently used for the \"Footnotes\" caption."
msgstr ""

#: ../source/documenting/markup.rst:660
msgid "This directive creates a centered boldfaced paragraph.  Use it as follows::"
msgstr ""

#: ../source/documenting/markup.rst:668
msgid "Table-of-contents markup"
msgstr ""

#: ../source/documenting/markup.rst:670
msgid "Since reST does not have facilities to interconnect several documents, or split documents into multiple output files, Sphinx uses a custom directive to add relations between the single files the documentation is made of, as well as tables of contents.  The ``toctree`` directive is the central element."
msgstr ""

#: ../source/documenting/markup.rst:677
msgid "This directive inserts a \"TOC tree\" at the current location, using the individual TOCs (including \"sub-TOC trees\") of the files given in the directive body.  A numeric ``maxdepth`` option may be given to indicate the depth of the tree; by default, all levels are included."
msgstr ""

#: ../source/documenting/markup.rst:682
msgid "Consider this example (taken from the library reference index)::"
msgstr ""

#: ../source/documenting/markup.rst:693
msgid "This accomplishes two things:"
msgstr ""

#: ../source/documenting/markup.rst:695
msgid "Tables of contents from all those files are inserted, with a maximum depth of two, that means one nested heading.  ``toctree`` directives in those files are also taken into account."
msgstr ""

#: ../source/documenting/markup.rst:698
msgid "Sphinx knows that the relative order of the files ``intro.rst``, ``strings.rst`` and so forth, and it knows that they are children of the shown file, the library index.  From this information it generates \"next chapter\", \"previous chapter\" and \"parent chapter\" links."
msgstr ""

#: ../source/documenting/markup.rst:703
msgid "In the end, all files included in the build process must occur in one ``toctree`` directive; Sphinx will emit a warning if it finds a file that is not included, because that means that this file will not be reachable through standard navigation."
msgstr ""

#: ../source/documenting/markup.rst:708
msgid "The special file ``contents.rst`` at the root of the source directory is the \"root\" of the TOC tree hierarchy; from it the \"Contents\" page is generated."
msgstr ""

#: ../source/documenting/markup.rst:713
msgid "Index-generating markup"
msgstr ""

#: ../source/documenting/markup.rst:715
msgid "Sphinx automatically creates index entries from all information units (like functions, classes or attributes) like discussed before."
msgstr ""

#: ../source/documenting/markup.rst:718
msgid "However, there is also an explicit directive available, to make the index more comprehensive and enable index entries in documents where information is not mainly contained in information units, such as the language reference."
msgstr ""

#: ../source/documenting/markup.rst:722
msgid "The directive is ``index`` and contains one or more index entries.  Each entry consists of a type and a value, separated by a colon."
msgstr ""

#: ../source/documenting/markup.rst:725
msgid "For example::"
msgstr ""

#: ../source/documenting/markup.rst:733
msgid "This directive contains five entries, which will be converted to entries in the generated index which link to the exact location of the index statement (or, in case of offline media, the corresponding page number)."
msgstr ""

#: ../source/documenting/markup.rst:737
msgid "The possible entry types are:"
msgstr ""

#: ../source/documenting/markup.rst:741
msgid "single"
msgstr ""

#: ../source/documenting/markup.rst:740
msgid "Creates a single index entry.  Can be made a subentry by separating the subentry text with a semicolon (this notation is also used below to describe what entries are created)."
msgstr ""

#: ../source/documenting/markup.rst:744
msgid "pair"
msgstr ""

#: ../source/documenting/markup.rst:744
msgid "``pair: loop; statement`` is a shortcut that creates two index entries, namely ``loop; statement`` and ``statement; loop``."
msgstr ""

#: ../source/documenting/markup.rst:748
msgid "triple"
msgstr ""

#: ../source/documenting/markup.rst:747
msgid "Likewise, ``triple: module; search; path`` is a shortcut that creates three index entries, which are ``module; search path``, ``search; path, module`` and ``path; module search``."
msgstr ""

#: ../source/documenting/markup.rst:752
msgid "module, keyword, operator, object, exception, statement, builtin"
msgstr ""

#: ../source/documenting/markup.rst:751
msgid "These all create two index entries.  For example, ``module: hashlib`` creates the entries ``module; hashlib`` and ``hashlib; module``."
msgstr ""

#: ../source/documenting/markup.rst:754
msgid "For index directives containing only \"single\" entries, there is a shorthand notation::"
msgstr ""

#: ../source/documenting/markup.rst:759
msgid "This creates four index entries."
msgstr ""

#: ../source/documenting/markup.rst:763
msgid "Grammar production displays"
msgstr ""

#: ../source/documenting/markup.rst:765
msgid "Special markup is available for displaying the productions of a formal grammar. The markup is simple and does not attempt to model all aspects of BNF (or any derived forms), but provides enough to allow context-free grammars to be displayed in a way that causes uses of a symbol to be rendered as hyperlinks to the definition of the symbol.  There is this directive:"
msgstr ""

#: ../source/documenting/markup.rst:773
msgid "This directive is used to enclose a group of productions.  Each production is given on a single line and consists of a name, separated by a colon from the following definition.  If the definition spans multiple lines, each continuation line must begin with a colon placed at the same column as in the first line."
msgstr ""

#: ../source/documenting/markup.rst:779
msgid "Blank lines are not allowed within ``productionlist`` directive arguments."
msgstr ""

#: ../source/documenting/markup.rst:781
msgid "The definition can contain token names which are marked as interpreted text (e.g. ``unaryneg ::= \"-\" `integer```) -- this generates cross-references to the productions of these tokens."
msgstr ""

#: ../source/documenting/markup.rst:785
msgid "Note that no further reST parsing is done in the production, so that you don't have to escape ``*`` or ``|`` characters."
msgstr ""

#: ../source/documenting/markup.rst:791
msgid "The following is an example taken from the Python Reference Manual::"
msgstr ""

#: ../source/documenting/markup.rst:804
msgid "Substitutions"
msgstr ""

#: ../source/documenting/markup.rst:806
msgid "The documentation system provides three substitutions that are defined by default. They are set in the build configuration file :file:`conf.py`."
msgstr ""

#: ../source/documenting/markup.rst:811
msgid "Replaced by the Python release the documentation refers to.  This is the full version string including alpha/beta/release candidate tags, e.g. ``2.5.2b3``."
msgstr ""

#: ../source/documenting/markup.rst:816
msgid "Replaced by the Python version the documentation refers to. This consists only of the major and minor version parts, e.g. ``2.5``, even for version 2.5.1."
msgstr ""

#: ../source/documenting/markup.rst:822
msgid "Replaced by either today's date, or the date set in the build configuration file.  Normally has the format ``April 14, 2007``."
msgstr ""

#: ../source/documenting/markup.rst:827
msgid "Footnotes"
msgstr ""

#: ../source/documenting/markup.rst:828
msgid "There is a standard ``.. include`` directive, but it raises errors if the file is not found.  This one only emits a warning."
msgstr ""
